<?xml version="1.0" encoding="ASCII"?>
<pipeline:Pipeline xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pipeline="http://www.mcgill.ca/devops/pipeline/Pipeline" jobOrStageVar="jobs:">
  <pipelineConfiguration name="build-snowflake-exp" variableKW="env:">
    <pplVariables variableKey="VMIMAGENAME" variableValue="ubuntu-latest"/>
    <pplVariables variableKey="REPO_NAME" variableValue="$(Build.Repository.Name)"/>
    <pplVariables variableKey="BRANCH_NAME" variableValue="$(Build.SourceBranchName)"/>
    <pplVariables variableKey="System.Debug" variableValue="true"/>
  </pipelineConfiguration>
  <triggers excludedPaths="- docs/ - README.md">
    <includedBranches name="develop/*"/>
    <includedBranches name="feature/*"/>
    <includedBranches name="master"/>
    <excludedBranches name="releases/old*"/>
  </triggers>
  <triggers name="pull_request:"/>
  <triggers workflowTypeKW="workflow_dispatch:">
    <workFlowActivities name="- value - value2"/>
  </triggers>
  <jobs name="config">
    <jobParameterValues name="uses:" value="aplaceformom/workflows/.github/workflows/default-config.yaml@main"/>
    <jobParameterValues name="with:">
      <subParameters otherName="deployment-role" value="${{ inputs.deployment-role || null }}"/>
      <subParameters otherName="application-role" value="${{ inputs.function-role  || null }}"/>
      <subParameters otherName="aws-region" value="${{ inputs.aws-region || null }}"/>
      <subParameters name="env:" value="${{ inputs.env }}"/>
    </jobParameterValues>
    <steps xsi:type="pipeline:Script" name="run:" command="&quot;./activate profile&quot;"/>
  </jobs>
  <jobs name="deploy" dependKW="needs:" references="//@jobs.0">
    <jobParameterValues name="runs-on:" value="ubuntu-latest"/>
    <steps xsi:type="pipeline:Action" actionKeyword="uses:" actionValue="actions/download-artifact@v3">
      <subSteps xsi:type="pipeline:Action" actionKeyword="with:">
        <subSteps xsi:type="pipeline:Action" actionValue="${{ inputs.artifact }}"/>
        <subSteps xsi:type="pipeline:Action" otherKeyword="path" actionValue="."/>
      </subSteps>
    </steps>
    <steps xsi:type="pipeline:Action" actionKeyword="id:" actionValue="debug">
      <subSteps xsi:type="pipeline:Script" name="run:" command="&quot;: Debug lambda artifact\nunzip -l lambda.zip\nfind .\n&quot;"/>
    </steps>
    <steps xsi:type="pipeline:Action" actionKeyword="uses:" actionValue="aws-actions/configure-aws-credentials@v2">
      <subSteps xsi:type="pipeline:Action" actionKeyword="with:">
        <subSteps xsi:type="pipeline:Action" otherKeyword="role-to-assume" actionValue="${{ needs.config.outputs.deployment-role }}"/>
        <subSteps xsi:type="pipeline:Action" otherKeyword="aws-region" actionValue="${{ needs.config.outputs.aws-region }}"/>
      </subSteps>
    </steps>
    <steps xsi:type="pipeline:Action" actionKeyword="id:" actionValue="lambda">
      <subSteps xsi:type="pipeline:Script" name="run:" command="&quot;: Test if lambda exists\nlambda_update=false\nif aws lambda get-function\&#xD;&#xA;        \ --function-name '${{ inputs.function-name }}' --region '${{ needs.config.outputs.aws-region\&#xD;&#xA;        \ }}' > /dev/null; then\n  echo \&quot;Detected lambda: ${{ inputs.function-name\&#xD;&#xA;        \ }}\&quot;\n  lambda_update=true\nfi\necho \&quot;update=${lambda_update}\&quot; >> \&quot;${GITHUB_OUTPUT}\&quot;\&#xD;&#xA;        \n&quot;"/>
    </steps>
    <steps xsi:type="pipeline:Action" actionKeyword="id:" actionValue="create">
      <subSteps xsi:type="pipeline:Action" actionKeyword="if:" actionValue="${{ steps.lambda.outputs.update != 'true' }}"/>
      <subSteps xsi:type="pipeline:Script" name="run:" command="&quot;: Create Lambda\nset --\nset -- \&quot;$@\&quot; --handler '${{ inputs.handler }}'\n\&#xD;&#xA;        set -- \&quot;$@\&quot; --region '${{ needs.config.outputs.aws-region }}'\nset -- \&quot;\&#xD;&#xA;        $@\&quot; --function-name '${{ inputs.function-name }}'\nset -- \&quot;$@\&quot; --zip-file\&#xD;&#xA;        \ \&quot;fileb://${PWD}/lambda.zip\&quot;\nset -- \&quot;$@\&quot; --runtime '${{ inputs.runtime\&#xD;&#xA;        \ }}'\nset -- \&quot;$@\&quot; --timeout '${{ inputs.timeout }}'\nset -- \&quot;$@\&quot; --memory-size\&#xD;&#xA;        \ '${{ inputs.memory }}'\nset -- \&quot;$@\&quot; --role '${{ inputs.function-role }}'\n\&#xD;&#xA;        set -- \&quot;$@\&quot; --description '${{ inputs.description }}'\nif test ! -z \&quot;${{\&#xD;&#xA;        \ inputs.subnets }}\&quot; &amp;&amp; test ! -z \&quot;${{ inputs.security_groups }}\&quot;; then\n\&#xD;&#xA;        set -- \&quot;$@\&quot; --vpc-config 'SubnetIds=[${{ inputs.subnets }}],SecurityGroups=[${{\&#xD;&#xA;        \ inputs.security_groups }}]'\nfi\nset -- \&quot;$@\&quot; ${{ inputs.publish &amp;&amp; '--publish'\&#xD;&#xA;        \ || '--no-publish' }}\naws lambda create-function \&quot;$@\&quot;\n&quot;"/>
    </steps>
    <steps xsi:type="pipeline:Action" actionKeyword="id:" actionValue="update-code">
      <subSteps xsi:type="pipeline:Action" actionKeyword="if:" actionValue="${{ steps.lambda.outputs.update == 'true' }}"/>
      <subSteps xsi:type="pipeline:Script" name="run:" command="&quot;: Update Lambda Code\nset --\nset -- \&quot;$@\&quot; --region '${{ needs.config.outputs.aws-region\&#xD;&#xA;        \ }}'\nset -- \&quot;$@\&quot; --function-name '${{ inputs.function-name }}'\nset --\&#xD;&#xA;        \ \&quot;$@\&quot; --zip-file \&quot;fileb://${PWD}/lambda.zip\&quot;\nset -- \&quot;$@\&quot; ${{ inputs.publish\&#xD;&#xA;        \ &amp;&amp; '--publish' || '--no-publish' }}\naws lambda update-function-code \&quot;\&#xD;&#xA;        $@\&quot;\n&quot;"/>
    </steps>
    <steps xsi:type="pipeline:Action" actionKeyword="id:" actionValue="update-config">
      <subSteps xsi:type="pipeline:Action" actionKeyword="if:" actionValue="${{ steps.lambda.outputs.update == 'true' }}"/>
      <subSteps xsi:type="pipeline:Script" name="run:" command="&quot;: Update Lambda Config\nfor i in $(seq 100); do\n  status=\&quot;$(aws lambda\&#xD;&#xA;        \ get-function --function-name '${{ inputs.function-name }}' --region '${{\&#xD;&#xA;        \ needs.config.outputs.aws-region }}' | jq -r .Configuration.LastUpdateStatus)\&quot;\&#xD;&#xA;        \n  test \&quot;${status}\&quot; = 'InProgress' || break\n  sleep 3\ndone\nset --\n\&#xD;&#xA;        set -- \&quot;$@\&quot; --handler '${{ inputs.handler }}'\nset -- \&quot;$@\&quot; --region '${{\&#xD;&#xA;        \ needs.config.outputs.aws-region }}'\nset -- \&quot;$@\&quot; --function-name '${{\&#xD;&#xA;        \ inputs.function-name }}'\nset -- \&quot;$@\&quot; --runtime '${{ inputs.runtime }}'\n\&#xD;&#xA;        set -- \&quot;$@\&quot; --timeout '${{ inputs.timeout }}'\nset -- \&quot;$@\&quot; --memory-size\&#xD;&#xA;        \ '${{ inputs.memory }}'\nset -- \&quot;$@\&quot; --role '${{ inputs.function-role }}'\n\&#xD;&#xA;        set -- \&quot;$@\&quot; --description '${{ inputs.description }}'\naws lambda update-function-configuration\&#xD;&#xA;        \ \&quot;$@\&quot;\n&quot;"/>
    </steps>
  </jobs>
  <jobs name="test" dependKW="needs:" references="//@jobs.1">
    <jobParameterValues name="runs-on:" value="ubuntu-latest"/>
    <steps xsi:type="pipeline:Script" name="run:" command="&quot;$HOME/ginger/sanity/non-prod-single.sh&quot;"/>
  </jobs>
  <jobs name="deploy-jdk">
    <jobParameterValues name="uses:" value="aplaceformom/workflows/.github/workflows/jdk-install.yaml@main"/>
    <jobParameterValues name="with:">
      <subParameters otherName="deployment-role" value="${{ inputs.deployment-role || null }}"/>
      <subParameters otherName="application-role" value="${{ inputs.function-role  || null }}"/>
      <subParameters otherName="aws-region" value="${{ inputs.aws-region || null }}"/>
      <subParameters name="env:" value="${{ inputs.env }}"/>
    </jobParameterValues>
    <jobParameterValues name="runs-on:" value="ubuntu-latest"/>
    <steps xsi:type="pipeline:Action" actionKeyword="id:" actionValue="Install-JDK-17">
      <subSteps xsi:type="pipeline:Script" name="run:" command="&quot;cd /opt/$JBOOS_HOME &amp;&amp; source ~/.$PROFILE &amp;&amp; sudo apt update &amp;&amp; sudo apt purge -y openjdk-* &amp;&amp; sudo apt install -y openjdk-17-jdk&quot;"/>
    </steps>
  </jobs>
</pipeline:Pipeline>
