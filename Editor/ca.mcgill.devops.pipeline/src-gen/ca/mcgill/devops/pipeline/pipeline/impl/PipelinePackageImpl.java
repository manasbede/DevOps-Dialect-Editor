/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Action;
import ca.mcgill.devops.pipeline.pipeline.Activity;
import ca.mcgill.devops.pipeline.pipeline.Branch;
import ca.mcgill.devops.pipeline.pipeline.Configurations;
import ca.mcgill.devops.pipeline.pipeline.Event;
import ca.mcgill.devops.pipeline.pipeline.Job;
import ca.mcgill.devops.pipeline.pipeline.ParameterValue;
import ca.mcgill.devops.pipeline.pipeline.Permission;
import ca.mcgill.devops.pipeline.pipeline.Pipeline;
import ca.mcgill.devops.pipeline.pipeline.PipelineEventKeyword;
import ca.mcgill.devops.pipeline.pipeline.PipelineFactory;
import ca.mcgill.devops.pipeline.pipeline.PipelineKeyword;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.Resource;
import ca.mcgill.devops.pipeline.pipeline.Script;
import ca.mcgill.devops.pipeline.pipeline.Stage;
import ca.mcgill.devops.pipeline.pipeline.Step;
import ca.mcgill.devops.pipeline.pipeline.TriggerSchedule;
import ca.mcgill.devops.pipeline.pipeline.Variable;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PipelinePackageImpl extends EPackageImpl implements PipelinePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pipelineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass resourceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass eventEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass triggerScheduleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass branchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass activityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stageEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass jobEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass scriptEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterValueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum permissionEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum pipelineEventKeywordEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum pipelineKeywordEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see ca.mcgill.devops.pipeline.pipeline.PipelinePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private PipelinePackageImpl()
  {
    super(eNS_URI, PipelineFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link PipelinePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static PipelinePackage init()
  {
    if (isInited) return (PipelinePackage)EPackage.Registry.INSTANCE.getEPackage(PipelinePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredPipelinePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    PipelinePackageImpl thePipelinePackage = registeredPipelinePackage instanceof PipelinePackageImpl ? (PipelinePackageImpl)registeredPipelinePackage : new PipelinePackageImpl();

    isInited = true;

    // Create package meta-data objects
    thePipelinePackage.createPackageContents();

    // Initialize created meta-data
    thePipelinePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    thePipelinePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(PipelinePackage.eNS_URI, thePipelinePackage);
    return thePipelinePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPipeline()
  {
    return pipelineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPipeline_PipelineConfiguration()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPipeline_Triggers()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPipeline_JobOrStageVar()
  {
    return (EAttribute)pipelineEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPipeline_Stages()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPipeline_Jobs()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfigurations()
  {
    return configurationsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_Name()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_RunName()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_DefaultShellValue()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_DefaultWDValue()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_Env()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_AllPermission()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_IndPermissions()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_Group()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_CancelConcurrence()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_VmName()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_VmImage()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_VmDemands()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigurations_Resources()
  {
    return (EReference)configurationsEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_Version()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigurations_PplVariables()
  {
    return (EReference)configurationsEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigurations_ParameterValues()
  {
    return (EReference)configurationsEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getConfigurations_ExtendOrInclude()
  {
    return (EAttribute)configurationsEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfigurations_ExtendedParameters()
  {
    return (EReference)configurationsEClass.getEStructuralFeatures().get(17);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariable()
  {
    return variableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_VariableKey()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_VariableValue()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_Name()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_Value()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_Readonly()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getVariable_Variables()
  {
    return (EAttribute)variableEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getResource()
  {
    return resourceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getResource_ResourceName()
  {
    return (EAttribute)resourceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getResource_ResourceValues()
  {
    return (EReference)resourceEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getEvent()
  {
    return eventEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_Name()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_SimpleEvent()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEvent_IncludedBranches()
  {
    return (EReference)eventEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEvent_Activities()
  {
    return (EReference)eventEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_Batch()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_AutoCancel()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_Workflows()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_Drafts()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEvent_ExcludedBranches()
  {
    return (EReference)eventEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_IncludedPaths()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_ExcludedPaths()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_IncludedTags()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_ExcludedTags()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_ScheduleNameKW()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEvent_TriggerSchedules()
  {
    return (EReference)eventEClass.getEStructuralFeatures().get(14);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getEvent_WorkflowTypeKW()
  {
    return (EAttribute)eventEClass.getEStructuralFeatures().get(15);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEvent_WorkFlowActivities()
  {
    return (EReference)eventEClass.getEStructuralFeatures().get(16);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTriggerSchedule()
  {
    return triggerScheduleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTriggerSchedule_CronValue()
  {
    return (EAttribute)triggerScheduleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTriggerSchedule_DisplayName()
  {
    return (EAttribute)triggerScheduleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTriggerSchedule_IncludedBranches()
  {
    return (EReference)triggerScheduleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTriggerSchedule_ExcludedBranches()
  {
    return (EReference)triggerScheduleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTriggerSchedule_Batch()
  {
    return (EAttribute)triggerScheduleEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTriggerSchedule_Always()
  {
    return (EAttribute)triggerScheduleEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBranch()
  {
    return branchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBranch_Name()
  {
    return (EAttribute)branchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getActivity()
  {
    return activityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getActivity_Name()
  {
    return (EAttribute)activityEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getActivity_Activities()
  {
    return (EReference)activityEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStage()
  {
    return stageEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_Name()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_DisplayName()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_PoolValue()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_VmName()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_VmImage()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_VmDemands()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_ConditionValue()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getStage_IsSkippable()
  {
    return (EAttribute)stageEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStage_StageVariables()
  {
    return (EReference)stageEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStage_DependsOn()
  {
    return (EReference)stageEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStage_Jobs()
  {
    return (EReference)stageEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getJob()
  {
    return jobEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJob_JobName()
  {
    return (EAttribute)jobEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJob_JobParameterValues()
  {
    return (EReference)jobEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getJob_DependKW()
  {
    return (EAttribute)jobEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJob_References()
  {
    return (EReference)jobEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getJob_Steps()
  {
    return (EReference)jobEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStep()
  {
    return stepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStep_SubSteps()
  {
    return (EReference)stepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getScript()
  {
    return scriptEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getScript_Name()
  {
    return (EAttribute)scriptEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getScript_Command()
  {
    return (EAttribute)scriptEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAction()
  {
    return actionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAction_ActionName()
  {
    return (EAttribute)actionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAction_ActionKeyword()
  {
    return (EAttribute)actionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAction_OtherKeyword()
  {
    return (EAttribute)actionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAction_ActionValue()
  {
    return (EAttribute)actionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParameterValue()
  {
    return parameterValueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParameterValue_Name()
  {
    return (EAttribute)parameterValueEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParameterValue_OtherName()
  {
    return (EAttribute)parameterValueEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParameterValue_Value()
  {
    return (EAttribute)parameterValueEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getParameterValue_SubParameters()
  {
    return (EReference)parameterValueEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPermission()
  {
    return permissionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPipelineEventKeyword()
  {
    return pipelineEventKeywordEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPipelineKeyword()
  {
    return pipelineKeywordEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineFactory getPipelineFactory()
  {
    return (PipelineFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    pipelineEClass = createEClass(PIPELINE);
    createEReference(pipelineEClass, PIPELINE__PIPELINE_CONFIGURATION);
    createEReference(pipelineEClass, PIPELINE__TRIGGERS);
    createEAttribute(pipelineEClass, PIPELINE__JOB_OR_STAGE_VAR);
    createEReference(pipelineEClass, PIPELINE__STAGES);
    createEReference(pipelineEClass, PIPELINE__JOBS);

    configurationsEClass = createEClass(CONFIGURATIONS);
    createEAttribute(configurationsEClass, CONFIGURATIONS__NAME);
    createEAttribute(configurationsEClass, CONFIGURATIONS__RUN_NAME);
    createEAttribute(configurationsEClass, CONFIGURATIONS__DEFAULT_SHELL_VALUE);
    createEAttribute(configurationsEClass, CONFIGURATIONS__DEFAULT_WD_VALUE);
    createEAttribute(configurationsEClass, CONFIGURATIONS__ENV);
    createEAttribute(configurationsEClass, CONFIGURATIONS__ALL_PERMISSION);
    createEAttribute(configurationsEClass, CONFIGURATIONS__IND_PERMISSIONS);
    createEAttribute(configurationsEClass, CONFIGURATIONS__GROUP);
    createEAttribute(configurationsEClass, CONFIGURATIONS__CANCEL_CONCURRENCE);
    createEAttribute(configurationsEClass, CONFIGURATIONS__VM_NAME);
    createEAttribute(configurationsEClass, CONFIGURATIONS__VM_IMAGE);
    createEAttribute(configurationsEClass, CONFIGURATIONS__VM_DEMANDS);
    createEReference(configurationsEClass, CONFIGURATIONS__RESOURCES);
    createEAttribute(configurationsEClass, CONFIGURATIONS__VERSION);
    createEReference(configurationsEClass, CONFIGURATIONS__PPL_VARIABLES);
    createEReference(configurationsEClass, CONFIGURATIONS__PARAMETER_VALUES);
    createEAttribute(configurationsEClass, CONFIGURATIONS__EXTEND_OR_INCLUDE);
    createEReference(configurationsEClass, CONFIGURATIONS__EXTENDED_PARAMETERS);

    variableEClass = createEClass(VARIABLE);
    createEAttribute(variableEClass, VARIABLE__VARIABLE_KEY);
    createEAttribute(variableEClass, VARIABLE__VARIABLE_VALUE);
    createEAttribute(variableEClass, VARIABLE__NAME);
    createEAttribute(variableEClass, VARIABLE__VALUE);
    createEAttribute(variableEClass, VARIABLE__READONLY);
    createEAttribute(variableEClass, VARIABLE__VARIABLES);

    resourceEClass = createEClass(RESOURCE);
    createEAttribute(resourceEClass, RESOURCE__RESOURCE_NAME);
    createEReference(resourceEClass, RESOURCE__RESOURCE_VALUES);

    eventEClass = createEClass(EVENT);
    createEAttribute(eventEClass, EVENT__NAME);
    createEAttribute(eventEClass, EVENT__SIMPLE_EVENT);
    createEReference(eventEClass, EVENT__INCLUDED_BRANCHES);
    createEReference(eventEClass, EVENT__ACTIVITIES);
    createEAttribute(eventEClass, EVENT__BATCH);
    createEAttribute(eventEClass, EVENT__AUTO_CANCEL);
    createEAttribute(eventEClass, EVENT__WORKFLOWS);
    createEAttribute(eventEClass, EVENT__DRAFTS);
    createEReference(eventEClass, EVENT__EXCLUDED_BRANCHES);
    createEAttribute(eventEClass, EVENT__INCLUDED_PATHS);
    createEAttribute(eventEClass, EVENT__EXCLUDED_PATHS);
    createEAttribute(eventEClass, EVENT__INCLUDED_TAGS);
    createEAttribute(eventEClass, EVENT__EXCLUDED_TAGS);
    createEAttribute(eventEClass, EVENT__SCHEDULE_NAME_KW);
    createEReference(eventEClass, EVENT__TRIGGER_SCHEDULES);
    createEAttribute(eventEClass, EVENT__WORKFLOW_TYPE_KW);
    createEReference(eventEClass, EVENT__WORK_FLOW_ACTIVITIES);

    triggerScheduleEClass = createEClass(TRIGGER_SCHEDULE);
    createEAttribute(triggerScheduleEClass, TRIGGER_SCHEDULE__CRON_VALUE);
    createEAttribute(triggerScheduleEClass, TRIGGER_SCHEDULE__DISPLAY_NAME);
    createEReference(triggerScheduleEClass, TRIGGER_SCHEDULE__INCLUDED_BRANCHES);
    createEReference(triggerScheduleEClass, TRIGGER_SCHEDULE__EXCLUDED_BRANCHES);
    createEAttribute(triggerScheduleEClass, TRIGGER_SCHEDULE__BATCH);
    createEAttribute(triggerScheduleEClass, TRIGGER_SCHEDULE__ALWAYS);

    branchEClass = createEClass(BRANCH);
    createEAttribute(branchEClass, BRANCH__NAME);

    activityEClass = createEClass(ACTIVITY);
    createEAttribute(activityEClass, ACTIVITY__NAME);
    createEReference(activityEClass, ACTIVITY__ACTIVITIES);

    stageEClass = createEClass(STAGE);
    createEAttribute(stageEClass, STAGE__NAME);
    createEAttribute(stageEClass, STAGE__DISPLAY_NAME);
    createEAttribute(stageEClass, STAGE__POOL_VALUE);
    createEAttribute(stageEClass, STAGE__VM_NAME);
    createEAttribute(stageEClass, STAGE__VM_IMAGE);
    createEAttribute(stageEClass, STAGE__VM_DEMANDS);
    createEAttribute(stageEClass, STAGE__CONDITION_VALUE);
    createEAttribute(stageEClass, STAGE__IS_SKIPPABLE);
    createEReference(stageEClass, STAGE__STAGE_VARIABLES);
    createEReference(stageEClass, STAGE__DEPENDS_ON);
    createEReference(stageEClass, STAGE__JOBS);

    jobEClass = createEClass(JOB);
    createEAttribute(jobEClass, JOB__JOB_NAME);
    createEReference(jobEClass, JOB__JOB_PARAMETER_VALUES);
    createEAttribute(jobEClass, JOB__DEPEND_KW);
    createEReference(jobEClass, JOB__REFERENCES);
    createEReference(jobEClass, JOB__STEPS);

    stepEClass = createEClass(STEP);
    createEReference(stepEClass, STEP__SUB_STEPS);

    scriptEClass = createEClass(SCRIPT);
    createEAttribute(scriptEClass, SCRIPT__NAME);
    createEAttribute(scriptEClass, SCRIPT__COMMAND);

    actionEClass = createEClass(ACTION);
    createEAttribute(actionEClass, ACTION__ACTION_NAME);
    createEAttribute(actionEClass, ACTION__ACTION_KEYWORD);
    createEAttribute(actionEClass, ACTION__OTHER_KEYWORD);
    createEAttribute(actionEClass, ACTION__ACTION_VALUE);

    parameterValueEClass = createEClass(PARAMETER_VALUE);
    createEAttribute(parameterValueEClass, PARAMETER_VALUE__NAME);
    createEAttribute(parameterValueEClass, PARAMETER_VALUE__OTHER_NAME);
    createEAttribute(parameterValueEClass, PARAMETER_VALUE__VALUE);
    createEReference(parameterValueEClass, PARAMETER_VALUE__SUB_PARAMETERS);

    // Create enums
    permissionEEnum = createEEnum(PERMISSION);
    pipelineEventKeywordEEnum = createEEnum(PIPELINE_EVENT_KEYWORD);
    pipelineKeywordEEnum = createEEnum(PIPELINE_KEYWORD);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    scriptEClass.getESuperTypes().add(this.getStep());
    actionEClass.getESuperTypes().add(this.getStep());

    // Initialize classes and features; add operations and parameters
    initEClass(pipelineEClass, Pipeline.class, "Pipeline", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPipeline_PipelineConfiguration(), this.getConfigurations(), null, "pipelineConfiguration", null, 0, 1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPipeline_Triggers(), this.getEvent(), null, "triggers", null, 0, -1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPipeline_JobOrStageVar(), ecorePackage.getEString(), "jobOrStageVar", null, 0, 1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPipeline_Stages(), this.getStage(), null, "stages", null, 0, -1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPipeline_Jobs(), this.getJob(), null, "jobs", null, 0, -1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configurationsEClass, Configurations.class, "Configurations", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getConfigurations_Name(), ecorePackage.getEString(), "name", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_RunName(), ecorePackage.getEString(), "runName", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_DefaultShellValue(), ecorePackage.getEString(), "defaultShellValue", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_DefaultWDValue(), ecorePackage.getEString(), "defaultWDValue", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_Env(), ecorePackage.getEString(), "env", null, 0, -1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_AllPermission(), ecorePackage.getEString(), "allPermission", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_IndPermissions(), ecorePackage.getEString(), "indPermissions", null, 0, -1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_Group(), ecorePackage.getEString(), "group", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_CancelConcurrence(), ecorePackage.getEString(), "cancelConcurrence", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_VmName(), ecorePackage.getEString(), "vmName", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_VmImage(), ecorePackage.getEString(), "vmImage", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_VmDemands(), ecorePackage.getEString(), "vmDemands", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConfigurations_Resources(), this.getResource(), null, "resources", null, 0, -1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_Version(), ecorePackage.getEString(), "version", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConfigurations_PplVariables(), this.getVariable(), null, "pplVariables", null, 0, -1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConfigurations_ParameterValues(), this.getParameterValue(), null, "parameterValues", null, 0, -1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getConfigurations_ExtendOrInclude(), ecorePackage.getEString(), "extendOrInclude", null, 0, 1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConfigurations_ExtendedParameters(), this.getParameterValue(), null, "extendedParameters", null, 0, -1, Configurations.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableEClass, Variable.class, "Variable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getVariable_VariableKey(), ecorePackage.getEString(), "variableKey", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariable_VariableValue(), ecorePackage.getEString(), "variableValue", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariable_Name(), ecorePackage.getEString(), "name", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariable_Value(), ecorePackage.getEString(), "value", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariable_Readonly(), ecorePackage.getEString(), "readonly", null, 0, 1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getVariable_Variables(), ecorePackage.getEString(), "variables", null, 0, -1, Variable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(resourceEClass, Resource.class, "Resource", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getResource_ResourceName(), ecorePackage.getEString(), "resourceName", null, 0, 1, Resource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getResource_ResourceValues(), this.getParameterValue(), null, "resourceValues", null, 0, -1, Resource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(eventEClass, Event.class, "Event", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getEvent_Name(), this.getPipelineEventKeyword(), "name", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_SimpleEvent(), ecorePackage.getEString(), "simpleEvent", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvent_IncludedBranches(), this.getBranch(), null, "includedBranches", null, 0, -1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvent_Activities(), this.getActivity(), null, "activities", null, 0, -1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_Batch(), ecorePackage.getEString(), "batch", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_AutoCancel(), ecorePackage.getEString(), "autoCancel", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_Workflows(), ecorePackage.getEString(), "workflows", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_Drafts(), ecorePackage.getEString(), "drafts", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvent_ExcludedBranches(), this.getBranch(), null, "excludedBranches", null, 0, -1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_IncludedPaths(), ecorePackage.getEString(), "includedPaths", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_ExcludedPaths(), ecorePackage.getEString(), "excludedPaths", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_IncludedTags(), ecorePackage.getEString(), "includedTags", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_ExcludedTags(), ecorePackage.getEString(), "excludedTags", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_ScheduleNameKW(), ecorePackage.getEString(), "scheduleNameKW", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvent_TriggerSchedules(), this.getTriggerSchedule(), null, "triggerSchedules", null, 0, -1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getEvent_WorkflowTypeKW(), ecorePackage.getEString(), "workflowTypeKW", null, 0, 1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getEvent_WorkFlowActivities(), this.getActivity(), null, "workFlowActivities", null, 0, -1, Event.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(triggerScheduleEClass, TriggerSchedule.class, "TriggerSchedule", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTriggerSchedule_CronValue(), ecorePackage.getEString(), "cronValue", null, 0, 1, TriggerSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTriggerSchedule_DisplayName(), ecorePackage.getEString(), "displayName", null, 0, 1, TriggerSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTriggerSchedule_IncludedBranches(), this.getBranch(), null, "includedBranches", null, 0, -1, TriggerSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTriggerSchedule_ExcludedBranches(), this.getBranch(), null, "excludedBranches", null, 0, -1, TriggerSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTriggerSchedule_Batch(), ecorePackage.getEString(), "batch", null, 0, 1, TriggerSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTriggerSchedule_Always(), ecorePackage.getEString(), "always", null, 0, 1, TriggerSchedule.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(branchEClass, Branch.class, "Branch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBranch_Name(), ecorePackage.getEString(), "name", null, 0, 1, Branch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(activityEClass, Activity.class, "Activity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getActivity_Name(), ecorePackage.getEString(), "name", null, 0, 1, Activity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getActivity_Activities(), this.getParameterValue(), null, "activities", null, 0, -1, Activity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stageEClass, Stage.class, "Stage", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStage_Name(), ecorePackage.getEString(), "name", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_DisplayName(), ecorePackage.getEString(), "displayName", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_PoolValue(), ecorePackage.getEString(), "poolValue", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_VmName(), ecorePackage.getEString(), "vmName", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_VmImage(), ecorePackage.getEString(), "vmImage", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_VmDemands(), ecorePackage.getEString(), "vmDemands", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_ConditionValue(), ecorePackage.getEString(), "conditionValue", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStage_IsSkippable(), ecorePackage.getEString(), "isSkippable", null, 0, 1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStage_StageVariables(), this.getVariable(), null, "stageVariables", null, 0, -1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStage_DependsOn(), this.getStage(), null, "dependsOn", null, 0, -1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStage_Jobs(), this.getJob(), null, "jobs", null, 0, -1, Stage.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(jobEClass, Job.class, "Job", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getJob_JobName(), ecorePackage.getEString(), "jobName", null, 0, 1, Job.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJob_JobParameterValues(), this.getParameterValue(), null, "jobParameterValues", null, 0, -1, Job.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getJob_DependKW(), ecorePackage.getEString(), "dependKW", null, 0, 1, Job.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJob_References(), this.getJob(), null, "references", null, 0, -1, Job.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getJob_Steps(), this.getStep(), null, "steps", null, 0, -1, Job.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stepEClass, Step.class, "Step", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStep_SubSteps(), this.getStep(), null, "subSteps", null, 0, -1, Step.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(scriptEClass, Script.class, "Script", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getScript_Name(), ecorePackage.getEString(), "name", null, 0, 1, Script.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getScript_Command(), ecorePackage.getEString(), "command", null, 0, 1, Script.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(actionEClass, Action.class, "Action", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAction_ActionName(), ecorePackage.getEString(), "actionName", null, 0, 1, Action.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAction_ActionKeyword(), this.getPipelineKeyword(), "actionKeyword", null, 0, 1, Action.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAction_OtherKeyword(), ecorePackage.getEString(), "otherKeyword", null, 0, 1, Action.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAction_ActionValue(), ecorePackage.getEString(), "actionValue", null, 0, 1, Action.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterValueEClass, ParameterValue.class, "ParameterValue", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameterValue_Name(), this.getPipelineKeyword(), "name", null, 0, 1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterValue_OtherName(), ecorePackage.getEString(), "otherName", null, 0, 1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameterValue_Value(), ecorePackage.getEString(), "value", null, 0, 1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameterValue_SubParameters(), this.getParameterValue(), null, "subParameters", null, 0, -1, ParameterValue.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(permissionEEnum, Permission.class, "Permission");
    addEEnumLiteral(permissionEEnum, Permission.READ_ALL);
    addEEnumLiteral(permissionEEnum, Permission.WRITE_ALL);
    addEEnumLiteral(permissionEEnum, Permission.READ);
    addEEnumLiteral(permissionEEnum, Permission.WRITE);
    addEEnumLiteral(permissionEEnum, Permission.NONE);

    initEEnum(pipelineEventKeywordEEnum, PipelineEventKeyword.class, "PipelineEventKeyword");
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PUSH);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PULL_REQUEST);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_WORKFLOW_DISPATCH);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_REPOSITORY_DISPATCH);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CHECK_RUN);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CHECK_SUITE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CREATE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_DELETE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_DEPLOYMENT);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_DEPLOYMENT_STATUS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_FORK);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_GOLLUM);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_ISSUE_COMMENT);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_ISSUES);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_LABEL);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_MILESTONE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PAGE_BUILD);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PROJECT);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PROJECT_CARD);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PROJECT_COLUMN);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PUBLIC);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PULL_REQUEST_REVIEW);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PULL_REQUEST_REVIEW_COMMENT);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PULL_REQUEST_TARGET);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_REGISTRY_PACKAGE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_RELEASE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_STATUS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_WATCH);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_WORKFLOW_CALL);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_WORKFLOW_RUN);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_TRIGGER);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PR);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_BRANCHES);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_TAGS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PATHS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_AUTO_CANCEL);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_DRAFTS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_ONLY);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_EXCEPT);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_RULES);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_WORKFLOW_RULES);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PIPELINE_SCHEDULE);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_MERGE_REQUESTS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CHANGES);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PIPELINES);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_DEFAULT);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PULL_REQUESTS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CUSTOM);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CONDITIONS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_BRANCH_DELETED);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_BRANCH_CREATED);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_TAG_CREATED);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_TAG_DELETED);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_REPOSITORY_TRIGGER);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_SCHEDULED_TRIGGER);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_REMOTE_TRIGGER);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_BITBUCKET_TRIGGER);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_PLAN_BRANCH);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_CRON);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_NOTIFICATIONS);
    addEEnumLiteral(pipelineEventKeywordEEnum, PipelineEventKeyword.PPL_EVT_LOCK_BEHAVIOR);

    initEEnum(pipelineKeywordEEnum, PipelineKeyword.class, "PipelineKeyword");
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_NAME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUN_NAME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEFAULTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUN);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SHELL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKING_DIRECTORY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ENV);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PERMISSION);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONCURRENCY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_GROUP);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CANCEL_IN_PROGRESS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_POOL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_VM_IMAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEMANDS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RESOURCES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_VERSION);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_VARIABLES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PARAMETERS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_EXTENDS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_INCLUDE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TYPES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BATCH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_AUTO_CANCEL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKFLOWS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DRAFTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BRANCHES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BRANCHES_IGNORE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PATHS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PATHS_IGNORE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TAGS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TAGS_IGNORE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SCHEDULES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SCHEDULE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKFLOW_CALL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKFLOW_DISPATCH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CRON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DISPLAY_NAME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ALWAYS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONDITION);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_IS_SKIPPABLE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEPENDS_ON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_JOB);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEPLOYMENT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SCRIPT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BASH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PWSH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_POWERSHELL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CHECKOUT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DOWNLOAD);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_GET_PACKAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PUBLISH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TASK);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_VALUE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_READONLY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BUILDS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTAINERS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PIPELINES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REPOSITORIES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WEBHOOKS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PACKAGES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_INPUTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_OUTPUTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SECRETS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DESCRIPTION);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REQUIRED);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEFAULT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TYPE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_OPTIONS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_IF);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUNS_ON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STRATEGY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_MATRIX);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTAINER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SERVICES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STEPS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_USES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WITH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TIMEOUT_MINUTES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTINUE_ON_ERROR);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ENVIRONMENT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ID);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PERMISSIONS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TIMEOUTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEFAULTS_RUN);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PUSH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PULL_REQUEST);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REPOSITORY_DISPATCH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKFLOW_RUN);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_FILTERS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_EXCLUDE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_FAIL_FAST);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_MAX_PARALLEL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTAINER_IMAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CREDENTIALS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PORTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_INHERIT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TRIGGER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TEMPLATE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKSPACE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PIPELINE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TIMEOUT_IN_MINUTES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTINUE_ON_ERR);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RESOURCE_TYPE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RESOURCE_NAME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STAGES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ONLY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_EXCEPT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_IMAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CACHE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ARTIFACTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RETRIES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RULES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BEFORE_SCRIPT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_AFTER_SCRIPT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TIMEOUT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WHEN);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ALLOW_FAILURE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEPENDENCIES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PULL_REQUESTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STEP);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEFINITIONS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CACHES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PARALLEL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONDITIONS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_MAX_TIME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PROJECT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PLAN);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TASKS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REQUIREMENTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_FINAL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_JDK);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_LABELS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REPOSITORY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RELEASE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DOCKER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_AGENT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_QUEUE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SNAPSHOT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_POLICY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_APPROVALS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PREBUILD);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_POSTBUILD);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SSH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_AUTH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STORAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ENDPOINTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_COMMAND);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PROVISIONER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TRIGGER_RULES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUN_POLICY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_QUEUED);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_NOTIFICATIONS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEPLOY_TRIGGER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RELEASE_TRIGGER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_LOCK_BEHAVIOR);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REVIEW_STAGE);

    // Create resource
    createResource(eNS_URI);
  }

} //PipelinePackageImpl
