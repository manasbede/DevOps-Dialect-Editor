/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Configuration;
import ca.mcgill.devops.pipeline.pipeline.Parameter;
import ca.mcgill.devops.pipeline.pipeline.Permission;
import ca.mcgill.devops.pipeline.pipeline.Pipeline;
import ca.mcgill.devops.pipeline.pipeline.PipelineFactory;
import ca.mcgill.devops.pipeline.pipeline.PipelineKeyword;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PipelinePackageImpl extends EPackageImpl implements PipelinePackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass pipelineEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass configurationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass parameterEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum pipelineKeywordEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum permissionEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see ca.mcgill.devops.pipeline.pipeline.PipelinePackage#eNS_URI
   * @see #init()
   * @generated
   */
  private PipelinePackageImpl()
  {
    super(eNS_URI, PipelineFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link PipelinePackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static PipelinePackage init()
  {
    if (isInited) return (PipelinePackage)EPackage.Registry.INSTANCE.getEPackage(PipelinePackage.eNS_URI);

    // Obtain or create and register package
    Object registeredPipelinePackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    PipelinePackageImpl thePipelinePackage = registeredPipelinePackage instanceof PipelinePackageImpl ? (PipelinePackageImpl)registeredPipelinePackage : new PipelinePackageImpl();

    isInited = true;

    // Create package meta-data objects
    thePipelinePackage.createPackageContents();

    // Initialize created meta-data
    thePipelinePackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    thePipelinePackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(PipelinePackage.eNS_URI, thePipelinePackage);
    return thePipelinePackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPipeline()
  {
    return pipelineEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPipeline_Name()
  {
    return (EAttribute)pipelineEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPipeline_PipelineConfiguration()
  {
    return (EReference)pipelineEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConfiguration()
  {
    return configurationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConfiguration_Parameters()
  {
    return (EReference)configurationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getParameter()
  {
    return parameterEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParameter_Name()
  {
    return (EAttribute)parameterEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getParameter_Parameters()
  {
    return (EReference)parameterEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getParameter_Value()
  {
    return (EAttribute)parameterEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPipelineKeyword()
  {
    return pipelineKeywordEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPermission()
  {
    return permissionEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineFactory getPipelineFactory()
  {
    return (PipelineFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    pipelineEClass = createEClass(PIPELINE);
    createEAttribute(pipelineEClass, PIPELINE__NAME);
    createEReference(pipelineEClass, PIPELINE__PIPELINE_CONFIGURATION);

    configurationEClass = createEClass(CONFIGURATION);
    createEReference(configurationEClass, CONFIGURATION__PARAMETERS);

    parameterEClass = createEClass(PARAMETER);
    createEAttribute(parameterEClass, PARAMETER__NAME);
    createEReference(parameterEClass, PARAMETER__PARAMETERS);
    createEAttribute(parameterEClass, PARAMETER__VALUE);

    // Create enums
    pipelineKeywordEEnum = createEEnum(PIPELINE_KEYWORD);
    permissionEEnum = createEEnum(PERMISSION);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(pipelineEClass, Pipeline.class, "Pipeline", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPipeline_Name(), ecorePackage.getEString(), "name", null, 0, 1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPipeline_PipelineConfiguration(), this.getConfiguration(), null, "pipelineConfiguration", null, 0, -1, Pipeline.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(configurationEClass, Configuration.class, "Configuration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConfiguration_Parameters(), this.getParameter(), null, "parameters", null, 0, -1, Configuration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(parameterEClass, Parameter.class, "Parameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getParameter_Name(), ecorePackage.getEString(), "name", null, 0, 1, Parameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getParameter_Parameters(), this.getParameter(), null, "parameters", null, 0, -1, Parameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getParameter_Value(), ecorePackage.getEString(), "value", null, 0, 1, Parameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(pipelineKeywordEEnum, PipelineKeyword.class, "PipelineKeyword");
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_NAME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUN_NAME);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TYPES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BRANCHES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BRANCHES_IGNORE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PUSH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PULL_REQ);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PATH);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PATH_IGN);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TAGS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TAGS_IGNORE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PATHS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SCHEDULE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_INPUTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TYPE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_OUTPUTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SECRETS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TRIGGER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PR);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REQUIRED);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PERMISSIONS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ENV);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEFAULTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONCURRENCY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_NEEDS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_IF);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUNS_ON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ENVIRONMENT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ID);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_USES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WORKING_DIRECTORY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SHELL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ARGS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ENTRYPOINT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTINUE_ON_ERROR);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TIMEOUT_MINUTES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_STRATEGY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_MATRIX);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_INCLUDE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_EXCLUDE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_FAIL_FAST);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_MAX_PARALLEL);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTAINER);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_IMAGE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CREDENTIALS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PORTS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_INHERIT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PIPELINE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_EXTENDS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DEPLOYMENT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CANARY);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_ROLLING);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RUNONCE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TEMPLATE);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_RESOURCES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BUILDS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_BUILD);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CONTAINERS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PACKAGES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_PIPELINES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REPOSITORIES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WEBHOOKS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_FILTERS);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SCHEDULES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_CRON);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_DOWNLOADBUILD);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_REVIEWAPP);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SCRIPT);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_TARGET);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_SETTABLEVARIABLES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_VARIABLES);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_GROUP);
    addEEnumLiteral(pipelineKeywordEEnum, PipelineKeyword.PPL_KW_WF_RUN);

    initEEnum(permissionEEnum, Permission.class, "Permission");
    addEEnumLiteral(permissionEEnum, Permission.READ_ALL);
    addEEnumLiteral(permissionEEnum, Permission.WRITE_ALL);

    // Create resource
    createResource(eNS_URI);
  }

} //PipelinePackageImpl
