/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Configurations;
import ca.mcgill.devops.pipeline.pipeline.Event;
import ca.mcgill.devops.pipeline.pipeline.Job;
import ca.mcgill.devops.pipeline.pipeline.Pipeline;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.Stage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pipeline</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.PipelineImpl#getPipelineConfiguration <em>Pipeline Configuration</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.PipelineImpl#getTriggers <em>Triggers</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.PipelineImpl#getJobOrStageVar <em>Job Or Stage Var</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.PipelineImpl#getStages <em>Stages</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.PipelineImpl#getJobs <em>Jobs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PipelineImpl extends MinimalEObjectImpl.Container implements Pipeline
{
  /**
   * The cached value of the '{@link #getPipelineConfiguration() <em>Pipeline Configuration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPipelineConfiguration()
   * @generated
   * @ordered
   */
  protected Configurations pipelineConfiguration;

  /**
   * The cached value of the '{@link #getTriggers() <em>Triggers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggers()
   * @generated
   * @ordered
   */
  protected EList<Event> triggers;

  /**
   * The default value of the '{@link #getJobOrStageVar() <em>Job Or Stage Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJobOrStageVar()
   * @generated
   * @ordered
   */
  protected static final String JOB_OR_STAGE_VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getJobOrStageVar() <em>Job Or Stage Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJobOrStageVar()
   * @generated
   * @ordered
   */
  protected String jobOrStageVar = JOB_OR_STAGE_VAR_EDEFAULT;

  /**
   * The cached value of the '{@link #getStages() <em>Stages</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStages()
   * @generated
   * @ordered
   */
  protected EList<Stage> stages;

  /**
   * The cached value of the '{@link #getJobs() <em>Jobs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJobs()
   * @generated
   * @ordered
   */
  protected EList<Job> jobs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PipelineImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PipelinePackage.Literals.PIPELINE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Configurations getPipelineConfiguration()
  {
    return pipelineConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPipelineConfiguration(Configurations newPipelineConfiguration, NotificationChain msgs)
  {
    Configurations oldPipelineConfiguration = pipelineConfiguration;
    pipelineConfiguration = newPipelineConfiguration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION, oldPipelineConfiguration, newPipelineConfiguration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPipelineConfiguration(Configurations newPipelineConfiguration)
  {
    if (newPipelineConfiguration != pipelineConfiguration)
    {
      NotificationChain msgs = null;
      if (pipelineConfiguration != null)
        msgs = ((InternalEObject)pipelineConfiguration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION, null, msgs);
      if (newPipelineConfiguration != null)
        msgs = ((InternalEObject)newPipelineConfiguration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION, null, msgs);
      msgs = basicSetPipelineConfiguration(newPipelineConfiguration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION, newPipelineConfiguration, newPipelineConfiguration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getTriggers()
  {
    if (triggers == null)
    {
      triggers = new EObjectContainmentEList<Event>(Event.class, this, PipelinePackage.PIPELINE__TRIGGERS);
    }
    return triggers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getJobOrStageVar()
  {
    return jobOrStageVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setJobOrStageVar(String newJobOrStageVar)
  {
    String oldJobOrStageVar = jobOrStageVar;
    jobOrStageVar = newJobOrStageVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.PIPELINE__JOB_OR_STAGE_VAR, oldJobOrStageVar, jobOrStageVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Stage> getStages()
  {
    if (stages == null)
    {
      stages = new EObjectContainmentEList<Stage>(Stage.class, this, PipelinePackage.PIPELINE__STAGES);
    }
    return stages;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Job> getJobs()
  {
    if (jobs == null)
    {
      jobs = new EObjectContainmentEList<Job>(Job.class, this, PipelinePackage.PIPELINE__JOBS);
    }
    return jobs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION:
        return basicSetPipelineConfiguration(null, msgs);
      case PipelinePackage.PIPELINE__TRIGGERS:
        return ((InternalEList<?>)getTriggers()).basicRemove(otherEnd, msgs);
      case PipelinePackage.PIPELINE__STAGES:
        return ((InternalEList<?>)getStages()).basicRemove(otherEnd, msgs);
      case PipelinePackage.PIPELINE__JOBS:
        return ((InternalEList<?>)getJobs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION:
        return getPipelineConfiguration();
      case PipelinePackage.PIPELINE__TRIGGERS:
        return getTriggers();
      case PipelinePackage.PIPELINE__JOB_OR_STAGE_VAR:
        return getJobOrStageVar();
      case PipelinePackage.PIPELINE__STAGES:
        return getStages();
      case PipelinePackage.PIPELINE__JOBS:
        return getJobs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION:
        setPipelineConfiguration((Configurations)newValue);
        return;
      case PipelinePackage.PIPELINE__TRIGGERS:
        getTriggers().clear();
        getTriggers().addAll((Collection<? extends Event>)newValue);
        return;
      case PipelinePackage.PIPELINE__JOB_OR_STAGE_VAR:
        setJobOrStageVar((String)newValue);
        return;
      case PipelinePackage.PIPELINE__STAGES:
        getStages().clear();
        getStages().addAll((Collection<? extends Stage>)newValue);
        return;
      case PipelinePackage.PIPELINE__JOBS:
        getJobs().clear();
        getJobs().addAll((Collection<? extends Job>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION:
        setPipelineConfiguration((Configurations)null);
        return;
      case PipelinePackage.PIPELINE__TRIGGERS:
        getTriggers().clear();
        return;
      case PipelinePackage.PIPELINE__JOB_OR_STAGE_VAR:
        setJobOrStageVar(JOB_OR_STAGE_VAR_EDEFAULT);
        return;
      case PipelinePackage.PIPELINE__STAGES:
        getStages().clear();
        return;
      case PipelinePackage.PIPELINE__JOBS:
        getJobs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.PIPELINE__PIPELINE_CONFIGURATION:
        return pipelineConfiguration != null;
      case PipelinePackage.PIPELINE__TRIGGERS:
        return triggers != null && !triggers.isEmpty();
      case PipelinePackage.PIPELINE__JOB_OR_STAGE_VAR:
        return JOB_OR_STAGE_VAR_EDEFAULT == null ? jobOrStageVar != null : !JOB_OR_STAGE_VAR_EDEFAULT.equals(jobOrStageVar);
      case PipelinePackage.PIPELINE__STAGES:
        return stages != null && !stages.isEmpty();
      case PipelinePackage.PIPELINE__JOBS:
        return jobs != null && !jobs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (jobOrStageVar: ");
    result.append(jobOrStageVar);
    result.append(')');
    return result.toString();
  }

} //PipelineImpl
