/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Branch;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.TriggerSchedule;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Trigger Schedule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.TriggerScheduleImpl#getCronValue <em>Cron Value</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.TriggerScheduleImpl#getDisplayName <em>Display Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.TriggerScheduleImpl#getIncludedBranches <em>Included Branches</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.TriggerScheduleImpl#getExcludedBranches <em>Excluded Branches</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.TriggerScheduleImpl#getBatch <em>Batch</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.TriggerScheduleImpl#getAlways <em>Always</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TriggerScheduleImpl extends MinimalEObjectImpl.Container implements TriggerSchedule
{
  /**
   * The default value of the '{@link #getCronValue() <em>Cron Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCronValue()
   * @generated
   * @ordered
   */
  protected static final String CRON_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCronValue() <em>Cron Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCronValue()
   * @generated
   * @ordered
   */
  protected String cronValue = CRON_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getDisplayName() <em>Display Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayName()
   * @generated
   * @ordered
   */
  protected static final String DISPLAY_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDisplayName() <em>Display Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayName()
   * @generated
   * @ordered
   */
  protected String displayName = DISPLAY_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getIncludedBranches() <em>Included Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> includedBranches;

  /**
   * The cached value of the '{@link #getExcludedBranches() <em>Excluded Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> excludedBranches;

  /**
   * The default value of the '{@link #getBatch() <em>Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch()
   * @generated
   * @ordered
   */
  protected static final String BATCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBatch() <em>Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch()
   * @generated
   * @ordered
   */
  protected String batch = BATCH_EDEFAULT;

  /**
   * The default value of the '{@link #getAlways() <em>Always</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlways()
   * @generated
   * @ordered
   */
  protected static final String ALWAYS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlways() <em>Always</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlways()
   * @generated
   * @ordered
   */
  protected String always = ALWAYS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TriggerScheduleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PipelinePackage.Literals.TRIGGER_SCHEDULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCronValue()
  {
    return cronValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCronValue(String newCronValue)
  {
    String oldCronValue = cronValue;
    cronValue = newCronValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.TRIGGER_SCHEDULE__CRON_VALUE, oldCronValue, cronValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDisplayName()
  {
    return displayName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisplayName(String newDisplayName)
  {
    String oldDisplayName = displayName;
    displayName = newDisplayName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.TRIGGER_SCHEDULE__DISPLAY_NAME, oldDisplayName, displayName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Branch> getIncludedBranches()
  {
    if (includedBranches == null)
    {
      includedBranches = new EObjectContainmentEList<Branch>(Branch.class, this, PipelinePackage.TRIGGER_SCHEDULE__INCLUDED_BRANCHES);
    }
    return includedBranches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Branch> getExcludedBranches()
  {
    if (excludedBranches == null)
    {
      excludedBranches = new EObjectContainmentEList<Branch>(Branch.class, this, PipelinePackage.TRIGGER_SCHEDULE__EXCLUDED_BRANCHES);
    }
    return excludedBranches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBatch()
  {
    return batch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatch(String newBatch)
  {
    String oldBatch = batch;
    batch = newBatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.TRIGGER_SCHEDULE__BATCH, oldBatch, batch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAlways()
  {
    return always;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAlways(String newAlways)
  {
    String oldAlways = always;
    always = newAlways;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.TRIGGER_SCHEDULE__ALWAYS, oldAlways, always));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PipelinePackage.TRIGGER_SCHEDULE__INCLUDED_BRANCHES:
        return ((InternalEList<?>)getIncludedBranches()).basicRemove(otherEnd, msgs);
      case PipelinePackage.TRIGGER_SCHEDULE__EXCLUDED_BRANCHES:
        return ((InternalEList<?>)getExcludedBranches()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PipelinePackage.TRIGGER_SCHEDULE__CRON_VALUE:
        return getCronValue();
      case PipelinePackage.TRIGGER_SCHEDULE__DISPLAY_NAME:
        return getDisplayName();
      case PipelinePackage.TRIGGER_SCHEDULE__INCLUDED_BRANCHES:
        return getIncludedBranches();
      case PipelinePackage.TRIGGER_SCHEDULE__EXCLUDED_BRANCHES:
        return getExcludedBranches();
      case PipelinePackage.TRIGGER_SCHEDULE__BATCH:
        return getBatch();
      case PipelinePackage.TRIGGER_SCHEDULE__ALWAYS:
        return getAlways();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PipelinePackage.TRIGGER_SCHEDULE__CRON_VALUE:
        setCronValue((String)newValue);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__DISPLAY_NAME:
        setDisplayName((String)newValue);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__INCLUDED_BRANCHES:
        getIncludedBranches().clear();
        getIncludedBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__EXCLUDED_BRANCHES:
        getExcludedBranches().clear();
        getExcludedBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__BATCH:
        setBatch((String)newValue);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__ALWAYS:
        setAlways((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.TRIGGER_SCHEDULE__CRON_VALUE:
        setCronValue(CRON_VALUE_EDEFAULT);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__DISPLAY_NAME:
        setDisplayName(DISPLAY_NAME_EDEFAULT);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__INCLUDED_BRANCHES:
        getIncludedBranches().clear();
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__EXCLUDED_BRANCHES:
        getExcludedBranches().clear();
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__BATCH:
        setBatch(BATCH_EDEFAULT);
        return;
      case PipelinePackage.TRIGGER_SCHEDULE__ALWAYS:
        setAlways(ALWAYS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.TRIGGER_SCHEDULE__CRON_VALUE:
        return CRON_VALUE_EDEFAULT == null ? cronValue != null : !CRON_VALUE_EDEFAULT.equals(cronValue);
      case PipelinePackage.TRIGGER_SCHEDULE__DISPLAY_NAME:
        return DISPLAY_NAME_EDEFAULT == null ? displayName != null : !DISPLAY_NAME_EDEFAULT.equals(displayName);
      case PipelinePackage.TRIGGER_SCHEDULE__INCLUDED_BRANCHES:
        return includedBranches != null && !includedBranches.isEmpty();
      case PipelinePackage.TRIGGER_SCHEDULE__EXCLUDED_BRANCHES:
        return excludedBranches != null && !excludedBranches.isEmpty();
      case PipelinePackage.TRIGGER_SCHEDULE__BATCH:
        return BATCH_EDEFAULT == null ? batch != null : !BATCH_EDEFAULT.equals(batch);
      case PipelinePackage.TRIGGER_SCHEDULE__ALWAYS:
        return ALWAYS_EDEFAULT == null ? always != null : !ALWAYS_EDEFAULT.equals(always);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (cronValue: ");
    result.append(cronValue);
    result.append(", displayName: ");
    result.append(displayName);
    result.append(", batch: ");
    result.append(batch);
    result.append(", always: ");
    result.append(always);
    result.append(')');
    return result.toString();
  }

} //TriggerScheduleImpl
