/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Job;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.Stage;
import ca.mcgill.devops.pipeline.pipeline.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Stage</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getDisplayName <em>Display Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getPoolValue <em>Pool Value</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getVmName <em>Vm Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getVmImage <em>Vm Image</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getVmDemands <em>Vm Demands</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getConditionValue <em>Condition Value</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getIsSkippable <em>Is Skippable</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getStageVariables <em>Stage Variables</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getDependsOn <em>Depends On</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.StageImpl#getJobs <em>Jobs</em>}</li>
 * </ul>
 *
 * @generated
 */
public class StageImpl extends MinimalEObjectImpl.Container implements Stage
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDisplayName() <em>Display Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayName()
   * @generated
   * @ordered
   */
  protected static final String DISPLAY_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDisplayName() <em>Display Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayName()
   * @generated
   * @ordered
   */
  protected String displayName = DISPLAY_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getPoolValue() <em>Pool Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoolValue()
   * @generated
   * @ordered
   */
  protected static final String POOL_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPoolValue() <em>Pool Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPoolValue()
   * @generated
   * @ordered
   */
  protected String poolValue = POOL_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getVmName() <em>Vm Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmName()
   * @generated
   * @ordered
   */
  protected static final String VM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVmName() <em>Vm Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmName()
   * @generated
   * @ordered
   */
  protected String vmName = VM_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getVmImage() <em>Vm Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmImage()
   * @generated
   * @ordered
   */
  protected static final String VM_IMAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVmImage() <em>Vm Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmImage()
   * @generated
   * @ordered
   */
  protected String vmImage = VM_IMAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getVmDemands() <em>Vm Demands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmDemands()
   * @generated
   * @ordered
   */
  protected static final String VM_DEMANDS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVmDemands() <em>Vm Demands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmDemands()
   * @generated
   * @ordered
   */
  protected String vmDemands = VM_DEMANDS_EDEFAULT;

  /**
   * The default value of the '{@link #getConditionValue() <em>Condition Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionValue()
   * @generated
   * @ordered
   */
  protected static final String CONDITION_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConditionValue() <em>Condition Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionValue()
   * @generated
   * @ordered
   */
  protected String conditionValue = CONDITION_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getIsSkippable() <em>Is Skippable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsSkippable()
   * @generated
   * @ordered
   */
  protected static final String IS_SKIPPABLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIsSkippable() <em>Is Skippable</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIsSkippable()
   * @generated
   * @ordered
   */
  protected String isSkippable = IS_SKIPPABLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getStageVariables() <em>Stage Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStageVariables()
   * @generated
   * @ordered
   */
  protected EList<Variable> stageVariables;

  /**
   * The cached value of the '{@link #getDependsOn() <em>Depends On</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDependsOn()
   * @generated
   * @ordered
   */
  protected EList<Stage> dependsOn;

  /**
   * The cached value of the '{@link #getJobs() <em>Jobs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJobs()
   * @generated
   * @ordered
   */
  protected EList<Job> jobs;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StageImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PipelinePackage.Literals.STAGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDisplayName()
  {
    return displayName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisplayName(String newDisplayName)
  {
    String oldDisplayName = displayName;
    displayName = newDisplayName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__DISPLAY_NAME, oldDisplayName, displayName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getPoolValue()
  {
    return poolValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPoolValue(String newPoolValue)
  {
    String oldPoolValue = poolValue;
    poolValue = newPoolValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__POOL_VALUE, oldPoolValue, poolValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVmName()
  {
    return vmName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVmName(String newVmName)
  {
    String oldVmName = vmName;
    vmName = newVmName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__VM_NAME, oldVmName, vmName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVmImage()
  {
    return vmImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVmImage(String newVmImage)
  {
    String oldVmImage = vmImage;
    vmImage = newVmImage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__VM_IMAGE, oldVmImage, vmImage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVmDemands()
  {
    return vmDemands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVmDemands(String newVmDemands)
  {
    String oldVmDemands = vmDemands;
    vmDemands = newVmDemands;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__VM_DEMANDS, oldVmDemands, vmDemands));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConditionValue()
  {
    return conditionValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionValue(String newConditionValue)
  {
    String oldConditionValue = conditionValue;
    conditionValue = newConditionValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__CONDITION_VALUE, oldConditionValue, conditionValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIsSkippable()
  {
    return isSkippable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIsSkippable(String newIsSkippable)
  {
    String oldIsSkippable = isSkippable;
    isSkippable = newIsSkippable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.STAGE__IS_SKIPPABLE, oldIsSkippable, isSkippable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Variable> getStageVariables()
  {
    if (stageVariables == null)
    {
      stageVariables = new EObjectContainmentEList<Variable>(Variable.class, this, PipelinePackage.STAGE__STAGE_VARIABLES);
    }
    return stageVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Stage> getDependsOn()
  {
    if (dependsOn == null)
    {
      dependsOn = new EObjectResolvingEList<Stage>(Stage.class, this, PipelinePackage.STAGE__DEPENDS_ON);
    }
    return dependsOn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Job> getJobs()
  {
    if (jobs == null)
    {
      jobs = new EObjectContainmentEList<Job>(Job.class, this, PipelinePackage.STAGE__JOBS);
    }
    return jobs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PipelinePackage.STAGE__STAGE_VARIABLES:
        return ((InternalEList<?>)getStageVariables()).basicRemove(otherEnd, msgs);
      case PipelinePackage.STAGE__JOBS:
        return ((InternalEList<?>)getJobs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PipelinePackage.STAGE__NAME:
        return getName();
      case PipelinePackage.STAGE__DISPLAY_NAME:
        return getDisplayName();
      case PipelinePackage.STAGE__POOL_VALUE:
        return getPoolValue();
      case PipelinePackage.STAGE__VM_NAME:
        return getVmName();
      case PipelinePackage.STAGE__VM_IMAGE:
        return getVmImage();
      case PipelinePackage.STAGE__VM_DEMANDS:
        return getVmDemands();
      case PipelinePackage.STAGE__CONDITION_VALUE:
        return getConditionValue();
      case PipelinePackage.STAGE__IS_SKIPPABLE:
        return getIsSkippable();
      case PipelinePackage.STAGE__STAGE_VARIABLES:
        return getStageVariables();
      case PipelinePackage.STAGE__DEPENDS_ON:
        return getDependsOn();
      case PipelinePackage.STAGE__JOBS:
        return getJobs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PipelinePackage.STAGE__NAME:
        setName((String)newValue);
        return;
      case PipelinePackage.STAGE__DISPLAY_NAME:
        setDisplayName((String)newValue);
        return;
      case PipelinePackage.STAGE__POOL_VALUE:
        setPoolValue((String)newValue);
        return;
      case PipelinePackage.STAGE__VM_NAME:
        setVmName((String)newValue);
        return;
      case PipelinePackage.STAGE__VM_IMAGE:
        setVmImage((String)newValue);
        return;
      case PipelinePackage.STAGE__VM_DEMANDS:
        setVmDemands((String)newValue);
        return;
      case PipelinePackage.STAGE__CONDITION_VALUE:
        setConditionValue((String)newValue);
        return;
      case PipelinePackage.STAGE__IS_SKIPPABLE:
        setIsSkippable((String)newValue);
        return;
      case PipelinePackage.STAGE__STAGE_VARIABLES:
        getStageVariables().clear();
        getStageVariables().addAll((Collection<? extends Variable>)newValue);
        return;
      case PipelinePackage.STAGE__DEPENDS_ON:
        getDependsOn().clear();
        getDependsOn().addAll((Collection<? extends Stage>)newValue);
        return;
      case PipelinePackage.STAGE__JOBS:
        getJobs().clear();
        getJobs().addAll((Collection<? extends Job>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.STAGE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PipelinePackage.STAGE__DISPLAY_NAME:
        setDisplayName(DISPLAY_NAME_EDEFAULT);
        return;
      case PipelinePackage.STAGE__POOL_VALUE:
        setPoolValue(POOL_VALUE_EDEFAULT);
        return;
      case PipelinePackage.STAGE__VM_NAME:
        setVmName(VM_NAME_EDEFAULT);
        return;
      case PipelinePackage.STAGE__VM_IMAGE:
        setVmImage(VM_IMAGE_EDEFAULT);
        return;
      case PipelinePackage.STAGE__VM_DEMANDS:
        setVmDemands(VM_DEMANDS_EDEFAULT);
        return;
      case PipelinePackage.STAGE__CONDITION_VALUE:
        setConditionValue(CONDITION_VALUE_EDEFAULT);
        return;
      case PipelinePackage.STAGE__IS_SKIPPABLE:
        setIsSkippable(IS_SKIPPABLE_EDEFAULT);
        return;
      case PipelinePackage.STAGE__STAGE_VARIABLES:
        getStageVariables().clear();
        return;
      case PipelinePackage.STAGE__DEPENDS_ON:
        getDependsOn().clear();
        return;
      case PipelinePackage.STAGE__JOBS:
        getJobs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.STAGE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PipelinePackage.STAGE__DISPLAY_NAME:
        return DISPLAY_NAME_EDEFAULT == null ? displayName != null : !DISPLAY_NAME_EDEFAULT.equals(displayName);
      case PipelinePackage.STAGE__POOL_VALUE:
        return POOL_VALUE_EDEFAULT == null ? poolValue != null : !POOL_VALUE_EDEFAULT.equals(poolValue);
      case PipelinePackage.STAGE__VM_NAME:
        return VM_NAME_EDEFAULT == null ? vmName != null : !VM_NAME_EDEFAULT.equals(vmName);
      case PipelinePackage.STAGE__VM_IMAGE:
        return VM_IMAGE_EDEFAULT == null ? vmImage != null : !VM_IMAGE_EDEFAULT.equals(vmImage);
      case PipelinePackage.STAGE__VM_DEMANDS:
        return VM_DEMANDS_EDEFAULT == null ? vmDemands != null : !VM_DEMANDS_EDEFAULT.equals(vmDemands);
      case PipelinePackage.STAGE__CONDITION_VALUE:
        return CONDITION_VALUE_EDEFAULT == null ? conditionValue != null : !CONDITION_VALUE_EDEFAULT.equals(conditionValue);
      case PipelinePackage.STAGE__IS_SKIPPABLE:
        return IS_SKIPPABLE_EDEFAULT == null ? isSkippable != null : !IS_SKIPPABLE_EDEFAULT.equals(isSkippable);
      case PipelinePackage.STAGE__STAGE_VARIABLES:
        return stageVariables != null && !stageVariables.isEmpty();
      case PipelinePackage.STAGE__DEPENDS_ON:
        return dependsOn != null && !dependsOn.isEmpty();
      case PipelinePackage.STAGE__JOBS:
        return jobs != null && !jobs.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", displayName: ");
    result.append(displayName);
    result.append(", poolValue: ");
    result.append(poolValue);
    result.append(", vmName: ");
    result.append(vmName);
    result.append(", vmImage: ");
    result.append(vmImage);
    result.append(", vmDemands: ");
    result.append(vmDemands);
    result.append(", conditionValue: ");
    result.append(conditionValue);
    result.append(", isSkippable: ");
    result.append(isSkippable);
    result.append(')');
    return result.toString();
  }

} //StageImpl
