/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Activity;
import ca.mcgill.devops.pipeline.pipeline.Branch;
import ca.mcgill.devops.pipeline.pipeline.Event;
import ca.mcgill.devops.pipeline.pipeline.ParameterValue;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.TriggerSchedule;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getIncludedBranches <em>Included Branches</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getActivities <em>Activities</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getBatch <em>Batch</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getAutoCancel <em>Auto Cancel</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getDrafts <em>Drafts</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getExcludedBranches <em>Excluded Branches</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getIncludedPaths <em>Included Paths</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getExcludedPaths <em>Excluded Paths</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getIncludedTags <em>Included Tags</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getExcludedTags <em>Excluded Tags</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getTriggerSchedules <em>Trigger Schedules</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getOtherEventParameterValues <em>Other Event Parameter Values</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventImpl extends MinimalEObjectImpl.Container implements Event
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getIncludedBranches() <em>Included Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> includedBranches;

  /**
   * The cached value of the '{@link #getActivities() <em>Activities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivities()
   * @generated
   * @ordered
   */
  protected EList<Activity> activities;

  /**
   * The default value of the '{@link #getBatch() <em>Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch()
   * @generated
   * @ordered
   */
  protected static final String BATCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBatch() <em>Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch()
   * @generated
   * @ordered
   */
  protected String batch = BATCH_EDEFAULT;

  /**
   * The default value of the '{@link #getAutoCancel() <em>Auto Cancel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutoCancel()
   * @generated
   * @ordered
   */
  protected static final String AUTO_CANCEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAutoCancel() <em>Auto Cancel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutoCancel()
   * @generated
   * @ordered
   */
  protected String autoCancel = AUTO_CANCEL_EDEFAULT;

  /**
   * The default value of the '{@link #getDrafts() <em>Drafts</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrafts()
   * @generated
   * @ordered
   */
  protected static final String DRAFTS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDrafts() <em>Drafts</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrafts()
   * @generated
   * @ordered
   */
  protected String drafts = DRAFTS_EDEFAULT;

  /**
   * The cached value of the '{@link #getExcludedBranches() <em>Excluded Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> excludedBranches;

  /**
   * The cached value of the '{@link #getIncludedPaths() <em>Included Paths</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedPaths()
   * @generated
   * @ordered
   */
  protected EList<String> includedPaths;

  /**
   * The cached value of the '{@link #getExcludedPaths() <em>Excluded Paths</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedPaths()
   * @generated
   * @ordered
   */
  protected EList<String> excludedPaths;

  /**
   * The cached value of the '{@link #getIncludedTags() <em>Included Tags</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedTags()
   * @generated
   * @ordered
   */
  protected EList<String> includedTags;

  /**
   * The cached value of the '{@link #getExcludedTags() <em>Excluded Tags</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedTags()
   * @generated
   * @ordered
   */
  protected EList<String> excludedTags;

  /**
   * The cached value of the '{@link #getTriggerSchedules() <em>Trigger Schedules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggerSchedules()
   * @generated
   * @ordered
   */
  protected EList<TriggerSchedule> triggerSchedules;

  /**
   * The cached value of the '{@link #getOtherEventParameterValues() <em>Other Event Parameter Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOtherEventParameterValues()
   * @generated
   * @ordered
   */
  protected EList<ParameterValue> otherEventParameterValues;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PipelinePackage.Literals.EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Branch> getIncludedBranches()
  {
    if (includedBranches == null)
    {
      includedBranches = new EObjectContainmentEList<Branch>(Branch.class, this, PipelinePackage.EVENT__INCLUDED_BRANCHES);
    }
    return includedBranches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Activity> getActivities()
  {
    if (activities == null)
    {
      activities = new EObjectContainmentEList<Activity>(Activity.class, this, PipelinePackage.EVENT__ACTIVITIES);
    }
    return activities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBatch()
  {
    return batch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatch(String newBatch)
  {
    String oldBatch = batch;
    batch = newBatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__BATCH, oldBatch, batch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAutoCancel()
  {
    return autoCancel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAutoCancel(String newAutoCancel)
  {
    String oldAutoCancel = autoCancel;
    autoCancel = newAutoCancel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__AUTO_CANCEL, oldAutoCancel, autoCancel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDrafts()
  {
    return drafts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDrafts(String newDrafts)
  {
    String oldDrafts = drafts;
    drafts = newDrafts;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__DRAFTS, oldDrafts, drafts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Branch> getExcludedBranches()
  {
    if (excludedBranches == null)
    {
      excludedBranches = new EObjectContainmentEList<Branch>(Branch.class, this, PipelinePackage.EVENT__EXCLUDED_BRANCHES);
    }
    return excludedBranches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getIncludedPaths()
  {
    if (includedPaths == null)
    {
      includedPaths = new EDataTypeEList<String>(String.class, this, PipelinePackage.EVENT__INCLUDED_PATHS);
    }
    return includedPaths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getExcludedPaths()
  {
    if (excludedPaths == null)
    {
      excludedPaths = new EDataTypeEList<String>(String.class, this, PipelinePackage.EVENT__EXCLUDED_PATHS);
    }
    return excludedPaths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getIncludedTags()
  {
    if (includedTags == null)
    {
      includedTags = new EDataTypeEList<String>(String.class, this, PipelinePackage.EVENT__INCLUDED_TAGS);
    }
    return includedTags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getExcludedTags()
  {
    if (excludedTags == null)
    {
      excludedTags = new EDataTypeEList<String>(String.class, this, PipelinePackage.EVENT__EXCLUDED_TAGS);
    }
    return excludedTags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TriggerSchedule> getTriggerSchedules()
  {
    if (triggerSchedules == null)
    {
      triggerSchedules = new EObjectContainmentEList<TriggerSchedule>(TriggerSchedule.class, this, PipelinePackage.EVENT__TRIGGER_SCHEDULES);
    }
    return triggerSchedules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParameterValue> getOtherEventParameterValues()
  {
    if (otherEventParameterValues == null)
    {
      otherEventParameterValues = new EObjectContainmentEList<ParameterValue>(ParameterValue.class, this, PipelinePackage.EVENT__OTHER_EVENT_PARAMETER_VALUES);
    }
    return otherEventParameterValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        return ((InternalEList<?>)getIncludedBranches()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__ACTIVITIES:
        return ((InternalEList<?>)getActivities()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        return ((InternalEList<?>)getExcludedBranches()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        return ((InternalEList<?>)getTriggerSchedules()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__OTHER_EVENT_PARAMETER_VALUES:
        return ((InternalEList<?>)getOtherEventParameterValues()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        return getName();
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        return getIncludedBranches();
      case PipelinePackage.EVENT__ACTIVITIES:
        return getActivities();
      case PipelinePackage.EVENT__BATCH:
        return getBatch();
      case PipelinePackage.EVENT__AUTO_CANCEL:
        return getAutoCancel();
      case PipelinePackage.EVENT__DRAFTS:
        return getDrafts();
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        return getExcludedBranches();
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        return getIncludedPaths();
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        return getExcludedPaths();
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        return getIncludedTags();
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        return getExcludedTags();
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        return getTriggerSchedules();
      case PipelinePackage.EVENT__OTHER_EVENT_PARAMETER_VALUES:
        return getOtherEventParameterValues();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        setName((String)newValue);
        return;
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        getIncludedBranches().clear();
        getIncludedBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case PipelinePackage.EVENT__ACTIVITIES:
        getActivities().clear();
        getActivities().addAll((Collection<? extends Activity>)newValue);
        return;
      case PipelinePackage.EVENT__BATCH:
        setBatch((String)newValue);
        return;
      case PipelinePackage.EVENT__AUTO_CANCEL:
        setAutoCancel((String)newValue);
        return;
      case PipelinePackage.EVENT__DRAFTS:
        setDrafts((String)newValue);
        return;
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        getExcludedBranches().clear();
        getExcludedBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        getIncludedPaths().clear();
        getIncludedPaths().addAll((Collection<? extends String>)newValue);
        return;
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        getExcludedPaths().clear();
        getExcludedPaths().addAll((Collection<? extends String>)newValue);
        return;
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        getIncludedTags().clear();
        getIncludedTags().addAll((Collection<? extends String>)newValue);
        return;
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        getExcludedTags().clear();
        getExcludedTags().addAll((Collection<? extends String>)newValue);
        return;
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        getTriggerSchedules().clear();
        getTriggerSchedules().addAll((Collection<? extends TriggerSchedule>)newValue);
        return;
      case PipelinePackage.EVENT__OTHER_EVENT_PARAMETER_VALUES:
        getOtherEventParameterValues().clear();
        getOtherEventParameterValues().addAll((Collection<? extends ParameterValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        getIncludedBranches().clear();
        return;
      case PipelinePackage.EVENT__ACTIVITIES:
        getActivities().clear();
        return;
      case PipelinePackage.EVENT__BATCH:
        setBatch(BATCH_EDEFAULT);
        return;
      case PipelinePackage.EVENT__AUTO_CANCEL:
        setAutoCancel(AUTO_CANCEL_EDEFAULT);
        return;
      case PipelinePackage.EVENT__DRAFTS:
        setDrafts(DRAFTS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        getExcludedBranches().clear();
        return;
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        getIncludedPaths().clear();
        return;
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        getExcludedPaths().clear();
        return;
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        getIncludedTags().clear();
        return;
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        getExcludedTags().clear();
        return;
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        getTriggerSchedules().clear();
        return;
      case PipelinePackage.EVENT__OTHER_EVENT_PARAMETER_VALUES:
        getOtherEventParameterValues().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        return includedBranches != null && !includedBranches.isEmpty();
      case PipelinePackage.EVENT__ACTIVITIES:
        return activities != null && !activities.isEmpty();
      case PipelinePackage.EVENT__BATCH:
        return BATCH_EDEFAULT == null ? batch != null : !BATCH_EDEFAULT.equals(batch);
      case PipelinePackage.EVENT__AUTO_CANCEL:
        return AUTO_CANCEL_EDEFAULT == null ? autoCancel != null : !AUTO_CANCEL_EDEFAULT.equals(autoCancel);
      case PipelinePackage.EVENT__DRAFTS:
        return DRAFTS_EDEFAULT == null ? drafts != null : !DRAFTS_EDEFAULT.equals(drafts);
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        return excludedBranches != null && !excludedBranches.isEmpty();
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        return includedPaths != null && !includedPaths.isEmpty();
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        return excludedPaths != null && !excludedPaths.isEmpty();
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        return includedTags != null && !includedTags.isEmpty();
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        return excludedTags != null && !excludedTags.isEmpty();
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        return triggerSchedules != null && !triggerSchedules.isEmpty();
      case PipelinePackage.EVENT__OTHER_EVENT_PARAMETER_VALUES:
        return otherEventParameterValues != null && !otherEventParameterValues.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", batch: ");
    result.append(batch);
    result.append(", autoCancel: ");
    result.append(autoCancel);
    result.append(", drafts: ");
    result.append(drafts);
    result.append(", includedPaths: ");
    result.append(includedPaths);
    result.append(", excludedPaths: ");
    result.append(excludedPaths);
    result.append(", includedTags: ");
    result.append(includedTags);
    result.append(", excludedTags: ");
    result.append(excludedTags);
    result.append(')');
    return result.toString();
  }

} //EventImpl
