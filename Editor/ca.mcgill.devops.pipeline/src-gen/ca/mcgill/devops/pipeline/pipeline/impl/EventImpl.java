/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Activity;
import ca.mcgill.devops.pipeline.pipeline.Branch;
import ca.mcgill.devops.pipeline.pipeline.Event;
import ca.mcgill.devops.pipeline.pipeline.PipelineEventKeyword;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.TriggerSchedule;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getSimpleEvent <em>Simple Event</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getIncludedBranches <em>Included Branches</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getActivities <em>Activities</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getBatch <em>Batch</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getAutoCancel <em>Auto Cancel</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getWorkflows <em>Workflows</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getDrafts <em>Drafts</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getExcludedBranches <em>Excluded Branches</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getIncludedPaths <em>Included Paths</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getExcludedPaths <em>Excluded Paths</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getIncludedTags <em>Included Tags</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getExcludedTags <em>Excluded Tags</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getScheduleNameKW <em>Schedule Name KW</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getTriggerSchedules <em>Trigger Schedules</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getWorkflowTypeKW <em>Workflow Type KW</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.EventImpl#getWorkFlowActivities <em>Work Flow Activities</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EventImpl extends MinimalEObjectImpl.Container implements Event
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final PipelineEventKeyword NAME_EDEFAULT = PipelineEventKeyword.PPL_EVT_PUSH;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected PipelineEventKeyword name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getSimpleEvent() <em>Simple Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleEvent()
   * @generated
   * @ordered
   */
  protected static final String SIMPLE_EVENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSimpleEvent() <em>Simple Event</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleEvent()
   * @generated
   * @ordered
   */
  protected String simpleEvent = SIMPLE_EVENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getIncludedBranches() <em>Included Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> includedBranches;

  /**
   * The cached value of the '{@link #getActivities() <em>Activities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getActivities()
   * @generated
   * @ordered
   */
  protected EList<Activity> activities;

  /**
   * The default value of the '{@link #getBatch() <em>Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch()
   * @generated
   * @ordered
   */
  protected static final String BATCH_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBatch() <em>Batch</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBatch()
   * @generated
   * @ordered
   */
  protected String batch = BATCH_EDEFAULT;

  /**
   * The default value of the '{@link #getAutoCancel() <em>Auto Cancel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutoCancel()
   * @generated
   * @ordered
   */
  protected static final String AUTO_CANCEL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAutoCancel() <em>Auto Cancel</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAutoCancel()
   * @generated
   * @ordered
   */
  protected String autoCancel = AUTO_CANCEL_EDEFAULT;

  /**
   * The default value of the '{@link #getWorkflows() <em>Workflows</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkflows()
   * @generated
   * @ordered
   */
  protected static final String WORKFLOWS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWorkflows() <em>Workflows</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkflows()
   * @generated
   * @ordered
   */
  protected String workflows = WORKFLOWS_EDEFAULT;

  /**
   * The default value of the '{@link #getDrafts() <em>Drafts</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrafts()
   * @generated
   * @ordered
   */
  protected static final String DRAFTS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDrafts() <em>Drafts</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDrafts()
   * @generated
   * @ordered
   */
  protected String drafts = DRAFTS_EDEFAULT;

  /**
   * The cached value of the '{@link #getExcludedBranches() <em>Excluded Branches</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedBranches()
   * @generated
   * @ordered
   */
  protected EList<Branch> excludedBranches;

  /**
   * The default value of the '{@link #getIncludedPaths() <em>Included Paths</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedPaths()
   * @generated
   * @ordered
   */
  protected static final String INCLUDED_PATHS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIncludedPaths() <em>Included Paths</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedPaths()
   * @generated
   * @ordered
   */
  protected String includedPaths = INCLUDED_PATHS_EDEFAULT;

  /**
   * The default value of the '{@link #getExcludedPaths() <em>Excluded Paths</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedPaths()
   * @generated
   * @ordered
   */
  protected static final String EXCLUDED_PATHS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExcludedPaths() <em>Excluded Paths</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedPaths()
   * @generated
   * @ordered
   */
  protected String excludedPaths = EXCLUDED_PATHS_EDEFAULT;

  /**
   * The default value of the '{@link #getIncludedTags() <em>Included Tags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedTags()
   * @generated
   * @ordered
   */
  protected static final String INCLUDED_TAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIncludedTags() <em>Included Tags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIncludedTags()
   * @generated
   * @ordered
   */
  protected String includedTags = INCLUDED_TAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getExcludedTags() <em>Excluded Tags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedTags()
   * @generated
   * @ordered
   */
  protected static final String EXCLUDED_TAGS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExcludedTags() <em>Excluded Tags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludedTags()
   * @generated
   * @ordered
   */
  protected String excludedTags = EXCLUDED_TAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getScheduleNameKW() <em>Schedule Name KW</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduleNameKW()
   * @generated
   * @ordered
   */
  protected static final String SCHEDULE_NAME_KW_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getScheduleNameKW() <em>Schedule Name KW</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScheduleNameKW()
   * @generated
   * @ordered
   */
  protected String scheduleNameKW = SCHEDULE_NAME_KW_EDEFAULT;

  /**
   * The cached value of the '{@link #getTriggerSchedules() <em>Trigger Schedules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggerSchedules()
   * @generated
   * @ordered
   */
  protected EList<TriggerSchedule> triggerSchedules;

  /**
   * The default value of the '{@link #getWorkflowTypeKW() <em>Workflow Type KW</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkflowTypeKW()
   * @generated
   * @ordered
   */
  protected static final String WORKFLOW_TYPE_KW_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getWorkflowTypeKW() <em>Workflow Type KW</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkflowTypeKW()
   * @generated
   * @ordered
   */
  protected String workflowTypeKW = WORKFLOW_TYPE_KW_EDEFAULT;

  /**
   * The cached value of the '{@link #getWorkFlowActivities() <em>Work Flow Activities</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWorkFlowActivities()
   * @generated
   * @ordered
   */
  protected EList<Activity> workFlowActivities;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PipelinePackage.Literals.EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PipelineEventKeyword getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(PipelineEventKeyword newName)
  {
    PipelineEventKeyword oldName = name;
    name = newName == null ? NAME_EDEFAULT : newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSimpleEvent()
  {
    return simpleEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSimpleEvent(String newSimpleEvent)
  {
    String oldSimpleEvent = simpleEvent;
    simpleEvent = newSimpleEvent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__SIMPLE_EVENT, oldSimpleEvent, simpleEvent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Branch> getIncludedBranches()
  {
    if (includedBranches == null)
    {
      includedBranches = new EObjectContainmentEList<Branch>(Branch.class, this, PipelinePackage.EVENT__INCLUDED_BRANCHES);
    }
    return includedBranches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Activity> getActivities()
  {
    if (activities == null)
    {
      activities = new EObjectContainmentEList<Activity>(Activity.class, this, PipelinePackage.EVENT__ACTIVITIES);
    }
    return activities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBatch()
  {
    return batch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBatch(String newBatch)
  {
    String oldBatch = batch;
    batch = newBatch;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__BATCH, oldBatch, batch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAutoCancel()
  {
    return autoCancel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAutoCancel(String newAutoCancel)
  {
    String oldAutoCancel = autoCancel;
    autoCancel = newAutoCancel;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__AUTO_CANCEL, oldAutoCancel, autoCancel));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWorkflows()
  {
    return workflows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorkflows(String newWorkflows)
  {
    String oldWorkflows = workflows;
    workflows = newWorkflows;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__WORKFLOWS, oldWorkflows, workflows));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDrafts()
  {
    return drafts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDrafts(String newDrafts)
  {
    String oldDrafts = drafts;
    drafts = newDrafts;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__DRAFTS, oldDrafts, drafts));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Branch> getExcludedBranches()
  {
    if (excludedBranches == null)
    {
      excludedBranches = new EObjectContainmentEList<Branch>(Branch.class, this, PipelinePackage.EVENT__EXCLUDED_BRANCHES);
    }
    return excludedBranches;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIncludedPaths()
  {
    return includedPaths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncludedPaths(String newIncludedPaths)
  {
    String oldIncludedPaths = includedPaths;
    includedPaths = newIncludedPaths;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__INCLUDED_PATHS, oldIncludedPaths, includedPaths));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExcludedPaths()
  {
    return excludedPaths;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExcludedPaths(String newExcludedPaths)
  {
    String oldExcludedPaths = excludedPaths;
    excludedPaths = newExcludedPaths;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__EXCLUDED_PATHS, oldExcludedPaths, excludedPaths));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIncludedTags()
  {
    return includedTags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIncludedTags(String newIncludedTags)
  {
    String oldIncludedTags = includedTags;
    includedTags = newIncludedTags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__INCLUDED_TAGS, oldIncludedTags, includedTags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExcludedTags()
  {
    return excludedTags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExcludedTags(String newExcludedTags)
  {
    String oldExcludedTags = excludedTags;
    excludedTags = newExcludedTags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__EXCLUDED_TAGS, oldExcludedTags, excludedTags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getScheduleNameKW()
  {
    return scheduleNameKW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setScheduleNameKW(String newScheduleNameKW)
  {
    String oldScheduleNameKW = scheduleNameKW;
    scheduleNameKW = newScheduleNameKW;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__SCHEDULE_NAME_KW, oldScheduleNameKW, scheduleNameKW));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TriggerSchedule> getTriggerSchedules()
  {
    if (triggerSchedules == null)
    {
      triggerSchedules = new EObjectContainmentEList<TriggerSchedule>(TriggerSchedule.class, this, PipelinePackage.EVENT__TRIGGER_SCHEDULES);
    }
    return triggerSchedules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getWorkflowTypeKW()
  {
    return workflowTypeKW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWorkflowTypeKW(String newWorkflowTypeKW)
  {
    String oldWorkflowTypeKW = workflowTypeKW;
    workflowTypeKW = newWorkflowTypeKW;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.EVENT__WORKFLOW_TYPE_KW, oldWorkflowTypeKW, workflowTypeKW));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Activity> getWorkFlowActivities()
  {
    if (workFlowActivities == null)
    {
      workFlowActivities = new EObjectContainmentEList<Activity>(Activity.class, this, PipelinePackage.EVENT__WORK_FLOW_ACTIVITIES);
    }
    return workFlowActivities;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        return ((InternalEList<?>)getIncludedBranches()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__ACTIVITIES:
        return ((InternalEList<?>)getActivities()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        return ((InternalEList<?>)getExcludedBranches()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        return ((InternalEList<?>)getTriggerSchedules()).basicRemove(otherEnd, msgs);
      case PipelinePackage.EVENT__WORK_FLOW_ACTIVITIES:
        return ((InternalEList<?>)getWorkFlowActivities()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        return getName();
      case PipelinePackage.EVENT__SIMPLE_EVENT:
        return getSimpleEvent();
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        return getIncludedBranches();
      case PipelinePackage.EVENT__ACTIVITIES:
        return getActivities();
      case PipelinePackage.EVENT__BATCH:
        return getBatch();
      case PipelinePackage.EVENT__AUTO_CANCEL:
        return getAutoCancel();
      case PipelinePackage.EVENT__WORKFLOWS:
        return getWorkflows();
      case PipelinePackage.EVENT__DRAFTS:
        return getDrafts();
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        return getExcludedBranches();
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        return getIncludedPaths();
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        return getExcludedPaths();
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        return getIncludedTags();
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        return getExcludedTags();
      case PipelinePackage.EVENT__SCHEDULE_NAME_KW:
        return getScheduleNameKW();
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        return getTriggerSchedules();
      case PipelinePackage.EVENT__WORKFLOW_TYPE_KW:
        return getWorkflowTypeKW();
      case PipelinePackage.EVENT__WORK_FLOW_ACTIVITIES:
        return getWorkFlowActivities();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        setName((PipelineEventKeyword)newValue);
        return;
      case PipelinePackage.EVENT__SIMPLE_EVENT:
        setSimpleEvent((String)newValue);
        return;
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        getIncludedBranches().clear();
        getIncludedBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case PipelinePackage.EVENT__ACTIVITIES:
        getActivities().clear();
        getActivities().addAll((Collection<? extends Activity>)newValue);
        return;
      case PipelinePackage.EVENT__BATCH:
        setBatch((String)newValue);
        return;
      case PipelinePackage.EVENT__AUTO_CANCEL:
        setAutoCancel((String)newValue);
        return;
      case PipelinePackage.EVENT__WORKFLOWS:
        setWorkflows((String)newValue);
        return;
      case PipelinePackage.EVENT__DRAFTS:
        setDrafts((String)newValue);
        return;
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        getExcludedBranches().clear();
        getExcludedBranches().addAll((Collection<? extends Branch>)newValue);
        return;
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        setIncludedPaths((String)newValue);
        return;
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        setExcludedPaths((String)newValue);
        return;
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        setIncludedTags((String)newValue);
        return;
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        setExcludedTags((String)newValue);
        return;
      case PipelinePackage.EVENT__SCHEDULE_NAME_KW:
        setScheduleNameKW((String)newValue);
        return;
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        getTriggerSchedules().clear();
        getTriggerSchedules().addAll((Collection<? extends TriggerSchedule>)newValue);
        return;
      case PipelinePackage.EVENT__WORKFLOW_TYPE_KW:
        setWorkflowTypeKW((String)newValue);
        return;
      case PipelinePackage.EVENT__WORK_FLOW_ACTIVITIES:
        getWorkFlowActivities().clear();
        getWorkFlowActivities().addAll((Collection<? extends Activity>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PipelinePackage.EVENT__SIMPLE_EVENT:
        setSimpleEvent(SIMPLE_EVENT_EDEFAULT);
        return;
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        getIncludedBranches().clear();
        return;
      case PipelinePackage.EVENT__ACTIVITIES:
        getActivities().clear();
        return;
      case PipelinePackage.EVENT__BATCH:
        setBatch(BATCH_EDEFAULT);
        return;
      case PipelinePackage.EVENT__AUTO_CANCEL:
        setAutoCancel(AUTO_CANCEL_EDEFAULT);
        return;
      case PipelinePackage.EVENT__WORKFLOWS:
        setWorkflows(WORKFLOWS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__DRAFTS:
        setDrafts(DRAFTS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        getExcludedBranches().clear();
        return;
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        setIncludedPaths(INCLUDED_PATHS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        setExcludedPaths(EXCLUDED_PATHS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        setIncludedTags(INCLUDED_TAGS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        setExcludedTags(EXCLUDED_TAGS_EDEFAULT);
        return;
      case PipelinePackage.EVENT__SCHEDULE_NAME_KW:
        setScheduleNameKW(SCHEDULE_NAME_KW_EDEFAULT);
        return;
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        getTriggerSchedules().clear();
        return;
      case PipelinePackage.EVENT__WORKFLOW_TYPE_KW:
        setWorkflowTypeKW(WORKFLOW_TYPE_KW_EDEFAULT);
        return;
      case PipelinePackage.EVENT__WORK_FLOW_ACTIVITIES:
        getWorkFlowActivities().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.EVENT__NAME:
        return name != NAME_EDEFAULT;
      case PipelinePackage.EVENT__SIMPLE_EVENT:
        return SIMPLE_EVENT_EDEFAULT == null ? simpleEvent != null : !SIMPLE_EVENT_EDEFAULT.equals(simpleEvent);
      case PipelinePackage.EVENT__INCLUDED_BRANCHES:
        return includedBranches != null && !includedBranches.isEmpty();
      case PipelinePackage.EVENT__ACTIVITIES:
        return activities != null && !activities.isEmpty();
      case PipelinePackage.EVENT__BATCH:
        return BATCH_EDEFAULT == null ? batch != null : !BATCH_EDEFAULT.equals(batch);
      case PipelinePackage.EVENT__AUTO_CANCEL:
        return AUTO_CANCEL_EDEFAULT == null ? autoCancel != null : !AUTO_CANCEL_EDEFAULT.equals(autoCancel);
      case PipelinePackage.EVENT__WORKFLOWS:
        return WORKFLOWS_EDEFAULT == null ? workflows != null : !WORKFLOWS_EDEFAULT.equals(workflows);
      case PipelinePackage.EVENT__DRAFTS:
        return DRAFTS_EDEFAULT == null ? drafts != null : !DRAFTS_EDEFAULT.equals(drafts);
      case PipelinePackage.EVENT__EXCLUDED_BRANCHES:
        return excludedBranches != null && !excludedBranches.isEmpty();
      case PipelinePackage.EVENT__INCLUDED_PATHS:
        return INCLUDED_PATHS_EDEFAULT == null ? includedPaths != null : !INCLUDED_PATHS_EDEFAULT.equals(includedPaths);
      case PipelinePackage.EVENT__EXCLUDED_PATHS:
        return EXCLUDED_PATHS_EDEFAULT == null ? excludedPaths != null : !EXCLUDED_PATHS_EDEFAULT.equals(excludedPaths);
      case PipelinePackage.EVENT__INCLUDED_TAGS:
        return INCLUDED_TAGS_EDEFAULT == null ? includedTags != null : !INCLUDED_TAGS_EDEFAULT.equals(includedTags);
      case PipelinePackage.EVENT__EXCLUDED_TAGS:
        return EXCLUDED_TAGS_EDEFAULT == null ? excludedTags != null : !EXCLUDED_TAGS_EDEFAULT.equals(excludedTags);
      case PipelinePackage.EVENT__SCHEDULE_NAME_KW:
        return SCHEDULE_NAME_KW_EDEFAULT == null ? scheduleNameKW != null : !SCHEDULE_NAME_KW_EDEFAULT.equals(scheduleNameKW);
      case PipelinePackage.EVENT__TRIGGER_SCHEDULES:
        return triggerSchedules != null && !triggerSchedules.isEmpty();
      case PipelinePackage.EVENT__WORKFLOW_TYPE_KW:
        return WORKFLOW_TYPE_KW_EDEFAULT == null ? workflowTypeKW != null : !WORKFLOW_TYPE_KW_EDEFAULT.equals(workflowTypeKW);
      case PipelinePackage.EVENT__WORK_FLOW_ACTIVITIES:
        return workFlowActivities != null && !workFlowActivities.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", simpleEvent: ");
    result.append(simpleEvent);
    result.append(", batch: ");
    result.append(batch);
    result.append(", autoCancel: ");
    result.append(autoCancel);
    result.append(", workflows: ");
    result.append(workflows);
    result.append(", drafts: ");
    result.append(drafts);
    result.append(", includedPaths: ");
    result.append(includedPaths);
    result.append(", excludedPaths: ");
    result.append(excludedPaths);
    result.append(", includedTags: ");
    result.append(includedTags);
    result.append(", excludedTags: ");
    result.append(excludedTags);
    result.append(", scheduleNameKW: ");
    result.append(scheduleNameKW);
    result.append(", workflowTypeKW: ");
    result.append(workflowTypeKW);
    result.append(')');
    return result.toString();
  }

} //EventImpl
