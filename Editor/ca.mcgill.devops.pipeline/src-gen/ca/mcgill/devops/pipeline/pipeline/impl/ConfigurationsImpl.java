/**
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.pipeline.impl;

import ca.mcgill.devops.pipeline.pipeline.Configurations;
import ca.mcgill.devops.pipeline.pipeline.ParameterValue;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.Resource;
import ca.mcgill.devops.pipeline.pipeline.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Configurations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getName <em>Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getRunName <em>Run Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getDefaultShellValue <em>Default Shell Value</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getDefaultWDValue <em>Default WD Value</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getEnv <em>Env</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getAllPermission <em>All Permission</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getIndPermissions <em>Ind Permissions</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getGroup <em>Group</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getCancelConcurrence <em>Cancel Concurrence</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getConcurrency <em>Concurrency</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getVmName <em>Vm Name</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getVmImage <em>Vm Image</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getVmDemands <em>Vm Demands</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getResources <em>Resources</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getPplVariables <em>Ppl Variables</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getParameterValues <em>Parameter Values</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getExtendOrInclude <em>Extend Or Include</em>}</li>
 *   <li>{@link ca.mcgill.devops.pipeline.pipeline.impl.ConfigurationsImpl#getExtendedParameters <em>Extended Parameters</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConfigurationsImpl extends MinimalEObjectImpl.Container implements Configurations
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getRunName() <em>Run Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRunName()
   * @generated
   * @ordered
   */
  protected static final String RUN_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getRunName() <em>Run Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRunName()
   * @generated
   * @ordered
   */
  protected String runName = RUN_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultShellValue() <em>Default Shell Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultShellValue()
   * @generated
   * @ordered
   */
  protected static final String DEFAULT_SHELL_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefaultShellValue() <em>Default Shell Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultShellValue()
   * @generated
   * @ordered
   */
  protected String defaultShellValue = DEFAULT_SHELL_VALUE_EDEFAULT;

  /**
   * The default value of the '{@link #getDefaultWDValue() <em>Default WD Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultWDValue()
   * @generated
   * @ordered
   */
  protected static final String DEFAULT_WD_VALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDefaultWDValue() <em>Default WD Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultWDValue()
   * @generated
   * @ordered
   */
  protected String defaultWDValue = DEFAULT_WD_VALUE_EDEFAULT;

  /**
   * The cached value of the '{@link #getEnv() <em>Env</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnv()
   * @generated
   * @ordered
   */
  protected EList<String> env;

  /**
   * The default value of the '{@link #getAllPermission() <em>All Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllPermission()
   * @generated
   * @ordered
   */
  protected static final String ALL_PERMISSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAllPermission() <em>All Permission</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllPermission()
   * @generated
   * @ordered
   */
  protected String allPermission = ALL_PERMISSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getIndPermissions() <em>Ind Permissions</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIndPermissions()
   * @generated
   * @ordered
   */
  protected EList<String> indPermissions;

  /**
   * The default value of the '{@link #getGroup() <em>Group</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected static final String GROUP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGroup() <em>Group</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroup()
   * @generated
   * @ordered
   */
  protected String group = GROUP_EDEFAULT;

  /**
   * The default value of the '{@link #getCancelConcurrence() <em>Cancel Concurrence</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCancelConcurrence()
   * @generated
   * @ordered
   */
  protected static final String CANCEL_CONCURRENCE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getCancelConcurrence() <em>Cancel Concurrence</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCancelConcurrence()
   * @generated
   * @ordered
   */
  protected String cancelConcurrence = CANCEL_CONCURRENCE_EDEFAULT;

  /**
   * The default value of the '{@link #getConcurrency() <em>Concurrency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcurrency()
   * @generated
   * @ordered
   */
  protected static final String CONCURRENCY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getConcurrency() <em>Concurrency</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcurrency()
   * @generated
   * @ordered
   */
  protected String concurrency = CONCURRENCY_EDEFAULT;

  /**
   * The default value of the '{@link #getVmName() <em>Vm Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmName()
   * @generated
   * @ordered
   */
  protected static final String VM_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVmName() <em>Vm Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmName()
   * @generated
   * @ordered
   */
  protected String vmName = VM_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getVmImage() <em>Vm Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmImage()
   * @generated
   * @ordered
   */
  protected static final String VM_IMAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVmImage() <em>Vm Image</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmImage()
   * @generated
   * @ordered
   */
  protected String vmImage = VM_IMAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getVmDemands() <em>Vm Demands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmDemands()
   * @generated
   * @ordered
   */
  protected static final String VM_DEMANDS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVmDemands() <em>Vm Demands</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVmDemands()
   * @generated
   * @ordered
   */
  protected String vmDemands = VM_DEMANDS_EDEFAULT;

  /**
   * The cached value of the '{@link #getResources() <em>Resources</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResources()
   * @generated
   * @ordered
   */
  protected EList<Resource> resources;

  /**
   * The default value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected static final String VERSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected String version = VERSION_EDEFAULT;

  /**
   * The cached value of the '{@link #getPplVariables() <em>Ppl Variables</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPplVariables()
   * @generated
   * @ordered
   */
  protected EList<Variable> pplVariables;

  /**
   * The cached value of the '{@link #getParameterValues() <em>Parameter Values</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParameterValues()
   * @generated
   * @ordered
   */
  protected EList<ParameterValue> parameterValues;

  /**
   * The default value of the '{@link #getExtendOrInclude() <em>Extend Or Include</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendOrInclude()
   * @generated
   * @ordered
   */
  protected static final String EXTEND_OR_INCLUDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExtendOrInclude() <em>Extend Or Include</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendOrInclude()
   * @generated
   * @ordered
   */
  protected String extendOrInclude = EXTEND_OR_INCLUDE_EDEFAULT;

  /**
   * The cached value of the '{@link #getExtendedParameters() <em>Extended Parameters</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExtendedParameters()
   * @generated
   * @ordered
   */
  protected EList<ParameterValue> extendedParameters;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConfigurationsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PipelinePackage.Literals.CONFIGURATIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getRunName()
  {
    return runName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRunName(String newRunName)
  {
    String oldRunName = runName;
    runName = newRunName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__RUN_NAME, oldRunName, runName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDefaultShellValue()
  {
    return defaultShellValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultShellValue(String newDefaultShellValue)
  {
    String oldDefaultShellValue = defaultShellValue;
    defaultShellValue = newDefaultShellValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__DEFAULT_SHELL_VALUE, oldDefaultShellValue, defaultShellValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDefaultWDValue()
  {
    return defaultWDValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultWDValue(String newDefaultWDValue)
  {
    String oldDefaultWDValue = defaultWDValue;
    defaultWDValue = newDefaultWDValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__DEFAULT_WD_VALUE, oldDefaultWDValue, defaultWDValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getEnv()
  {
    if (env == null)
    {
      env = new EDataTypeEList<String>(String.class, this, PipelinePackage.CONFIGURATIONS__ENV);
    }
    return env;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getAllPermission()
  {
    return allPermission;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAllPermission(String newAllPermission)
  {
    String oldAllPermission = allPermission;
    allPermission = newAllPermission;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__ALL_PERMISSION, oldAllPermission, allPermission));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getIndPermissions()
  {
    if (indPermissions == null)
    {
      indPermissions = new EDataTypeEList<String>(String.class, this, PipelinePackage.CONFIGURATIONS__IND_PERMISSIONS);
    }
    return indPermissions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGroup()
  {
    return group;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGroup(String newGroup)
  {
    String oldGroup = group;
    group = newGroup;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__GROUP, oldGroup, group));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getCancelConcurrence()
  {
    return cancelConcurrence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCancelConcurrence(String newCancelConcurrence)
  {
    String oldCancelConcurrence = cancelConcurrence;
    cancelConcurrence = newCancelConcurrence;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__CANCEL_CONCURRENCE, oldCancelConcurrence, cancelConcurrence));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getConcurrency()
  {
    return concurrency;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcurrency(String newConcurrency)
  {
    String oldConcurrency = concurrency;
    concurrency = newConcurrency;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__CONCURRENCY, oldConcurrency, concurrency));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVmName()
  {
    return vmName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVmName(String newVmName)
  {
    String oldVmName = vmName;
    vmName = newVmName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__VM_NAME, oldVmName, vmName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVmImage()
  {
    return vmImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVmImage(String newVmImage)
  {
    String oldVmImage = vmImage;
    vmImage = newVmImage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__VM_IMAGE, oldVmImage, vmImage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVmDemands()
  {
    return vmDemands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVmDemands(String newVmDemands)
  {
    String oldVmDemands = vmDemands;
    vmDemands = newVmDemands;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__VM_DEMANDS, oldVmDemands, vmDemands));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Resource> getResources()
  {
    if (resources == null)
    {
      resources = new EObjectContainmentEList<Resource>(Resource.class, this, PipelinePackage.CONFIGURATIONS__RESOURCES);
    }
    return resources;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(String newVersion)
  {
    String oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__VERSION, oldVersion, version));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Variable> getPplVariables()
  {
    if (pplVariables == null)
    {
      pplVariables = new EObjectContainmentEList<Variable>(Variable.class, this, PipelinePackage.CONFIGURATIONS__PPL_VARIABLES);
    }
    return pplVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParameterValue> getParameterValues()
  {
    if (parameterValues == null)
    {
      parameterValues = new EObjectContainmentEList<ParameterValue>(ParameterValue.class, this, PipelinePackage.CONFIGURATIONS__PARAMETER_VALUES);
    }
    return parameterValues;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExtendOrInclude()
  {
    return extendOrInclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExtendOrInclude(String newExtendOrInclude)
  {
    String oldExtendOrInclude = extendOrInclude;
    extendOrInclude = newExtendOrInclude;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PipelinePackage.CONFIGURATIONS__EXTEND_OR_INCLUDE, oldExtendOrInclude, extendOrInclude));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ParameterValue> getExtendedParameters()
  {
    if (extendedParameters == null)
    {
      extendedParameters = new EObjectContainmentEList<ParameterValue>(ParameterValue.class, this, PipelinePackage.CONFIGURATIONS__EXTENDED_PARAMETERS);
    }
    return extendedParameters;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PipelinePackage.CONFIGURATIONS__RESOURCES:
        return ((InternalEList<?>)getResources()).basicRemove(otherEnd, msgs);
      case PipelinePackage.CONFIGURATIONS__PPL_VARIABLES:
        return ((InternalEList<?>)getPplVariables()).basicRemove(otherEnd, msgs);
      case PipelinePackage.CONFIGURATIONS__PARAMETER_VALUES:
        return ((InternalEList<?>)getParameterValues()).basicRemove(otherEnd, msgs);
      case PipelinePackage.CONFIGURATIONS__EXTENDED_PARAMETERS:
        return ((InternalEList<?>)getExtendedParameters()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PipelinePackage.CONFIGURATIONS__NAME:
        return getName();
      case PipelinePackage.CONFIGURATIONS__RUN_NAME:
        return getRunName();
      case PipelinePackage.CONFIGURATIONS__DEFAULT_SHELL_VALUE:
        return getDefaultShellValue();
      case PipelinePackage.CONFIGURATIONS__DEFAULT_WD_VALUE:
        return getDefaultWDValue();
      case PipelinePackage.CONFIGURATIONS__ENV:
        return getEnv();
      case PipelinePackage.CONFIGURATIONS__ALL_PERMISSION:
        return getAllPermission();
      case PipelinePackage.CONFIGURATIONS__IND_PERMISSIONS:
        return getIndPermissions();
      case PipelinePackage.CONFIGURATIONS__GROUP:
        return getGroup();
      case PipelinePackage.CONFIGURATIONS__CANCEL_CONCURRENCE:
        return getCancelConcurrence();
      case PipelinePackage.CONFIGURATIONS__CONCURRENCY:
        return getConcurrency();
      case PipelinePackage.CONFIGURATIONS__VM_NAME:
        return getVmName();
      case PipelinePackage.CONFIGURATIONS__VM_IMAGE:
        return getVmImage();
      case PipelinePackage.CONFIGURATIONS__VM_DEMANDS:
        return getVmDemands();
      case PipelinePackage.CONFIGURATIONS__RESOURCES:
        return getResources();
      case PipelinePackage.CONFIGURATIONS__VERSION:
        return getVersion();
      case PipelinePackage.CONFIGURATIONS__PPL_VARIABLES:
        return getPplVariables();
      case PipelinePackage.CONFIGURATIONS__PARAMETER_VALUES:
        return getParameterValues();
      case PipelinePackage.CONFIGURATIONS__EXTEND_OR_INCLUDE:
        return getExtendOrInclude();
      case PipelinePackage.CONFIGURATIONS__EXTENDED_PARAMETERS:
        return getExtendedParameters();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PipelinePackage.CONFIGURATIONS__NAME:
        setName((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__RUN_NAME:
        setRunName((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__DEFAULT_SHELL_VALUE:
        setDefaultShellValue((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__DEFAULT_WD_VALUE:
        setDefaultWDValue((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__ENV:
        getEnv().clear();
        getEnv().addAll((Collection<? extends String>)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__ALL_PERMISSION:
        setAllPermission((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__IND_PERMISSIONS:
        getIndPermissions().clear();
        getIndPermissions().addAll((Collection<? extends String>)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__GROUP:
        setGroup((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__CANCEL_CONCURRENCE:
        setCancelConcurrence((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__CONCURRENCY:
        setConcurrency((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__VM_NAME:
        setVmName((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__VM_IMAGE:
        setVmImage((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__VM_DEMANDS:
        setVmDemands((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__RESOURCES:
        getResources().clear();
        getResources().addAll((Collection<? extends Resource>)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__VERSION:
        setVersion((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__PPL_VARIABLES:
        getPplVariables().clear();
        getPplVariables().addAll((Collection<? extends Variable>)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__PARAMETER_VALUES:
        getParameterValues().clear();
        getParameterValues().addAll((Collection<? extends ParameterValue>)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__EXTEND_OR_INCLUDE:
        setExtendOrInclude((String)newValue);
        return;
      case PipelinePackage.CONFIGURATIONS__EXTENDED_PARAMETERS:
        getExtendedParameters().clear();
        getExtendedParameters().addAll((Collection<? extends ParameterValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.CONFIGURATIONS__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__RUN_NAME:
        setRunName(RUN_NAME_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__DEFAULT_SHELL_VALUE:
        setDefaultShellValue(DEFAULT_SHELL_VALUE_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__DEFAULT_WD_VALUE:
        setDefaultWDValue(DEFAULT_WD_VALUE_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__ENV:
        getEnv().clear();
        return;
      case PipelinePackage.CONFIGURATIONS__ALL_PERMISSION:
        setAllPermission(ALL_PERMISSION_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__IND_PERMISSIONS:
        getIndPermissions().clear();
        return;
      case PipelinePackage.CONFIGURATIONS__GROUP:
        setGroup(GROUP_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__CANCEL_CONCURRENCE:
        setCancelConcurrence(CANCEL_CONCURRENCE_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__CONCURRENCY:
        setConcurrency(CONCURRENCY_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__VM_NAME:
        setVmName(VM_NAME_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__VM_IMAGE:
        setVmImage(VM_IMAGE_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__VM_DEMANDS:
        setVmDemands(VM_DEMANDS_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__RESOURCES:
        getResources().clear();
        return;
      case PipelinePackage.CONFIGURATIONS__VERSION:
        setVersion(VERSION_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__PPL_VARIABLES:
        getPplVariables().clear();
        return;
      case PipelinePackage.CONFIGURATIONS__PARAMETER_VALUES:
        getParameterValues().clear();
        return;
      case PipelinePackage.CONFIGURATIONS__EXTEND_OR_INCLUDE:
        setExtendOrInclude(EXTEND_OR_INCLUDE_EDEFAULT);
        return;
      case PipelinePackage.CONFIGURATIONS__EXTENDED_PARAMETERS:
        getExtendedParameters().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PipelinePackage.CONFIGURATIONS__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PipelinePackage.CONFIGURATIONS__RUN_NAME:
        return RUN_NAME_EDEFAULT == null ? runName != null : !RUN_NAME_EDEFAULT.equals(runName);
      case PipelinePackage.CONFIGURATIONS__DEFAULT_SHELL_VALUE:
        return DEFAULT_SHELL_VALUE_EDEFAULT == null ? defaultShellValue != null : !DEFAULT_SHELL_VALUE_EDEFAULT.equals(defaultShellValue);
      case PipelinePackage.CONFIGURATIONS__DEFAULT_WD_VALUE:
        return DEFAULT_WD_VALUE_EDEFAULT == null ? defaultWDValue != null : !DEFAULT_WD_VALUE_EDEFAULT.equals(defaultWDValue);
      case PipelinePackage.CONFIGURATIONS__ENV:
        return env != null && !env.isEmpty();
      case PipelinePackage.CONFIGURATIONS__ALL_PERMISSION:
        return ALL_PERMISSION_EDEFAULT == null ? allPermission != null : !ALL_PERMISSION_EDEFAULT.equals(allPermission);
      case PipelinePackage.CONFIGURATIONS__IND_PERMISSIONS:
        return indPermissions != null && !indPermissions.isEmpty();
      case PipelinePackage.CONFIGURATIONS__GROUP:
        return GROUP_EDEFAULT == null ? group != null : !GROUP_EDEFAULT.equals(group);
      case PipelinePackage.CONFIGURATIONS__CANCEL_CONCURRENCE:
        return CANCEL_CONCURRENCE_EDEFAULT == null ? cancelConcurrence != null : !CANCEL_CONCURRENCE_EDEFAULT.equals(cancelConcurrence);
      case PipelinePackage.CONFIGURATIONS__CONCURRENCY:
        return CONCURRENCY_EDEFAULT == null ? concurrency != null : !CONCURRENCY_EDEFAULT.equals(concurrency);
      case PipelinePackage.CONFIGURATIONS__VM_NAME:
        return VM_NAME_EDEFAULT == null ? vmName != null : !VM_NAME_EDEFAULT.equals(vmName);
      case PipelinePackage.CONFIGURATIONS__VM_IMAGE:
        return VM_IMAGE_EDEFAULT == null ? vmImage != null : !VM_IMAGE_EDEFAULT.equals(vmImage);
      case PipelinePackage.CONFIGURATIONS__VM_DEMANDS:
        return VM_DEMANDS_EDEFAULT == null ? vmDemands != null : !VM_DEMANDS_EDEFAULT.equals(vmDemands);
      case PipelinePackage.CONFIGURATIONS__RESOURCES:
        return resources != null && !resources.isEmpty();
      case PipelinePackage.CONFIGURATIONS__VERSION:
        return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);
      case PipelinePackage.CONFIGURATIONS__PPL_VARIABLES:
        return pplVariables != null && !pplVariables.isEmpty();
      case PipelinePackage.CONFIGURATIONS__PARAMETER_VALUES:
        return parameterValues != null && !parameterValues.isEmpty();
      case PipelinePackage.CONFIGURATIONS__EXTEND_OR_INCLUDE:
        return EXTEND_OR_INCLUDE_EDEFAULT == null ? extendOrInclude != null : !EXTEND_OR_INCLUDE_EDEFAULT.equals(extendOrInclude);
      case PipelinePackage.CONFIGURATIONS__EXTENDED_PARAMETERS:
        return extendedParameters != null && !extendedParameters.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", runName: ");
    result.append(runName);
    result.append(", defaultShellValue: ");
    result.append(defaultShellValue);
    result.append(", defaultWDValue: ");
    result.append(defaultWDValue);
    result.append(", env: ");
    result.append(env);
    result.append(", allPermission: ");
    result.append(allPermission);
    result.append(", indPermissions: ");
    result.append(indPermissions);
    result.append(", group: ");
    result.append(group);
    result.append(", cancelConcurrence: ");
    result.append(cancelConcurrence);
    result.append(", concurrency: ");
    result.append(concurrency);
    result.append(", vmName: ");
    result.append(vmName);
    result.append(", vmImage: ");
    result.append(vmImage);
    result.append(", vmDemands: ");
    result.append(vmDemands);
    result.append(", version: ");
    result.append(version);
    result.append(", extendOrInclude: ");
    result.append(extendOrInclude);
    result.append(')');
    return result.toString();
  }

} //ConfigurationsImpl
