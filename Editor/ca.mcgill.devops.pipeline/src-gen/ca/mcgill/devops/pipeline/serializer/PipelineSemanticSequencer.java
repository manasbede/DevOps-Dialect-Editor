/*
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.serializer;

import ca.mcgill.devops.pipeline.pipeline.Configuration;
import ca.mcgill.devops.pipeline.pipeline.Pipeline;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class PipelineSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PipelineGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PipelinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PipelinePackage.CONFIGURATION:
				sequence_Configuration(context, (Configuration) semanticObject); 
				return; 
			case PipelinePackage.PARAMETER:
				sequence_Parameter(context, (ca.mcgill.devops.pipeline.pipeline.Parameter) semanticObject); 
				return; 
			case PipelinePackage.PIPELINE:
				sequence_Pipeline(context, (Pipeline) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Configuration returns Configuration
	 *
	 * Constraint:
	 *     parameters+=Parameter+
	 * </pre>
	 */
	protected void sequence_Configuration(ISerializationContext context, Configuration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID (parameters+=Parameter+ | value=AnyData | value=ArrayList)?)
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, ca.mcgill.devops.pipeline.pipeline.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pipeline returns Pipeline
	 *
	 * Constraint:
	 *     (name=UnquotedString | pipelineConfiguration+=Configuration+)
	 * </pre>
	 */
	protected void sequence_Pipeline(ISerializationContext context, Pipeline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
