/*
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.serializer;

import ca.mcgill.devops.pipeline.pipeline.Activity;
import ca.mcgill.devops.pipeline.pipeline.Branch;
import ca.mcgill.devops.pipeline.pipeline.Event;
import ca.mcgill.devops.pipeline.pipeline.ExtendedParameter;
import ca.mcgill.devops.pipeline.pipeline.ParameterValue;
import ca.mcgill.devops.pipeline.pipeline.Pipeline;
import ca.mcgill.devops.pipeline.pipeline.PipelinePackage;
import ca.mcgill.devops.pipeline.pipeline.PipelineParameter;
import ca.mcgill.devops.pipeline.pipeline.Resource;
import ca.mcgill.devops.pipeline.pipeline.TriggerSchedule;
import ca.mcgill.devops.pipeline.pipeline.Variable;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class PipelineSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PipelineGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PipelinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PipelinePackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case PipelinePackage.BRANCH:
				sequence_Branch(context, (Branch) semanticObject); 
				return; 
			case PipelinePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case PipelinePackage.EXTENDED_PARAMETER:
				sequence_ExtendedParameter(context, (ExtendedParameter) semanticObject); 
				return; 
			case PipelinePackage.PARAMETER_VALUE:
				sequence_ParameterValue(context, (ParameterValue) semanticObject); 
				return; 
			case PipelinePackage.PIPELINE:
				sequence_Pipeline(context, (Pipeline) semanticObject); 
				return; 
			case PipelinePackage.PIPELINE_PARAMETER:
				sequence_PipelineParameter(context, (PipelineParameter) semanticObject); 
				return; 
			case PipelinePackage.RESOURCE:
				sequence_Resource(context, (Resource) semanticObject); 
				return; 
			case PipelinePackage.TRIGGER_SCHEDULE:
				sequence_TriggerSchedule(context, (TriggerSchedule) semanticObject); 
				return; 
			case PipelinePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (name=AnyData | name=ArrayList | name=HyphenValues)
	 * </pre>
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Branch returns Branch
	 *
	 * Constraint:
	 *     (name=ID | name=STRING)
	 * </pre>
	 */
	protected void sequence_Branch(ISerializationContext context, Branch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=ID 
	 *             includedBranches+=Branch* 
	 *             (activities+=Activity | activities+=Activity)? 
	 *             batch=ID? 
	 *             (
	 *                 (
	 *                     autoCancel=ID | 
	 *                     drafts=ID | 
	 *                     includedBranches+=Branch | 
	 *                     includedBranches+=Branch | 
	 *                     includedBranches+=Branch | 
	 *                     excludedBranches+=Branch | 
	 *                     excludedBranches+=Branch | 
	 *                     includedPaths+=HyphenValues | 
	 *                     includedPaths+=HyphenValues | 
	 *                     excludedPaths+=HyphenValues | 
	 *                     excludedPaths+=HyphenValues | 
	 *                     includedTags+=HyphenValues | 
	 *                     includedTags+=HyphenValues | 
	 *                     excludedTags+=HyphenValues | 
	 *                     excludedTags+=HyphenValues
	 *                 )? 
	 *                 batch=ID?
	 *             )*
	 *         ) | 
	 *         ((name='schedules:' | name='schedule:') triggerSchedules+=TriggerSchedule*) | 
	 *         ((name='workflow_call:' | name='workflow_run:' | name='workflow_dispatch:') otherEventParameterValues+=ParameterValue*)
	 *     )
	 * </pre>
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExtendedParameter returns ExtendedParameter
	 *
	 * Constraint:
	 *     ((template=ID extendedParameterValues+=ParameterValue*) | extendedParameterValues+=ParameterValue+)
	 * </pre>
	 */
	protected void sequence_ExtendedParameter(ISerializationContext context, ExtendedParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ParameterValue returns ParameterValue
	 *
	 * Constraint:
	 *     (
	 *         (name=ID | name=COMPLEX_EXPRESSION | preDefinedKeyword=Permission) 
	 *         (subParameterValues+=ParameterValue+ | ((value=AnyData | value=ArrayList | value=HyphenValues) subParameterValues+=ParameterValue*))?
	 *     )
	 * </pre>
	 */
	protected void sequence_ParameterValue(ISerializationContext context, ParameterValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PipelineParameter returns PipelineParameter
	 *
	 * Constraint:
	 *     (
	 *         (name='parameters:' parameterValues+=ParameterValue+) | 
	 *         ((name='default:' | name='executors:' | name='orbs:' | name='commands:') parameterValues+=ParameterValue+)
	 *     )
	 * </pre>
	 */
	protected void sequence_PipelineParameter(ISerializationContext context, PipelineParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pipeline returns Pipeline
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=UnquotedString | 
	 *             runName=UnquotedString | 
	 *             defaultShellValue=STRING | 
	 *             defaultWDValue=STRING | 
	 *             env+=KeyValue | 
	 *             allPermission=Permission | 
	 *             indPermissions+=IndPermissionValue | 
	 *             vmDemands=AnyData | 
	 *             vmDemands=HyphenValues | 
	 *             resources+=Resource | 
	 *             version=VERSION | 
	 *             variables+=Variable | 
	 *             extendedParameter=ExtendedParameter | 
	 *             pipelineParameters+=PipelineParameter | 
	 *             triggers+=Event | 
	 *             triggers+=Event | 
	 *             triggers+=Event
	 *         )? 
	 *         (triggers+=Event triggers+=Event*)? 
	 *         (vmName=ID (vmImage=ID | vmImage=STRING)?)? 
	 *         ((group=ID | group=COMPLEX_EXPRESSION) (cancelConcurrence=ID | cancelConcurrence=COMPLEX_EXPRESSION))?
	 *     )+
	 * </pre>
	 */
	protected void sequence_Pipeline(ISerializationContext context, Pipeline semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Resource returns Resource
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             resourceName='builds:' | 
	 *             resourceName='containers:' | 
	 *             resourceName='pipelines:' | 
	 *             resourceName='repositories:' | 
	 *             resourceName='webhooks:' | 
	 *             resourceName='packages:'
	 *         ) 
	 *         (resourceValues+=ParameterValue+ | resourceValues+=ParameterValue+)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Resource(ISerializationContext context, Resource semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TriggerSchedule returns TriggerSchedule
	 *
	 * Constraint:
	 *     (
	 *         (cronValue=STRING | cronValue=STRING) 
	 *         displayName=UnquotedString? 
	 *         includedBranches+=Branch* 
	 *         excludedBranches+=Branch* 
	 *         batch=ID? 
	 *         (always=ID? batch=ID?)*
	 *     )
	 * </pre>
	 */
	protected void sequence_TriggerSchedule(ISerializationContext context, TriggerSchedule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     (variableValues+=ParameterValue+ | (group=AnyData? name=AnyData value=AnyData readonly=ID?))
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
