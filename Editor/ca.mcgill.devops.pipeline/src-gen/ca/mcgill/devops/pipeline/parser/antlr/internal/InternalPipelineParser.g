/*
 * generated by Xtext 2.33.0
 */
parser grammar InternalPipelineParser;

options {
	tokenVocab=InternalPipelineLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package ca.mcgill.devops.pipeline.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;

}

@members {

 	private PipelineGrammarAccess grammarAccess;

    public InternalPipelineParser(TokenStream input, PipelineGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Pipeline";
   	}

   	@Override
   	protected PipelineGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePipeline
entryRulePipeline returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPipelineRule()); }
	iv_rulePipeline=rulePipeline
	{ $current=$iv_rulePipeline.current; }
	EOF;

// Rule Pipeline
rulePipeline returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=Name
			{
				newLeafNode(otherlv_0, grammarAccess.getPipelineAccess().getNameKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPipelineAccess().getNameUnquotedStringParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleUnquotedString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPipelineRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPipelineAccess().getPipelineConfigurationConfigurationParserRuleCall_1_0());
				}
				lv_pipelineConfiguration_2_0=ruleConfiguration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPipelineRule());
					}
					add(
						$current,
						"pipelineConfiguration",
						lv_pipelineConfiguration_2_0,
						"ca.mcgill.devops.pipeline.Pipeline.Configuration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Parameters
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getParametersKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConfigurationAccess().getParametersParameterParserRuleCall_1_0());
				}
				lv_parameters_1_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConfigurationRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_1_0,
						"ca.mcgill.devops.pipeline.Pipeline.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"ca.mcgill.devops.pipeline.Pipeline.ID");
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				this_BEGIN_2=RULE_BEGIN
				{
					newLeafNode(this_BEGIN_2, grammarAccess.getParameterAccess().getBEGINTerminalRuleCall_2_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterAccess().getParametersParameterParserRuleCall_2_0_1_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"ca.mcgill.devops.pipeline.Pipeline.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				this_END_4=RULE_END
				{
					newLeafNode(this_END_4, grammarAccess.getParameterAccess().getENDTerminalRuleCall_2_0_2());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterAccess().getValueAnyDataParserRuleCall_2_1_0_0());
						}
						lv_value_5_1=ruleAnyData
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterRule());
							}
							set(
								$current,
								"value",
								lv_value_5_1,
								"ca.mcgill.devops.pipeline.Pipeline.AnyData");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getParameterAccess().getValueArrayListParserRuleCall_2_1_0_1());
						}
						lv_value_5_2=ruleArrayList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterRule());
							}
							set(
								$current,
								"value",
								lv_value_5_2,
								"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleAnyData
entryRuleAnyData returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAnyDataRule()); }
	iv_ruleAnyData=ruleAnyData
	{ $current=$iv_ruleAnyData.current.getText(); }
	EOF;

// Rule AnyData
ruleAnyData returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getAnyDataAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnyDataAccess().getNumberParserRuleCall_1());
		}
		this_Number_1=ruleNumber
		{
			$current.merge(this_Number_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnyDataAccess().getFloatingPointParserRuleCall_2());
		}
		this_FloatingPoint_2=ruleFloatingPoint
		{
			$current.merge(this_FloatingPoint_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAnyDataAccess().getSimpleWordParserRuleCall_3());
		}
		this_SimpleWord_3=ruleSimpleWord
		{
			$current.merge(this_SimpleWord_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_COMPLEX_EXPRESSION_4=RULE_COMPLEX_EXPRESSION
		{
			$current.merge(this_COMPLEX_EXPRESSION_4);
		}
		{
			newLeafNode(this_COMPLEX_EXPRESSION_4, grammarAccess.getAnyDataAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_4());
		}
		    |
		this_HEX_INT_5=RULE_HEX_INT
		{
			$current.merge(this_HEX_INT_5);
		}
		{
			newLeafNode(this_HEX_INT_5, grammarAccess.getAnyDataAccess().getHEX_INTTerminalRuleCall_5());
		}
		    |
		this_VERSION_6=RULE_VERSION
		{
			$current.merge(this_VERSION_6);
		}
		{
			newLeafNode(this_VERSION_6, grammarAccess.getAnyDataAccess().getVERSIONTerminalRuleCall_6());
		}
	)
;

// Entry rule entryRuleUnquotedString
entryRuleUnquotedString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnquotedStringRule()); }
	iv_ruleUnquotedString=ruleUnquotedString
	{ $current=$iv_ruleUnquotedString.current.getText(); }
	EOF;

// Rule UnquotedString
ruleUnquotedString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_0());
		}
		(
			(
				this_WS_1=RULE_WS
				{
					$current.merge(this_WS_1);
				}
				{
					newLeafNode(this_WS_1, grammarAccess.getUnquotedStringAccess().getWSTerminalRuleCall_1_0_0());
				}
				this_ID_2=RULE_ID
				{
					$current.merge(this_ID_2);
				}
				{
					newLeafNode(this_ID_2, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_1_0_1());
				}
			)
			    |
			this_INT_3=RULE_INT
			{
				$current.merge(this_INT_3);
			}
			{
				newLeafNode(this_INT_3, grammarAccess.getUnquotedStringAccess().getINTTerminalRuleCall_1_1());
			}
			    |
			this_VERSION_4=RULE_VERSION
			{
				$current.merge(this_VERSION_4);
			}
			{
				newLeafNode(this_VERSION_4, grammarAccess.getUnquotedStringAccess().getVERSIONTerminalRuleCall_1_2());
			}
		)*
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleFloatingPoint
entryRuleFloatingPoint returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatingPointRule()); }
	iv_ruleFloatingPoint=ruleFloatingPoint
	{ $current=$iv_ruleFloatingPoint.current.getText(); }
	EOF;

// Rule FloatingPoint
ruleFloatingPoint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_FLOAT_LITERAL_0=RULE_FLOAT_LITERAL
	{
		$current.merge(this_FLOAT_LITERAL_0);
	}
	{
		newLeafNode(this_FLOAT_LITERAL_0, grammarAccess.getFloatingPointAccess().getFLOAT_LITERALTerminalRuleCall());
	}
;

// Entry rule entryRuleSimpleWord
entryRuleSimpleWord returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSimpleWordRule()); }
	iv_ruleSimpleWord=ruleSimpleWord
	{ $current=$iv_ruleSimpleWord.current.getText(); }
	EOF;

// Rule SimpleWord
ruleSimpleWord returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getSimpleWordAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleArrayList
entryRuleArrayList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArrayListRule()); }
	iv_ruleArrayList=ruleArrayList
	{ $current=$iv_ruleArrayList.current.getText(); }
	EOF;

// Rule ArrayList
ruleArrayList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=LeftSquareBracket
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayListAccess().getLeftSquareBracketKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_0());
			}
			this_AnyData_1=ruleAnyData
			{
				$current.merge(this_AnyData_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=Comma
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getArrayListAccess().getCommaKeyword_1_1_0());
				}
				{
					newCompositeNode(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_1_1());
				}
				this_AnyData_3=ruleAnyData
				{
					$current.merge(this_AnyData_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
		)?
		kw=RightSquareBracket
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayListAccess().getRightSquareBracketKeyword_2());
		}
	)
;
