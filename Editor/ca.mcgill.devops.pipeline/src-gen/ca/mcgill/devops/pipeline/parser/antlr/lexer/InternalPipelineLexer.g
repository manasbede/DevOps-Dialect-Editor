/*
 * generated by Xtext 2.33.0
 */
lexer grammar InternalPipelineLexer;

@header {
package ca.mcgill.devops.pipeline.parser.antlr.lexer;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

CancelInProgress : 'cancel-in-progress:';

ContinueOnError : 'continue-on-error:';

SettableVariables : 'settableVariables:';

WorkingDirectory : 'working-directory:';

BranchesIgnore : 'branches-ignore:';

TimeoutMinutes : 'timeout-minutes:';

DownloadBuild : 'downloadBuild:';

MaxParallel : 'max-parallel:';

PathsIgnore : 'paths-ignore:';

Pull_request : 'pull_request:';

Repositories : 'repositories:';

Workflow_run : 'workflow_run:';

Concurrency : 'concurrency:';

Credentials : 'credentials:';

DisplayName : 'displayName:';

Environment : 'environment:';

Permissions : 'permissions:';

TagsIgnore : 'tags-ignore:';

AutoCancel : 'autoCancel:';

Containers : 'containers:';

Deployment : 'deployment:';

Entrypoint : 'entrypoint:';

GetPackage : 'getPackage:';

Parameters : 'parameters:';

Powershell : 'powershell:';

Container : 'container:';

DependsOn : 'dependsOn:';

FailFast : 'fail-fast:';

Pipelines : 'pipelines:';

Resources : 'resources:';

ReviewApp : 'reviewApp:';

Schedules : 'schedules:';

Variables : 'variables:';

Branches : 'branches:';

Checkout : 'checkout:';

Defaults : 'defaults:';

Download : 'download:';

Excludes : 'excludes:';

Includes : 'includes:';

MaxTime : 'max-time:';

Packages : 'packages:';

Pipeline : 'pipeline:';

Required : 'required:';

RunName : 'run-name:';

Schedule : 'schedule:';

Strategy : 'strategy:';

Template : 'template:';

Webhooks : 'webhooks:';

WriteAll : 'write-all';

Default : 'default:';

Demands : 'demands:';

Exclude : 'exclude:';

Extends : 'extends:';

Filters : 'filters:';

Include : 'include:';

Inherit : 'inherit:';

Options : 'options:';

Outputs : 'outputs:';

Publish : 'publish:';

ReadAll : 'read-all';

Rolling : 'rolling:';

RunOnce : 'runOnce:';

RunsOn : 'runs-on:';

Secrets : 'secrets:';

Trigger : 'trigger:';

VmImage : 'vmImage:';

Builds : 'builds:';

Canary : 'canary:';

Docker : 'docker:';

Drafts : 'drafts:';

Inputs : 'inputs:';

Matrix : 'matrix:';

Script : 'script:';

Stages : 'stages:';

Target : 'target:';

Values : 'values:';

Build : 'build:';

Group : 'group:';

Image : 'image:';

Needs : 'needs:';

Paths : 'paths:';

Ports : 'ports:';

Shell : 'shell:';

Stage : 'stage:';

Steps : 'steps:';

Types : 'types:';

Args : 'args:';

Bash : 'bash:';

Cron : 'cron:';

Jobs : 'jobs:';

Name : 'name:';

Path : 'path:';

Pool : 'pool:';

Push : 'push:';

Pwsh : 'pwsh:';

Size : 'size:';

Tags : 'tags:';

Task : 'task:';

Type : 'type:';

Uses : 'uses:';

With : 'with:';

Env : 'env:';

Job : 'job:';

Run : 'run:';

Id : 'id:';

If : 'if:';

On : 'on:';

Pr : 'pr:';

GreaterThanSignHyphenMinus : '>-';

ExclamationMark : '!';

Asterisk : '*';

Comma : ',';

HyphenMinus : '-';

Colon : ':';

LeftSquareBracket : '[';

RightSquareBracket : ']';

KW__ : '_';

LeftCurlyBracket : '{';

VerticalLine : '|';

RightCurlyBracket : '}';

RULE_SINGLE_CHAR : ('a'..'z'|'A'..'Z');

RULE_EXPRESSION : RULE_ID? ('"${{ ' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* ' }}"'|'\'${{ ' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* ' }}\''|'${{ ' (RULE_ID|RULE_STRING|RULE_HEX_INT|RULE_FLOAT_LITERAL)* ' }}');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'/'|'@'|'-'|'.'|'\\'|'&') ('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'/'|'@'|'&'|'-'|'.'|'\\'|'$'|'('|')')*;

RULE_INTV : ('0'..'9')+;

fragment RULE_HEX_INT : '0x' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_FLOAT_LITERAL : '-'? (RULE_INT '.' RULE_INT|RULE_INT) ('e' RULE_INT)?;

RULE_VERSION : (RULE_INT ('.' RULE_INT)? '.'?)+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

RULE_UNCLOSED_STRING : '"' ~('"')* EOF;

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_INT : ('0'..'9')+;
