package ca.mcgill.devops.pipeline.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings("all")
public class InternalPipelineParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Pull_request_review_comment", "BitbucketBranchCreated", "BitbucketBranchDeleted", "BitbucketTagCreated", "BitbucketTagDeleted", "Pull_request_review", "Pull_request_target", "RepositoryProjects", "Repository_dispatch", "CancelInProgress", "ContinueOnError_1", "Deployment_status", "Pipeline_schedule", "Workflow_dispatch", "WorkingDirectory", "Registry_package", "TimeoutInMinutes", "BranchesIgnore", "ContainerImage", "ContinueOnError", "SecurityEvents", "TimeoutMinutes", "Merge_requests", "Project_column", "ReleaseTrigger", "WorkflowRules", "Allow_failure", "Before_script", "DeployTrigger", "Issue_comment", "Notifications", "PullRequests", "Workflow_call", "After_script", "Attestations", "DefaultsRun", "Dependencies", "LockBehavior", "MaxParallel", "PathsIgnore", "Project_card", "Pull_request", "Repositories", "Requirements", "ResourceName", "ResourceType", "TriggerRules", "Workflow_run", "Check_suite", "Concurrency", "Credentials", "Definitions", "Deployments", "Description", "Discussions", "DisplayName", "Environment", "IsSkippable", "Permissions", "Provisioner", "ReviewStage", "TagsIgnore", "AutoCancel", "Conditions", "Containers", "Deployment", "GetPackage", "Page_build", "Parameters", "Permission", "PlanBranch", "Powershell", "Repository", "Approvals", "Artifacts", "Bitbucket", "Check_run", "Condition", "Container", "DependsOn", "Endpoints", "FailFast", "Milestone", "Pipelines", "PostBuild", "Resources", "RunPolicy", "Scheduled", "Schedules", "Variables", "Workflows", "Workspace", "WriteAll", "Branches", "Checkout", "Contents", "Defaults", "Download", "IdToken", "MaxTime", "Packages", "Parallel", "Pipeline", "PreBuild", "ReadAll", "Readonly", "Required", "RunName", "Schedule", "Services", "Snapshot", "Statuses", "Strategy", "Template", "Timeouts", "Webhooks", "Actions", "Changes", "Command", "Default", "Demands", "Exclude", "Extends", "Filters", "Include", "Inherit", "Options", "Outputs", "Project", "Publish", "Release", "Retries", "RunsOn", "Secrets", "Storage", "Timeout", "Trigger", "Version", "VmImage", "Always", "Builds", "Caches", "Checks", "Create", "Custom", "Delete", "Docker", "Drafts", "Except", "Gollum", "Inputs", "Issues", "Labels", "Matrix", "Policy", "Public", "Queued", "Remote", "Script", "Stages", "Status", "Agent", "Batch", "Cache", "Final", "Group", "Image", "Label", "Needs", "Paths", "Ports", "Queue", "Rules", "Shell", "Stage", "Steps", "Tasks", "Types", "Value", "Watch", "Write_1", "Auth", "Bash", "Cron", "Fork", "Jobs", "Name", "None_1", "Only", "Plan", "Pool", "Push", "Pwsh", "Read_1", "Step", "Tags", "Task", "Type", "Uses", "When", "With", "Write", "Env", "Jdk", "Job", "None", "Read", "Run", "Ssh", "Id", "If", "On", "Pr", "GreaterThanSignHyphenMinus", "Comma", "HyphenMinus", "Colon", "LeftSquareBracket", "RightSquareBracket", "VerticalLine", "RULE_COMPLEX_EXPRESSION", "RULE_HEX_INT", "RULE_INT", "RULE_FLOAT_LITERAL", "RULE_ID", "RULE_VERSION", "RULE_BEGIN", "RULE_END", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_STRING", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int Delete=149;
    public static final int Pipelines=87;
    public static final int Needs=172;
    public static final int RunName=111;
    public static final int Before_script=31;
    public static final int Checkout=98;
    public static final int Docker=150;
    public static final int Concurrency=53;
    public static final int TagsIgnore=65;
    public static final int Permission=73;
    public static final int Stage=178;
    public static final int Pool=194;
    public static final int Tags=199;
    public static final int Status=164;
    public static final int Pr=216;
    public static final int Parameters=72;
    public static final int BitbucketTagCreated=7;
    public static final int RULE_ID=228;
    public static final int ContinueOnError_1=14;
    public static final int Artifacts=78;
    public static final int Project=132;
    public static final int Defaults=100;
    public static final int Statuses=115;
    public static final int RULE_INT=226;
    public static final int Outputs=131;
    public static final int Bitbucket=79;
    public static final int Repositories=46;
    public static final int Group=169;
    public static final int Read_1=197;
    public static final int Powershell=75;
    public static final int SecurityEvents=24;
    public static final int Jdk=207;
    public static final int Allow_failure=30;
    public static final int Readonly=109;
    public static final int Jobs=189;
    public static final int Registry_package=19;
    public static final int Gollum=153;
    public static final int Watch=183;
    public static final int RULE_COMPLEX_EXPRESSION=224;
    public static final int Paths=173;
    public static final int Download=101;
    public static final int Queue=175;
    public static final int IdToken=102;
    public static final int None_1=191;
    public static final int Definitions=55;
    public static final int Provisioner=63;
    public static final int ResourceType=49;
    public static final int Run=211;
    public static final int LockBehavior=41;
    public static final int Rules=176;
    public static final int PlanBranch=74;
    public static final int Services=113;
    public static final int Repository=76;
    public static final int Issue_comment=33;
    public static final int Credentials=54;
    public static final int Types=181;
    public static final int RULE_BEGIN=230;
    public static final int Discussions=58;
    public static final int Label=171;
    public static final int Deployment=69;
    public static final int Caches=145;
    public static final int AutoCancel=66;
    public static final int Cron=187;
    public static final int Name=190;
    public static final int Container=82;
    public static final int Version=141;
    public static final int BitbucketBranchDeleted=6;
    public static final int Permissions=62;
    public static final int Pwsh=196;
    public static final int Dependencies=40;
    public static final int WorkflowRules=29;
    public static final int Builds=144;
    public static final int DeployTrigger=32;
    public static final int Workflows=94;
    public static final int Milestone=86;
    public static final int WriteAll=96;
    public static final int PostBuild=88;
    public static final int BitbucketBranchCreated=5;
    public static final int Storage=138;
    public static final int GetPackage=70;
    public static final int FailFast=85;
    public static final int Checks=146;
    public static final int PreBuild=107;
    public static final int Cache=167;
    public static final int Options=130;
    public static final int RULE_END=231;
    public static final int Fork=188;
    public static final int Pull_request_target=10;
    public static final int Demands=124;
    public static final int BitbucketTagDeleted=8;
    public static final int Step=198;
    public static final int Env=206;
    public static final int With=204;
    public static final int RULE_SL_COMMENT=233;
    public static final int Shell=177;
    public static final int Batch=166;
    public static final int Colon=220;
    public static final int EOF=-1;
    public static final int Inputs=154;
    public static final int Condition=81;
    public static final int IsSkippable=61;
    public static final int RunPolicy=90;
    public static final int Bash=186;
    public static final int Workflow_dispatch=17;
    public static final int DependsOn=83;
    public static final int Command=122;
    public static final int Schedule=112;
    public static final int Workflow_run=51;
    public static final int PullRequests=35;
    public static final int Secrets=137;
    public static final int ResourceName=48;
    public static final int Deployments=56;
    public static final int Approvals=77;
    public static final int Image=170;
    public static final int Matrix=157;
    public static final int RULE_VERSION=229;
    public static final int Workflow_call=36;
    public static final int Extends=126;
    public static final int Push=195;
    public static final int RepositoryProjects=11;
    public static final int Agent=165;
    public static final int Repository_dispatch=12;
    public static final int Actions=120;
    public static final int Labels=156;
    public static final int Snapshot=114;
    public static final int Contents=99;
    public static final int MaxParallel=42;
    public static final int VerticalLine=223;
    public static final int RULE_ML_COMMENT=232;
    public static final int LeftSquareBracket=221;
    public static final int Resources=89;
    public static final int Always=143;
    public static final int Id=213;
    public static final int ContinueOnError=23;
    public static final int If=214;
    public static final int Write=205;
    public static final int Schedules=92;
    public static final int Description=57;
    public static final int TriggerRules=50;
    public static final int Check_suite=52;
    public static final int Timeouts=118;
    public static final int Containers=68;
    public static final int VmImage=142;
    public static final int Queued=160;
    public static final int Pull_request_review=9;
    public static final int Scheduled=91;
    public static final int Comma=218;
    public static final int Project_card=44;
    public static final int HyphenMinus=219;
    public static final int Attestations=38;
    public static final int Final=168;
    public static final int RULE_HEX_INT=225;
    public static final int TimeoutMinutes=25;
    public static final int Stages=163;
    public static final int Ports=174;
    public static final int Custom=148;
    public static final int Plan=193;
    public static final int Default=123;
    public static final int Pipeline=106;
    public static final int Drafts=151;
    public static final int Type=201;
    public static final int When=203;
    public static final int Write_1=184;
    public static final int ContainerImage=22;
    public static final int Pull_request=45;
    public static final int Webhooks=119;
    public static final int None=209;
    public static final int TimeoutInMinutes=20;
    public static final int Merge_requests=26;
    public static final int Policy=158;
    public static final int Task=200;
    public static final int Deployment_status=15;
    public static final int Include=128;
    public static final int Parallel=105;
    public static final int ReleaseTrigger=28;
    public static final int Check_run=80;
    public static final int Requirements=47;
    public static final int Conditions=67;
    public static final int Template=117;
    public static final int Pull_request_review_comment=4;
    public static final int Read=210;
    public static final int Filters=127;
    public static final int Trigger=140;
    public static final int Packages=104;
    public static final int ReadAll=108;
    public static final int Retries=135;
    public static final int Job=208;
    public static final int Inherit=129;
    public static final int RightSquareBracket=222;
    public static final int WorkingDirectory=18;
    public static final int Script=162;
    public static final int Tasks=180;
    public static final int Branches=97;
    public static final int Timeout=139;
    public static final int ReviewStage=64;
    public static final int Public=159;
    public static final int After_script=37;
    public static final int Value=182;
    public static final int GreaterThanSignHyphenMinus=217;
    public static final int Environment=60;
    public static final int MaxTime=103;
    public static final int Notifications=34;
    public static final int Except=152;
    public static final int Steps=179;
    public static final int Exclude=125;
    public static final int Uses=202;
    public static final int Issues=155;
    public static final int Remote=161;
    public static final int RULE_STRING=234;
    public static final int CancelInProgress=13;
    public static final int Endpoints=84;
    public static final int Variables=93;
    public static final int RULE_FLOAT_LITERAL=227;
    public static final int DefaultsRun=39;
    public static final int Project_column=27;
    public static final int Required=110;
    public static final int Page_build=71;
    public static final int Create=147;
    public static final int Auth=185;
    public static final int DisplayName=59;
    public static final int Publish=133;
    public static final int Release=134;
    public static final int Changes=121;
    public static final int BranchesIgnore=21;
    public static final int Pipeline_schedule=16;
    public static final int PathsIgnore=43;
    public static final int RULE_WS=235;
    public static final int Only=192;
    public static final int Ssh=212;
    public static final int RULE_ANY_OTHER=236;
    public static final int RunsOn=136;
    public static final int Strategy=116;
    public static final int Workspace=95;
    public static final int On=215;

    // delegates
    // delegators


        public InternalPipelineParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalPipelineParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalPipelineParser.tokenNames; }
    public String getGrammarFileName() { return "InternalPipelineParser.g"; }



     	private PipelineGrammarAccess grammarAccess;

        public InternalPipelineParser(TokenStream input, PipelineGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Pipeline";
       	}

       	@Override
       	protected PipelineGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRulePipeline"
    // InternalPipelineParser.g:58:1: entryRulePipeline returns [EObject current=null] : iv_rulePipeline= rulePipeline EOF ;
    public final EObject entryRulePipeline() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePipeline = null;


        try {
            // InternalPipelineParser.g:58:49: (iv_rulePipeline= rulePipeline EOF )
            // InternalPipelineParser.g:59:2: iv_rulePipeline= rulePipeline EOF
            {
             newCompositeNode(grammarAccess.getPipelineRule()); 
            pushFollow(FOLLOW_1);
            iv_rulePipeline=rulePipeline();

            state._fsp--;

             current =iv_rulePipeline; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePipeline"


    // $ANTLR start "rulePipeline"
    // InternalPipelineParser.g:65:1: rulePipeline returns [EObject current=null] : ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) ) ;
    public final EObject rulePipeline() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_BEGIN_2=null;
        Token this_END_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_jobOrStageVar_12_1=null;
        Token lv_jobOrStageVar_12_2=null;
        Token this_BEGIN_14=null;
        Token this_END_16=null;
        EObject lv_pipelineConfiguration_0_0 = null;

        EObject lv_triggers_3_0 = null;

        EObject lv_triggers_5_0 = null;

        EObject lv_triggers_7_0 = null;

        EObject lv_triggers_9_0 = null;

        EObject lv_triggers_11_0 = null;

        EObject lv_stages_13_0 = null;

        EObject lv_jobs_15_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:71:2: ( ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) ) )
            // InternalPipelineParser.g:72:2: ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) )
            {
            // InternalPipelineParser.g:72:2: ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) )
            // InternalPipelineParser.g:73:3: ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) )
            {
            // InternalPipelineParser.g:73:3: ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) )
            // InternalPipelineParser.g:74:4: (lv_pipelineConfiguration_0_0= ruleConfigurations )
            {
            // InternalPipelineParser.g:74:4: (lv_pipelineConfiguration_0_0= ruleConfigurations )
            // InternalPipelineParser.g:75:5: lv_pipelineConfiguration_0_0= ruleConfigurations
            {

            					newCompositeNode(grammarAccess.getPipelineAccess().getPipelineConfigurationConfigurationsParserRuleCall_0_0());
            				
            pushFollow(FOLLOW_3);
            lv_pipelineConfiguration_0_0=ruleConfigurations();

            state._fsp--;


            					if (current==null) {
            						current = createModelElementForParent(grammarAccess.getPipelineRule());
            					}
            					set(
            						current,
            						"pipelineConfiguration",
            						lv_pipelineConfiguration_0_0,
            						"ca.mcgill.devops.pipeline.Pipeline.Configurations");
            					afterParserOrEnumRuleCall();
            				

            }


            }

            // InternalPipelineParser.g:92:3: ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==On) ) {
                alt6=1;
            }
            else if ( ((LA6_0>=Pull_request_review_comment && LA6_0<=Pull_request_target)||LA6_0==Repository_dispatch||(LA6_0>=Deployment_status && LA6_0<=Workflow_dispatch)||LA6_0==Registry_package||(LA6_0>=Merge_requests && LA6_0<=Project_column)||LA6_0==WorkflowRules||(LA6_0>=Issue_comment && LA6_0<=Workflow_call)||LA6_0==LockBehavior||(LA6_0>=Project_card && LA6_0<=Pull_request)||(LA6_0>=Workflow_run && LA6_0<=Check_suite)||(LA6_0>=AutoCancel && LA6_0<=Conditions)||LA6_0==Deployment||LA6_0==Page_build||LA6_0==PlanBranch||LA6_0==Repository||(LA6_0>=Bitbucket && LA6_0<=Check_run)||(LA6_0>=Milestone && LA6_0<=Pipelines)||(LA6_0>=Scheduled && LA6_0<=Schedules)||LA6_0==Branches||LA6_0==Schedule||LA6_0==Changes||LA6_0==Default||LA6_0==Project||LA6_0==Release||LA6_0==Trigger||(LA6_0>=Create && LA6_0<=Delete)||(LA6_0>=Drafts && LA6_0<=Gollum)||LA6_0==Issues||LA6_0==Public||LA6_0==Remote||(LA6_0>=Stages && LA6_0<=Status)||LA6_0==Label||LA6_0==Paths||LA6_0==Rules||LA6_0==Watch||(LA6_0>=Cron && LA6_0<=Jobs)||LA6_0==Only||LA6_0==Push||LA6_0==Tags||LA6_0==Pr||LA6_0==RULE_ID) ) {
                alt6=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalPipelineParser.g:93:4: (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? )
                    {
                    // InternalPipelineParser.g:93:4: (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? )
                    // InternalPipelineParser.g:94:5: otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )?
                    {
                    otherlv_1=(Token)match(input,On,FOLLOW_4); 

                    					newLeafNode(otherlv_1, grammarAccess.getPipelineAccess().getOnKeyword_1_0_0());
                    				
                    // InternalPipelineParser.g:98:5: (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )?
                    int alt2=2;
                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==RULE_BEGIN) ) {
                        alt2=1;
                    }
                    switch (alt2) {
                        case 1 :
                            // InternalPipelineParser.g:99:6: this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END
                            {
                            this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_5); 

                            						newLeafNode(this_BEGIN_2, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_1_0_1_0());
                            					
                            // InternalPipelineParser.g:103:6: ( (lv_triggers_3_0= ruleEvent ) )+
                            int cnt1=0;
                            loop1:
                            do {
                                int alt1=2;
                                int LA1_0 = input.LA(1);

                                if ( ((LA1_0>=Pull_request_review_comment && LA1_0<=Pull_request_target)||LA1_0==Repository_dispatch||(LA1_0>=Deployment_status && LA1_0<=Workflow_dispatch)||LA1_0==Registry_package||(LA1_0>=Merge_requests && LA1_0<=Project_column)||LA1_0==WorkflowRules||(LA1_0>=Issue_comment && LA1_0<=Workflow_call)||LA1_0==LockBehavior||(LA1_0>=Project_card && LA1_0<=Pull_request)||(LA1_0>=Workflow_run && LA1_0<=Check_suite)||(LA1_0>=AutoCancel && LA1_0<=Conditions)||LA1_0==Deployment||LA1_0==Page_build||LA1_0==PlanBranch||LA1_0==Repository||(LA1_0>=Bitbucket && LA1_0<=Check_run)||(LA1_0>=Milestone && LA1_0<=Pipelines)||(LA1_0>=Scheduled && LA1_0<=Schedules)||LA1_0==Branches||LA1_0==Schedule||LA1_0==Changes||LA1_0==Default||LA1_0==Project||LA1_0==Release||LA1_0==Trigger||(LA1_0>=Create && LA1_0<=Delete)||(LA1_0>=Drafts && LA1_0<=Gollum)||LA1_0==Issues||LA1_0==Public||LA1_0==Remote||LA1_0==Status||LA1_0==Label||LA1_0==Paths||LA1_0==Rules||LA1_0==Watch||(LA1_0>=Cron && LA1_0<=Fork)||LA1_0==Only||LA1_0==Push||LA1_0==Tags||LA1_0==Pr||LA1_0==RULE_ID) ) {
                                    alt1=1;
                                }


                                switch (alt1) {
                            	case 1 :
                            	    // InternalPipelineParser.g:104:7: (lv_triggers_3_0= ruleEvent )
                            	    {
                            	    // InternalPipelineParser.g:104:7: (lv_triggers_3_0= ruleEvent )
                            	    // InternalPipelineParser.g:105:8: lv_triggers_3_0= ruleEvent
                            	    {

                            	    								newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_1_1_0());
                            	    							
                            	    pushFollow(FOLLOW_6);
                            	    lv_triggers_3_0=ruleEvent();

                            	    state._fsp--;


                            	    								if (current==null) {
                            	    									current = createModelElementForParent(grammarAccess.getPipelineRule());
                            	    								}
                            	    								add(
                            	    									current,
                            	    									"triggers",
                            	    									lv_triggers_3_0,
                            	    									"ca.mcgill.devops.pipeline.Pipeline.Event");
                            	    								afterParserOrEnumRuleCall();
                            	    							

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt1 >= 1 ) break loop1;
                                        EarlyExitException eee =
                                            new EarlyExitException(1, input);
                                        throw eee;
                                }
                                cnt1++;
                            } while (true);

                            this_END_4=(Token)match(input,RULE_END,FOLLOW_7); 

                            						newLeafNode(this_END_4, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_1_0_1_2());
                            					

                            }
                            break;

                    }

                    // InternalPipelineParser.g:127:5: ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )?
                    int alt4=3;
                    int LA4_0 = input.LA(1);

                    if ( ((LA4_0>=Pull_request_review_comment && LA4_0<=Pull_request_target)||LA4_0==Repository_dispatch||(LA4_0>=Deployment_status && LA4_0<=Workflow_dispatch)||LA4_0==Registry_package||(LA4_0>=Merge_requests && LA4_0<=Project_column)||LA4_0==WorkflowRules||(LA4_0>=Issue_comment && LA4_0<=Workflow_call)||LA4_0==LockBehavior||(LA4_0>=Project_card && LA4_0<=Pull_request)||(LA4_0>=Workflow_run && LA4_0<=Check_suite)||(LA4_0>=AutoCancel && LA4_0<=Conditions)||LA4_0==Deployment||LA4_0==Page_build||LA4_0==PlanBranch||LA4_0==Repository||(LA4_0>=Bitbucket && LA4_0<=Check_run)||(LA4_0>=Milestone && LA4_0<=Pipelines)||(LA4_0>=Scheduled && LA4_0<=Schedules)||LA4_0==Branches||LA4_0==Schedule||LA4_0==Changes||LA4_0==Default||LA4_0==Project||LA4_0==Release||LA4_0==Trigger||(LA4_0>=Create && LA4_0<=Delete)||(LA4_0>=Drafts && LA4_0<=Gollum)||LA4_0==Issues||LA4_0==Public||LA4_0==Remote||LA4_0==Status||LA4_0==Label||LA4_0==Paths||LA4_0==Rules||LA4_0==Watch||(LA4_0>=Cron && LA4_0<=Fork)||LA4_0==Only||LA4_0==Push||LA4_0==Tags||LA4_0==Pr||LA4_0==RULE_ID) ) {
                        alt4=1;
                    }
                    else if ( (LA4_0==LeftSquareBracket) ) {
                        alt4=2;
                    }
                    switch (alt4) {
                        case 1 :
                            // InternalPipelineParser.g:128:6: ( (lv_triggers_5_0= ruleEvent ) )
                            {
                            // InternalPipelineParser.g:128:6: ( (lv_triggers_5_0= ruleEvent ) )
                            // InternalPipelineParser.g:129:7: (lv_triggers_5_0= ruleEvent )
                            {
                            // InternalPipelineParser.g:129:7: (lv_triggers_5_0= ruleEvent )
                            // InternalPipelineParser.g:130:8: lv_triggers_5_0= ruleEvent
                            {

                            								newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_2_0_0());
                            							
                            pushFollow(FOLLOW_8);
                            lv_triggers_5_0=ruleEvent();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getPipelineRule());
                            								}
                            								add(
                            									current,
                            									"triggers",
                            									lv_triggers_5_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.Event");
                            								afterParserOrEnumRuleCall();
                            							

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:148:6: (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket )
                            {
                            // InternalPipelineParser.g:148:6: (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket )
                            // InternalPipelineParser.g:149:7: otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket
                            {
                            otherlv_6=(Token)match(input,LeftSquareBracket,FOLLOW_5); 

                            							newLeafNode(otherlv_6, grammarAccess.getPipelineAccess().getLeftSquareBracketKeyword_1_0_2_1_0());
                            						
                            // InternalPipelineParser.g:153:7: ( (lv_triggers_7_0= ruleEvent ) )
                            // InternalPipelineParser.g:154:8: (lv_triggers_7_0= ruleEvent )
                            {
                            // InternalPipelineParser.g:154:8: (lv_triggers_7_0= ruleEvent )
                            // InternalPipelineParser.g:155:9: lv_triggers_7_0= ruleEvent
                            {

                            									newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_2_1_1_0());
                            								
                            pushFollow(FOLLOW_9);
                            lv_triggers_7_0=ruleEvent();

                            state._fsp--;


                            									if (current==null) {
                            										current = createModelElementForParent(grammarAccess.getPipelineRule());
                            									}
                            									add(
                            										current,
                            										"triggers",
                            										lv_triggers_7_0,
                            										"ca.mcgill.devops.pipeline.Pipeline.Event");
                            									afterParserOrEnumRuleCall();
                            								

                            }


                            }

                            // InternalPipelineParser.g:172:7: (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )*
                            loop3:
                            do {
                                int alt3=2;
                                int LA3_0 = input.LA(1);

                                if ( (LA3_0==Comma) ) {
                                    alt3=1;
                                }


                                switch (alt3) {
                            	case 1 :
                            	    // InternalPipelineParser.g:173:8: otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) )
                            	    {
                            	    otherlv_8=(Token)match(input,Comma,FOLLOW_5); 

                            	    								newLeafNode(otherlv_8, grammarAccess.getPipelineAccess().getCommaKeyword_1_0_2_1_2_0());
                            	    							
                            	    // InternalPipelineParser.g:177:8: ( (lv_triggers_9_0= ruleEvent ) )
                            	    // InternalPipelineParser.g:178:9: (lv_triggers_9_0= ruleEvent )
                            	    {
                            	    // InternalPipelineParser.g:178:9: (lv_triggers_9_0= ruleEvent )
                            	    // InternalPipelineParser.g:179:10: lv_triggers_9_0= ruleEvent
                            	    {

                            	    										newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_2_1_2_1_0());
                            	    									
                            	    pushFollow(FOLLOW_9);
                            	    lv_triggers_9_0=ruleEvent();

                            	    state._fsp--;


                            	    										if (current==null) {
                            	    											current = createModelElementForParent(grammarAccess.getPipelineRule());
                            	    										}
                            	    										add(
                            	    											current,
                            	    											"triggers",
                            	    											lv_triggers_9_0,
                            	    											"ca.mcgill.devops.pipeline.Pipeline.Event");
                            	    										afterParserOrEnumRuleCall();
                            	    									

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);

                            otherlv_10=(Token)match(input,RightSquareBracket,FOLLOW_8); 

                            							newLeafNode(otherlv_10, grammarAccess.getPipelineAccess().getRightSquareBracketKeyword_1_0_2_1_3());
                            						

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:205:4: ( (lv_triggers_11_0= ruleEvent ) )*
                    {
                    // InternalPipelineParser.g:205:4: ( (lv_triggers_11_0= ruleEvent ) )*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( ((LA5_0>=Pull_request_review_comment && LA5_0<=Pull_request_target)||LA5_0==Repository_dispatch||(LA5_0>=Deployment_status && LA5_0<=Workflow_dispatch)||LA5_0==Registry_package||(LA5_0>=Merge_requests && LA5_0<=Project_column)||LA5_0==WorkflowRules||(LA5_0>=Issue_comment && LA5_0<=Workflow_call)||LA5_0==LockBehavior||(LA5_0>=Project_card && LA5_0<=Pull_request)||(LA5_0>=Workflow_run && LA5_0<=Check_suite)||(LA5_0>=AutoCancel && LA5_0<=Conditions)||LA5_0==Deployment||LA5_0==Page_build||LA5_0==PlanBranch||LA5_0==Repository||(LA5_0>=Bitbucket && LA5_0<=Check_run)||(LA5_0>=Milestone && LA5_0<=Pipelines)||(LA5_0>=Scheduled && LA5_0<=Schedules)||LA5_0==Branches||LA5_0==Schedule||LA5_0==Changes||LA5_0==Default||LA5_0==Project||LA5_0==Release||LA5_0==Trigger||(LA5_0>=Create && LA5_0<=Delete)||(LA5_0>=Drafts && LA5_0<=Gollum)||LA5_0==Issues||LA5_0==Public||LA5_0==Remote||LA5_0==Status||LA5_0==Label||LA5_0==Paths||LA5_0==Rules||LA5_0==Watch||(LA5_0>=Cron && LA5_0<=Fork)||LA5_0==Only||LA5_0==Push||LA5_0==Tags||LA5_0==Pr||LA5_0==RULE_ID) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    // InternalPipelineParser.g:206:5: (lv_triggers_11_0= ruleEvent )
                    	    {
                    	    // InternalPipelineParser.g:206:5: (lv_triggers_11_0= ruleEvent )
                    	    // InternalPipelineParser.g:207:6: lv_triggers_11_0= ruleEvent
                    	    {

                    	    						newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_1_0());
                    	    					
                    	    pushFollow(FOLLOW_10);
                    	    lv_triggers_11_0=ruleEvent();

                    	    state._fsp--;


                    	    						if (current==null) {
                    	    							current = createModelElementForParent(grammarAccess.getPipelineRule());
                    	    						}
                    	    						add(
                    	    							current,
                    	    							"triggers",
                    	    							lv_triggers_11_0,
                    	    							"ca.mcgill.devops.pipeline.Pipeline.Event");
                    	    						afterParserOrEnumRuleCall();
                    	    					

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalPipelineParser.g:225:3: ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) )
            // InternalPipelineParser.g:226:4: ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) )
            {
            // InternalPipelineParser.g:226:4: ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) )
            // InternalPipelineParser.g:227:5: ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) )
            {
            // InternalPipelineParser.g:227:5: ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) )
            // InternalPipelineParser.g:228:6: (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs )
            {
            // InternalPipelineParser.g:228:6: (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==Stages) ) {
                alt7=1;
            }
            else if ( (LA7_0==Jobs) ) {
                alt7=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // InternalPipelineParser.g:229:7: lv_jobOrStageVar_12_1= Stages
                    {
                    lv_jobOrStageVar_12_1=(Token)match(input,Stages,FOLLOW_11); 

                    							newLeafNode(lv_jobOrStageVar_12_1, grammarAccess.getPipelineAccess().getJobOrStageVarStagesKeyword_2_0_0_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getPipelineRule());
                    							}
                    							setWithLastConsumed(current, "jobOrStageVar", lv_jobOrStageVar_12_1, null);
                    						

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:240:7: lv_jobOrStageVar_12_2= Jobs
                    {
                    lv_jobOrStageVar_12_2=(Token)match(input,Jobs,FOLLOW_11); 

                    							newLeafNode(lv_jobOrStageVar_12_2, grammarAccess.getPipelineAccess().getJobOrStageVarJobsKeyword_2_0_0_1());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getPipelineRule());
                    							}
                    							setWithLastConsumed(current, "jobOrStageVar", lv_jobOrStageVar_12_2, null);
                    						

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:253:4: ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==EOF||LA10_0==HyphenMinus) ) {
                alt10=1;
            }
            else if ( (LA10_0==RULE_BEGIN) ) {
                alt10=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // InternalPipelineParser.g:254:5: ( (lv_stages_13_0= ruleStage ) )*
                    {
                    // InternalPipelineParser.g:254:5: ( (lv_stages_13_0= ruleStage ) )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==HyphenMinus) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // InternalPipelineParser.g:255:6: (lv_stages_13_0= ruleStage )
                    	    {
                    	    // InternalPipelineParser.g:255:6: (lv_stages_13_0= ruleStage )
                    	    // InternalPipelineParser.g:256:7: lv_stages_13_0= ruleStage
                    	    {

                    	    							newCompositeNode(grammarAccess.getPipelineAccess().getStagesStageParserRuleCall_2_1_0_0());
                    	    						
                    	    pushFollow(FOLLOW_12);
                    	    lv_stages_13_0=ruleStage();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getPipelineRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"stages",
                    	    								lv_stages_13_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.Stage");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:274:5: (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END )
                    {
                    // InternalPipelineParser.g:274:5: (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END )
                    // InternalPipelineParser.g:275:6: this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END
                    {
                    this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_13); 

                    						newLeafNode(this_BEGIN_14, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_2_1_1_0());
                    					
                    // InternalPipelineParser.g:279:6: ( (lv_jobs_15_0= ruleJob ) )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==HyphenMinus||LA9_0==RULE_ID||LA9_0==RULE_STRING) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // InternalPipelineParser.g:280:7: (lv_jobs_15_0= ruleJob )
                    	    {
                    	    // InternalPipelineParser.g:280:7: (lv_jobs_15_0= ruleJob )
                    	    // InternalPipelineParser.g:281:8: lv_jobs_15_0= ruleJob
                    	    {

                    	    								newCompositeNode(grammarAccess.getPipelineAccess().getJobsJobParserRuleCall_2_1_1_1_0());
                    	    							
                    	    pushFollow(FOLLOW_13);
                    	    lv_jobs_15_0=ruleJob();

                    	    state._fsp--;


                    	    								if (current==null) {
                    	    									current = createModelElementForParent(grammarAccess.getPipelineRule());
                    	    								}
                    	    								add(
                    	    									current,
                    	    									"jobs",
                    	    									lv_jobs_15_0,
                    	    									"ca.mcgill.devops.pipeline.Pipeline.Job");
                    	    								afterParserOrEnumRuleCall();
                    	    							

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);

                    this_END_16=(Token)match(input,RULE_END,FOLLOW_2); 

                    						newLeafNode(this_END_16, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_2_1_1_2());
                    					

                    }


                    }
                    break;

            }


            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePipeline"


    // $ANTLR start "entryRuleConfigurations"
    // InternalPipelineParser.g:309:1: entryRuleConfigurations returns [EObject current=null] : iv_ruleConfigurations= ruleConfigurations EOF ;
    public final EObject entryRuleConfigurations() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConfigurations = null;


        try {
            // InternalPipelineParser.g:309:55: (iv_ruleConfigurations= ruleConfigurations EOF )
            // InternalPipelineParser.g:310:2: iv_ruleConfigurations= ruleConfigurations EOF
            {
             newCompositeNode(grammarAccess.getConfigurationsRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleConfigurations=ruleConfigurations();

            state._fsp--;

             current =iv_ruleConfigurations; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConfigurations"


    // $ANTLR start "ruleConfigurations"
    // InternalPipelineParser.g:316:1: ruleConfigurations returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* ) ) ) ;
    public final EObject ruleConfigurations() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_6=null;
        Token this_BEGIN_7=null;
        Token otherlv_8=null;
        Token this_BEGIN_9=null;
        Token otherlv_10=null;
        Token lv_defaultShellValue_11_0=null;
        Token otherlv_12=null;
        Token lv_defaultWDValue_13_0=null;
        Token this_END_14=null;
        Token this_END_15=null;
        Token otherlv_16=null;
        Token this_BEGIN_17=null;
        Token otherlv_18=null;
        Token this_END_20=null;
        Token otherlv_21=null;
        Token lv_allPermission_22_0=null;
        Token this_BEGIN_23=null;
        Token this_END_25=null;
        Token otherlv_26=null;
        Token this_BEGIN_27=null;
        Token otherlv_28=null;
        Token lv_group_29_1=null;
        Token lv_group_29_2=null;
        Token otherlv_30=null;
        Token lv_cancelConcurrence_31_1=null;
        Token lv_cancelConcurrence_31_2=null;
        Token this_END_32=null;
        Token otherlv_33=null;
        Token this_BEGIN_35=null;
        Token otherlv_36=null;
        Token lv_vmName_37_0=null;
        Token otherlv_38=null;
        Token lv_vmImage_39_1=null;
        Token lv_vmImage_39_2=null;
        Token otherlv_40=null;
        Token this_END_42=null;
        Token otherlv_43=null;
        Token this_BEGIN_44=null;
        Token this_END_46=null;
        Token otherlv_47=null;
        Token lv_version_48_0=null;
        Token otherlv_49=null;
        Token otherlv_51=null;
        Token otherlv_52=null;
        Token lv_extendOrInclude_54_1=null;
        Token lv_extendOrInclude_54_2=null;
        Token this_BEGIN_55=null;
        Token this_END_57=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        AntlrDatatypeRuleToken lv_runName_4_0 = null;

        AntlrDatatypeRuleToken lv_env_19_0 = null;

        AntlrDatatypeRuleToken lv_indPermissions_24_0 = null;

        AntlrDatatypeRuleToken lv_vmDemands_41_1 = null;

        AntlrDatatypeRuleToken lv_vmDemands_41_2 = null;

        EObject lv_resources_45_0 = null;

        EObject lv_pplVariables_50_0 = null;

        EObject lv_parameterValues_53_0 = null;

        EObject lv_extendedParameters_56_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:322:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* ) ) ) )
            // InternalPipelineParser.g:323:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* ) ) )
            {
            // InternalPipelineParser.g:323:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* ) ) )
            // InternalPipelineParser.g:324:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* ) )
            {
            // InternalPipelineParser.g:324:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* ) )
            // InternalPipelineParser.g:325:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* )
            {
             
            			  getUnorderedGroupHelper().enter(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            			
            // InternalPipelineParser.g:328:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )* )
            // InternalPipelineParser.g:329:5: ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )*
            {
            // InternalPipelineParser.g:329:5: ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )*
            loop30:
            do {
                int alt30=13;
                alt30 = dfa30.predict(input);
                switch (alt30) {
            	case 1 :
            	    // InternalPipelineParser.g:330:3: ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:330:3: ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) )
            	    // InternalPipelineParser.g:331:4: {...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalPipelineParser.g:331:108: ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) )
            	    // InternalPipelineParser.g:332:5: ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0);
            	    				
            	    // InternalPipelineParser.g:335:8: ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) )
            	    // InternalPipelineParser.g:335:9: {...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:335:18: (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) )
            	    // InternalPipelineParser.g:335:19: otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) )
            	    {
            	    otherlv_1=(Token)match(input,Name,FOLLOW_14); 

            	    								newLeafNode(otherlv_1, grammarAccess.getConfigurationsAccess().getNameKeyword_0_0());
            	    							
            	    // InternalPipelineParser.g:339:8: ( (lv_name_2_0= ruleUnquotedString ) )
            	    // InternalPipelineParser.g:340:9: (lv_name_2_0= ruleUnquotedString )
            	    {
            	    // InternalPipelineParser.g:340:9: (lv_name_2_0= ruleUnquotedString )
            	    // InternalPipelineParser.g:341:10: lv_name_2_0= ruleUnquotedString
            	    {

            	    										newCompositeNode(grammarAccess.getConfigurationsAccess().getNameUnquotedStringParserRuleCall_0_1_0());
            	    									
            	    pushFollow(FOLLOW_15);
            	    lv_name_2_0=ruleUnquotedString();

            	    state._fsp--;


            	    										if (current==null) {
            	    											current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    										}
            	    										set(
            	    											current,
            	    											"name",
            	    											lv_name_2_0,
            	    											"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
            	    										afterParserOrEnumRuleCall();
            	    									

            	    }


            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalPipelineParser.g:364:3: ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:364:3: ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) )
            	    // InternalPipelineParser.g:365:4: {...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalPipelineParser.g:365:108: ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) )
            	    // InternalPipelineParser.g:366:5: ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1);
            	    				
            	    // InternalPipelineParser.g:369:8: ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) )
            	    // InternalPipelineParser.g:369:9: {...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:369:18: (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) )
            	    // InternalPipelineParser.g:369:19: otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) )
            	    {
            	    otherlv_3=(Token)match(input,RunName,FOLLOW_14); 

            	    								newLeafNode(otherlv_3, grammarAccess.getConfigurationsAccess().getRunNameKeyword_1_0());
            	    							
            	    // InternalPipelineParser.g:373:8: ( (lv_runName_4_0= ruleUnquotedString ) )
            	    // InternalPipelineParser.g:374:9: (lv_runName_4_0= ruleUnquotedString )
            	    {
            	    // InternalPipelineParser.g:374:9: (lv_runName_4_0= ruleUnquotedString )
            	    // InternalPipelineParser.g:375:10: lv_runName_4_0= ruleUnquotedString
            	    {

            	    										newCompositeNode(grammarAccess.getConfigurationsAccess().getRunNameUnquotedStringParserRuleCall_1_1_0());
            	    									
            	    pushFollow(FOLLOW_15);
            	    lv_runName_4_0=ruleUnquotedString();

            	    state._fsp--;


            	    										if (current==null) {
            	    											current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    										}
            	    										set(
            	    											current,
            	    											"runName",
            	    											lv_runName_4_0,
            	    											"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
            	    										afterParserOrEnumRuleCall();
            	    									

            	    }


            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalPipelineParser.g:398:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:398:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    // InternalPipelineParser.g:399:4: {...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalPipelineParser.g:399:108: ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    // InternalPipelineParser.g:400:5: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2);
            	    				
            	    // InternalPipelineParser.g:403:8: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    // InternalPipelineParser.g:403:9: {...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:403:18: ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) )
            	    // InternalPipelineParser.g:403:19: ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) )
            	    {
            	    // InternalPipelineParser.g:403:19: ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) )
            	    // InternalPipelineParser.g:404:9: ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?)
            	    {
            	     
            	    								  getUnorderedGroupHelper().enter(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    								
            	    // InternalPipelineParser.g:407:9: ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?)
            	    // InternalPipelineParser.g:408:10: ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?
            	    {
            	    // InternalPipelineParser.g:408:10: ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+
            	    int cnt13=0;
            	    loop13:
            	    do {
            	        int alt13=3;
            	        switch ( input.LA(1) ) {
            	        case Defaults:
            	            {
            	            int LA13_2 = input.LA(2);

            	            if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0) ) {
            	                alt13=1;
            	            }


            	            }
            	            break;
            	        case WorkingDirectory:
            	            {
            	            int LA13_3 = input.LA(2);

            	            if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1) ) {
            	                alt13=2;
            	            }


            	            }
            	            break;
            	        case RULE_END:
            	            {
            	            int LA13_4 = input.LA(2);

            	            if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1) ) {
            	                alt13=2;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt13) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:409:8: ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:409:8: ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) )
            	    	    // InternalPipelineParser.g:410:9: {...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0)");
            	    	    }
            	    	    // InternalPipelineParser.g:410:115: ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) )
            	    	    // InternalPipelineParser.g:411:10: ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) )
            	    	    {

            	    	    										getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0);
            	    	    									
            	    	    // InternalPipelineParser.g:414:13: ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) )
            	    	    // InternalPipelineParser.g:414:14: {...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:414:23: (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? )
            	    	    // InternalPipelineParser.g:414:24: otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )?
            	    	    {
            	    	    otherlv_6=(Token)match(input,Defaults,FOLLOW_16); 

            	    	    													newLeafNode(otherlv_6, grammarAccess.getConfigurationsAccess().getDefaultsKeyword_2_0_0());
            	    	    												
            	    	    this_BEGIN_7=(Token)match(input,RULE_BEGIN,FOLLOW_17); 

            	    	    													newLeafNode(this_BEGIN_7, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_2_0_1());
            	    	    												
            	    	    otherlv_8=(Token)match(input,Run,FOLLOW_16); 

            	    	    													newLeafNode(otherlv_8, grammarAccess.getConfigurationsAccess().getRunKeyword_2_0_2());
            	    	    												
            	    	    this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_18); 

            	    	    													newLeafNode(this_BEGIN_9, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_2_0_3());
            	    	    												
            	    	    // InternalPipelineParser.g:430:13: (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )?
            	    	    int alt11=2;
            	    	    int LA11_0 = input.LA(1);

            	    	    if ( (LA11_0==Shell) ) {
            	    	        alt11=1;
            	    	    }
            	    	    switch (alt11) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:431:14: otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) )
            	    	            {
            	    	            otherlv_10=(Token)match(input,Shell,FOLLOW_19); 

            	    	            														newLeafNode(otherlv_10, grammarAccess.getConfigurationsAccess().getShellKeyword_2_0_4_0());
            	    	            													
            	    	            // InternalPipelineParser.g:435:14: ( (lv_defaultShellValue_11_0= RULE_STRING ) )
            	    	            // InternalPipelineParser.g:436:15: (lv_defaultShellValue_11_0= RULE_STRING )
            	    	            {
            	    	            // InternalPipelineParser.g:436:15: (lv_defaultShellValue_11_0= RULE_STRING )
            	    	            // InternalPipelineParser.g:437:16: lv_defaultShellValue_11_0= RULE_STRING
            	    	            {
            	    	            lv_defaultShellValue_11_0=(Token)match(input,RULE_STRING,FOLLOW_15); 

            	    	            																newLeafNode(lv_defaultShellValue_11_0, grammarAccess.getConfigurationsAccess().getDefaultShellValueSTRINGTerminalRuleCall_2_0_4_1_0());
            	    	            															

            	    	            																if (current==null) {
            	    	            																	current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	            																}
            	    	            																setWithLastConsumed(
            	    	            																	current,
            	    	            																	"defaultShellValue",
            	    	            																	lv_defaultShellValue_11_0,
            	    	            																	"org.eclipse.xtext.common.Terminals.STRING");
            	    	            															

            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }


            	    	    }


            	    	    }

            	    	     
            	    	    										getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    	    									

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalPipelineParser.g:460:8: ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:460:8: ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) )
            	    	    // InternalPipelineParser.g:461:9: {...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1)");
            	    	    }
            	    	    // InternalPipelineParser.g:461:115: ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) )
            	    	    // InternalPipelineParser.g:462:10: ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) )
            	    	    {

            	    	    										getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1);
            	    	    									
            	    	    // InternalPipelineParser.g:465:13: ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) )
            	    	    // InternalPipelineParser.g:465:14: {...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:465:23: ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END )
            	    	    // InternalPipelineParser.g:465:24: (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END
            	    	    {
            	    	    // InternalPipelineParser.g:465:24: (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )?
            	    	    int alt12=2;
            	    	    int LA12_0 = input.LA(1);

            	    	    if ( (LA12_0==WorkingDirectory) ) {
            	    	        alt12=1;
            	    	    }
            	    	    switch (alt12) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:466:14: otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) )
            	    	            {
            	    	            otherlv_12=(Token)match(input,WorkingDirectory,FOLLOW_19); 

            	    	            														newLeafNode(otherlv_12, grammarAccess.getConfigurationsAccess().getWorkingDirectoryKeyword_2_1_0_0());
            	    	            													
            	    	            // InternalPipelineParser.g:470:14: ( (lv_defaultWDValue_13_0= RULE_STRING ) )
            	    	            // InternalPipelineParser.g:471:15: (lv_defaultWDValue_13_0= RULE_STRING )
            	    	            {
            	    	            // InternalPipelineParser.g:471:15: (lv_defaultWDValue_13_0= RULE_STRING )
            	    	            // InternalPipelineParser.g:472:16: lv_defaultWDValue_13_0= RULE_STRING
            	    	            {
            	    	            lv_defaultWDValue_13_0=(Token)match(input,RULE_STRING,FOLLOW_20); 

            	    	            																newLeafNode(lv_defaultWDValue_13_0, grammarAccess.getConfigurationsAccess().getDefaultWDValueSTRINGTerminalRuleCall_2_1_0_1_0());
            	    	            															

            	    	            																if (current==null) {
            	    	            																	current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	            																}
            	    	            																setWithLastConsumed(
            	    	            																	current,
            	    	            																	"defaultWDValue",
            	    	            																	lv_defaultWDValue_13_0,
            	    	            																	"org.eclipse.xtext.common.Terminals.STRING");
            	    	            															

            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }

            	    	    this_END_14=(Token)match(input,RULE_END,FOLLOW_20); 

            	    	    													newLeafNode(this_END_14, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_2_1_1());
            	    	    												
            	    	    this_END_15=(Token)match(input,RULE_END,FOLLOW_15); 

            	    	    													newLeafNode(this_END_15, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_2_1_2());
            	    	    												

            	    	    }


            	    	    }

            	    	     
            	    	    										getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    	    									

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt13 >= 1 ) break loop13;
            	                EarlyExitException eee =
            	                    new EarlyExitException(13, input);
            	                throw eee;
            	        }
            	        cnt13++;
            	    } while (true);

            	    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2()) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2())");
            	    }

            	    }


            	    }

            	     
            	    								  getUnorderedGroupHelper().leave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    								

            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalPipelineParser.g:516:3: ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) )
            	    {
            	    // InternalPipelineParser.g:516:3: ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:517:4: {...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalPipelineParser.g:517:108: ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) )
            	    // InternalPipelineParser.g:518:5: ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3);
            	    				
            	    // InternalPipelineParser.g:521:8: ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) )
            	    // InternalPipelineParser.g:521:9: {...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:521:18: (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END )
            	    // InternalPipelineParser.g:521:19: otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END
            	    {
            	    otherlv_16=(Token)match(input,Env,FOLLOW_16); 

            	    								newLeafNode(otherlv_16, grammarAccess.getConfigurationsAccess().getEnvKeyword_3_0());
            	    							
            	    this_BEGIN_17=(Token)match(input,RULE_BEGIN,FOLLOW_21); 

            	    								newLeafNode(this_BEGIN_17, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_3_1());
            	    							
            	    // InternalPipelineParser.g:529:8: ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )*
            	    loop15:
            	    do {
            	        int alt15=2;
            	        int LA15_0 = input.LA(1);

            	        if ( (LA15_0==HyphenMinus||LA15_0==RULE_ID) ) {
            	            alt15=1;
            	        }


            	        switch (alt15) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:530:9: (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) )
            	    	    {
            	    	    // InternalPipelineParser.g:530:9: (otherlv_18= HyphenMinus )?
            	    	    int alt14=2;
            	    	    int LA14_0 = input.LA(1);

            	    	    if ( (LA14_0==HyphenMinus) ) {
            	    	        alt14=1;
            	    	    }
            	    	    switch (alt14) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:531:10: otherlv_18= HyphenMinus
            	    	            {
            	    	            otherlv_18=(Token)match(input,HyphenMinus,FOLLOW_22); 

            	    	            										newLeafNode(otherlv_18, grammarAccess.getConfigurationsAccess().getHyphenMinusKeyword_3_2_0());
            	    	            									

            	    	            }
            	    	            break;

            	    	    }

            	    	    // InternalPipelineParser.g:536:9: ( (lv_env_19_0= ruleKeyValue ) )
            	    	    // InternalPipelineParser.g:537:10: (lv_env_19_0= ruleKeyValue )
            	    	    {
            	    	    // InternalPipelineParser.g:537:10: (lv_env_19_0= ruleKeyValue )
            	    	    // InternalPipelineParser.g:538:11: lv_env_19_0= ruleKeyValue
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getEnvKeyValueParserRuleCall_3_2_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_21);
            	    	    lv_env_19_0=ruleKeyValue();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"env",
            	    	    												lv_env_19_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.KeyValue");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop15;
            	        }
            	    } while (true);

            	    this_END_20=(Token)match(input,RULE_END,FOLLOW_15); 

            	    								newLeafNode(this_END_20, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_3_3());
            	    							

            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalPipelineParser.g:566:3: ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:566:3: ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) )
            	    // InternalPipelineParser.g:567:4: {...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalPipelineParser.g:567:108: ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:568:5: ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4);
            	    				
            	    // InternalPipelineParser.g:571:8: ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:571:9: {...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:571:18: (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) )
            	    // InternalPipelineParser.g:571:19: otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) )
            	    {
            	    otherlv_21=(Token)match(input,Permissions,FOLLOW_23); 

            	    								newLeafNode(otherlv_21, grammarAccess.getConfigurationsAccess().getPermissionsKeyword_4_0());
            	    							
            	    // InternalPipelineParser.g:575:8: ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) )
            	    int alt17=2;
            	    int LA17_0 = input.LA(1);

            	    if ( (LA17_0==RULE_ID) ) {
            	        alt17=1;
            	    }
            	    else if ( (LA17_0==RULE_BEGIN) ) {
            	        alt17=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 17, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt17) {
            	        case 1 :
            	            // InternalPipelineParser.g:576:9: ( (lv_allPermission_22_0= RULE_ID ) )
            	            {
            	            // InternalPipelineParser.g:576:9: ( (lv_allPermission_22_0= RULE_ID ) )
            	            // InternalPipelineParser.g:577:10: (lv_allPermission_22_0= RULE_ID )
            	            {
            	            // InternalPipelineParser.g:577:10: (lv_allPermission_22_0= RULE_ID )
            	            // InternalPipelineParser.g:578:11: lv_allPermission_22_0= RULE_ID
            	            {
            	            lv_allPermission_22_0=(Token)match(input,RULE_ID,FOLLOW_15); 

            	            											newLeafNode(lv_allPermission_22_0, grammarAccess.getConfigurationsAccess().getAllPermissionIDTerminalRuleCall_4_1_0_0());
            	            										

            	            											if (current==null) {
            	            												current = createModelElement(grammarAccess.getConfigurationsRule());
            	            											}
            	            											setWithLastConsumed(
            	            												current,
            	            												"allPermission",
            	            												lv_allPermission_22_0,
            	            												"ca.mcgill.devops.pipeline.Pipeline.ID");
            	            										

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:595:9: (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END )
            	            {
            	            // InternalPipelineParser.g:595:9: (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END )
            	            // InternalPipelineParser.g:596:10: this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END
            	            {
            	            this_BEGIN_23=(Token)match(input,RULE_BEGIN,FOLLOW_24); 

            	            										newLeafNode(this_BEGIN_23, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_4_1_1_0());
            	            									
            	            // InternalPipelineParser.g:600:10: ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )*
            	            loop16:
            	            do {
            	                int alt16=2;
            	                int LA16_0 = input.LA(1);

            	                if ( (LA16_0==RepositoryProjects||LA16_0==SecurityEvents||LA16_0==PullRequests||LA16_0==Attestations||LA16_0==Deployments||LA16_0==Discussions||LA16_0==Contents||LA16_0==IdToken||LA16_0==Packages||LA16_0==Statuses||LA16_0==Actions||LA16_0==Checks||LA16_0==Issues) ) {
            	                    alt16=1;
            	                }


            	                switch (alt16) {
            	            	case 1 :
            	            	    // InternalPipelineParser.g:601:11: (lv_indPermissions_24_0= ruleIndPermissionValue )
            	            	    {
            	            	    // InternalPipelineParser.g:601:11: (lv_indPermissions_24_0= ruleIndPermissionValue )
            	            	    // InternalPipelineParser.g:602:12: lv_indPermissions_24_0= ruleIndPermissionValue
            	            	    {

            	            	    												newCompositeNode(grammarAccess.getConfigurationsAccess().getIndPermissionsIndPermissionValueParserRuleCall_4_1_1_1_0());
            	            	    											
            	            	    pushFollow(FOLLOW_24);
            	            	    lv_indPermissions_24_0=ruleIndPermissionValue();

            	            	    state._fsp--;


            	            	    												if (current==null) {
            	            	    													current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	            	    												}
            	            	    												add(
            	            	    													current,
            	            	    													"indPermissions",
            	            	    													lv_indPermissions_24_0,
            	            	    													"ca.mcgill.devops.pipeline.Pipeline.IndPermissionValue");
            	            	    												afterParserOrEnumRuleCall();
            	            	    											

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop16;
            	                }
            	            } while (true);

            	            this_END_25=(Token)match(input,RULE_END,FOLLOW_15); 

            	            										newLeafNode(this_END_25, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_4_1_1_2());
            	            									

            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalPipelineParser.g:631:3: ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:631:3: ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:632:4: {...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalPipelineParser.g:632:108: ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:633:5: ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5);
            	    				
            	    // InternalPipelineParser.g:636:8: ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) )
            	    // InternalPipelineParser.g:636:9: {...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:636:18: (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) )
            	    // InternalPipelineParser.g:636:19: otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END )
            	    {
            	    otherlv_26=(Token)match(input,Concurrency,FOLLOW_16); 

            	    								newLeafNode(otherlv_26, grammarAccess.getConfigurationsAccess().getConcurrencyKeyword_5_0());
            	    							
            	    // InternalPipelineParser.g:640:8: (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END )
            	    // InternalPipelineParser.g:641:9: this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END
            	    {
            	    this_BEGIN_27=(Token)match(input,RULE_BEGIN,FOLLOW_25); 

            	    									newLeafNode(this_BEGIN_27, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_5_1_0());
            	    								
            	    // InternalPipelineParser.g:645:9: (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) )
            	    // InternalPipelineParser.g:646:10: otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) )
            	    {
            	    otherlv_28=(Token)match(input,Group,FOLLOW_26); 

            	    										newLeafNode(otherlv_28, grammarAccess.getConfigurationsAccess().getGroupKeyword_5_1_1_0());
            	    									
            	    // InternalPipelineParser.g:650:10: ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) )
            	    // InternalPipelineParser.g:651:11: ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) )
            	    {
            	    // InternalPipelineParser.g:651:11: ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) )
            	    // InternalPipelineParser.g:652:12: (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION )
            	    {
            	    // InternalPipelineParser.g:652:12: (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION )
            	    int alt18=2;
            	    int LA18_0 = input.LA(1);

            	    if ( (LA18_0==RULE_ID) ) {
            	        alt18=1;
            	    }
            	    else if ( (LA18_0==RULE_COMPLEX_EXPRESSION) ) {
            	        alt18=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 18, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt18) {
            	        case 1 :
            	            // InternalPipelineParser.g:653:13: lv_group_29_1= RULE_ID
            	            {
            	            lv_group_29_1=(Token)match(input,RULE_ID,FOLLOW_27); 

            	            													newLeafNode(lv_group_29_1, grammarAccess.getConfigurationsAccess().getGroupIDTerminalRuleCall_5_1_1_1_0_0());
            	            												

            	            													if (current==null) {
            	            														current = createModelElement(grammarAccess.getConfigurationsRule());
            	            													}
            	            													setWithLastConsumed(
            	            														current,
            	            														"group",
            	            														lv_group_29_1,
            	            														"ca.mcgill.devops.pipeline.Pipeline.ID");
            	            												

            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:668:13: lv_group_29_2= RULE_COMPLEX_EXPRESSION
            	            {
            	            lv_group_29_2=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_27); 

            	            													newLeafNode(lv_group_29_2, grammarAccess.getConfigurationsAccess().getGroupCOMPLEX_EXPRESSIONTerminalRuleCall_5_1_1_1_0_1());
            	            												

            	            													if (current==null) {
            	            														current = createModelElement(grammarAccess.getConfigurationsRule());
            	            													}
            	            													setWithLastConsumed(
            	            														current,
            	            														"group",
            	            														lv_group_29_2,
            	            														"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
            	            												

            	            }
            	            break;

            	    }


            	    }


            	    }


            	    }

            	    // InternalPipelineParser.g:686:9: (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) )
            	    // InternalPipelineParser.g:687:10: otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) )
            	    {
            	    otherlv_30=(Token)match(input,CancelInProgress,FOLLOW_26); 

            	    										newLeafNode(otherlv_30, grammarAccess.getConfigurationsAccess().getCancelInProgressKeyword_5_1_2_0());
            	    									
            	    // InternalPipelineParser.g:691:10: ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) )
            	    // InternalPipelineParser.g:692:11: ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) )
            	    {
            	    // InternalPipelineParser.g:692:11: ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) )
            	    // InternalPipelineParser.g:693:12: (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION )
            	    {
            	    // InternalPipelineParser.g:693:12: (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION )
            	    int alt19=2;
            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==RULE_ID) ) {
            	        alt19=1;
            	    }
            	    else if ( (LA19_0==RULE_COMPLEX_EXPRESSION) ) {
            	        alt19=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 19, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt19) {
            	        case 1 :
            	            // InternalPipelineParser.g:694:13: lv_cancelConcurrence_31_1= RULE_ID
            	            {
            	            lv_cancelConcurrence_31_1=(Token)match(input,RULE_ID,FOLLOW_20); 

            	            													newLeafNode(lv_cancelConcurrence_31_1, grammarAccess.getConfigurationsAccess().getCancelConcurrenceIDTerminalRuleCall_5_1_2_1_0_0());
            	            												

            	            													if (current==null) {
            	            														current = createModelElement(grammarAccess.getConfigurationsRule());
            	            													}
            	            													setWithLastConsumed(
            	            														current,
            	            														"cancelConcurrence",
            	            														lv_cancelConcurrence_31_1,
            	            														"ca.mcgill.devops.pipeline.Pipeline.ID");
            	            												

            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:709:13: lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION
            	            {
            	            lv_cancelConcurrence_31_2=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_20); 

            	            													newLeafNode(lv_cancelConcurrence_31_2, grammarAccess.getConfigurationsAccess().getCancelConcurrenceCOMPLEX_EXPRESSIONTerminalRuleCall_5_1_2_1_0_1());
            	            												

            	            													if (current==null) {
            	            														current = createModelElement(grammarAccess.getConfigurationsRule());
            	            													}
            	            													setWithLastConsumed(
            	            														current,
            	            														"cancelConcurrence",
            	            														lv_cancelConcurrence_31_2,
            	            														"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
            	            												

            	            }
            	            break;

            	    }


            	    }


            	    }


            	    }

            	    this_END_32=(Token)match(input,RULE_END,FOLLOW_15); 

            	    									newLeafNode(this_END_32, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_5_1_3());
            	    								

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalPipelineParser.g:738:3: ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:738:3: ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
            	    // InternalPipelineParser.g:739:4: {...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalPipelineParser.g:739:108: ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    // InternalPipelineParser.g:740:5: ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6);
            	    				
            	    // InternalPipelineParser.g:743:8: ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    // InternalPipelineParser.g:743:9: {...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:743:18: (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    // InternalPipelineParser.g:743:19: otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) )
            	    {
            	    otherlv_33=(Token)match(input,Pool,FOLLOW_28); 

            	    								newLeafNode(otherlv_33, grammarAccess.getConfigurationsAccess().getPoolKeyword_6_0());
            	    							
            	    // InternalPipelineParser.g:747:8: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) )
            	    // InternalPipelineParser.g:748:9: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) )
            	    {
            	    // InternalPipelineParser.g:748:9: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) )
            	    // InternalPipelineParser.g:749:10: ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?)
            	    {
            	     
            	    									  getUnorderedGroupHelper().enter(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    									
            	    // InternalPipelineParser.g:752:10: ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?)
            	    // InternalPipelineParser.g:753:11: ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?
            	    {
            	    // InternalPipelineParser.g:753:11: ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+
            	    int cnt24=0;
            	    loop24:
            	    do {
            	        int alt24=3;
            	        int LA24_0 = input.LA(1);

            	        if ( (LA24_0==RULE_END) ) {
            	            int LA24_2 = input.LA(2);

            	            if ( ( LA24_2 == EOF || LA24_2 >= Pull_request_review_comment && LA24_2 <= Pull_request_target || LA24_2 == Repository_dispatch || LA24_2 >= Deployment_status && LA24_2 <= Registry_package || LA24_2 >= Merge_requests && LA24_2 <= Project_column || LA24_2 == WorkflowRules || LA24_2 >= Issue_comment && LA24_2 <= Workflow_call || LA24_2 == LockBehavior || LA24_2 >= Project_card && LA24_2 <= Pull_request || LA24_2 >= Workflow_run && LA24_2 <= Concurrency || LA24_2 == Permissions || LA24_2 >= AutoCancel && LA24_2 <= Conditions || LA24_2 == Deployment || LA24_2 >= Page_build && LA24_2 <= Parameters || LA24_2 == PlanBranch || LA24_2 == Repository || LA24_2 >= Bitbucket && LA24_2 <= Check_run || LA24_2 >= Milestone && LA24_2 <= Pipelines || LA24_2 == Resources || LA24_2 >= Scheduled && LA24_2 <= Variables || LA24_2 == Branches || LA24_2 == Defaults || LA24_2 >= RunName && LA24_2 <= Schedule || LA24_2 == Changes || LA24_2 >= Default && LA24_2 <= Demands || LA24_2 == Extends || LA24_2 == Include || LA24_2 == Project || LA24_2 == Release || LA24_2 >= Trigger && LA24_2 <= Version || LA24_2 >= Create && LA24_2 <= Delete || LA24_2 >= Drafts && LA24_2 <= Gollum || LA24_2 == Issues || LA24_2 == Public || LA24_2 == Remote || LA24_2 >= Stages && LA24_2 <= Status || LA24_2 == Label || LA24_2 == Paths || LA24_2 == Rules || LA24_2 == Watch || LA24_2 >= Cron && LA24_2 <= Name || LA24_2 == Only || LA24_2 >= Pool && LA24_2 <= Push || LA24_2 == Tags || LA24_2 == Env || LA24_2 >= On && LA24_2 <= Pr || LA24_2 == RULE_ID || LA24_2 == RULE_BEGIN ) && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	                alt24=2;
            	            }
            	            else if ( (LA24_2==RULE_END) ) {
            	                int LA24_5 = input.LA(3);

            	                if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	                    alt24=2;
            	                }


            	            }


            	        }
            	        else if ( LA24_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0) ) {
            	            alt24=1;
            	        }
            	        else if ( LA24_0 == Demands && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	            alt24=2;
            	        }


            	        switch (alt24) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:754:9: ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:754:9: ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) )
            	    	    // InternalPipelineParser.g:755:10: {...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0)");
            	    	    }
            	    	    // InternalPipelineParser.g:755:118: ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) )
            	    	    // InternalPipelineParser.g:756:11: ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) )
            	    	    {

            	    	    											getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0);
            	    	    										
            	    	    // InternalPipelineParser.g:759:14: ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) )
            	    	    // InternalPipelineParser.g:759:15: {...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:759:24: (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? )
            	    	    // InternalPipelineParser.g:759:25: this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )?
            	    	    {
            	    	    this_BEGIN_35=(Token)match(input,RULE_BEGIN,FOLLOW_29); 

            	    	    														newLeafNode(this_BEGIN_35, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_6_1_0_0());
            	    	    													
            	    	    // InternalPipelineParser.g:763:14: (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) )
            	    	    // InternalPipelineParser.g:764:15: otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) )
            	    	    {
            	    	    otherlv_36=(Token)match(input,Name,FOLLOW_14); 

            	    	    															newLeafNode(otherlv_36, grammarAccess.getConfigurationsAccess().getNameKeyword_6_1_0_1_0());
            	    	    														
            	    	    // InternalPipelineParser.g:768:15: ( (lv_vmName_37_0= RULE_ID ) )
            	    	    // InternalPipelineParser.g:769:16: (lv_vmName_37_0= RULE_ID )
            	    	    {
            	    	    // InternalPipelineParser.g:769:16: (lv_vmName_37_0= RULE_ID )
            	    	    // InternalPipelineParser.g:770:17: lv_vmName_37_0= RULE_ID
            	    	    {
            	    	    lv_vmName_37_0=(Token)match(input,RULE_ID,FOLLOW_30); 

            	    	    																	newLeafNode(lv_vmName_37_0, grammarAccess.getConfigurationsAccess().getVmNameIDTerminalRuleCall_6_1_0_1_1_0());
            	    	    																

            	    	    																	if (current==null) {
            	    	    																		current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	    																	}
            	    	    																	setWithLastConsumed(
            	    	    																		current,
            	    	    																		"vmName",
            	    	    																		lv_vmName_37_0,
            	    	    																		"ca.mcgill.devops.pipeline.Pipeline.ID");
            	    	    																

            	    	    }


            	    	    }


            	    	    }

            	    	    // InternalPipelineParser.g:787:14: (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )?
            	    	    int alt21=2;
            	    	    int LA21_0 = input.LA(1);

            	    	    if ( (LA21_0==VmImage) ) {
            	    	        alt21=1;
            	    	    }
            	    	    switch (alt21) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:788:15: otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) )
            	    	            {
            	    	            otherlv_38=(Token)match(input,VmImage,FOLLOW_31); 

            	    	            															newLeafNode(otherlv_38, grammarAccess.getConfigurationsAccess().getVmImageKeyword_6_1_0_2_0());
            	    	            														
            	    	            // InternalPipelineParser.g:792:15: ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) )
            	    	            // InternalPipelineParser.g:793:16: ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) )
            	    	            {
            	    	            // InternalPipelineParser.g:793:16: ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) )
            	    	            // InternalPipelineParser.g:794:17: (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING )
            	    	            {
            	    	            // InternalPipelineParser.g:794:17: (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING )
            	    	            int alt20=2;
            	    	            int LA20_0 = input.LA(1);

            	    	            if ( (LA20_0==RULE_ID) ) {
            	    	                alt20=1;
            	    	            }
            	    	            else if ( (LA20_0==RULE_STRING) ) {
            	    	                alt20=2;
            	    	            }
            	    	            else {
            	    	                NoViableAltException nvae =
            	    	                    new NoViableAltException("", 20, 0, input);

            	    	                throw nvae;
            	    	            }
            	    	            switch (alt20) {
            	    	                case 1 :
            	    	                    // InternalPipelineParser.g:795:18: lv_vmImage_39_1= RULE_ID
            	    	                    {
            	    	                    lv_vmImage_39_1=(Token)match(input,RULE_ID,FOLLOW_32); 

            	    	                    																		newLeafNode(lv_vmImage_39_1, grammarAccess.getConfigurationsAccess().getVmImageIDTerminalRuleCall_6_1_0_2_1_0_0());
            	    	                    																	

            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		setWithLastConsumed(
            	    	                    																			current,
            	    	                    																			"vmImage",
            	    	                    																			lv_vmImage_39_1,
            	    	                    																			"ca.mcgill.devops.pipeline.Pipeline.ID");
            	    	                    																	

            	    	                    }
            	    	                    break;
            	    	                case 2 :
            	    	                    // InternalPipelineParser.g:810:18: lv_vmImage_39_2= RULE_STRING
            	    	                    {
            	    	                    lv_vmImage_39_2=(Token)match(input,RULE_STRING,FOLLOW_32); 

            	    	                    																		newLeafNode(lv_vmImage_39_2, grammarAccess.getConfigurationsAccess().getVmImageSTRINGTerminalRuleCall_6_1_0_2_1_0_1());
            	    	                    																	

            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		setWithLastConsumed(
            	    	                    																			current,
            	    	                    																			"vmImage",
            	    	                    																			lv_vmImage_39_2,
            	    	                    																			"org.eclipse.xtext.common.Terminals.STRING");
            	    	                    																	

            	    	                    }
            	    	                    break;

            	    	            }


            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }


            	    	    }


            	    	    }

            	    	     
            	    	    											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalPipelineParser.g:834:9: ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:834:9: ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) )
            	    	    // InternalPipelineParser.g:835:10: {...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1)");
            	    	    }
            	    	    // InternalPipelineParser.g:835:118: ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) )
            	    	    // InternalPipelineParser.g:836:11: ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) )
            	    	    {

            	    	    											getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1);
            	    	    										
            	    	    // InternalPipelineParser.g:839:14: ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) )
            	    	    // InternalPipelineParser.g:839:15: {...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:839:24: ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END )
            	    	    // InternalPipelineParser.g:839:25: (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END
            	    	    {
            	    	    // InternalPipelineParser.g:839:25: (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )?
            	    	    int alt23=2;
            	    	    int LA23_0 = input.LA(1);

            	    	    if ( (LA23_0==Demands) ) {
            	    	        alt23=1;
            	    	    }
            	    	    switch (alt23) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:840:15: otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) )
            	    	            {
            	    	            otherlv_40=(Token)match(input,Demands,FOLLOW_33); 

            	    	            															newLeafNode(otherlv_40, grammarAccess.getConfigurationsAccess().getDemandsKeyword_6_1_1_0_0());
            	    	            														
            	    	            // InternalPipelineParser.g:844:15: ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) )
            	    	            // InternalPipelineParser.g:845:16: ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) )
            	    	            {
            	    	            // InternalPipelineParser.g:845:16: ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) )
            	    	            // InternalPipelineParser.g:846:17: (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues )
            	    	            {
            	    	            // InternalPipelineParser.g:846:17: (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues )
            	    	            int alt22=2;
            	    	            int LA22_0 = input.LA(1);

            	    	            if ( ((LA22_0>=RULE_COMPLEX_EXPRESSION && LA22_0<=RULE_VERSION)||LA22_0==RULE_STRING) ) {
            	    	                alt22=1;
            	    	            }
            	    	            else if ( (LA22_0==HyphenMinus||LA22_0==RULE_BEGIN) ) {
            	    	                alt22=2;
            	    	            }
            	    	            else {
            	    	                NoViableAltException nvae =
            	    	                    new NoViableAltException("", 22, 0, input);

            	    	                throw nvae;
            	    	            }
            	    	            switch (alt22) {
            	    	                case 1 :
            	    	                    // InternalPipelineParser.g:847:18: lv_vmDemands_41_1= ruleAnyData
            	    	                    {

            	    	                    																		newCompositeNode(grammarAccess.getConfigurationsAccess().getVmDemandsAnyDataParserRuleCall_6_1_1_0_1_0_0());
            	    	                    																	
            	    	                    pushFollow(FOLLOW_20);
            	    	                    lv_vmDemands_41_1=ruleAnyData();

            	    	                    state._fsp--;


            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		set(
            	    	                    																			current,
            	    	                    																			"vmDemands",
            	    	                    																			lv_vmDemands_41_1,
            	    	                    																			"ca.mcgill.devops.pipeline.Pipeline.AnyData");
            	    	                    																		afterParserOrEnumRuleCall();
            	    	                    																	

            	    	                    }
            	    	                    break;
            	    	                case 2 :
            	    	                    // InternalPipelineParser.g:863:18: lv_vmDemands_41_2= ruleHyphenValues
            	    	                    {

            	    	                    																		newCompositeNode(grammarAccess.getConfigurationsAccess().getVmDemandsHyphenValuesParserRuleCall_6_1_1_0_1_0_1());
            	    	                    																	
            	    	                    pushFollow(FOLLOW_20);
            	    	                    lv_vmDemands_41_2=ruleHyphenValues();

            	    	                    state._fsp--;


            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		set(
            	    	                    																			current,
            	    	                    																			"vmDemands",
            	    	                    																			lv_vmDemands_41_2,
            	    	                    																			"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
            	    	                    																		afterParserOrEnumRuleCall();
            	    	                    																	

            	    	                    }
            	    	                    break;

            	    	            }


            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }

            	    	    this_END_42=(Token)match(input,RULE_END,FOLLOW_32); 

            	    	    														newLeafNode(this_END_42, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_6_1_1_1());
            	    	    													

            	    	    }


            	    	    }

            	    	     
            	    	    											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt24 >= 1 ) break loop24;
            	                EarlyExitException eee =
            	                    new EarlyExitException(24, input);
            	                throw eee;
            	        }
            	        cnt24++;
            	    } while (true);

            	    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1()) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1())");
            	    }

            	    }


            	    }

            	     
            	    									  getUnorderedGroupHelper().leave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    									

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalPipelineParser.g:906:3: ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:906:3: ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:907:4: {...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalPipelineParser.g:907:108: ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:908:5: ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7);
            	    				
            	    // InternalPipelineParser.g:911:8: ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) )
            	    // InternalPipelineParser.g:911:9: {...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:911:18: (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) )
            	    // InternalPipelineParser.g:911:19: otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END )
            	    {
            	    otherlv_43=(Token)match(input,Resources,FOLLOW_16); 

            	    								newLeafNode(otherlv_43, grammarAccess.getConfigurationsAccess().getResourcesKeyword_7_0());
            	    							
            	    // InternalPipelineParser.g:915:8: (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END )
            	    // InternalPipelineParser.g:916:9: this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END
            	    {
            	    this_BEGIN_44=(Token)match(input,RULE_BEGIN,FOLLOW_34); 

            	    									newLeafNode(this_BEGIN_44, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_7_1_0());
            	    								
            	    // InternalPipelineParser.g:920:9: ( (lv_resources_45_0= ruleResource ) )*
            	    loop25:
            	    do {
            	        int alt25=2;
            	        int LA25_0 = input.LA(1);

            	        if ( (LA25_0==Repositories||LA25_0==Containers||LA25_0==Pipelines||LA25_0==Packages||LA25_0==Webhooks||LA25_0==Builds) ) {
            	            alt25=1;
            	        }


            	        switch (alt25) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:921:10: (lv_resources_45_0= ruleResource )
            	    	    {
            	    	    // InternalPipelineParser.g:921:10: (lv_resources_45_0= ruleResource )
            	    	    // InternalPipelineParser.g:922:11: lv_resources_45_0= ruleResource
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getResourcesResourceParserRuleCall_7_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_34);
            	    	    lv_resources_45_0=ruleResource();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"resources",
            	    	    												lv_resources_45_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.Resource");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop25;
            	        }
            	    } while (true);

            	    this_END_46=(Token)match(input,RULE_END,FOLLOW_15); 

            	    									newLeafNode(this_END_46, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_7_1_2());
            	    								

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalPipelineParser.g:950:3: ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:950:3: ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) )
            	    // InternalPipelineParser.g:951:4: {...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalPipelineParser.g:951:108: ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) )
            	    // InternalPipelineParser.g:952:5: ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8);
            	    				
            	    // InternalPipelineParser.g:955:8: ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) )
            	    // InternalPipelineParser.g:955:9: {...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:955:18: (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) )
            	    // InternalPipelineParser.g:955:19: otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) )
            	    {
            	    otherlv_47=(Token)match(input,Version,FOLLOW_35); 

            	    								newLeafNode(otherlv_47, grammarAccess.getConfigurationsAccess().getVersionKeyword_8_0());
            	    							
            	    // InternalPipelineParser.g:959:8: ( (lv_version_48_0= RULE_VERSION ) )
            	    // InternalPipelineParser.g:960:9: (lv_version_48_0= RULE_VERSION )
            	    {
            	    // InternalPipelineParser.g:960:9: (lv_version_48_0= RULE_VERSION )
            	    // InternalPipelineParser.g:961:10: lv_version_48_0= RULE_VERSION
            	    {
            	    lv_version_48_0=(Token)match(input,RULE_VERSION,FOLLOW_15); 

            	    										newLeafNode(lv_version_48_0, grammarAccess.getConfigurationsAccess().getVersionVERSIONTerminalRuleCall_8_1_0());
            	    									

            	    										if (current==null) {
            	    											current = createModelElement(grammarAccess.getConfigurationsRule());
            	    										}
            	    										setWithLastConsumed(
            	    											current,
            	    											"version",
            	    											lv_version_48_0,
            	    											"ca.mcgill.devops.pipeline.Pipeline.VERSION");
            	    									

            	    }


            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 10 :
            	    // InternalPipelineParser.g:983:3: ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) )
            	    {
            	    // InternalPipelineParser.g:983:3: ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) )
            	    // InternalPipelineParser.g:984:4: {...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9)");
            	    }
            	    // InternalPipelineParser.g:984:108: ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) )
            	    // InternalPipelineParser.g:985:5: ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9);
            	    				
            	    // InternalPipelineParser.g:988:8: ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) )
            	    // InternalPipelineParser.g:988:9: {...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:988:18: (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* )
            	    // InternalPipelineParser.g:988:19: otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )*
            	    {
            	    otherlv_49=(Token)match(input,Variables,FOLLOW_36); 

            	    								newLeafNode(otherlv_49, grammarAccess.getConfigurationsAccess().getVariablesKeyword_9_0());
            	    							
            	    // InternalPipelineParser.g:992:8: ( (lv_pplVariables_50_0= ruleVariable ) )*
            	    loop26:
            	    do {
            	        int alt26=2;
            	        int LA26_0 = input.LA(1);

            	        if ( (LA26_0==HyphenMinus||LA26_0==RULE_BEGIN) ) {
            	            alt26=1;
            	        }


            	        switch (alt26) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:993:9: (lv_pplVariables_50_0= ruleVariable )
            	    	    {
            	    	    // InternalPipelineParser.g:993:9: (lv_pplVariables_50_0= ruleVariable )
            	    	    // InternalPipelineParser.g:994:10: lv_pplVariables_50_0= ruleVariable
            	    	    {

            	    	    										newCompositeNode(grammarAccess.getConfigurationsAccess().getPplVariablesVariableParserRuleCall_9_1_0());
            	    	    									
            	    	    pushFollow(FOLLOW_36);
            	    	    lv_pplVariables_50_0=ruleVariable();

            	    	    state._fsp--;


            	    	    										if (current==null) {
            	    	    											current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    										}
            	    	    										add(
            	    	    											current,
            	    	    											"pplVariables",
            	    	    											lv_pplVariables_50_0,
            	    	    											"ca.mcgill.devops.pipeline.Pipeline.Variable");
            	    	    										afterParserOrEnumRuleCall();
            	    	    									

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop26;
            	        }
            	    } while (true);


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 11 :
            	    // InternalPipelineParser.g:1017:3: ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) )
            	    {
            	    // InternalPipelineParser.g:1017:3: ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) )
            	    // InternalPipelineParser.g:1018:4: {...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10)");
            	    }
            	    // InternalPipelineParser.g:1018:109: ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) )
            	    // InternalPipelineParser.g:1019:5: ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10);
            	    				
            	    // InternalPipelineParser.g:1022:8: ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) )
            	    // InternalPipelineParser.g:1022:9: {...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:1022:18: (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* )
            	    // InternalPipelineParser.g:1022:19: otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )*
            	    {
            	    otherlv_51=(Token)match(input,Parameters,FOLLOW_37); 

            	    								newLeafNode(otherlv_51, grammarAccess.getConfigurationsAccess().getParametersKeyword_10_0());
            	    							
            	    // InternalPipelineParser.g:1026:8: (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )*
            	    loop27:
            	    do {
            	        int alt27=2;
            	        int LA27_0 = input.LA(1);

            	        if ( (LA27_0==HyphenMinus) ) {
            	            alt27=1;
            	        }


            	        switch (alt27) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:1027:9: otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) )
            	    	    {
            	    	    otherlv_52=(Token)match(input,HyphenMinus,FOLLOW_38); 

            	    	    									newLeafNode(otherlv_52, grammarAccess.getConfigurationsAccess().getHyphenMinusKeyword_10_1_0());
            	    	    								
            	    	    // InternalPipelineParser.g:1031:9: ( (lv_parameterValues_53_0= ruleParameterValue ) )
            	    	    // InternalPipelineParser.g:1032:10: (lv_parameterValues_53_0= ruleParameterValue )
            	    	    {
            	    	    // InternalPipelineParser.g:1032:10: (lv_parameterValues_53_0= ruleParameterValue )
            	    	    // InternalPipelineParser.g:1033:11: lv_parameterValues_53_0= ruleParameterValue
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getParameterValuesParameterValueParserRuleCall_10_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_37);
            	    	    lv_parameterValues_53_0=ruleParameterValue();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"parameterValues",
            	    	    												lv_parameterValues_53_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop27;
            	        }
            	    } while (true);


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 12 :
            	    // InternalPipelineParser.g:1057:3: ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:1057:3: ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:1058:4: {...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11)");
            	    }
            	    // InternalPipelineParser.g:1058:109: ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:1059:5: ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11);
            	    				
            	    // InternalPipelineParser.g:1062:8: ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) )
            	    // InternalPipelineParser.g:1062:9: {...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:1062:18: ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) )
            	    // InternalPipelineParser.g:1062:19: ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END )
            	    {
            	    // InternalPipelineParser.g:1062:19: ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) )
            	    // InternalPipelineParser.g:1063:9: ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) )
            	    {
            	    // InternalPipelineParser.g:1063:9: ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) )
            	    // InternalPipelineParser.g:1064:10: (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include )
            	    {
            	    // InternalPipelineParser.g:1064:10: (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include )
            	    int alt28=2;
            	    int LA28_0 = input.LA(1);

            	    if ( (LA28_0==Extends) ) {
            	        alt28=1;
            	    }
            	    else if ( (LA28_0==Include) ) {
            	        alt28=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 28, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt28) {
            	        case 1 :
            	            // InternalPipelineParser.g:1065:11: lv_extendOrInclude_54_1= Extends
            	            {
            	            lv_extendOrInclude_54_1=(Token)match(input,Extends,FOLLOW_16); 

            	            											newLeafNode(lv_extendOrInclude_54_1, grammarAccess.getConfigurationsAccess().getExtendOrIncludeExtendsKeyword_11_0_0_0());
            	            										

            	            											if (current==null) {
            	            												current = createModelElement(grammarAccess.getConfigurationsRule());
            	            											}
            	            											setWithLastConsumed(current, "extendOrInclude", lv_extendOrInclude_54_1, null);
            	            										

            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:1076:11: lv_extendOrInclude_54_2= Include
            	            {
            	            lv_extendOrInclude_54_2=(Token)match(input,Include,FOLLOW_16); 

            	            											newLeafNode(lv_extendOrInclude_54_2, grammarAccess.getConfigurationsAccess().getExtendOrIncludeIncludeKeyword_11_0_0_1());
            	            										

            	            											if (current==null) {
            	            												current = createModelElement(grammarAccess.getConfigurationsRule());
            	            											}
            	            											setWithLastConsumed(current, "extendOrInclude", lv_extendOrInclude_54_2, null);
            	            										

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalPipelineParser.g:1089:8: (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END )
            	    // InternalPipelineParser.g:1090:9: this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END
            	    {
            	    this_BEGIN_55=(Token)match(input,RULE_BEGIN,FOLLOW_38); 

            	    									newLeafNode(this_BEGIN_55, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_11_1_0());
            	    								
            	    // InternalPipelineParser.g:1094:9: ( (lv_extendedParameters_56_0= ruleParameterValue ) )+
            	    int cnt29=0;
            	    loop29:
            	    do {
            	        int alt29=2;
            	        int LA29_0 = input.LA(1);

            	        if ( ((LA29_0>=Repository_dispatch && LA29_0<=ContinueOnError_1)||(LA29_0>=Workflow_dispatch && LA29_0<=WorkingDirectory)||(LA29_0>=TimeoutInMinutes && LA29_0<=ContinueOnError)||LA29_0==TimeoutMinutes||LA29_0==ReleaseTrigger||(LA29_0>=Allow_failure && LA29_0<=DeployTrigger)||(LA29_0>=Notifications && LA29_0<=After_script)||(LA29_0>=DefaultsRun && LA29_0<=PathsIgnore)||(LA29_0>=Pull_request && LA29_0<=Workflow_run)||(LA29_0>=Concurrency && LA29_0<=Definitions)||LA29_0==Description||(LA29_0>=DisplayName && LA29_0<=GetPackage)||(LA29_0>=Parameters && LA29_0<=Permission)||(LA29_0>=Powershell && LA29_0<=Artifacts)||(LA29_0>=Condition && LA29_0<=FailFast)||(LA29_0>=Pipelines && LA29_0<=RunPolicy)||(LA29_0>=Schedules && LA29_0<=Workspace)||(LA29_0>=Branches && LA29_0<=Checkout)||(LA29_0>=Defaults && LA29_0<=Download)||(LA29_0>=MaxTime && LA29_0<=PreBuild)||(LA29_0>=Readonly && LA29_0<=Snapshot)||(LA29_0>=Strategy && LA29_0<=Webhooks)||(LA29_0>=Command && LA29_0<=Caches)||(LA29_0>=Docker && LA29_0<=Except)||LA29_0==Inputs||(LA29_0>=Labels && LA29_0<=Policy)||LA29_0==Queued||(LA29_0>=Script && LA29_0<=Stages)||(LA29_0>=Agent && LA29_0<=Image)||(LA29_0>=Paths && LA29_0<=Value)||(LA29_0>=Auth && LA29_0<=Cron)||LA29_0==Name||(LA29_0>=Only && LA29_0<=Pwsh)||(LA29_0>=Step && LA29_0<=With)||(LA29_0>=Env && LA29_0<=Job)||(LA29_0>=Run && LA29_0<=On)||LA29_0==RULE_COMPLEX_EXPRESSION||LA29_0==RULE_ID) ) {
            	            alt29=1;
            	        }


            	        switch (alt29) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:1095:10: (lv_extendedParameters_56_0= ruleParameterValue )
            	    	    {
            	    	    // InternalPipelineParser.g:1095:10: (lv_extendedParameters_56_0= ruleParameterValue )
            	    	    // InternalPipelineParser.g:1096:11: lv_extendedParameters_56_0= ruleParameterValue
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getExtendedParametersParameterValueParserRuleCall_11_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_39);
            	    	    lv_extendedParameters_56_0=ruleParameterValue();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"extendedParameters",
            	    	    												lv_extendedParameters_56_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt29 >= 1 ) break loop29;
            	                EarlyExitException eee =
            	                    new EarlyExitException(29, input);
            	                throw eee;
            	        }
            	        cnt29++;
            	    } while (true);

            	    this_END_57=(Token)match(input,RULE_END,FOLLOW_15); 

            	    									newLeafNode(this_END_57, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_11_1_2());
            	    								

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }


            }

             
            			  getUnorderedGroupHelper().leave(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            			

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConfigurations"


    // $ANTLR start "entryRuleVariable"
    // InternalPipelineParser.g:1134:1: entryRuleVariable returns [EObject current=null] : iv_ruleVariable= ruleVariable EOF ;
    public final EObject entryRuleVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariable = null;


        try {
            // InternalPipelineParser.g:1134:49: (iv_ruleVariable= ruleVariable EOF )
            // InternalPipelineParser.g:1135:2: iv_ruleVariable= ruleVariable EOF
            {
             newCompositeNode(grammarAccess.getVariableRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleVariable=ruleVariable();

            state._fsp--;

             current =iv_ruleVariable; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariable"


    // $ANTLR start "ruleVariable"
    // InternalPipelineParser.g:1141:1: ruleVariable returns [EObject current=null] : ( ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END ) | ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? ) ) | (this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) ;
    public final EObject ruleVariable() throws RecognitionException {
        EObject current = null;

        Token this_BEGIN_0=null;
        Token lv_variableKey_1_0=null;
        Token otherlv_2=null;
        Token this_END_4=null;
        Token otherlv_5=null;
        Token otherlv_6=null;
        Token otherlv_7=null;
        Token this_BEGIN_9=null;
        Token otherlv_10=null;
        Token otherlv_12=null;
        Token lv_readonly_13_0=null;
        Token this_END_14=null;
        Token this_BEGIN_15=null;
        Token lv_name_16_0=null;
        Token otherlv_17=null;
        Token this_BEGIN_18=null;
        Token this_END_20=null;
        Token this_END_21=null;
        AntlrDatatypeRuleToken lv_variableValue_3_0 = null;

        AntlrDatatypeRuleToken lv_name_8_0 = null;

        AntlrDatatypeRuleToken lv_value_11_0 = null;

        AntlrDatatypeRuleToken lv_variables_19_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:1147:2: ( ( ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END ) | ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? ) ) | (this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) ) )
            // InternalPipelineParser.g:1148:2: ( ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END ) | ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? ) ) | (this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
            {
            // InternalPipelineParser.g:1148:2: ( ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END ) | ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? ) ) | (this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==RULE_BEGIN) ) {
                int LA36_1 = input.LA(2);

                if ( (LA36_1==RULE_ID) ) {
                    int LA36_3 = input.LA(3);

                    if ( (LA36_3==Colon) ) {
                        int LA36_4 = input.LA(4);

                        if ( ((LA36_4>=RULE_COMPLEX_EXPRESSION && LA36_4<=RULE_VERSION)||LA36_4==RULE_STRING) ) {
                            alt36=1;
                        }
                        else if ( (LA36_4==RULE_BEGIN) ) {
                            alt36=2;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 36, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 36, 3, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA36_0==HyphenMinus) ) {
                alt36=1;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }
            switch (alt36) {
                case 1 :
                    // InternalPipelineParser.g:1149:3: ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END ) | ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? ) )
                    {
                    // InternalPipelineParser.g:1149:3: ( (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END ) | ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? ) )
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==RULE_BEGIN) ) {
                        alt34=1;
                    }
                    else if ( (LA34_0==HyphenMinus) ) {
                        alt34=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 34, 0, input);

                        throw nvae;
                    }
                    switch (alt34) {
                        case 1 :
                            // InternalPipelineParser.g:1150:4: (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END )
                            {
                            // InternalPipelineParser.g:1150:4: (this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END )
                            // InternalPipelineParser.g:1151:5: this_BEGIN_0= RULE_BEGIN ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon ) ( (lv_variableValue_3_0= ruleAnyData ) ) this_END_4= RULE_END
                            {
                            this_BEGIN_0=(Token)match(input,RULE_BEGIN,FOLLOW_14); 

                            					newLeafNode(this_BEGIN_0, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_0_0_0());
                            				
                            // InternalPipelineParser.g:1155:5: ( ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon )
                            // InternalPipelineParser.g:1156:6: ( (lv_variableKey_1_0= RULE_ID ) ) otherlv_2= Colon
                            {
                            // InternalPipelineParser.g:1156:6: ( (lv_variableKey_1_0= RULE_ID ) )
                            // InternalPipelineParser.g:1157:7: (lv_variableKey_1_0= RULE_ID )
                            {
                            // InternalPipelineParser.g:1157:7: (lv_variableKey_1_0= RULE_ID )
                            // InternalPipelineParser.g:1158:8: lv_variableKey_1_0= RULE_ID
                            {
                            lv_variableKey_1_0=(Token)match(input,RULE_ID,FOLLOW_40); 

                            								newLeafNode(lv_variableKey_1_0, grammarAccess.getVariableAccess().getVariableKeyIDTerminalRuleCall_0_0_1_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getVariableRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"variableKey",
                            									lv_variableKey_1_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.ID");
                            							

                            }


                            }

                            otherlv_2=(Token)match(input,Colon,FOLLOW_41); 

                            						newLeafNode(otherlv_2, grammarAccess.getVariableAccess().getColonKeyword_0_0_1_1());
                            					

                            }

                            // InternalPipelineParser.g:1179:5: ( (lv_variableValue_3_0= ruleAnyData ) )
                            // InternalPipelineParser.g:1180:6: (lv_variableValue_3_0= ruleAnyData )
                            {
                            // InternalPipelineParser.g:1180:6: (lv_variableValue_3_0= ruleAnyData )
                            // InternalPipelineParser.g:1181:7: lv_variableValue_3_0= ruleAnyData
                            {

                            							newCompositeNode(grammarAccess.getVariableAccess().getVariableValueAnyDataParserRuleCall_0_0_2_0());
                            						
                            pushFollow(FOLLOW_20);
                            lv_variableValue_3_0=ruleAnyData();

                            state._fsp--;


                            							if (current==null) {
                            								current = createModelElementForParent(grammarAccess.getVariableRule());
                            							}
                            							set(
                            								current,
                            								"variableValue",
                            								lv_variableValue_3_0,
                            								"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                            							afterParserOrEnumRuleCall();
                            						

                            }


                            }

                            this_END_4=(Token)match(input,RULE_END,FOLLOW_2); 

                            					newLeafNode(this_END_4, grammarAccess.getVariableAccess().getENDTerminalRuleCall_0_0_3());
                            				

                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:1204:4: ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? )
                            {
                            // InternalPipelineParser.g:1204:4: ( (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )? )
                            // InternalPipelineParser.g:1205:5: (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) ) (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )?
                            {
                            // InternalPipelineParser.g:1205:5: (otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) ) )
                            // InternalPipelineParser.g:1206:6: otherlv_5= HyphenMinus (otherlv_6= Name | otherlv_7= Group ) ( (lv_name_8_0= ruleAnyData ) )
                            {
                            otherlv_5=(Token)match(input,HyphenMinus,FOLLOW_42); 

                            						newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getHyphenMinusKeyword_0_1_0_0());
                            					
                            // InternalPipelineParser.g:1210:6: (otherlv_6= Name | otherlv_7= Group )
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==Name) ) {
                                alt31=1;
                            }
                            else if ( (LA31_0==Group) ) {
                                alt31=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 31, 0, input);

                                throw nvae;
                            }
                            switch (alt31) {
                                case 1 :
                                    // InternalPipelineParser.g:1211:7: otherlv_6= Name
                                    {
                                    otherlv_6=(Token)match(input,Name,FOLLOW_41); 

                                    							newLeafNode(otherlv_6, grammarAccess.getVariableAccess().getNameKeyword_0_1_0_1_0());
                                    						

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:1216:7: otherlv_7= Group
                                    {
                                    otherlv_7=(Token)match(input,Group,FOLLOW_41); 

                                    							newLeafNode(otherlv_7, grammarAccess.getVariableAccess().getGroupKeyword_0_1_0_1_1());
                                    						

                                    }
                                    break;

                            }

                            // InternalPipelineParser.g:1221:6: ( (lv_name_8_0= ruleAnyData ) )
                            // InternalPipelineParser.g:1222:7: (lv_name_8_0= ruleAnyData )
                            {
                            // InternalPipelineParser.g:1222:7: (lv_name_8_0= ruleAnyData )
                            // InternalPipelineParser.g:1223:8: lv_name_8_0= ruleAnyData
                            {

                            								newCompositeNode(grammarAccess.getVariableAccess().getNameAnyDataParserRuleCall_0_1_0_2_0());
                            							
                            pushFollow(FOLLOW_43);
                            lv_name_8_0=ruleAnyData();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getVariableRule());
                            								}
                            								set(
                            									current,
                            									"name",
                            									lv_name_8_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                            								afterParserOrEnumRuleCall();
                            							

                            }


                            }


                            }

                            // InternalPipelineParser.g:1241:5: (this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END )?
                            int alt33=2;
                            int LA33_0 = input.LA(1);

                            if ( (LA33_0==RULE_BEGIN) ) {
                                int LA33_1 = input.LA(2);

                                if ( (LA33_1==Value) ) {
                                    alt33=1;
                                }
                            }
                            switch (alt33) {
                                case 1 :
                                    // InternalPipelineParser.g:1242:6: this_BEGIN_9= RULE_BEGIN (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) ) (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )? this_END_14= RULE_END
                                    {
                                    this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_44); 

                                    						newLeafNode(this_BEGIN_9, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_0_1_1_0());
                                    					
                                    // InternalPipelineParser.g:1246:6: (otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) ) )
                                    // InternalPipelineParser.g:1247:7: otherlv_10= Value ( (lv_value_11_0= ruleAnyData ) )
                                    {
                                    otherlv_10=(Token)match(input,Value,FOLLOW_41); 

                                    							newLeafNode(otherlv_10, grammarAccess.getVariableAccess().getValueKeyword_0_1_1_1_0());
                                    						
                                    // InternalPipelineParser.g:1251:7: ( (lv_value_11_0= ruleAnyData ) )
                                    // InternalPipelineParser.g:1252:8: (lv_value_11_0= ruleAnyData )
                                    {
                                    // InternalPipelineParser.g:1252:8: (lv_value_11_0= ruleAnyData )
                                    // InternalPipelineParser.g:1253:9: lv_value_11_0= ruleAnyData
                                    {

                                    									newCompositeNode(grammarAccess.getVariableAccess().getValueAnyDataParserRuleCall_0_1_1_1_1_0());
                                    								
                                    pushFollow(FOLLOW_45);
                                    lv_value_11_0=ruleAnyData();

                                    state._fsp--;


                                    									if (current==null) {
                                    										current = createModelElementForParent(grammarAccess.getVariableRule());
                                    									}
                                    									set(
                                    										current,
                                    										"value",
                                    										lv_value_11_0,
                                    										"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                                    									afterParserOrEnumRuleCall();
                                    								

                                    }


                                    }


                                    }

                                    // InternalPipelineParser.g:1271:6: (otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) ) )?
                                    int alt32=2;
                                    int LA32_0 = input.LA(1);

                                    if ( (LA32_0==Readonly) ) {
                                        alt32=1;
                                    }
                                    switch (alt32) {
                                        case 1 :
                                            // InternalPipelineParser.g:1272:7: otherlv_12= Readonly ( (lv_readonly_13_0= RULE_ID ) )
                                            {
                                            otherlv_12=(Token)match(input,Readonly,FOLLOW_14); 

                                            							newLeafNode(otherlv_12, grammarAccess.getVariableAccess().getReadonlyKeyword_0_1_1_2_0());
                                            						
                                            // InternalPipelineParser.g:1276:7: ( (lv_readonly_13_0= RULE_ID ) )
                                            // InternalPipelineParser.g:1277:8: (lv_readonly_13_0= RULE_ID )
                                            {
                                            // InternalPipelineParser.g:1277:8: (lv_readonly_13_0= RULE_ID )
                                            // InternalPipelineParser.g:1278:9: lv_readonly_13_0= RULE_ID
                                            {
                                            lv_readonly_13_0=(Token)match(input,RULE_ID,FOLLOW_20); 

                                            									newLeafNode(lv_readonly_13_0, grammarAccess.getVariableAccess().getReadonlyIDTerminalRuleCall_0_1_1_2_1_0());
                                            								

                                            									if (current==null) {
                                            										current = createModelElement(grammarAccess.getVariableRule());
                                            									}
                                            									setWithLastConsumed(
                                            										current,
                                            										"readonly",
                                            										lv_readonly_13_0,
                                            										"ca.mcgill.devops.pipeline.Pipeline.ID");
                                            								

                                            }


                                            }


                                            }
                                            break;

                                    }

                                    this_END_14=(Token)match(input,RULE_END,FOLLOW_2); 

                                    						newLeafNode(this_END_14, grammarAccess.getVariableAccess().getENDTerminalRuleCall_0_1_1_3());
                                    					

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:1303:3: (this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
                    {
                    // InternalPipelineParser.g:1303:3: (this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END )
                    // InternalPipelineParser.g:1304:4: this_BEGIN_15= RULE_BEGIN ( (lv_name_16_0= RULE_ID ) ) otherlv_17= Colon (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END ) this_END_21= RULE_END
                    {
                    this_BEGIN_15=(Token)match(input,RULE_BEGIN,FOLLOW_14); 

                    				newLeafNode(this_BEGIN_15, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:1308:4: ( (lv_name_16_0= RULE_ID ) )
                    // InternalPipelineParser.g:1309:5: (lv_name_16_0= RULE_ID )
                    {
                    // InternalPipelineParser.g:1309:5: (lv_name_16_0= RULE_ID )
                    // InternalPipelineParser.g:1310:6: lv_name_16_0= RULE_ID
                    {
                    lv_name_16_0=(Token)match(input,RULE_ID,FOLLOW_40); 

                    						newLeafNode(lv_name_16_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_1_0());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getVariableRule());
                    						}
                    						setWithLastConsumed(
                    							current,
                    							"name",
                    							lv_name_16_0,
                    							"ca.mcgill.devops.pipeline.Pipeline.ID");
                    					

                    }


                    }

                    otherlv_17=(Token)match(input,Colon,FOLLOW_16); 

                    				newLeafNode(otherlv_17, grammarAccess.getVariableAccess().getColonKeyword_1_2());
                    			
                    // InternalPipelineParser.g:1330:4: (this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END )
                    // InternalPipelineParser.g:1331:5: this_BEGIN_18= RULE_BEGIN ( (lv_variables_19_0= ruleKeyValue ) )+ this_END_20= RULE_END
                    {
                    this_BEGIN_18=(Token)match(input,RULE_BEGIN,FOLLOW_22); 

                    					newLeafNode(this_BEGIN_18, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_1_3_0());
                    				
                    // InternalPipelineParser.g:1335:5: ( (lv_variables_19_0= ruleKeyValue ) )+
                    int cnt35=0;
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==RULE_ID) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1336:6: (lv_variables_19_0= ruleKeyValue )
                    	    {
                    	    // InternalPipelineParser.g:1336:6: (lv_variables_19_0= ruleKeyValue )
                    	    // InternalPipelineParser.g:1337:7: lv_variables_19_0= ruleKeyValue
                    	    {

                    	    							newCompositeNode(grammarAccess.getVariableAccess().getVariablesKeyValueParserRuleCall_1_3_1_0());
                    	    						
                    	    pushFollow(FOLLOW_21);
                    	    lv_variables_19_0=ruleKeyValue();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getVariableRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"variables",
                    	    								lv_variables_19_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.KeyValue");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt35 >= 1 ) break loop35;
                                EarlyExitException eee =
                                    new EarlyExitException(35, input);
                                throw eee;
                        }
                        cnt35++;
                    } while (true);

                    this_END_20=(Token)match(input,RULE_END,FOLLOW_20); 

                    					newLeafNode(this_END_20, grammarAccess.getVariableAccess().getENDTerminalRuleCall_1_3_2());
                    				

                    }

                    this_END_21=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_21, grammarAccess.getVariableAccess().getENDTerminalRuleCall_1_4());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariable"


    // $ANTLR start "entryRuleResource"
    // InternalPipelineParser.g:1368:1: entryRuleResource returns [EObject current=null] : iv_ruleResource= ruleResource EOF ;
    public final EObject entryRuleResource() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleResource = null;


        try {
            // InternalPipelineParser.g:1368:49: (iv_ruleResource= ruleResource EOF )
            // InternalPipelineParser.g:1369:2: iv_ruleResource= ruleResource EOF
            {
             newCompositeNode(grammarAccess.getResourceRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleResource=ruleResource();

            state._fsp--;

             current =iv_ruleResource; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleResource"


    // $ANTLR start "ruleResource"
    // InternalPipelineParser.g:1375:1: ruleResource returns [EObject current=null] : ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) ) ;
    public final EObject ruleResource() throws RecognitionException {
        EObject current = null;

        Token lv_resourceName_0_1=null;
        Token lv_resourceName_0_2=null;
        Token lv_resourceName_0_3=null;
        Token lv_resourceName_0_4=null;
        Token lv_resourceName_0_5=null;
        Token lv_resourceName_0_6=null;
        Token otherlv_1=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token this_END_6=null;
        EObject lv_resourceValues_2_0 = null;

        EObject lv_resourceValues_5_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:1381:2: ( ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) ) )
            // InternalPipelineParser.g:1382:2: ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) )
            {
            // InternalPipelineParser.g:1382:2: ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) )
            // InternalPipelineParser.g:1383:3: ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) )
            {
            // InternalPipelineParser.g:1383:3: ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) )
            // InternalPipelineParser.g:1384:4: ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) )
            {
            // InternalPipelineParser.g:1384:4: ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) )
            // InternalPipelineParser.g:1385:5: (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages )
            {
            // InternalPipelineParser.g:1385:5: (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages )
            int alt37=6;
            switch ( input.LA(1) ) {
            case Builds:
                {
                alt37=1;
                }
                break;
            case Containers:
                {
                alt37=2;
                }
                break;
            case Pipelines:
                {
                alt37=3;
                }
                break;
            case Repositories:
                {
                alt37=4;
                }
                break;
            case Webhooks:
                {
                alt37=5;
                }
                break;
            case Packages:
                {
                alt37=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // InternalPipelineParser.g:1386:6: lv_resourceName_0_1= Builds
                    {
                    lv_resourceName_0_1=(Token)match(input,Builds,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_1, grammarAccess.getResourceAccess().getResourceNameBuildsKeyword_0_0_0());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_1, null);
                    					

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:1397:6: lv_resourceName_0_2= Containers
                    {
                    lv_resourceName_0_2=(Token)match(input,Containers,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_2, grammarAccess.getResourceAccess().getResourceNameContainersKeyword_0_0_1());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_2, null);
                    					

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:1408:6: lv_resourceName_0_3= Pipelines
                    {
                    lv_resourceName_0_3=(Token)match(input,Pipelines,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_3, grammarAccess.getResourceAccess().getResourceNamePipelinesKeyword_0_0_2());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_3, null);
                    					

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:1419:6: lv_resourceName_0_4= Repositories
                    {
                    lv_resourceName_0_4=(Token)match(input,Repositories,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_4, grammarAccess.getResourceAccess().getResourceNameRepositoriesKeyword_0_0_3());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_4, null);
                    					

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:1430:6: lv_resourceName_0_5= Webhooks
                    {
                    lv_resourceName_0_5=(Token)match(input,Webhooks,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_5, grammarAccess.getResourceAccess().getResourceNameWebhooksKeyword_0_0_4());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_5, null);
                    					

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:1441:6: lv_resourceName_0_6= Packages
                    {
                    lv_resourceName_0_6=(Token)match(input,Packages,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_6, grammarAccess.getResourceAccess().getResourceNamePackagesKeyword_0_0_5());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_6, null);
                    					

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:1454:3: ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==EOF||LA40_0==Repositories||LA40_0==Containers||LA40_0==Pipelines||LA40_0==Packages||LA40_0==Webhooks||LA40_0==Builds||LA40_0==HyphenMinus||LA40_0==RULE_END) ) {
                alt40=1;
            }
            else if ( (LA40_0==RULE_BEGIN) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // InternalPipelineParser.g:1455:4: (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )*
                    {
                    // InternalPipelineParser.g:1455:4: (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==HyphenMinus) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1456:5: otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) )
                    	    {
                    	    otherlv_1=(Token)match(input,HyphenMinus,FOLLOW_38); 

                    	    					newLeafNode(otherlv_1, grammarAccess.getResourceAccess().getHyphenMinusKeyword_1_0_0());
                    	    				
                    	    // InternalPipelineParser.g:1460:5: ( (lv_resourceValues_2_0= ruleParameterValue ) )
                    	    // InternalPipelineParser.g:1461:6: (lv_resourceValues_2_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:1461:6: (lv_resourceValues_2_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:1462:7: lv_resourceValues_2_0= ruleParameterValue
                    	    {

                    	    							newCompositeNode(grammarAccess.getResourceAccess().getResourceValuesParameterValueParserRuleCall_1_0_1_0());
                    	    						
                    	    pushFollow(FOLLOW_12);
                    	    lv_resourceValues_2_0=ruleParameterValue();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getResourceRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"resourceValues",
                    	    								lv_resourceValues_2_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:1481:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END )
                    {
                    // InternalPipelineParser.g:1481:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END )
                    // InternalPipelineParser.g:1482:5: this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END
                    {
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_46); 

                    					newLeafNode(this_BEGIN_3, grammarAccess.getResourceAccess().getBEGINTerminalRuleCall_1_1_0());
                    				
                    // InternalPipelineParser.g:1486:5: (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )*
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==HyphenMinus) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1487:6: otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) )
                    	    {
                    	    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_38); 

                    	    						newLeafNode(otherlv_4, grammarAccess.getResourceAccess().getHyphenMinusKeyword_1_1_1_0());
                    	    					
                    	    // InternalPipelineParser.g:1491:6: ( (lv_resourceValues_5_0= ruleParameterValue ) )
                    	    // InternalPipelineParser.g:1492:7: (lv_resourceValues_5_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:1492:7: (lv_resourceValues_5_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:1493:8: lv_resourceValues_5_0= ruleParameterValue
                    	    {

                    	    								newCompositeNode(grammarAccess.getResourceAccess().getResourceValuesParameterValueParserRuleCall_1_1_1_1_0());
                    	    							
                    	    pushFollow(FOLLOW_46);
                    	    lv_resourceValues_5_0=ruleParameterValue();

                    	    state._fsp--;


                    	    								if (current==null) {
                    	    									current = createModelElementForParent(grammarAccess.getResourceRule());
                    	    								}
                    	    								add(
                    	    									current,
                    	    									"resourceValues",
                    	    									lv_resourceValues_5_0,
                    	    									"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    								afterParserOrEnumRuleCall();
                    	    							

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    this_END_6=(Token)match(input,RULE_END,FOLLOW_2); 

                    					newLeafNode(this_END_6, grammarAccess.getResourceAccess().getENDTerminalRuleCall_1_1_2());
                    				

                    }


                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleResource"


    // $ANTLR start "entryRuleEvent"
    // InternalPipelineParser.g:1521:1: entryRuleEvent returns [EObject current=null] : iv_ruleEvent= ruleEvent EOF ;
    public final EObject entryRuleEvent() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEvent = null;


        try {
            // InternalPipelineParser.g:1521:46: (iv_ruleEvent= ruleEvent EOF )
            // InternalPipelineParser.g:1522:2: iv_ruleEvent= ruleEvent EOF
            {
             newCompositeNode(grammarAccess.getEventRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleEvent=ruleEvent();

            state._fsp--;

             current =iv_ruleEvent; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEvent"


    // $ANTLR start "ruleEvent"
    // InternalPipelineParser.g:1528:1: ruleEvent returns [EObject current=null] : ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) ) ) ) ;
    public final EObject ruleEvent() throws RecognitionException {
        EObject current = null;

        Token lv_simpleEvent_1_0=null;
        Token otherlv_2=null;
        Token this_BEGIN_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token lv_batch_9_0=null;
        Token otherlv_10=null;
        Token lv_autoCancel_11_0=null;
        Token otherlv_12=null;
        Token lv_workflows_13_3=null;
        Token otherlv_14=null;
        Token lv_drafts_15_0=null;
        Token otherlv_16=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token otherlv_22=null;
        Token this_BEGIN_23=null;
        Token otherlv_25=null;
        Token otherlv_27=null;
        Token this_END_29=null;
        Token otherlv_30=null;
        Token otherlv_32=null;
        Token otherlv_34=null;
        Token otherlv_36=null;
        Token this_BEGIN_37=null;
        Token this_END_39=null;
        Token otherlv_40=null;
        Token this_BEGIN_42=null;
        Token otherlv_43=null;
        Token otherlv_45=null;
        Token this_END_47=null;
        Token otherlv_48=null;
        Token otherlv_50=null;
        Token this_BEGIN_52=null;
        Token otherlv_53=null;
        Token otherlv_55=null;
        Token this_END_57=null;
        Token otherlv_58=null;
        Token this_END_60=null;
        Token lv_scheduleNameKW_61_1=null;
        Token lv_scheduleNameKW_61_2=null;
        Token lv_workflowTypeKW_63_0=null;
        Token otherlv_64=null;
        Token this_BEGIN_65=null;
        Token this_END_67=null;
        Enumerator lv_name_0_0 = null;

        EObject lv_includedBranches_3_0 = null;

        EObject lv_activities_7_0 = null;

        AntlrDatatypeRuleToken lv_workflows_13_1 = null;

        AntlrDatatypeRuleToken lv_workflows_13_2 = null;

        EObject lv_includedBranches_17_0 = null;

        EObject lv_includedBranches_19_0 = null;

        EObject lv_includedBranches_21_0 = null;

        EObject lv_includedBranches_24_0 = null;

        EObject lv_includedBranches_26_0 = null;

        EObject lv_excludedBranches_28_0 = null;

        EObject lv_excludedBranches_31_0 = null;

        EObject lv_excludedBranches_33_0 = null;

        EObject lv_excludedBranches_35_0 = null;

        EObject lv_excludedBranches_38_0 = null;

        AntlrDatatypeRuleToken lv_includedPaths_41_0 = null;

        AntlrDatatypeRuleToken lv_includedPaths_44_0 = null;

        AntlrDatatypeRuleToken lv_excludedPaths_46_0 = null;

        AntlrDatatypeRuleToken lv_excludedPaths_49_0 = null;

        AntlrDatatypeRuleToken lv_includedTags_51_0 = null;

        AntlrDatatypeRuleToken lv_includedTags_54_0 = null;

        AntlrDatatypeRuleToken lv_excludedTags_56_0 = null;

        AntlrDatatypeRuleToken lv_excludedTags_59_0 = null;

        EObject lv_triggerSchedules_62_0 = null;

        EObject lv_workFlowActivities_66_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:1534:2: ( ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) ) ) ) )
            // InternalPipelineParser.g:1535:2: ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) ) ) )
            {
            // InternalPipelineParser.g:1535:2: ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) ) ) )
            int alt74=2;
            switch ( input.LA(1) ) {
            case Pull_request_review_comment:
            case BitbucketBranchCreated:
            case BitbucketBranchDeleted:
            case BitbucketTagCreated:
            case BitbucketTagDeleted:
            case Pull_request_review:
            case Pull_request_target:
            case Repository_dispatch:
            case Deployment_status:
            case Pipeline_schedule:
            case Registry_package:
            case Merge_requests:
            case Project_column:
            case WorkflowRules:
            case Issue_comment:
            case Notifications:
            case PullRequests:
            case LockBehavior:
            case Project_card:
            case Pull_request:
            case Workflow_run:
            case Check_suite:
            case AutoCancel:
            case Conditions:
            case Deployment:
            case Page_build:
            case PlanBranch:
            case Repository:
            case Bitbucket:
            case Check_run:
            case Milestone:
            case Pipelines:
            case Scheduled:
            case Branches:
            case Changes:
            case Default:
            case Project:
            case Release:
            case Trigger:
            case Create:
            case Custom:
            case Delete:
            case Drafts:
            case Except:
            case Gollum:
            case Issues:
            case Public:
            case Remote:
            case Status:
            case Label:
            case Paths:
            case Rules:
            case Watch:
            case Cron:
            case Fork:
            case Only:
            case Push:
            case Tags:
            case Pr:
            case RULE_ID:
                {
                alt74=1;
                }
                break;
            case Workflow_dispatch:
                {
                int LA74_2 = input.LA(2);

                if ( (LA74_2==EOF||(LA74_2>=Pull_request_review_comment && LA74_2<=Pull_request_target)||LA74_2==Repository_dispatch||(LA74_2>=Deployment_status && LA74_2<=Workflow_dispatch)||LA74_2==Registry_package||(LA74_2>=Merge_requests && LA74_2<=Project_column)||LA74_2==WorkflowRules||(LA74_2>=Issue_comment && LA74_2<=Workflow_call)||LA74_2==LockBehavior||(LA74_2>=Project_card && LA74_2<=Pull_request)||(LA74_2>=Workflow_run && LA74_2<=Check_suite)||(LA74_2>=AutoCancel && LA74_2<=Conditions)||LA74_2==Deployment||LA74_2==Page_build||LA74_2==PlanBranch||LA74_2==Repository||(LA74_2>=Bitbucket && LA74_2<=Check_run)||(LA74_2>=Milestone && LA74_2<=Pipelines)||(LA74_2>=Scheduled && LA74_2<=Schedules)||LA74_2==Branches||LA74_2==Schedule||LA74_2==Changes||LA74_2==Default||LA74_2==Project||LA74_2==Release||LA74_2==Trigger||(LA74_2>=Create && LA74_2<=Delete)||(LA74_2>=Drafts && LA74_2<=Gollum)||LA74_2==Issues||LA74_2==Public||LA74_2==Remote||(LA74_2>=Stages && LA74_2<=Status)||LA74_2==Label||LA74_2==Paths||LA74_2==Rules||LA74_2==Watch||(LA74_2>=Cron && LA74_2<=Jobs)||LA74_2==Only||LA74_2==Push||LA74_2==Tags||LA74_2==Pr||(LA74_2>=Comma && LA74_2<=HyphenMinus)||LA74_2==RightSquareBracket||LA74_2==RULE_ID||LA74_2==RULE_END||LA74_2==RULE_STRING) ) {
                    alt74=1;
                }
                else if ( (LA74_2==RULE_BEGIN) ) {
                    switch ( input.LA(3) ) {
                    case BranchesIgnore:
                    case PathsIgnore:
                    case TagsIgnore:
                    case AutoCancel:
                    case Workflows:
                    case Branches:
                    case Drafts:
                    case Batch:
                    case Paths:
                    case Types:
                    case Tags:
                        {
                        alt74=1;
                        }
                        break;
                    case RULE_END:
                        {
                        alt74=1;
                        }
                        break;
                    case Outputs:
                    case Secrets:
                    case Inputs:
                    case HyphenMinus:
                    case LeftSquareBracket:
                    case RULE_BEGIN:
                        {
                        alt74=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 5, input);

                        throw nvae;
                    }

                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 2, input);

                    throw nvae;
                }
                }
                break;
            case Workflow_call:
                {
                int LA74_3 = input.LA(2);

                if ( (LA74_3==RULE_BEGIN) ) {
                    switch ( input.LA(3) ) {
                    case BranchesIgnore:
                    case PathsIgnore:
                    case TagsIgnore:
                    case AutoCancel:
                    case Workflows:
                    case Branches:
                    case Drafts:
                    case Batch:
                    case Paths:
                    case Types:
                    case Tags:
                        {
                        alt74=1;
                        }
                        break;
                    case RULE_END:
                        {
                        alt74=1;
                        }
                        break;
                    case Outputs:
                    case Secrets:
                    case Inputs:
                    case HyphenMinus:
                    case LeftSquareBracket:
                    case RULE_BEGIN:
                        {
                        alt74=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA74_3==EOF||(LA74_3>=Pull_request_review_comment && LA74_3<=Pull_request_target)||LA74_3==Repository_dispatch||(LA74_3>=Deployment_status && LA74_3<=Workflow_dispatch)||LA74_3==Registry_package||(LA74_3>=Merge_requests && LA74_3<=Project_column)||LA74_3==WorkflowRules||(LA74_3>=Issue_comment && LA74_3<=Workflow_call)||LA74_3==LockBehavior||(LA74_3>=Project_card && LA74_3<=Pull_request)||(LA74_3>=Workflow_run && LA74_3<=Check_suite)||(LA74_3>=AutoCancel && LA74_3<=Conditions)||LA74_3==Deployment||LA74_3==Page_build||LA74_3==PlanBranch||LA74_3==Repository||(LA74_3>=Bitbucket && LA74_3<=Check_run)||(LA74_3>=Milestone && LA74_3<=Pipelines)||(LA74_3>=Scheduled && LA74_3<=Schedules)||LA74_3==Branches||LA74_3==Schedule||LA74_3==Changes||LA74_3==Default||LA74_3==Project||LA74_3==Release||LA74_3==Trigger||(LA74_3>=Create && LA74_3<=Delete)||(LA74_3>=Drafts && LA74_3<=Gollum)||LA74_3==Issues||LA74_3==Public||LA74_3==Remote||(LA74_3>=Stages && LA74_3<=Status)||LA74_3==Label||LA74_3==Paths||LA74_3==Rules||LA74_3==Watch||(LA74_3>=Cron && LA74_3<=Jobs)||LA74_3==Only||LA74_3==Push||LA74_3==Tags||LA74_3==Pr||(LA74_3>=Comma && LA74_3<=HyphenMinus)||LA74_3==RightSquareBracket||LA74_3==RULE_ID||LA74_3==RULE_END||LA74_3==RULE_STRING) ) {
                    alt74=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 3, input);

                    throw nvae;
                }
                }
                break;
            case Schedules:
            case Schedule:
                {
                alt74=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }

            switch (alt74) {
                case 1 :
                    // InternalPipelineParser.g:1536:3: ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )? )
                    {
                    // InternalPipelineParser.g:1536:3: ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )? )
                    // InternalPipelineParser.g:1537:4: ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) ( (lv_includedBranches_3_0= ruleBranch ) )* (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )?
                    {
                    // InternalPipelineParser.g:1537:4: ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( ((LA42_0>=Pull_request_review_comment && LA42_0<=Pull_request_target)||LA42_0==Repository_dispatch||(LA42_0>=Deployment_status && LA42_0<=Workflow_dispatch)||LA42_0==Registry_package||(LA42_0>=Merge_requests && LA42_0<=Project_column)||LA42_0==WorkflowRules||(LA42_0>=Issue_comment && LA42_0<=Workflow_call)||LA42_0==LockBehavior||(LA42_0>=Project_card && LA42_0<=Pull_request)||(LA42_0>=Workflow_run && LA42_0<=Check_suite)||(LA42_0>=AutoCancel && LA42_0<=Conditions)||LA42_0==Deployment||LA42_0==Page_build||LA42_0==PlanBranch||LA42_0==Repository||(LA42_0>=Bitbucket && LA42_0<=Check_run)||(LA42_0>=Milestone && LA42_0<=Pipelines)||LA42_0==Scheduled||LA42_0==Branches||LA42_0==Changes||LA42_0==Default||LA42_0==Project||LA42_0==Release||LA42_0==Trigger||(LA42_0>=Create && LA42_0<=Delete)||(LA42_0>=Drafts && LA42_0<=Gollum)||LA42_0==Issues||LA42_0==Public||LA42_0==Remote||LA42_0==Status||LA42_0==Label||LA42_0==Paths||LA42_0==Rules||LA42_0==Watch||(LA42_0>=Cron && LA42_0<=Fork)||LA42_0==Only||LA42_0==Push||LA42_0==Tags||LA42_0==Pr) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==RULE_ID) ) {
                        alt42=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // InternalPipelineParser.g:1538:5: ( (lv_name_0_0= rulePipelineEventKeyword ) )
                            {
                            // InternalPipelineParser.g:1538:5: ( (lv_name_0_0= rulePipelineEventKeyword ) )
                            // InternalPipelineParser.g:1539:6: (lv_name_0_0= rulePipelineEventKeyword )
                            {
                            // InternalPipelineParser.g:1539:6: (lv_name_0_0= rulePipelineEventKeyword )
                            // InternalPipelineParser.g:1540:7: lv_name_0_0= rulePipelineEventKeyword
                            {

                            							newCompositeNode(grammarAccess.getEventAccess().getNamePipelineEventKeywordEnumRuleCall_0_0_0_0());
                            						
                            pushFollow(FOLLOW_47);
                            lv_name_0_0=rulePipelineEventKeyword();

                            state._fsp--;


                            							if (current==null) {
                            								current = createModelElementForParent(grammarAccess.getEventRule());
                            							}
                            							set(
                            								current,
                            								"name",
                            								lv_name_0_0,
                            								"ca.mcgill.devops.pipeline.Pipeline.PipelineEventKeyword");
                            							afterParserOrEnumRuleCall();
                            						

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:1558:5: ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? )
                            {
                            // InternalPipelineParser.g:1558:5: ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? )
                            // InternalPipelineParser.g:1559:6: ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )?
                            {
                            // InternalPipelineParser.g:1559:6: ( (lv_simpleEvent_1_0= RULE_ID ) )
                            // InternalPipelineParser.g:1560:7: (lv_simpleEvent_1_0= RULE_ID )
                            {
                            // InternalPipelineParser.g:1560:7: (lv_simpleEvent_1_0= RULE_ID )
                            // InternalPipelineParser.g:1561:8: lv_simpleEvent_1_0= RULE_ID
                            {
                            lv_simpleEvent_1_0=(Token)match(input,RULE_ID,FOLLOW_48); 

                            								newLeafNode(lv_simpleEvent_1_0, grammarAccess.getEventAccess().getSimpleEventIDTerminalRuleCall_0_0_1_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getEventRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"simpleEvent",
                            									lv_simpleEvent_1_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.ID");
                            							

                            }


                            }

                            // InternalPipelineParser.g:1577:6: (otherlv_2= Colon )?
                            int alt41=2;
                            int LA41_0 = input.LA(1);

                            if ( (LA41_0==Colon) ) {
                                alt41=1;
                            }
                            switch (alt41) {
                                case 1 :
                                    // InternalPipelineParser.g:1578:7: otherlv_2= Colon
                                    {
                                    otherlv_2=(Token)match(input,Colon,FOLLOW_47); 

                                    							newLeafNode(otherlv_2, grammarAccess.getEventAccess().getColonKeyword_0_0_1_1());
                                    						

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    // InternalPipelineParser.g:1585:4: ( (lv_includedBranches_3_0= ruleBranch ) )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==HyphenMinus||LA43_0==RULE_ID||LA43_0==RULE_STRING) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1586:5: (lv_includedBranches_3_0= ruleBranch )
                    	    {
                    	    // InternalPipelineParser.g:1586:5: (lv_includedBranches_3_0= ruleBranch )
                    	    // InternalPipelineParser.g:1587:6: lv_includedBranches_3_0= ruleBranch
                    	    {

                    	    						newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_1_0());
                    	    					
                    	    pushFollow(FOLLOW_47);
                    	    lv_includedBranches_3_0=ruleBranch();

                    	    state._fsp--;


                    	    						if (current==null) {
                    	    							current = createModelElementForParent(grammarAccess.getEventRule());
                    	    						}
                    	    						add(
                    	    							current,
                    	    							"includedBranches",
                    	    							lv_includedBranches_3_0,
                    	    							"ca.mcgill.devops.pipeline.Pipeline.Branch");
                    	    						afterParserOrEnumRuleCall();
                    	    					

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);

                    // InternalPipelineParser.g:1604:4: (this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==RULE_BEGIN) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // InternalPipelineParser.g:1605:5: this_BEGIN_4= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_60= RULE_END
                            {
                            this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_49); 

                            					newLeafNode(this_BEGIN_4, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_2_0());
                            				
                            // InternalPipelineParser.g:1609:5: ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) )
                            // InternalPipelineParser.g:1610:6: ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) )
                            {
                            // InternalPipelineParser.g:1610:6: ( ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* ) )
                            // InternalPipelineParser.g:1611:7: ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* )
                            {
                             
                            						  getUnorderedGroupHelper().enter(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            						
                            // InternalPipelineParser.g:1614:7: ( ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )* )
                            // InternalPipelineParser.g:1615:8: ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )*
                            {
                            // InternalPipelineParser.g:1615:8: ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )*
                            loop67:
                            do {
                                int alt67=12;
                                alt67 = dfa67.predict(input);
                                switch (alt67) {
                            	case 1 :
                            	    // InternalPipelineParser.g:1616:6: ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1616:6: ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1617:7: {...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 0) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 0)");
                            	    }
                            	    // InternalPipelineParser.g:1617:108: ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) )
                            	    // InternalPipelineParser.g:1618:8: ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 0);
                            	    							
                            	    // InternalPipelineParser.g:1621:11: ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) )
                            	    // InternalPipelineParser.g:1621:12: {...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1621:21: (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) )
                            	    // InternalPipelineParser.g:1621:22: otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) )
                            	    {
                            	    otherlv_6=(Token)match(input,Types,FOLLOW_50); 

                            	    											newLeafNode(otherlv_6, grammarAccess.getEventAccess().getTypesKeyword_0_2_1_0_0());
                            	    										
                            	    // InternalPipelineParser.g:1625:11: ( (lv_activities_7_0= ruleActivity ) )
                            	    // InternalPipelineParser.g:1626:12: (lv_activities_7_0= ruleActivity )
                            	    {
                            	    // InternalPipelineParser.g:1626:12: (lv_activities_7_0= ruleActivity )
                            	    // InternalPipelineParser.g:1627:13: lv_activities_7_0= ruleActivity
                            	    {

                            	    													newCompositeNode(grammarAccess.getEventAccess().getActivitiesActivityParserRuleCall_0_2_1_0_1_0());
                            	    												
                            	    pushFollow(FOLLOW_49);
                            	    lv_activities_7_0=ruleActivity();

                            	    state._fsp--;


                            	    													if (current==null) {
                            	    														current = createModelElementForParent(grammarAccess.getEventRule());
                            	    													}
                            	    													add(
                            	    														current,
                            	    														"activities",
                            	    														lv_activities_7_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.Activity");
                            	    													afterParserOrEnumRuleCall();
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    // InternalPipelineParser.g:1650:6: ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1650:6: ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1651:7: {...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 1) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 1)");
                            	    }
                            	    // InternalPipelineParser.g:1651:108: ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1652:8: ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 1);
                            	    							
                            	    // InternalPipelineParser.g:1655:11: ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1655:12: {...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1655:21: (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1655:22: otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) )
                            	    {
                            	    otherlv_8=(Token)match(input,Batch,FOLLOW_14); 

                            	    											newLeafNode(otherlv_8, grammarAccess.getEventAccess().getBatchKeyword_0_2_1_1_0());
                            	    										
                            	    // InternalPipelineParser.g:1659:11: ( (lv_batch_9_0= RULE_ID ) )
                            	    // InternalPipelineParser.g:1660:12: (lv_batch_9_0= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1660:12: (lv_batch_9_0= RULE_ID )
                            	    // InternalPipelineParser.g:1661:13: lv_batch_9_0= RULE_ID
                            	    {
                            	    lv_batch_9_0=(Token)match(input,RULE_ID,FOLLOW_49); 

                            	    													newLeafNode(lv_batch_9_0, grammarAccess.getEventAccess().getBatchIDTerminalRuleCall_0_2_1_1_1_0());
                            	    												

                            	    													if (current==null) {
                            	    														current = createModelElement(grammarAccess.getEventRule());
                            	    													}
                            	    													setWithLastConsumed(
                            	    														current,
                            	    														"batch",
                            	    														lv_batch_9_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    // InternalPipelineParser.g:1683:6: ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1683:6: ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1684:7: {...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 2) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 2)");
                            	    }
                            	    // InternalPipelineParser.g:1684:108: ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1685:8: ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 2);
                            	    							
                            	    // InternalPipelineParser.g:1688:11: ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1688:12: {...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1688:21: (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1688:22: otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) )
                            	    {
                            	    otherlv_10=(Token)match(input,AutoCancel,FOLLOW_14); 

                            	    											newLeafNode(otherlv_10, grammarAccess.getEventAccess().getAutoCancelKeyword_0_2_1_2_0());
                            	    										
                            	    // InternalPipelineParser.g:1692:11: ( (lv_autoCancel_11_0= RULE_ID ) )
                            	    // InternalPipelineParser.g:1693:12: (lv_autoCancel_11_0= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1693:12: (lv_autoCancel_11_0= RULE_ID )
                            	    // InternalPipelineParser.g:1694:13: lv_autoCancel_11_0= RULE_ID
                            	    {
                            	    lv_autoCancel_11_0=(Token)match(input,RULE_ID,FOLLOW_49); 

                            	    													newLeafNode(lv_autoCancel_11_0, grammarAccess.getEventAccess().getAutoCancelIDTerminalRuleCall_0_2_1_2_1_0());
                            	    												

                            	    													if (current==null) {
                            	    														current = createModelElement(grammarAccess.getEventRule());
                            	    													}
                            	    													setWithLastConsumed(
                            	    														current,
                            	    														"autoCancel",
                            	    														lv_autoCancel_11_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 4 :
                            	    // InternalPipelineParser.g:1716:6: ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1716:6: ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1717:7: {...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 3) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 3)");
                            	    }
                            	    // InternalPipelineParser.g:1717:108: ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1718:8: ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 3);
                            	    							
                            	    // InternalPipelineParser.g:1721:11: ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1721:12: {...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1721:21: (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1721:22: otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) )
                            	    {
                            	    otherlv_12=(Token)match(input,Workflows,FOLLOW_51); 

                            	    											newLeafNode(otherlv_12, grammarAccess.getEventAccess().getWorkflowsKeyword_0_2_1_3_0());
                            	    										
                            	    // InternalPipelineParser.g:1725:11: ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1726:12: ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) )
                            	    {
                            	    // InternalPipelineParser.g:1726:12: ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) )
                            	    // InternalPipelineParser.g:1727:13: (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1727:13: (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID )
                            	    int alt44=3;
                            	    switch ( input.LA(1) ) {
                            	    case LeftSquareBracket:
                            	        {
                            	        alt44=1;
                            	        }
                            	        break;
                            	    case HyphenMinus:
                            	    case RULE_BEGIN:
                            	        {
                            	        alt44=2;
                            	        }
                            	        break;
                            	    case RULE_ID:
                            	        {
                            	        alt44=3;
                            	        }
                            	        break;
                            	    default:
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 44, 0, input);

                            	        throw nvae;
                            	    }

                            	    switch (alt44) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:1728:14: lv_workflows_13_1= ruleArrayList
                            	            {

                            	            														newCompositeNode(grammarAccess.getEventAccess().getWorkflowsArrayListParserRuleCall_0_2_1_3_1_0_0());
                            	            													
                            	            pushFollow(FOLLOW_49);
                            	            lv_workflows_13_1=ruleArrayList();

                            	            state._fsp--;


                            	            														if (current==null) {
                            	            															current = createModelElementForParent(grammarAccess.getEventRule());
                            	            														}
                            	            														set(
                            	            															current,
                            	            															"workflows",
                            	            															lv_workflows_13_1,
                            	            															"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
                            	            														afterParserOrEnumRuleCall();
                            	            													

                            	            }
                            	            break;
                            	        case 2 :
                            	            // InternalPipelineParser.g:1744:14: lv_workflows_13_2= ruleHyphenValues
                            	            {

                            	            														newCompositeNode(grammarAccess.getEventAccess().getWorkflowsHyphenValuesParserRuleCall_0_2_1_3_1_0_1());
                            	            													
                            	            pushFollow(FOLLOW_49);
                            	            lv_workflows_13_2=ruleHyphenValues();

                            	            state._fsp--;


                            	            														if (current==null) {
                            	            															current = createModelElementForParent(grammarAccess.getEventRule());
                            	            														}
                            	            														set(
                            	            															current,
                            	            															"workflows",
                            	            															lv_workflows_13_2,
                            	            															"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	            														afterParserOrEnumRuleCall();
                            	            													

                            	            }
                            	            break;
                            	        case 3 :
                            	            // InternalPipelineParser.g:1760:14: lv_workflows_13_3= RULE_ID
                            	            {
                            	            lv_workflows_13_3=(Token)match(input,RULE_ID,FOLLOW_49); 

                            	            														newLeafNode(lv_workflows_13_3, grammarAccess.getEventAccess().getWorkflowsIDTerminalRuleCall_0_2_1_3_1_0_2());
                            	            													

                            	            														if (current==null) {
                            	            															current = createModelElement(grammarAccess.getEventRule());
                            	            														}
                            	            														setWithLastConsumed(
                            	            															current,
                            	            															"workflows",
                            	            															lv_workflows_13_3,
                            	            															"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	            													

                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 5 :
                            	    // InternalPipelineParser.g:1783:6: ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1783:6: ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1784:7: {...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 4) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 4)");
                            	    }
                            	    // InternalPipelineParser.g:1784:108: ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1785:8: ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 4);
                            	    							
                            	    // InternalPipelineParser.g:1788:11: ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1788:12: {...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1788:21: (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1788:22: otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) )
                            	    {
                            	    otherlv_14=(Token)match(input,Drafts,FOLLOW_14); 

                            	    											newLeafNode(otherlv_14, grammarAccess.getEventAccess().getDraftsKeyword_0_2_1_4_0());
                            	    										
                            	    // InternalPipelineParser.g:1792:11: ( (lv_drafts_15_0= RULE_ID ) )
                            	    // InternalPipelineParser.g:1793:12: (lv_drafts_15_0= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1793:12: (lv_drafts_15_0= RULE_ID )
                            	    // InternalPipelineParser.g:1794:13: lv_drafts_15_0= RULE_ID
                            	    {
                            	    lv_drafts_15_0=(Token)match(input,RULE_ID,FOLLOW_49); 

                            	    													newLeafNode(lv_drafts_15_0, grammarAccess.getEventAccess().getDraftsIDTerminalRuleCall_0_2_1_4_1_0());
                            	    												

                            	    													if (current==null) {
                            	    														current = createModelElement(grammarAccess.getEventRule());
                            	    													}
                            	    													setWithLastConsumed(
                            	    														current,
                            	    														"drafts",
                            	    														lv_drafts_15_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 6 :
                            	    // InternalPipelineParser.g:1816:6: ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1816:6: ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1817:7: {...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 5) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 5)");
                            	    }
                            	    // InternalPipelineParser.g:1817:108: ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) )
                            	    // InternalPipelineParser.g:1818:8: ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 5);
                            	    							
                            	    // InternalPipelineParser.g:1821:11: ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) )
                            	    // InternalPipelineParser.g:1821:12: {...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1821:21: (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) )
                            	    // InternalPipelineParser.g:1821:22: otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) )
                            	    {
                            	    otherlv_16=(Token)match(input,Branches,FOLLOW_52); 

                            	    											newLeafNode(otherlv_16, grammarAccess.getEventAccess().getBranchesKeyword_0_2_1_5_0());
                            	    										
                            	    // InternalPipelineParser.g:1825:11: ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) )
                            	    int alt53=2;
                            	    int LA53_0 = input.LA(1);

                            	    if ( (LA53_0==BranchesIgnore||LA53_0==PathsIgnore||(LA53_0>=TagsIgnore && LA53_0<=AutoCancel)||LA53_0==Workflows||LA53_0==Branches||LA53_0==Drafts||LA53_0==Batch||LA53_0==Paths||LA53_0==Types||LA53_0==Tags||LA53_0==HyphenMinus||LA53_0==LeftSquareBracket||LA53_0==RULE_ID||LA53_0==RULE_END||LA53_0==RULE_STRING) ) {
                            	        alt53=1;
                            	    }
                            	    else if ( (LA53_0==RULE_BEGIN) ) {
                            	        alt53=2;
                            	    }
                            	    else {
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 53, 0, input);

                            	        throw nvae;
                            	    }
                            	    switch (alt53) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:1826:12: ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) )
                            	            {
                            	            // InternalPipelineParser.g:1826:12: ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) )
                            	            int alt47=2;
                            	            int LA47_0 = input.LA(1);

                            	            if ( (LA47_0==BranchesIgnore||LA47_0==PathsIgnore||(LA47_0>=TagsIgnore && LA47_0<=AutoCancel)||LA47_0==Workflows||LA47_0==Branches||LA47_0==Drafts||LA47_0==Batch||LA47_0==Paths||LA47_0==Types||LA47_0==Tags||LA47_0==HyphenMinus||LA47_0==RULE_ID||LA47_0==RULE_END||LA47_0==RULE_STRING) ) {
                            	                alt47=1;
                            	            }
                            	            else if ( (LA47_0==LeftSquareBracket) ) {
                            	                alt47=2;
                            	            }
                            	            else {
                            	                NoViableAltException nvae =
                            	                    new NoViableAltException("", 47, 0, input);

                            	                throw nvae;
                            	            }
                            	            switch (alt47) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:1827:13: ( (lv_includedBranches_17_0= ruleBranch ) )*
                            	                    {
                            	                    // InternalPipelineParser.g:1827:13: ( (lv_includedBranches_17_0= ruleBranch ) )*
                            	                    loop45:
                            	                    do {
                            	                        int alt45=2;
                            	                        int LA45_0 = input.LA(1);

                            	                        if ( (LA45_0==HyphenMinus||LA45_0==RULE_ID||LA45_0==RULE_STRING) ) {
                            	                            alt45=1;
                            	                        }


                            	                        switch (alt45) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:1828:14: (lv_includedBranches_17_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:1828:14: (lv_includedBranches_17_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:1829:15: lv_includedBranches_17_0= ruleBranch
                            	                    	    {

                            	                    	    															newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_2_1_5_1_0_0_0());
                            	                    	    														
                            	                    	    pushFollow(FOLLOW_53);
                            	                    	    lv_includedBranches_17_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    															if (current==null) {
                            	                    	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    															}
                            	                    	    															add(
                            	                    	    																current,
                            	                    	    																"includedBranches",
                            	                    	    																lv_includedBranches_17_0,
                            	                    	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    															afterParserOrEnumRuleCall();
                            	                    	    														

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop45;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;
                            	                case 2 :
                            	                    // InternalPipelineParser.g:1847:13: (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket )
                            	                    {
                            	                    // InternalPipelineParser.g:1847:13: (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket )
                            	                    // InternalPipelineParser.g:1848:14: otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket
                            	                    {
                            	                    otherlv_18=(Token)match(input,LeftSquareBracket,FOLLOW_54); 

                            	                    														newLeafNode(otherlv_18, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_0_2_1_5_1_0_1_0());
                            	                    													
                            	                    // InternalPipelineParser.g:1852:14: ( (lv_includedBranches_19_0= ruleBranch ) )
                            	                    // InternalPipelineParser.g:1853:15: (lv_includedBranches_19_0= ruleBranch )
                            	                    {
                            	                    // InternalPipelineParser.g:1853:15: (lv_includedBranches_19_0= ruleBranch )
                            	                    // InternalPipelineParser.g:1854:16: lv_includedBranches_19_0= ruleBranch
                            	                    {

                            	                    																newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_2_1_5_1_0_1_1_0());
                            	                    															
                            	                    pushFollow(FOLLOW_9);
                            	                    lv_includedBranches_19_0=ruleBranch();

                            	                    state._fsp--;


                            	                    																if (current==null) {
                            	                    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    																}
                            	                    																add(
                            	                    																	current,
                            	                    																	"includedBranches",
                            	                    																	lv_includedBranches_19_0,
                            	                    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    																afterParserOrEnumRuleCall();
                            	                    															

                            	                    }


                            	                    }

                            	                    // InternalPipelineParser.g:1871:14: (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )*
                            	                    loop46:
                            	                    do {
                            	                        int alt46=2;
                            	                        int LA46_0 = input.LA(1);

                            	                        if ( (LA46_0==Comma) ) {
                            	                            alt46=1;
                            	                        }


                            	                        switch (alt46) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:1872:15: otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) )
                            	                    	    {
                            	                    	    otherlv_20=(Token)match(input,Comma,FOLLOW_54); 

                            	                    	    															newLeafNode(otherlv_20, grammarAccess.getEventAccess().getCommaKeyword_0_2_1_5_1_0_1_2_0());
                            	                    	    														
                            	                    	    // InternalPipelineParser.g:1876:15: ( (lv_includedBranches_21_0= ruleBranch ) )
                            	                    	    // InternalPipelineParser.g:1877:16: (lv_includedBranches_21_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:1877:16: (lv_includedBranches_21_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:1878:17: lv_includedBranches_21_0= ruleBranch
                            	                    	    {

                            	                    	    																	newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_2_1_5_1_0_1_2_1_0());
                            	                    	    																
                            	                    	    pushFollow(FOLLOW_9);
                            	                    	    lv_includedBranches_21_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																	if (current==null) {
                            	                    	    																		current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																	}
                            	                    	    																	add(
                            	                    	    																		current,
                            	                    	    																		"includedBranches",
                            	                    	    																		lv_includedBranches_21_0,
                            	                    	    																		"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																	afterParserOrEnumRuleCall();
                            	                    	    																

                            	                    	    }


                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop46;
                            	                        }
                            	                    } while (true);

                            	                    otherlv_22=(Token)match(input,RightSquareBracket,FOLLOW_49); 

                            	                    														newLeafNode(otherlv_22, grammarAccess.getEventAccess().getRightSquareBracketKeyword_0_2_1_5_1_0_1_3());
                            	                    													

                            	                    }


                            	                    }
                            	                    break;

                            	            }


                            	            }
                            	            break;
                            	        case 2 :
                            	            // InternalPipelineParser.g:1903:12: (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END )
                            	            {
                            	            // InternalPipelineParser.g:1903:12: (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END )
                            	            // InternalPipelineParser.g:1904:13: this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END
                            	            {
                            	            this_BEGIN_23=(Token)match(input,RULE_BEGIN,FOLLOW_55); 

                            	            													newLeafNode(this_BEGIN_23, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_2_1_5_1_1_0());
                            	            												
                            	            // InternalPipelineParser.g:1908:13: ( (lv_includedBranches_24_0= ruleBranch ) )*
                            	            loop48:
                            	            do {
                            	                int alt48=2;
                            	                int LA48_0 = input.LA(1);

                            	                if ( (LA48_0==HyphenMinus||LA48_0==RULE_ID||LA48_0==RULE_STRING) ) {
                            	                    alt48=1;
                            	                }


                            	                switch (alt48) {
                            	            	case 1 :
                            	            	    // InternalPipelineParser.g:1909:14: (lv_includedBranches_24_0= ruleBranch )
                            	            	    {
                            	            	    // InternalPipelineParser.g:1909:14: (lv_includedBranches_24_0= ruleBranch )
                            	            	    // InternalPipelineParser.g:1910:15: lv_includedBranches_24_0= ruleBranch
                            	            	    {

                            	            	    															newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_2_1_5_1_1_1_0());
                            	            	    														
                            	            	    pushFollow(FOLLOW_55);
                            	            	    lv_includedBranches_24_0=ruleBranch();

                            	            	    state._fsp--;


                            	            	    															if (current==null) {
                            	            	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	            	    															}
                            	            	    															add(
                            	            	    																current,
                            	            	    																"includedBranches",
                            	            	    																lv_includedBranches_24_0,
                            	            	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	            	    															afterParserOrEnumRuleCall();
                            	            	    														

                            	            	    }


                            	            	    }
                            	            	    break;

                            	            	default :
                            	            	    break loop48;
                            	                }
                            	            } while (true);

                            	            // InternalPipelineParser.g:1927:13: (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )?
                            	            int alt50=2;
                            	            int LA50_0 = input.LA(1);

                            	            if ( (LA50_0==Include) ) {
                            	                alt50=1;
                            	            }
                            	            switch (alt50) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:1928:14: otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )*
                            	                    {
                            	                    otherlv_25=(Token)match(input,Include,FOLLOW_56); 

                            	                    														newLeafNode(otherlv_25, grammarAccess.getEventAccess().getIncludeKeyword_0_2_1_5_1_1_2_0());
                            	                    													
                            	                    // InternalPipelineParser.g:1932:14: ( (lv_includedBranches_26_0= ruleBranch ) )*
                            	                    loop49:
                            	                    do {
                            	                        int alt49=2;
                            	                        int LA49_0 = input.LA(1);

                            	                        if ( (LA49_0==HyphenMinus||LA49_0==RULE_ID||LA49_0==RULE_STRING) ) {
                            	                            alt49=1;
                            	                        }


                            	                        switch (alt49) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:1933:15: (lv_includedBranches_26_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:1933:15: (lv_includedBranches_26_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:1934:16: lv_includedBranches_26_0= ruleBranch
                            	                    	    {

                            	                    	    																newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_2_1_5_1_1_2_1_0());
                            	                    	    															
                            	                    	    pushFollow(FOLLOW_56);
                            	                    	    lv_includedBranches_26_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																if (current==null) {
                            	                    	    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																}
                            	                    	    																add(
                            	                    	    																	current,
                            	                    	    																	"includedBranches",
                            	                    	    																	lv_includedBranches_26_0,
                            	                    	    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																afterParserOrEnumRuleCall();
                            	                    	    															

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop49;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;

                            	            }

                            	            // InternalPipelineParser.g:1952:13: (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )?
                            	            int alt52=2;
                            	            int LA52_0 = input.LA(1);

                            	            if ( (LA52_0==Exclude) ) {
                            	                alt52=1;
                            	            }
                            	            switch (alt52) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:1953:14: otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )*
                            	                    {
                            	                    otherlv_27=(Token)match(input,Exclude,FOLLOW_13); 

                            	                    														newLeafNode(otherlv_27, grammarAccess.getEventAccess().getExcludeKeyword_0_2_1_5_1_1_3_0());
                            	                    													
                            	                    // InternalPipelineParser.g:1957:14: ( (lv_excludedBranches_28_0= ruleBranch ) )*
                            	                    loop51:
                            	                    do {
                            	                        int alt51=2;
                            	                        int LA51_0 = input.LA(1);

                            	                        if ( (LA51_0==HyphenMinus||LA51_0==RULE_ID||LA51_0==RULE_STRING) ) {
                            	                            alt51=1;
                            	                        }


                            	                        switch (alt51) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:1958:15: (lv_excludedBranches_28_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:1958:15: (lv_excludedBranches_28_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:1959:16: lv_excludedBranches_28_0= ruleBranch
                            	                    	    {

                            	                    	    																newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_2_1_5_1_1_3_1_0());
                            	                    	    															
                            	                    	    pushFollow(FOLLOW_13);
                            	                    	    lv_excludedBranches_28_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																if (current==null) {
                            	                    	    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																}
                            	                    	    																add(
                            	                    	    																	current,
                            	                    	    																	"excludedBranches",
                            	                    	    																	lv_excludedBranches_28_0,
                            	                    	    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																afterParserOrEnumRuleCall();
                            	                    	    															

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop51;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;

                            	            }

                            	            this_END_29=(Token)match(input,RULE_END,FOLLOW_49); 

                            	            													newLeafNode(this_END_29, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_2_1_5_1_1_4());
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 7 :
                            	    // InternalPipelineParser.g:1989:6: ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1989:6: ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1990:7: {...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 6) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 6)");
                            	    }
                            	    // InternalPipelineParser.g:1990:108: ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) )
                            	    // InternalPipelineParser.g:1991:8: ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 6);
                            	    							
                            	    // InternalPipelineParser.g:1994:11: ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) )
                            	    // InternalPipelineParser.g:1994:12: {...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1994:21: (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) )
                            	    // InternalPipelineParser.g:1994:22: otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) )
                            	    {
                            	    otherlv_30=(Token)match(input,BranchesIgnore,FOLLOW_52); 

                            	    											newLeafNode(otherlv_30, grammarAccess.getEventAccess().getBranchesIgnoreKeyword_0_2_1_6_0());
                            	    										
                            	    // InternalPipelineParser.g:1998:11: ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) )
                            	    int alt58=2;
                            	    int LA58_0 = input.LA(1);

                            	    if ( (LA58_0==BranchesIgnore||LA58_0==PathsIgnore||(LA58_0>=TagsIgnore && LA58_0<=AutoCancel)||LA58_0==Workflows||LA58_0==Branches||LA58_0==Drafts||LA58_0==Batch||LA58_0==Paths||LA58_0==Types||LA58_0==Tags||LA58_0==HyphenMinus||LA58_0==LeftSquareBracket||LA58_0==RULE_ID||LA58_0==RULE_END||LA58_0==RULE_STRING) ) {
                            	        alt58=1;
                            	    }
                            	    else if ( (LA58_0==RULE_BEGIN) ) {
                            	        alt58=2;
                            	    }
                            	    else {
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 58, 0, input);

                            	        throw nvae;
                            	    }
                            	    switch (alt58) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:1999:12: ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) )
                            	            {
                            	            // InternalPipelineParser.g:1999:12: ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) )
                            	            int alt56=2;
                            	            int LA56_0 = input.LA(1);

                            	            if ( (LA56_0==BranchesIgnore||LA56_0==PathsIgnore||(LA56_0>=TagsIgnore && LA56_0<=AutoCancel)||LA56_0==Workflows||LA56_0==Branches||LA56_0==Drafts||LA56_0==Batch||LA56_0==Paths||LA56_0==Types||LA56_0==Tags||LA56_0==HyphenMinus||LA56_0==RULE_ID||LA56_0==RULE_END||LA56_0==RULE_STRING) ) {
                            	                alt56=1;
                            	            }
                            	            else if ( (LA56_0==LeftSquareBracket) ) {
                            	                alt56=2;
                            	            }
                            	            else {
                            	                NoViableAltException nvae =
                            	                    new NoViableAltException("", 56, 0, input);

                            	                throw nvae;
                            	            }
                            	            switch (alt56) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2000:13: ( (lv_excludedBranches_31_0= ruleBranch ) )*
                            	                    {
                            	                    // InternalPipelineParser.g:2000:13: ( (lv_excludedBranches_31_0= ruleBranch ) )*
                            	                    loop54:
                            	                    do {
                            	                        int alt54=2;
                            	                        int LA54_0 = input.LA(1);

                            	                        if ( (LA54_0==HyphenMinus||LA54_0==RULE_ID||LA54_0==RULE_STRING) ) {
                            	                            alt54=1;
                            	                        }


                            	                        switch (alt54) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:2001:14: (lv_excludedBranches_31_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:2001:14: (lv_excludedBranches_31_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:2002:15: lv_excludedBranches_31_0= ruleBranch
                            	                    	    {

                            	                    	    															newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_2_1_6_1_0_0_0());
                            	                    	    														
                            	                    	    pushFollow(FOLLOW_53);
                            	                    	    lv_excludedBranches_31_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    															if (current==null) {
                            	                    	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    															}
                            	                    	    															add(
                            	                    	    																current,
                            	                    	    																"excludedBranches",
                            	                    	    																lv_excludedBranches_31_0,
                            	                    	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    															afterParserOrEnumRuleCall();
                            	                    	    														

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop54;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;
                            	                case 2 :
                            	                    // InternalPipelineParser.g:2020:13: (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket )
                            	                    {
                            	                    // InternalPipelineParser.g:2020:13: (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket )
                            	                    // InternalPipelineParser.g:2021:14: otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket
                            	                    {
                            	                    otherlv_32=(Token)match(input,LeftSquareBracket,FOLLOW_54); 

                            	                    														newLeafNode(otherlv_32, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_0_2_1_6_1_0_1_0());
                            	                    													
                            	                    // InternalPipelineParser.g:2025:14: ( (lv_excludedBranches_33_0= ruleBranch ) )
                            	                    // InternalPipelineParser.g:2026:15: (lv_excludedBranches_33_0= ruleBranch )
                            	                    {
                            	                    // InternalPipelineParser.g:2026:15: (lv_excludedBranches_33_0= ruleBranch )
                            	                    // InternalPipelineParser.g:2027:16: lv_excludedBranches_33_0= ruleBranch
                            	                    {

                            	                    																newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_2_1_6_1_0_1_1_0());
                            	                    															
                            	                    pushFollow(FOLLOW_9);
                            	                    lv_excludedBranches_33_0=ruleBranch();

                            	                    state._fsp--;


                            	                    																if (current==null) {
                            	                    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    																}
                            	                    																add(
                            	                    																	current,
                            	                    																	"excludedBranches",
                            	                    																	lv_excludedBranches_33_0,
                            	                    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    																afterParserOrEnumRuleCall();
                            	                    															

                            	                    }


                            	                    }

                            	                    // InternalPipelineParser.g:2044:14: (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )*
                            	                    loop55:
                            	                    do {
                            	                        int alt55=2;
                            	                        int LA55_0 = input.LA(1);

                            	                        if ( (LA55_0==Comma) ) {
                            	                            alt55=1;
                            	                        }


                            	                        switch (alt55) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:2045:15: otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) )
                            	                    	    {
                            	                    	    otherlv_34=(Token)match(input,Comma,FOLLOW_54); 

                            	                    	    															newLeafNode(otherlv_34, grammarAccess.getEventAccess().getCommaKeyword_0_2_1_6_1_0_1_2_0());
                            	                    	    														
                            	                    	    // InternalPipelineParser.g:2049:15: ( (lv_excludedBranches_35_0= ruleBranch ) )
                            	                    	    // InternalPipelineParser.g:2050:16: (lv_excludedBranches_35_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:2050:16: (lv_excludedBranches_35_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:2051:17: lv_excludedBranches_35_0= ruleBranch
                            	                    	    {

                            	                    	    																	newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_2_1_6_1_0_1_2_1_0());
                            	                    	    																
                            	                    	    pushFollow(FOLLOW_9);
                            	                    	    lv_excludedBranches_35_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																	if (current==null) {
                            	                    	    																		current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																	}
                            	                    	    																	add(
                            	                    	    																		current,
                            	                    	    																		"excludedBranches",
                            	                    	    																		lv_excludedBranches_35_0,
                            	                    	    																		"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																	afterParserOrEnumRuleCall();
                            	                    	    																

                            	                    	    }


                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop55;
                            	                        }
                            	                    } while (true);

                            	                    otherlv_36=(Token)match(input,RightSquareBracket,FOLLOW_49); 

                            	                    														newLeafNode(otherlv_36, grammarAccess.getEventAccess().getRightSquareBracketKeyword_0_2_1_6_1_0_1_3());
                            	                    													

                            	                    }


                            	                    }
                            	                    break;

                            	            }


                            	            }
                            	            break;
                            	        case 2 :
                            	            // InternalPipelineParser.g:2076:12: (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END )
                            	            {
                            	            // InternalPipelineParser.g:2076:12: (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END )
                            	            // InternalPipelineParser.g:2077:13: this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END
                            	            {
                            	            this_BEGIN_37=(Token)match(input,RULE_BEGIN,FOLLOW_13); 

                            	            													newLeafNode(this_BEGIN_37, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_2_1_6_1_1_0());
                            	            												
                            	            // InternalPipelineParser.g:2081:13: ( (lv_excludedBranches_38_0= ruleBranch ) )*
                            	            loop57:
                            	            do {
                            	                int alt57=2;
                            	                int LA57_0 = input.LA(1);

                            	                if ( (LA57_0==HyphenMinus||LA57_0==RULE_ID||LA57_0==RULE_STRING) ) {
                            	                    alt57=1;
                            	                }


                            	                switch (alt57) {
                            	            	case 1 :
                            	            	    // InternalPipelineParser.g:2082:14: (lv_excludedBranches_38_0= ruleBranch )
                            	            	    {
                            	            	    // InternalPipelineParser.g:2082:14: (lv_excludedBranches_38_0= ruleBranch )
                            	            	    // InternalPipelineParser.g:2083:15: lv_excludedBranches_38_0= ruleBranch
                            	            	    {

                            	            	    															newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_2_1_6_1_1_1_0());
                            	            	    														
                            	            	    pushFollow(FOLLOW_13);
                            	            	    lv_excludedBranches_38_0=ruleBranch();

                            	            	    state._fsp--;


                            	            	    															if (current==null) {
                            	            	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	            	    															}
                            	            	    															add(
                            	            	    																current,
                            	            	    																"excludedBranches",
                            	            	    																lv_excludedBranches_38_0,
                            	            	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	            	    															afterParserOrEnumRuleCall();
                            	            	    														

                            	            	    }


                            	            	    }
                            	            	    break;

                            	            	default :
                            	            	    break loop57;
                            	                }
                            	            } while (true);

                            	            this_END_39=(Token)match(input,RULE_END,FOLLOW_49); 

                            	            													newLeafNode(this_END_39, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_2_1_6_1_1_2());
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 8 :
                            	    // InternalPipelineParser.g:2112:6: ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2112:6: ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) )
                            	    // InternalPipelineParser.g:2113:7: {...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 7) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 7)");
                            	    }
                            	    // InternalPipelineParser.g:2113:108: ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) )
                            	    // InternalPipelineParser.g:2114:8: ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 7);
                            	    							
                            	    // InternalPipelineParser.g:2117:11: ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) )
                            	    // InternalPipelineParser.g:2117:12: {...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2117:21: (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? )
                            	    // InternalPipelineParser.g:2117:22: otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )?
                            	    {
                            	    otherlv_40=(Token)match(input,Paths,FOLLOW_57); 

                            	    											newLeafNode(otherlv_40, grammarAccess.getEventAccess().getPathsKeyword_0_2_1_7_0());
                            	    										
                            	    // InternalPipelineParser.g:2121:11: ( (lv_includedPaths_41_0= ruleHyphenValues ) )?
                            	    int alt59=2;
                            	    int LA59_0 = input.LA(1);

                            	    if ( (LA59_0==HyphenMinus) ) {
                            	        alt59=1;
                            	    }
                            	    else if ( (LA59_0==RULE_BEGIN) ) {
                            	        int LA59_2 = input.LA(2);

                            	        if ( (LA59_2==HyphenMinus) ) {
                            	            alt59=1;
                            	        }
                            	    }
                            	    switch (alt59) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2122:12: (lv_includedPaths_41_0= ruleHyphenValues )
                            	            {
                            	            // InternalPipelineParser.g:2122:12: (lv_includedPaths_41_0= ruleHyphenValues )
                            	            // InternalPipelineParser.g:2123:13: lv_includedPaths_41_0= ruleHyphenValues
                            	            {

                            	            													newCompositeNode(grammarAccess.getEventAccess().getIncludedPathsHyphenValuesParserRuleCall_0_2_1_7_1_0());
                            	            												
                            	            pushFollow(FOLLOW_58);
                            	            lv_includedPaths_41_0=ruleHyphenValues();

                            	            state._fsp--;


                            	            													if (current==null) {
                            	            														current = createModelElementForParent(grammarAccess.getEventRule());
                            	            													}
                            	            													set(
                            	            														current,
                            	            														"includedPaths",
                            	            														lv_includedPaths_41_0,
                            	            														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	            													afterParserOrEnumRuleCall();
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:2140:11: (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )?
                            	    int alt62=2;
                            	    int LA62_0 = input.LA(1);

                            	    if ( (LA62_0==RULE_BEGIN) ) {
                            	        alt62=1;
                            	    }
                            	    switch (alt62) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2141:12: this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END
                            	            {
                            	            this_BEGIN_42=(Token)match(input,RULE_BEGIN,FOLLOW_59); 

                            	            												newLeafNode(this_BEGIN_42, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_2_1_7_2_0());
                            	            											
                            	            // InternalPipelineParser.g:2145:12: (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )?
                            	            int alt60=2;
                            	            int LA60_0 = input.LA(1);

                            	            if ( (LA60_0==Include) ) {
                            	                alt60=1;
                            	            }
                            	            switch (alt60) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2146:13: otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_43=(Token)match(input,Include,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_43, grammarAccess.getEventAccess().getIncludeKeyword_0_2_1_7_2_1_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2150:13: ( (lv_includedPaths_44_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2151:14: (lv_includedPaths_44_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2151:14: (lv_includedPaths_44_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2152:15: lv_includedPaths_44_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getIncludedPathsHyphenValuesParserRuleCall_0_2_1_7_2_1_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_60);
                            	                    lv_includedPaths_44_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"includedPaths",
                            	                    																lv_includedPaths_44_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            // InternalPipelineParser.g:2170:12: (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )?
                            	            int alt61=2;
                            	            int LA61_0 = input.LA(1);

                            	            if ( (LA61_0==Exclude) ) {
                            	                alt61=1;
                            	            }
                            	            switch (alt61) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2171:13: otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_45=(Token)match(input,Exclude,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_45, grammarAccess.getEventAccess().getExcludeKeyword_0_2_1_7_2_2_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2175:13: ( (lv_excludedPaths_46_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2176:14: (lv_excludedPaths_46_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2176:14: (lv_excludedPaths_46_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2177:15: lv_excludedPaths_46_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getExcludedPathsHyphenValuesParserRuleCall_0_2_1_7_2_2_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_20);
                            	                    lv_excludedPaths_46_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"excludedPaths",
                            	                    																lv_excludedPaths_46_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            this_END_47=(Token)match(input,RULE_END,FOLLOW_49); 

                            	            												newLeafNode(this_END_47, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_2_1_7_2_3());
                            	            											

                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 9 :
                            	    // InternalPipelineParser.g:2206:6: ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2206:6: ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) )
                            	    // InternalPipelineParser.g:2207:7: {...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 8) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 8)");
                            	    }
                            	    // InternalPipelineParser.g:2207:108: ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) )
                            	    // InternalPipelineParser.g:2208:8: ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 8);
                            	    							
                            	    // InternalPipelineParser.g:2211:11: ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) )
                            	    // InternalPipelineParser.g:2211:12: {...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2211:21: (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) )
                            	    // InternalPipelineParser.g:2211:22: otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) )
                            	    {
                            	    otherlv_48=(Token)match(input,PathsIgnore,FOLLOW_33); 

                            	    											newLeafNode(otherlv_48, grammarAccess.getEventAccess().getPathsIgnoreKeyword_0_2_1_8_0());
                            	    										
                            	    // InternalPipelineParser.g:2215:11: ( (lv_excludedPaths_49_0= ruleHyphenValues ) )
                            	    // InternalPipelineParser.g:2216:12: (lv_excludedPaths_49_0= ruleHyphenValues )
                            	    {
                            	    // InternalPipelineParser.g:2216:12: (lv_excludedPaths_49_0= ruleHyphenValues )
                            	    // InternalPipelineParser.g:2217:13: lv_excludedPaths_49_0= ruleHyphenValues
                            	    {

                            	    													newCompositeNode(grammarAccess.getEventAccess().getExcludedPathsHyphenValuesParserRuleCall_0_2_1_8_1_0());
                            	    												
                            	    pushFollow(FOLLOW_49);
                            	    lv_excludedPaths_49_0=ruleHyphenValues();

                            	    state._fsp--;


                            	    													if (current==null) {
                            	    														current = createModelElementForParent(grammarAccess.getEventRule());
                            	    													}
                            	    													set(
                            	    														current,
                            	    														"excludedPaths",
                            	    														lv_excludedPaths_49_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	    													afterParserOrEnumRuleCall();
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 10 :
                            	    // InternalPipelineParser.g:2240:6: ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2240:6: ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) )
                            	    // InternalPipelineParser.g:2241:7: {...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 9) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 9)");
                            	    }
                            	    // InternalPipelineParser.g:2241:108: ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) )
                            	    // InternalPipelineParser.g:2242:8: ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 9);
                            	    							
                            	    // InternalPipelineParser.g:2245:11: ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) )
                            	    // InternalPipelineParser.g:2245:12: {...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2245:21: (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? )
                            	    // InternalPipelineParser.g:2245:22: otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )?
                            	    {
                            	    otherlv_50=(Token)match(input,Tags,FOLLOW_57); 

                            	    											newLeafNode(otherlv_50, grammarAccess.getEventAccess().getTagsKeyword_0_2_1_9_0());
                            	    										
                            	    // InternalPipelineParser.g:2249:11: ( (lv_includedTags_51_0= ruleHyphenValues ) )?
                            	    int alt63=2;
                            	    int LA63_0 = input.LA(1);

                            	    if ( (LA63_0==HyphenMinus) ) {
                            	        alt63=1;
                            	    }
                            	    else if ( (LA63_0==RULE_BEGIN) ) {
                            	        int LA63_2 = input.LA(2);

                            	        if ( (LA63_2==HyphenMinus) ) {
                            	            alt63=1;
                            	        }
                            	    }
                            	    switch (alt63) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2250:12: (lv_includedTags_51_0= ruleHyphenValues )
                            	            {
                            	            // InternalPipelineParser.g:2250:12: (lv_includedTags_51_0= ruleHyphenValues )
                            	            // InternalPipelineParser.g:2251:13: lv_includedTags_51_0= ruleHyphenValues
                            	            {

                            	            													newCompositeNode(grammarAccess.getEventAccess().getIncludedTagsHyphenValuesParserRuleCall_0_2_1_9_1_0());
                            	            												
                            	            pushFollow(FOLLOW_58);
                            	            lv_includedTags_51_0=ruleHyphenValues();

                            	            state._fsp--;


                            	            													if (current==null) {
                            	            														current = createModelElementForParent(grammarAccess.getEventRule());
                            	            													}
                            	            													set(
                            	            														current,
                            	            														"includedTags",
                            	            														lv_includedTags_51_0,
                            	            														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	            													afterParserOrEnumRuleCall();
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:2268:11: (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )?
                            	    int alt66=2;
                            	    int LA66_0 = input.LA(1);

                            	    if ( (LA66_0==RULE_BEGIN) ) {
                            	        alt66=1;
                            	    }
                            	    switch (alt66) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2269:12: this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END
                            	            {
                            	            this_BEGIN_52=(Token)match(input,RULE_BEGIN,FOLLOW_59); 

                            	            												newLeafNode(this_BEGIN_52, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_2_1_9_2_0());
                            	            											
                            	            // InternalPipelineParser.g:2273:12: (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )?
                            	            int alt64=2;
                            	            int LA64_0 = input.LA(1);

                            	            if ( (LA64_0==Include) ) {
                            	                alt64=1;
                            	            }
                            	            switch (alt64) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2274:13: otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_53=(Token)match(input,Include,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_53, grammarAccess.getEventAccess().getIncludeKeyword_0_2_1_9_2_1_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2278:13: ( (lv_includedTags_54_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2279:14: (lv_includedTags_54_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2279:14: (lv_includedTags_54_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2280:15: lv_includedTags_54_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getIncludedTagsHyphenValuesParserRuleCall_0_2_1_9_2_1_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_60);
                            	                    lv_includedTags_54_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"includedTags",
                            	                    																lv_includedTags_54_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            // InternalPipelineParser.g:2298:12: (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )?
                            	            int alt65=2;
                            	            int LA65_0 = input.LA(1);

                            	            if ( (LA65_0==Exclude) ) {
                            	                alt65=1;
                            	            }
                            	            switch (alt65) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2299:13: otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_55=(Token)match(input,Exclude,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_55, grammarAccess.getEventAccess().getExcludeKeyword_0_2_1_9_2_2_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2303:13: ( (lv_excludedTags_56_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2304:14: (lv_excludedTags_56_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2304:14: (lv_excludedTags_56_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2305:15: lv_excludedTags_56_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getExcludedTagsHyphenValuesParserRuleCall_0_2_1_9_2_2_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_20);
                            	                    lv_excludedTags_56_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"excludedTags",
                            	                    																lv_excludedTags_56_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            this_END_57=(Token)match(input,RULE_END,FOLLOW_49); 

                            	            												newLeafNode(this_END_57, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_2_1_9_2_3());
                            	            											

                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 11 :
                            	    // InternalPipelineParser.g:2334:6: ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2334:6: ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) )
                            	    // InternalPipelineParser.g:2335:7: {...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 10) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 10)");
                            	    }
                            	    // InternalPipelineParser.g:2335:109: ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) )
                            	    // InternalPipelineParser.g:2336:8: ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 10);
                            	    							
                            	    // InternalPipelineParser.g:2339:11: ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) )
                            	    // InternalPipelineParser.g:2339:12: {...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2339:21: (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) )
                            	    // InternalPipelineParser.g:2339:22: otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) )
                            	    {
                            	    otherlv_58=(Token)match(input,TagsIgnore,FOLLOW_33); 

                            	    											newLeafNode(otherlv_58, grammarAccess.getEventAccess().getTagsIgnoreKeyword_0_2_1_10_0());
                            	    										
                            	    // InternalPipelineParser.g:2343:11: ( (lv_excludedTags_59_0= ruleHyphenValues ) )
                            	    // InternalPipelineParser.g:2344:12: (lv_excludedTags_59_0= ruleHyphenValues )
                            	    {
                            	    // InternalPipelineParser.g:2344:12: (lv_excludedTags_59_0= ruleHyphenValues )
                            	    // InternalPipelineParser.g:2345:13: lv_excludedTags_59_0= ruleHyphenValues
                            	    {

                            	    													newCompositeNode(grammarAccess.getEventAccess().getExcludedTagsHyphenValuesParserRuleCall_0_2_1_10_1_0());
                            	    												
                            	    pushFollow(FOLLOW_49);
                            	    lv_excludedTags_59_0=ruleHyphenValues();

                            	    state._fsp--;


                            	    													if (current==null) {
                            	    														current = createModelElementForParent(grammarAccess.getEventRule());
                            	    													}
                            	    													set(
                            	    														current,
                            	    														"excludedTags",
                            	    														lv_excludedTags_59_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	    													afterParserOrEnumRuleCall();
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop67;
                                }
                            } while (true);


                            }


                            }

                             
                            						  getUnorderedGroupHelper().leave(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1());
                            						

                            }

                            this_END_60=(Token)match(input,RULE_END,FOLLOW_2); 

                            					newLeafNode(this_END_60, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_2_2());
                            				

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2382:3: ( ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) ) )
                    {
                    // InternalPipelineParser.g:2382:3: ( ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) ) )
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==Schedules||LA73_0==Schedule) ) {
                        alt73=1;
                    }
                    else if ( (LA73_0==Workflow_dispatch||LA73_0==Workflow_call) ) {
                        alt73=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 73, 0, input);

                        throw nvae;
                    }
                    switch (alt73) {
                        case 1 :
                            // InternalPipelineParser.g:2383:4: ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* )
                            {
                            // InternalPipelineParser.g:2383:4: ( ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )* )
                            // InternalPipelineParser.g:2384:5: ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) ) ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )*
                            {
                            // InternalPipelineParser.g:2384:5: ( ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) ) )
                            // InternalPipelineParser.g:2385:6: ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) )
                            {
                            // InternalPipelineParser.g:2385:6: ( (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule ) )
                            // InternalPipelineParser.g:2386:7: (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule )
                            {
                            // InternalPipelineParser.g:2386:7: (lv_scheduleNameKW_61_1= Schedules | lv_scheduleNameKW_61_2= Schedule )
                            int alt69=2;
                            int LA69_0 = input.LA(1);

                            if ( (LA69_0==Schedules) ) {
                                alt69=1;
                            }
                            else if ( (LA69_0==Schedule) ) {
                                alt69=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 69, 0, input);

                                throw nvae;
                            }
                            switch (alt69) {
                                case 1 :
                                    // InternalPipelineParser.g:2387:8: lv_scheduleNameKW_61_1= Schedules
                                    {
                                    lv_scheduleNameKW_61_1=(Token)match(input,Schedules,FOLLOW_11); 

                                    								newLeafNode(lv_scheduleNameKW_61_1, grammarAccess.getEventAccess().getScheduleNameKWSchedulesKeyword_1_0_0_0_0());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getEventRule());
                                    								}
                                    								setWithLastConsumed(current, "scheduleNameKW", lv_scheduleNameKW_61_1, null);
                                    							

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:2398:8: lv_scheduleNameKW_61_2= Schedule
                                    {
                                    lv_scheduleNameKW_61_2=(Token)match(input,Schedule,FOLLOW_11); 

                                    								newLeafNode(lv_scheduleNameKW_61_2, grammarAccess.getEventAccess().getScheduleNameKWScheduleKeyword_1_0_0_0_1());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getEventRule());
                                    								}
                                    								setWithLastConsumed(current, "scheduleNameKW", lv_scheduleNameKW_61_2, null);
                                    							

                                    }
                                    break;

                            }


                            }


                            }

                            // InternalPipelineParser.g:2411:5: ( (lv_triggerSchedules_62_0= ruleTriggerSchedule ) )*
                            loop70:
                            do {
                                int alt70=2;
                                int LA70_0 = input.LA(1);

                                if ( (LA70_0==HyphenMinus||LA70_0==RULE_BEGIN) ) {
                                    alt70=1;
                                }


                                switch (alt70) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2412:6: (lv_triggerSchedules_62_0= ruleTriggerSchedule )
                            	    {
                            	    // InternalPipelineParser.g:2412:6: (lv_triggerSchedules_62_0= ruleTriggerSchedule )
                            	    // InternalPipelineParser.g:2413:7: lv_triggerSchedules_62_0= ruleTriggerSchedule
                            	    {

                            	    							newCompositeNode(grammarAccess.getEventAccess().getTriggerSchedulesTriggerScheduleParserRuleCall_1_0_1_0());
                            	    						
                            	    pushFollow(FOLLOW_11);
                            	    lv_triggerSchedules_62_0=ruleTriggerSchedule();

                            	    state._fsp--;


                            	    							if (current==null) {
                            	    								current = createModelElementForParent(grammarAccess.getEventRule());
                            	    							}
                            	    							add(
                            	    								current,
                            	    								"triggerSchedules",
                            	    								lv_triggerSchedules_62_0,
                            	    								"ca.mcgill.devops.pipeline.Pipeline.TriggerSchedule");
                            	    							afterParserOrEnumRuleCall();
                            	    						

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop70;
                                }
                            } while (true);


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:2432:4: ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) )
                            {
                            // InternalPipelineParser.g:2432:4: ( ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END ) )
                            // InternalPipelineParser.g:2433:5: ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch ) (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END )
                            {
                            // InternalPipelineParser.g:2433:5: ( ( (lv_workflowTypeKW_63_0= Workflow_call ) ) | otherlv_64= Workflow_dispatch )
                            int alt71=2;
                            int LA71_0 = input.LA(1);

                            if ( (LA71_0==Workflow_call) ) {
                                alt71=1;
                            }
                            else if ( (LA71_0==Workflow_dispatch) ) {
                                alt71=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 71, 0, input);

                                throw nvae;
                            }
                            switch (alt71) {
                                case 1 :
                                    // InternalPipelineParser.g:2434:6: ( (lv_workflowTypeKW_63_0= Workflow_call ) )
                                    {
                                    // InternalPipelineParser.g:2434:6: ( (lv_workflowTypeKW_63_0= Workflow_call ) )
                                    // InternalPipelineParser.g:2435:7: (lv_workflowTypeKW_63_0= Workflow_call )
                                    {
                                    // InternalPipelineParser.g:2435:7: (lv_workflowTypeKW_63_0= Workflow_call )
                                    // InternalPipelineParser.g:2436:8: lv_workflowTypeKW_63_0= Workflow_call
                                    {
                                    lv_workflowTypeKW_63_0=(Token)match(input,Workflow_call,FOLLOW_16); 

                                    								newLeafNode(lv_workflowTypeKW_63_0, grammarAccess.getEventAccess().getWorkflowTypeKWWorkflow_callKeyword_1_1_0_0_0());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getEventRule());
                                    								}
                                    								setWithLastConsumed(current, "workflowTypeKW", lv_workflowTypeKW_63_0, "workflow_call:");
                                    							

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:2449:6: otherlv_64= Workflow_dispatch
                                    {
                                    otherlv_64=(Token)match(input,Workflow_dispatch,FOLLOW_16); 

                                    						newLeafNode(otherlv_64, grammarAccess.getEventAccess().getWorkflow_dispatchKeyword_1_1_0_1());
                                    					

                                    }
                                    break;

                            }

                            // InternalPipelineParser.g:2454:5: (this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END )
                            // InternalPipelineParser.g:2455:6: this_BEGIN_65= RULE_BEGIN ( (lv_workFlowActivities_66_0= ruleActivity ) )* this_END_67= RULE_END
                            {
                            this_BEGIN_65=(Token)match(input,RULE_BEGIN,FOLLOW_61); 

                            						newLeafNode(this_BEGIN_65, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_1_1_1_0());
                            					
                            // InternalPipelineParser.g:2459:6: ( (lv_workFlowActivities_66_0= ruleActivity ) )*
                            loop72:
                            do {
                                int alt72=2;
                                int LA72_0 = input.LA(1);

                                if ( (LA72_0==Outputs||LA72_0==Secrets||LA72_0==Inputs||LA72_0==HyphenMinus||LA72_0==LeftSquareBracket||LA72_0==RULE_BEGIN) ) {
                                    alt72=1;
                                }


                                switch (alt72) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2460:7: (lv_workFlowActivities_66_0= ruleActivity )
                            	    {
                            	    // InternalPipelineParser.g:2460:7: (lv_workFlowActivities_66_0= ruleActivity )
                            	    // InternalPipelineParser.g:2461:8: lv_workFlowActivities_66_0= ruleActivity
                            	    {

                            	    								newCompositeNode(grammarAccess.getEventAccess().getWorkFlowActivitiesActivityParserRuleCall_1_1_1_1_0());
                            	    							
                            	    pushFollow(FOLLOW_61);
                            	    lv_workFlowActivities_66_0=ruleActivity();

                            	    state._fsp--;


                            	    								if (current==null) {
                            	    									current = createModelElementForParent(grammarAccess.getEventRule());
                            	    								}
                            	    								add(
                            	    									current,
                            	    									"workFlowActivities",
                            	    									lv_workFlowActivities_66_0,
                            	    									"ca.mcgill.devops.pipeline.Pipeline.Activity");
                            	    								afterParserOrEnumRuleCall();
                            	    							

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop72;
                                }
                            } while (true);

                            this_END_67=(Token)match(input,RULE_END,FOLLOW_2); 

                            						newLeafNode(this_END_67, grammarAccess.getEventAccess().getENDTerminalRuleCall_1_1_1_2());
                            					

                            }


                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEvent"


    // $ANTLR start "entryRuleTriggerSchedule"
    // InternalPipelineParser.g:2489:1: entryRuleTriggerSchedule returns [EObject current=null] : iv_ruleTriggerSchedule= ruleTriggerSchedule EOF ;
    public final EObject entryRuleTriggerSchedule() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTriggerSchedule = null;


        try {
            // InternalPipelineParser.g:2489:56: (iv_ruleTriggerSchedule= ruleTriggerSchedule EOF )
            // InternalPipelineParser.g:2490:2: iv_ruleTriggerSchedule= ruleTriggerSchedule EOF
            {
             newCompositeNode(grammarAccess.getTriggerScheduleRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleTriggerSchedule=ruleTriggerSchedule();

            state._fsp--;

             current =iv_ruleTriggerSchedule; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTriggerSchedule"


    // $ANTLR start "ruleTriggerSchedule"
    // InternalPipelineParser.g:2496:1: ruleTriggerSchedule returns [EObject current=null] : ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? ) ;
    public final EObject ruleTriggerSchedule() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token lv_cronValue_2_0=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token lv_cronValue_6_0=null;
        Token this_END_7=null;
        Token this_BEGIN_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token this_BEGIN_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_END_17=null;
        Token otherlv_19=null;
        Token lv_batch_20_0=null;
        Token otherlv_21=null;
        Token lv_always_22_0=null;
        Token this_END_23=null;
        AntlrDatatypeRuleToken lv_displayName_10_0 = null;

        EObject lv_includedBranches_14_0 = null;

        EObject lv_excludedBranches_16_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:2502:2: ( ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? ) )
            // InternalPipelineParser.g:2503:2: ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? )
            {
            // InternalPipelineParser.g:2503:2: ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? )
            // InternalPipelineParser.g:2504:3: ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )?
            {
            // InternalPipelineParser.g:2504:3: ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==HyphenMinus) ) {
                alt75=1;
            }
            else if ( (LA75_0==RULE_BEGIN) ) {
                alt75=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // InternalPipelineParser.g:2505:4: (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) )
                    {
                    // InternalPipelineParser.g:2505:4: (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) )
                    // InternalPipelineParser.g:2506:5: otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) )
                    {
                    otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_62); 

                    					newLeafNode(otherlv_0, grammarAccess.getTriggerScheduleAccess().getHyphenMinusKeyword_0_0_0());
                    				
                    otherlv_1=(Token)match(input,Cron,FOLLOW_19); 

                    					newLeafNode(otherlv_1, grammarAccess.getTriggerScheduleAccess().getCronKeyword_0_0_1());
                    				
                    // InternalPipelineParser.g:2514:5: ( (lv_cronValue_2_0= RULE_STRING ) )
                    // InternalPipelineParser.g:2515:6: (lv_cronValue_2_0= RULE_STRING )
                    {
                    // InternalPipelineParser.g:2515:6: (lv_cronValue_2_0= RULE_STRING )
                    // InternalPipelineParser.g:2516:7: lv_cronValue_2_0= RULE_STRING
                    {
                    lv_cronValue_2_0=(Token)match(input,RULE_STRING,FOLLOW_43); 

                    							newLeafNode(lv_cronValue_2_0, grammarAccess.getTriggerScheduleAccess().getCronValueSTRINGTerminalRuleCall_0_0_2_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    							}
                    							setWithLastConsumed(
                    								current,
                    								"cronValue",
                    								lv_cronValue_2_0,
                    								"org.eclipse.xtext.common.Terminals.STRING");
                    						

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2534:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END )
                    {
                    // InternalPipelineParser.g:2534:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END )
                    // InternalPipelineParser.g:2535:5: this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END
                    {
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_63); 

                    					newLeafNode(this_BEGIN_3, grammarAccess.getTriggerScheduleAccess().getBEGINTerminalRuleCall_0_1_0());
                    				
                    // InternalPipelineParser.g:2539:5: (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) )
                    // InternalPipelineParser.g:2540:6: otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) )
                    {
                    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_62); 

                    						newLeafNode(otherlv_4, grammarAccess.getTriggerScheduleAccess().getHyphenMinusKeyword_0_1_1_0());
                    					
                    otherlv_5=(Token)match(input,Cron,FOLLOW_19); 

                    						newLeafNode(otherlv_5, grammarAccess.getTriggerScheduleAccess().getCronKeyword_0_1_1_1());
                    					
                    // InternalPipelineParser.g:2548:6: ( (lv_cronValue_6_0= RULE_STRING ) )
                    // InternalPipelineParser.g:2549:7: (lv_cronValue_6_0= RULE_STRING )
                    {
                    // InternalPipelineParser.g:2549:7: (lv_cronValue_6_0= RULE_STRING )
                    // InternalPipelineParser.g:2550:8: lv_cronValue_6_0= RULE_STRING
                    {
                    lv_cronValue_6_0=(Token)match(input,RULE_STRING,FOLLOW_20); 

                    								newLeafNode(lv_cronValue_6_0, grammarAccess.getTriggerScheduleAccess().getCronValueSTRINGTerminalRuleCall_0_1_1_2_0());
                    							

                    								if (current==null) {
                    									current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    								}
                    								setWithLastConsumed(
                    									current,
                    									"cronValue",
                    									lv_cronValue_6_0,
                    									"org.eclipse.xtext.common.Terminals.STRING");
                    							

                    }


                    }


                    }

                    this_END_7=(Token)match(input,RULE_END,FOLLOW_43); 

                    					newLeafNode(this_END_7, grammarAccess.getTriggerScheduleAccess().getENDTerminalRuleCall_0_1_2());
                    				

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:2573:3: (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==RULE_BEGIN) ) {
                int LA82_1 = input.LA(2);

                if ( (LA82_1==DisplayName||LA82_1==Branches) ) {
                    alt82=1;
                }
            }
            switch (alt82) {
                case 1 :
                    // InternalPipelineParser.g:2574:4: this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END
                    {
                    this_BEGIN_8=(Token)match(input,RULE_BEGIN,FOLLOW_64); 

                    				newLeafNode(this_BEGIN_8, grammarAccess.getTriggerScheduleAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:2578:4: (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==DisplayName) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // InternalPipelineParser.g:2579:5: otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) )
                            {
                            otherlv_9=(Token)match(input,DisplayName,FOLLOW_14); 

                            					newLeafNode(otherlv_9, grammarAccess.getTriggerScheduleAccess().getDisplayNameKeyword_1_1_0());
                            				
                            // InternalPipelineParser.g:2583:5: ( (lv_displayName_10_0= ruleUnquotedString ) )
                            // InternalPipelineParser.g:2584:6: (lv_displayName_10_0= ruleUnquotedString )
                            {
                            // InternalPipelineParser.g:2584:6: (lv_displayName_10_0= ruleUnquotedString )
                            // InternalPipelineParser.g:2585:7: lv_displayName_10_0= ruleUnquotedString
                            {

                            							newCompositeNode(grammarAccess.getTriggerScheduleAccess().getDisplayNameUnquotedStringParserRuleCall_1_1_1_0());
                            						
                            pushFollow(FOLLOW_65);
                            lv_displayName_10_0=ruleUnquotedString();

                            state._fsp--;


                            							if (current==null) {
                            								current = createModelElementForParent(grammarAccess.getTriggerScheduleRule());
                            							}
                            							set(
                            								current,
                            								"displayName",
                            								lv_displayName_10_0,
                            								"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
                            							afterParserOrEnumRuleCall();
                            						

                            }


                            }


                            }
                            break;

                    }

                    // InternalPipelineParser.g:2603:4: (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) )
                    // InternalPipelineParser.g:2604:5: otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END )
                    {
                    otherlv_11=(Token)match(input,Branches,FOLLOW_16); 

                    					newLeafNode(otherlv_11, grammarAccess.getTriggerScheduleAccess().getBranchesKeyword_1_2_0());
                    				
                    // InternalPipelineParser.g:2608:5: (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END )
                    // InternalPipelineParser.g:2609:6: this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END
                    {
                    this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_59); 

                    						newLeafNode(this_BEGIN_12, grammarAccess.getTriggerScheduleAccess().getBEGINTerminalRuleCall_1_2_1_0());
                    					
                    // InternalPipelineParser.g:2613:6: (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==Include) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // InternalPipelineParser.g:2614:7: otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )*
                            {
                            otherlv_13=(Token)match(input,Include,FOLLOW_56); 

                            							newLeafNode(otherlv_13, grammarAccess.getTriggerScheduleAccess().getIncludeKeyword_1_2_1_1_0());
                            						
                            // InternalPipelineParser.g:2618:7: ( (lv_includedBranches_14_0= ruleBranch ) )*
                            loop77:
                            do {
                                int alt77=2;
                                int LA77_0 = input.LA(1);

                                if ( (LA77_0==HyphenMinus||LA77_0==RULE_ID||LA77_0==RULE_STRING) ) {
                                    alt77=1;
                                }


                                switch (alt77) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2619:8: (lv_includedBranches_14_0= ruleBranch )
                            	    {
                            	    // InternalPipelineParser.g:2619:8: (lv_includedBranches_14_0= ruleBranch )
                            	    // InternalPipelineParser.g:2620:9: lv_includedBranches_14_0= ruleBranch
                            	    {

                            	    									newCompositeNode(grammarAccess.getTriggerScheduleAccess().getIncludedBranchesBranchParserRuleCall_1_2_1_1_1_0());
                            	    								
                            	    pushFollow(FOLLOW_56);
                            	    lv_includedBranches_14_0=ruleBranch();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getTriggerScheduleRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"includedBranches",
                            	    										lv_includedBranches_14_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop77;
                                }
                            } while (true);


                            }
                            break;

                    }

                    // InternalPipelineParser.g:2638:6: (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==Exclude) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // InternalPipelineParser.g:2639:7: otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )*
                            {
                            otherlv_15=(Token)match(input,Exclude,FOLLOW_13); 

                            							newLeafNode(otherlv_15, grammarAccess.getTriggerScheduleAccess().getExcludeKeyword_1_2_1_2_0());
                            						
                            // InternalPipelineParser.g:2643:7: ( (lv_excludedBranches_16_0= ruleBranch ) )*
                            loop79:
                            do {
                                int alt79=2;
                                int LA79_0 = input.LA(1);

                                if ( (LA79_0==HyphenMinus||LA79_0==RULE_ID||LA79_0==RULE_STRING) ) {
                                    alt79=1;
                                }


                                switch (alt79) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2644:8: (lv_excludedBranches_16_0= ruleBranch )
                            	    {
                            	    // InternalPipelineParser.g:2644:8: (lv_excludedBranches_16_0= ruleBranch )
                            	    // InternalPipelineParser.g:2645:9: lv_excludedBranches_16_0= ruleBranch
                            	    {

                            	    									newCompositeNode(grammarAccess.getTriggerScheduleAccess().getExcludedBranchesBranchParserRuleCall_1_2_1_2_1_0());
                            	    								
                            	    pushFollow(FOLLOW_13);
                            	    lv_excludedBranches_16_0=ruleBranch();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getTriggerScheduleRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"excludedBranches",
                            	    										lv_excludedBranches_16_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop79;
                                }
                            } while (true);


                            }
                            break;

                    }

                    this_END_17=(Token)match(input,RULE_END,FOLLOW_66); 

                    						newLeafNode(this_END_17, grammarAccess.getTriggerScheduleAccess().getENDTerminalRuleCall_1_2_1_3());
                    					

                    }


                    }

                    // InternalPipelineParser.g:2669:4: ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) )
                    // InternalPipelineParser.g:2670:5: ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) )
                    {
                    // InternalPipelineParser.g:2670:5: ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) )
                    // InternalPipelineParser.g:2671:6: ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* )
                    {
                     
                    					  getUnorderedGroupHelper().enter(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    					
                    // InternalPipelineParser.g:2674:6: ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* )
                    // InternalPipelineParser.g:2675:7: ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )*
                    {
                    // InternalPipelineParser.g:2675:7: ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )*
                    loop81:
                    do {
                        int alt81=3;
                        int LA81_0 = input.LA(1);

                        if ( LA81_0 == Batch && getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0) ) {
                            alt81=1;
                        }
                        else if ( LA81_0 == Always && getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1) ) {
                            alt81=2;
                        }


                        switch (alt81) {
                    	case 1 :
                    	    // InternalPipelineParser.g:2676:5: ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:2676:5: ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) )
                    	    // InternalPipelineParser.g:2677:6: {...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0)");
                    	    }
                    	    // InternalPipelineParser.g:2677:115: ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) )
                    	    // InternalPipelineParser.g:2678:7: ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) )
                    	    {

                    	    							getUnorderedGroupHelper().select(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0);
                    	    						
                    	    // InternalPipelineParser.g:2681:10: ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) )
                    	    // InternalPipelineParser.g:2681:11: {...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "true");
                    	    }
                    	    // InternalPipelineParser.g:2681:20: (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) )
                    	    // InternalPipelineParser.g:2681:21: otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) )
                    	    {
                    	    otherlv_19=(Token)match(input,Batch,FOLLOW_14); 

                    	    										newLeafNode(otherlv_19, grammarAccess.getTriggerScheduleAccess().getBatchKeyword_1_3_0_0());
                    	    									
                    	    // InternalPipelineParser.g:2685:10: ( (lv_batch_20_0= RULE_ID ) )
                    	    // InternalPipelineParser.g:2686:11: (lv_batch_20_0= RULE_ID )
                    	    {
                    	    // InternalPipelineParser.g:2686:11: (lv_batch_20_0= RULE_ID )
                    	    // InternalPipelineParser.g:2687:12: lv_batch_20_0= RULE_ID
                    	    {
                    	    lv_batch_20_0=(Token)match(input,RULE_ID,FOLLOW_66); 

                    	    												newLeafNode(lv_batch_20_0, grammarAccess.getTriggerScheduleAccess().getBatchIDTerminalRuleCall_1_3_0_1_0());
                    	    											

                    	    												if (current==null) {
                    	    													current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    	    												}
                    	    												setWithLastConsumed(
                    	    													current,
                    	    													"batch",
                    	    													lv_batch_20_0,
                    	    													"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	    											

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    	    						

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalPipelineParser.g:2709:5: ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:2709:5: ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) )
                    	    // InternalPipelineParser.g:2710:6: {...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1)");
                    	    }
                    	    // InternalPipelineParser.g:2710:115: ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) )
                    	    // InternalPipelineParser.g:2711:7: ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) )
                    	    {

                    	    							getUnorderedGroupHelper().select(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1);
                    	    						
                    	    // InternalPipelineParser.g:2714:10: ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) )
                    	    // InternalPipelineParser.g:2714:11: {...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "true");
                    	    }
                    	    // InternalPipelineParser.g:2714:20: (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) )
                    	    // InternalPipelineParser.g:2714:21: otherlv_21= Always ( (lv_always_22_0= RULE_ID ) )
                    	    {
                    	    otherlv_21=(Token)match(input,Always,FOLLOW_14); 

                    	    										newLeafNode(otherlv_21, grammarAccess.getTriggerScheduleAccess().getAlwaysKeyword_1_3_1_0());
                    	    									
                    	    // InternalPipelineParser.g:2718:10: ( (lv_always_22_0= RULE_ID ) )
                    	    // InternalPipelineParser.g:2719:11: (lv_always_22_0= RULE_ID )
                    	    {
                    	    // InternalPipelineParser.g:2719:11: (lv_always_22_0= RULE_ID )
                    	    // InternalPipelineParser.g:2720:12: lv_always_22_0= RULE_ID
                    	    {
                    	    lv_always_22_0=(Token)match(input,RULE_ID,FOLLOW_66); 

                    	    												newLeafNode(lv_always_22_0, grammarAccess.getTriggerScheduleAccess().getAlwaysIDTerminalRuleCall_1_3_1_1_0());
                    	    											

                    	    												if (current==null) {
                    	    													current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    	    												}
                    	    												setWithLastConsumed(
                    	    													current,
                    	    													"always",
                    	    													lv_always_22_0,
                    	    													"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	    											

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    	    						

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop81;
                        }
                    } while (true);


                    }


                    }

                     
                    					  getUnorderedGroupHelper().leave(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    					

                    }

                    this_END_23=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_23, grammarAccess.getTriggerScheduleAccess().getENDTerminalRuleCall_1_4());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTriggerSchedule"


    // $ANTLR start "entryRuleBranch"
    // InternalPipelineParser.g:2758:1: entryRuleBranch returns [EObject current=null] : iv_ruleBranch= ruleBranch EOF ;
    public final EObject entryRuleBranch() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBranch = null;


        try {
            // InternalPipelineParser.g:2758:47: (iv_ruleBranch= ruleBranch EOF )
            // InternalPipelineParser.g:2759:2: iv_ruleBranch= ruleBranch EOF
            {
             newCompositeNode(grammarAccess.getBranchRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleBranch=ruleBranch();

            state._fsp--;

             current =iv_ruleBranch; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBranch"


    // $ANTLR start "ruleBranch"
    // InternalPipelineParser.g:2765:1: ruleBranch returns [EObject current=null] : ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) ) ;
    public final EObject ruleBranch() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_1=null;
        Token lv_name_1_2=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:2771:2: ( ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) ) )
            // InternalPipelineParser.g:2772:2: ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) )
            {
            // InternalPipelineParser.g:2772:2: ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) )
            // InternalPipelineParser.g:2773:3: (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) )
            {
            // InternalPipelineParser.g:2773:3: (otherlv_0= HyphenMinus )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==HyphenMinus) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // InternalPipelineParser.g:2774:4: otherlv_0= HyphenMinus
                    {
                    otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_31); 

                    				newLeafNode(otherlv_0, grammarAccess.getBranchAccess().getHyphenMinusKeyword_0());
                    			

                    }
                    break;

            }

            // InternalPipelineParser.g:2779:3: ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) )
            // InternalPipelineParser.g:2780:4: ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) )
            {
            // InternalPipelineParser.g:2780:4: ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) )
            // InternalPipelineParser.g:2781:5: (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING )
            {
            // InternalPipelineParser.g:2781:5: (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==RULE_ID) ) {
                alt84=1;
            }
            else if ( (LA84_0==RULE_STRING) ) {
                alt84=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    // InternalPipelineParser.g:2782:6: lv_name_1_1= RULE_ID
                    {
                    lv_name_1_1=(Token)match(input,RULE_ID,FOLLOW_2); 

                    						newLeafNode(lv_name_1_1, grammarAccess.getBranchAccess().getNameIDTerminalRuleCall_1_0_0());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getBranchRule());
                    						}
                    						setWithLastConsumed(
                    							current,
                    							"name",
                    							lv_name_1_1,
                    							"ca.mcgill.devops.pipeline.Pipeline.ID");
                    					

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2797:6: lv_name_1_2= RULE_STRING
                    {
                    lv_name_1_2=(Token)match(input,RULE_STRING,FOLLOW_2); 

                    						newLeafNode(lv_name_1_2, grammarAccess.getBranchAccess().getNameSTRINGTerminalRuleCall_1_0_1());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getBranchRule());
                    						}
                    						setWithLastConsumed(
                    							current,
                    							"name",
                    							lv_name_1_2,
                    							"org.eclipse.xtext.common.Terminals.STRING");
                    					

                    }
                    break;

            }


            }


            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBranch"


    // $ANTLR start "entryRuleActivity"
    // InternalPipelineParser.g:2818:1: entryRuleActivity returns [EObject current=null] : iv_ruleActivity= ruleActivity EOF ;
    public final EObject entryRuleActivity() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleActivity = null;


        try {
            // InternalPipelineParser.g:2818:49: (iv_ruleActivity= ruleActivity EOF )
            // InternalPipelineParser.g:2819:2: iv_ruleActivity= ruleActivity EOF
            {
             newCompositeNode(grammarAccess.getActivityRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleActivity=ruleActivity();

            state._fsp--;

             current =iv_ruleActivity; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleActivity"


    // $ANTLR start "ruleActivity"
    // InternalPipelineParser.g:2825:1: ruleActivity returns [EObject current=null] : ( ( ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) ) ;
    public final EObject ruleActivity() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_1=null;
        Token lv_name_1_2=null;
        Token lv_name_1_3=null;
        Token this_BEGIN_2=null;
        Token this_END_4=null;
        AntlrDatatypeRuleToken lv_name_0_1 = null;

        AntlrDatatypeRuleToken lv_name_0_2 = null;

        EObject lv_activities_3_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:2831:2: ( ( ( ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) ) )
            // InternalPipelineParser.g:2832:2: ( ( ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) )
            {
            // InternalPipelineParser.g:2832:2: ( ( ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==HyphenMinus||LA88_0==LeftSquareBracket||LA88_0==RULE_BEGIN) ) {
                alt88=1;
            }
            else if ( (LA88_0==Outputs||LA88_0==Secrets||LA88_0==Inputs) ) {
                alt88=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // InternalPipelineParser.g:2833:3: ( ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) ) )
                    {
                    // InternalPipelineParser.g:2833:3: ( ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) ) )
                    // InternalPipelineParser.g:2834:4: ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) )
                    {
                    // InternalPipelineParser.g:2834:4: ( (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList ) )
                    // InternalPipelineParser.g:2835:5: (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList )
                    {
                    // InternalPipelineParser.g:2835:5: (lv_name_0_1= ruleHyphenValues | lv_name_0_2= ruleArrayList )
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==HyphenMinus||LA85_0==RULE_BEGIN) ) {
                        alt85=1;
                    }
                    else if ( (LA85_0==LeftSquareBracket) ) {
                        alt85=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1 :
                            // InternalPipelineParser.g:2836:6: lv_name_0_1= ruleHyphenValues
                            {

                            						newCompositeNode(grammarAccess.getActivityAccess().getNameHyphenValuesParserRuleCall_0_0_0());
                            					
                            pushFollow(FOLLOW_2);
                            lv_name_0_1=ruleHyphenValues();

                            state._fsp--;


                            						if (current==null) {
                            							current = createModelElementForParent(grammarAccess.getActivityRule());
                            						}
                            						set(
                            							current,
                            							"name",
                            							lv_name_0_1,
                            							"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            						afterParserOrEnumRuleCall();
                            					

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:2852:6: lv_name_0_2= ruleArrayList
                            {

                            						newCompositeNode(grammarAccess.getActivityAccess().getNameArrayListParserRuleCall_0_0_1());
                            					
                            pushFollow(FOLLOW_2);
                            lv_name_0_2=ruleArrayList();

                            state._fsp--;


                            						if (current==null) {
                            							current = createModelElementForParent(grammarAccess.getActivityRule());
                            						}
                            						set(
                            							current,
                            							"name",
                            							lv_name_0_2,
                            							"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
                            						afterParserOrEnumRuleCall();
                            					

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2871:3: ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) )
                    {
                    // InternalPipelineParser.g:2871:3: ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) )
                    // InternalPipelineParser.g:2872:4: ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END )
                    {
                    // InternalPipelineParser.g:2872:4: ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) )
                    // InternalPipelineParser.g:2873:5: ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) )
                    {
                    // InternalPipelineParser.g:2873:5: ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) )
                    // InternalPipelineParser.g:2874:6: (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets )
                    {
                    // InternalPipelineParser.g:2874:6: (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets )
                    int alt86=3;
                    switch ( input.LA(1) ) {
                    case Inputs:
                        {
                        alt86=1;
                        }
                        break;
                    case Outputs:
                        {
                        alt86=2;
                        }
                        break;
                    case Secrets:
                        {
                        alt86=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 86, 0, input);

                        throw nvae;
                    }

                    switch (alt86) {
                        case 1 :
                            // InternalPipelineParser.g:2875:7: lv_name_1_1= Inputs
                            {
                            lv_name_1_1=(Token)match(input,Inputs,FOLLOW_16); 

                            							newLeafNode(lv_name_1_1, grammarAccess.getActivityAccess().getNameInputsKeyword_1_0_0_0());
                            						

                            							if (current==null) {
                            								current = createModelElement(grammarAccess.getActivityRule());
                            							}
                            							setWithLastConsumed(current, "name", lv_name_1_1, null);
                            						

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:2886:7: lv_name_1_2= Outputs
                            {
                            lv_name_1_2=(Token)match(input,Outputs,FOLLOW_16); 

                            							newLeafNode(lv_name_1_2, grammarAccess.getActivityAccess().getNameOutputsKeyword_1_0_0_1());
                            						

                            							if (current==null) {
                            								current = createModelElement(grammarAccess.getActivityRule());
                            							}
                            							setWithLastConsumed(current, "name", lv_name_1_2, null);
                            						

                            }
                            break;
                        case 3 :
                            // InternalPipelineParser.g:2897:7: lv_name_1_3= Secrets
                            {
                            lv_name_1_3=(Token)match(input,Secrets,FOLLOW_16); 

                            							newLeafNode(lv_name_1_3, grammarAccess.getActivityAccess().getNameSecretsKeyword_1_0_0_2());
                            						

                            							if (current==null) {
                            								current = createModelElement(grammarAccess.getActivityRule());
                            							}
                            							setWithLastConsumed(current, "name", lv_name_1_3, null);
                            						

                            }
                            break;

                    }


                    }


                    }

                    // InternalPipelineParser.g:2910:4: (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END )
                    // InternalPipelineParser.g:2911:5: this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END
                    {
                    this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_38); 

                    					newLeafNode(this_BEGIN_2, grammarAccess.getActivityAccess().getBEGINTerminalRuleCall_1_1_0());
                    				
                    // InternalPipelineParser.g:2915:5: ( (lv_activities_3_0= ruleParameterValue ) )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( ((LA87_0>=Repository_dispatch && LA87_0<=ContinueOnError_1)||(LA87_0>=Workflow_dispatch && LA87_0<=WorkingDirectory)||(LA87_0>=TimeoutInMinutes && LA87_0<=ContinueOnError)||LA87_0==TimeoutMinutes||LA87_0==ReleaseTrigger||(LA87_0>=Allow_failure && LA87_0<=DeployTrigger)||(LA87_0>=Notifications && LA87_0<=After_script)||(LA87_0>=DefaultsRun && LA87_0<=PathsIgnore)||(LA87_0>=Pull_request && LA87_0<=Workflow_run)||(LA87_0>=Concurrency && LA87_0<=Definitions)||LA87_0==Description||(LA87_0>=DisplayName && LA87_0<=GetPackage)||(LA87_0>=Parameters && LA87_0<=Permission)||(LA87_0>=Powershell && LA87_0<=Artifacts)||(LA87_0>=Condition && LA87_0<=FailFast)||(LA87_0>=Pipelines && LA87_0<=RunPolicy)||(LA87_0>=Schedules && LA87_0<=Workspace)||(LA87_0>=Branches && LA87_0<=Checkout)||(LA87_0>=Defaults && LA87_0<=Download)||(LA87_0>=MaxTime && LA87_0<=PreBuild)||(LA87_0>=Readonly && LA87_0<=Snapshot)||(LA87_0>=Strategy && LA87_0<=Webhooks)||(LA87_0>=Command && LA87_0<=Caches)||(LA87_0>=Docker && LA87_0<=Except)||LA87_0==Inputs||(LA87_0>=Labels && LA87_0<=Policy)||LA87_0==Queued||(LA87_0>=Script && LA87_0<=Stages)||(LA87_0>=Agent && LA87_0<=Image)||(LA87_0>=Paths && LA87_0<=Value)||(LA87_0>=Auth && LA87_0<=Cron)||LA87_0==Name||(LA87_0>=Only && LA87_0<=Pwsh)||(LA87_0>=Step && LA87_0<=With)||(LA87_0>=Env && LA87_0<=Job)||(LA87_0>=Run && LA87_0<=On)||LA87_0==RULE_COMPLEX_EXPRESSION||LA87_0==RULE_ID) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // InternalPipelineParser.g:2916:6: (lv_activities_3_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:2916:6: (lv_activities_3_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:2917:7: lv_activities_3_0= ruleParameterValue
                    	    {

                    	    							newCompositeNode(grammarAccess.getActivityAccess().getActivitiesParameterValueParserRuleCall_1_1_1_0());
                    	    						
                    	    pushFollow(FOLLOW_39);
                    	    lv_activities_3_0=ruleParameterValue();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getActivityRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"activities",
                    	    								lv_activities_3_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);

                    this_END_4=(Token)match(input,RULE_END,FOLLOW_2); 

                    					newLeafNode(this_END_4, grammarAccess.getActivityAccess().getENDTerminalRuleCall_1_1_2());
                    				

                    }


                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleActivity"


    // $ANTLR start "entryRuleStage"
    // InternalPipelineParser.g:2944:1: entryRuleStage returns [EObject current=null] : iv_ruleStage= ruleStage EOF ;
    public final EObject entryRuleStage() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStage = null;


        try {
            // InternalPipelineParser.g:2944:46: (iv_ruleStage= ruleStage EOF )
            // InternalPipelineParser.g:2945:2: iv_ruleStage= ruleStage EOF
            {
             newCompositeNode(grammarAccess.getStageRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleStage=ruleStage();

            state._fsp--;

             current =iv_ruleStage; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStage"


    // $ANTLR start "ruleStage"
    // InternalPipelineParser.g:2951:1: ruleStage returns [EObject current=null] : ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) ) )? ) ;
    public final EObject ruleStage() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token otherlv_7=null;
        Token this_BEGIN_10=null;
        Token otherlv_11=null;
        Token lv_vmName_12_0=null;
        Token otherlv_13=null;
        Token lv_vmImage_14_1=null;
        Token lv_vmImage_14_2=null;
        Token otherlv_15=null;
        Token this_END_17=null;
        Token otherlv_18=null;
        Token otherlv_20=null;
        Token lv_isSkippable_21_0=null;
        Token otherlv_22=null;
        Token otherlv_24=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token this_END_28=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        AntlrDatatypeRuleToken lv_displayName_6_0 = null;

        AntlrDatatypeRuleToken lv_poolValue_8_0 = null;

        AntlrDatatypeRuleToken lv_vmDemands_16_1 = null;

        AntlrDatatypeRuleToken lv_vmDemands_16_2 = null;

        AntlrDatatypeRuleToken lv_conditionValue_19_0 = null;

        EObject lv_stageVariables_23_0 = null;

        EObject lv_jobs_27_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:2957:2: ( ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) ) )? ) )
            // InternalPipelineParser.g:2958:2: ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) ) )? )
            {
            // InternalPipelineParser.g:2958:2: ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) ) )? )
            // InternalPipelineParser.g:2959:3: (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) ) )?
            {
            // InternalPipelineParser.g:2959:3: (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) )
            // InternalPipelineParser.g:2960:4: otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) )
            {
            otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_67); 

            				newLeafNode(otherlv_0, grammarAccess.getStageAccess().getHyphenMinusKeyword_0_0());
            			
            otherlv_1=(Token)match(input,Stage,FOLLOW_41); 

            				newLeafNode(otherlv_1, grammarAccess.getStageAccess().getStageKeyword_0_1());
            			
            // InternalPipelineParser.g:2968:4: ( (lv_name_2_0= ruleAnyData ) )
            // InternalPipelineParser.g:2969:5: (lv_name_2_0= ruleAnyData )
            {
            // InternalPipelineParser.g:2969:5: (lv_name_2_0= ruleAnyData )
            // InternalPipelineParser.g:2970:6: lv_name_2_0= ruleAnyData
            {

            						newCompositeNode(grammarAccess.getStageAccess().getNameAnyDataParserRuleCall_0_2_0());
            					
            pushFollow(FOLLOW_68);
            lv_name_2_0=ruleAnyData();

            state._fsp--;


            						if (current==null) {
            							current = createModelElementForParent(grammarAccess.getStageRule());
            						}
            						set(
            							current,
            							"name",
            							lv_name_2_0,
            							"ca.mcgill.devops.pipeline.Pipeline.AnyData");
            						afterParserOrEnumRuleCall();
            					

            }


            }


            }

            // InternalPipelineParser.g:2988:3: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) ) )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IsSkippable||LA100_0==Condition||LA100_0==DependsOn||LA100_0==Variables||LA100_0==Jobs||LA100_0==Pool||LA100_0==RULE_BEGIN) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // InternalPipelineParser.g:2989:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) )
                    {
                    // InternalPipelineParser.g:2989:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?) )
                    // InternalPipelineParser.g:2990:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?)
                    {
                     
                    				  getUnorderedGroupHelper().enter(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    				
                    // InternalPipelineParser.g:2993:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?)
                    // InternalPipelineParser.g:2994:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+ {...}?
                    {
                    // InternalPipelineParser.g:2994:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) ) )+
                    int cnt99=0;
                    loop99:
                    do {
                        int alt99=8;
                        int LA99_0 = input.LA(1);

                        if ( LA99_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0) ) {
                            alt99=1;
                        }
                        else if ( LA99_0 == Pool && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1) ) {
                            alt99=2;
                        }
                        else if ( LA99_0 == Condition && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2) ) {
                            alt99=3;
                        }
                        else if ( LA99_0 == IsSkippable && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3) ) {
                            alt99=4;
                        }
                        else if ( LA99_0 == Variables && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4) ) {
                            alt99=5;
                        }
                        else if ( LA99_0 == DependsOn && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5) ) {
                            alt99=6;
                        }
                        else if ( LA99_0 == Jobs && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 6) ) {
                            alt99=7;
                        }


                        switch (alt99) {
                    	case 1 :
                    	    // InternalPipelineParser.g:2995:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:2995:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) ) )
                    	    // InternalPipelineParser.g:2996:5: {...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0)");
                    	    }
                    	    // InternalPipelineParser.g:2996:102: ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) ) )
                    	    // InternalPipelineParser.g:2997:6: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0);
                    	    					
                    	    // InternalPipelineParser.g:3000:9: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? ) )
                    	    // InternalPipelineParser.g:3000:10: {...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3000:19: (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )? )
                    	    // InternalPipelineParser.g:3000:20: this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )?
                    	    {
                    	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_69); 

                    	    									newLeafNode(this_BEGIN_4, grammarAccess.getStageAccess().getBEGINTerminalRuleCall_1_0_0());
                    	    								
                    	    // InternalPipelineParser.g:3004:9: (otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) ) )?
                    	    int alt89=2;
                    	    int LA89_0 = input.LA(1);

                    	    if ( (LA89_0==DisplayName) ) {
                    	        alt89=1;
                    	    }
                    	    switch (alt89) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3005:10: otherlv_5= DisplayName ( (lv_displayName_6_0= ruleUnquotedString ) )
                    	            {
                    	            otherlv_5=(Token)match(input,DisplayName,FOLLOW_14); 

                    	            										newLeafNode(otherlv_5, grammarAccess.getStageAccess().getDisplayNameKeyword_1_0_1_0());
                    	            									
                    	            // InternalPipelineParser.g:3009:10: ( (lv_displayName_6_0= ruleUnquotedString ) )
                    	            // InternalPipelineParser.g:3010:11: (lv_displayName_6_0= ruleUnquotedString )
                    	            {
                    	            // InternalPipelineParser.g:3010:11: (lv_displayName_6_0= ruleUnquotedString )
                    	            // InternalPipelineParser.g:3011:12: lv_displayName_6_0= ruleUnquotedString
                    	            {

                    	            												newCompositeNode(grammarAccess.getStageAccess().getDisplayNameUnquotedStringParserRuleCall_1_0_1_1_0());
                    	            											
                    	            pushFollow(FOLLOW_68);
                    	            lv_displayName_6_0=ruleUnquotedString();

                    	            state._fsp--;


                    	            												if (current==null) {
                    	            													current = createModelElementForParent(grammarAccess.getStageRule());
                    	            												}
                    	            												set(
                    	            													current,
                    	            													"displayName",
                    	            													lv_displayName_6_0,
                    	            													"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
                    	            												afterParserOrEnumRuleCall();
                    	            											

                    	            }


                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalPipelineParser.g:3035:4: ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3035:4: ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) )
                    	    // InternalPipelineParser.g:3036:5: {...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1)");
                    	    }
                    	    // InternalPipelineParser.g:3036:102: ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
                    	    // InternalPipelineParser.g:3037:6: ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1);
                    	    					
                    	    // InternalPipelineParser.g:3040:9: ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
                    	    // InternalPipelineParser.g:3040:10: {...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3040:19: (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
                    	    // InternalPipelineParser.g:3040:20: otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) )
                    	    {
                    	    otherlv_7=(Token)match(input,Pool,FOLLOW_70); 

                    	    									newLeafNode(otherlv_7, grammarAccess.getStageAccess().getPoolKeyword_1_1_0());
                    	    								
                    	    // InternalPipelineParser.g:3044:9: ( ( (lv_poolValue_8_0= ruleAnyData ) ) | ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) ) )
                    	    int alt95=2;
                    	    int LA95_0 = input.LA(1);

                    	    if ( ((LA95_0>=RULE_COMPLEX_EXPRESSION && LA95_0<=RULE_VERSION)||LA95_0==RULE_STRING) ) {
                    	        alt95=1;
                    	    }
                    	    else if ( (LA95_0==Demands||(LA95_0>=RULE_BEGIN && LA95_0<=RULE_END)) ) {
                    	        alt95=2;
                    	    }
                    	    else {
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 95, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt95) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3045:10: ( (lv_poolValue_8_0= ruleAnyData ) )
                    	            {
                    	            // InternalPipelineParser.g:3045:10: ( (lv_poolValue_8_0= ruleAnyData ) )
                    	            // InternalPipelineParser.g:3046:11: (lv_poolValue_8_0= ruleAnyData )
                    	            {
                    	            // InternalPipelineParser.g:3046:11: (lv_poolValue_8_0= ruleAnyData )
                    	            // InternalPipelineParser.g:3047:12: lv_poolValue_8_0= ruleAnyData
                    	            {

                    	            												newCompositeNode(grammarAccess.getStageAccess().getPoolValueAnyDataParserRuleCall_1_1_1_0_0());
                    	            											
                    	            pushFollow(FOLLOW_68);
                    	            lv_poolValue_8_0=ruleAnyData();

                    	            state._fsp--;


                    	            												if (current==null) {
                    	            													current = createModelElementForParent(grammarAccess.getStageRule());
                    	            												}
                    	            												set(
                    	            													current,
                    	            													"poolValue",
                    	            													lv_poolValue_8_0,
                    	            													"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    	            												afterParserOrEnumRuleCall();
                    	            											

                    	            }


                    	            }


                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalPipelineParser.g:3065:10: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) )
                    	            {
                    	            // InternalPipelineParser.g:3065:10: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) ) )
                    	            // InternalPipelineParser.g:3066:11: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) )
                    	            {
                    	            // InternalPipelineParser.g:3066:11: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?) )
                    	            // InternalPipelineParser.g:3067:12: ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?)
                    	            {
                    	             
                    	            											  getUnorderedGroupHelper().enter(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1());
                    	            											
                    	            // InternalPipelineParser.g:3070:12: ( ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?)
                    	            // InternalPipelineParser.g:3071:13: ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+ {...}?
                    	            {
                    	            // InternalPipelineParser.g:3071:13: ( ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) ) )+
                    	            int cnt94=0;
                    	            loop94:
                    	            do {
                    	                int alt94=3;
                    	                int LA94_0 = input.LA(1);

                    	                if ( (LA94_0==RULE_BEGIN) ) {
                    	                    int LA94_2 = input.LA(2);

                    	                    if ( LA94_2 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 0) ) {
                    	                        alt94=1;
                    	                    }


                    	                }
                    	                else if ( ( LA94_0 == Demands || LA94_0 == RULE_END ) && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 1) ) {
                    	                    alt94=2;
                    	                }


                    	                switch (alt94) {
                    	            	case 1 :
                    	            	    // InternalPipelineParser.g:3072:11: ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) )
                    	            	    {
                    	            	    // InternalPipelineParser.g:3072:11: ({...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) ) )
                    	            	    // InternalPipelineParser.g:3073:12: {...}? => ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) )
                    	            	    {
                    	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 0) ) {
                    	            	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 0)");
                    	            	    }
                    	            	    // InternalPipelineParser.g:3073:115: ( ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) ) )
                    	            	    // InternalPipelineParser.g:3074:13: ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) )
                    	            	    {

                    	            	    													getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 0);
                    	            	    												
                    	            	    // InternalPipelineParser.g:3077:16: ({...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? ) )
                    	            	    // InternalPipelineParser.g:3077:17: {...}? => (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? )
                    	            	    {
                    	            	    if ( !((true)) ) {
                    	            	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	            	    }
                    	            	    // InternalPipelineParser.g:3077:26: (this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )? )
                    	            	    // InternalPipelineParser.g:3077:27: this_BEGIN_10= RULE_BEGIN (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) ) (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )?
                    	            	    {
                    	            	    this_BEGIN_10=(Token)match(input,RULE_BEGIN,FOLLOW_29); 

                    	            	    																newLeafNode(this_BEGIN_10, grammarAccess.getStageAccess().getBEGINTerminalRuleCall_1_1_1_1_0_0());
                    	            	    															
                    	            	    // InternalPipelineParser.g:3081:16: (otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) ) )
                    	            	    // InternalPipelineParser.g:3082:17: otherlv_11= Name ( (lv_vmName_12_0= RULE_ID ) )
                    	            	    {
                    	            	    otherlv_11=(Token)match(input,Name,FOLLOW_14); 

                    	            	    																	newLeafNode(otherlv_11, grammarAccess.getStageAccess().getNameKeyword_1_1_1_1_0_1_0());
                    	            	    																
                    	            	    // InternalPipelineParser.g:3086:17: ( (lv_vmName_12_0= RULE_ID ) )
                    	            	    // InternalPipelineParser.g:3087:18: (lv_vmName_12_0= RULE_ID )
                    	            	    {
                    	            	    // InternalPipelineParser.g:3087:18: (lv_vmName_12_0= RULE_ID )
                    	            	    // InternalPipelineParser.g:3088:19: lv_vmName_12_0= RULE_ID
                    	            	    {
                    	            	    lv_vmName_12_0=(Token)match(input,RULE_ID,FOLLOW_71); 

                    	            	    																			newLeafNode(lv_vmName_12_0, grammarAccess.getStageAccess().getVmNameIDTerminalRuleCall_1_1_1_1_0_1_1_0());
                    	            	    																		

                    	            	    																			if (current==null) {
                    	            	    																				current = createModelElement(grammarAccess.getStageRule());
                    	            	    																			}
                    	            	    																			setWithLastConsumed(
                    	            	    																				current,
                    	            	    																				"vmName",
                    	            	    																				lv_vmName_12_0,
                    	            	    																				"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	            	    																		

                    	            	    }


                    	            	    }


                    	            	    }

                    	            	    // InternalPipelineParser.g:3105:16: (otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) ) )?
                    	            	    int alt91=2;
                    	            	    int LA91_0 = input.LA(1);

                    	            	    if ( (LA91_0==VmImage) ) {
                    	            	        alt91=1;
                    	            	    }
                    	            	    switch (alt91) {
                    	            	        case 1 :
                    	            	            // InternalPipelineParser.g:3106:17: otherlv_13= VmImage ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) )
                    	            	            {
                    	            	            otherlv_13=(Token)match(input,VmImage,FOLLOW_31); 

                    	            	            																	newLeafNode(otherlv_13, grammarAccess.getStageAccess().getVmImageKeyword_1_1_1_1_0_2_0());
                    	            	            																
                    	            	            // InternalPipelineParser.g:3110:17: ( ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) ) )
                    	            	            // InternalPipelineParser.g:3111:18: ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) )
                    	            	            {
                    	            	            // InternalPipelineParser.g:3111:18: ( (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING ) )
                    	            	            // InternalPipelineParser.g:3112:19: (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING )
                    	            	            {
                    	            	            // InternalPipelineParser.g:3112:19: (lv_vmImage_14_1= RULE_ID | lv_vmImage_14_2= RULE_STRING )
                    	            	            int alt90=2;
                    	            	            int LA90_0 = input.LA(1);

                    	            	            if ( (LA90_0==RULE_ID) ) {
                    	            	                alt90=1;
                    	            	            }
                    	            	            else if ( (LA90_0==RULE_STRING) ) {
                    	            	                alt90=2;
                    	            	            }
                    	            	            else {
                    	            	                NoViableAltException nvae =
                    	            	                    new NoViableAltException("", 90, 0, input);

                    	            	                throw nvae;
                    	            	            }
                    	            	            switch (alt90) {
                    	            	                case 1 :
                    	            	                    // InternalPipelineParser.g:3113:20: lv_vmImage_14_1= RULE_ID
                    	            	                    {
                    	            	                    lv_vmImage_14_1=(Token)match(input,RULE_ID,FOLLOW_72); 

                    	            	                    																				newLeafNode(lv_vmImage_14_1, grammarAccess.getStageAccess().getVmImageIDTerminalRuleCall_1_1_1_1_0_2_1_0_0());
                    	            	                    																			

                    	            	                    																				if (current==null) {
                    	            	                    																					current = createModelElement(grammarAccess.getStageRule());
                    	            	                    																				}
                    	            	                    																				setWithLastConsumed(
                    	            	                    																					current,
                    	            	                    																					"vmImage",
                    	            	                    																					lv_vmImage_14_1,
                    	            	                    																					"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	            	                    																			

                    	            	                    }
                    	            	                    break;
                    	            	                case 2 :
                    	            	                    // InternalPipelineParser.g:3128:20: lv_vmImage_14_2= RULE_STRING
                    	            	                    {
                    	            	                    lv_vmImage_14_2=(Token)match(input,RULE_STRING,FOLLOW_72); 

                    	            	                    																				newLeafNode(lv_vmImage_14_2, grammarAccess.getStageAccess().getVmImageSTRINGTerminalRuleCall_1_1_1_1_0_2_1_0_1());
                    	            	                    																			

                    	            	                    																				if (current==null) {
                    	            	                    																					current = createModelElement(grammarAccess.getStageRule());
                    	            	                    																				}
                    	            	                    																				setWithLastConsumed(
                    	            	                    																					current,
                    	            	                    																					"vmImage",
                    	            	                    																					lv_vmImage_14_2,
                    	            	                    																					"org.eclipse.xtext.common.Terminals.STRING");
                    	            	                    																			

                    	            	                    }
                    	            	                    break;

                    	            	            }


                    	            	            }


                    	            	            }


                    	            	            }
                    	            	            break;

                    	            	    }


                    	            	    }


                    	            	    }

                    	            	     
                    	            	    													getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1());
                    	            	    												

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;
                    	            	case 2 :
                    	            	    // InternalPipelineParser.g:3152:11: ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) )
                    	            	    {
                    	            	    // InternalPipelineParser.g:3152:11: ({...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) ) )
                    	            	    // InternalPipelineParser.g:3153:12: {...}? => ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) )
                    	            	    {
                    	            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 1) ) {
                    	            	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 1)");
                    	            	    }
                    	            	    // InternalPipelineParser.g:3153:115: ( ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) ) )
                    	            	    // InternalPipelineParser.g:3154:13: ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) )
                    	            	    {

                    	            	    													getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1(), 1);
                    	            	    												
                    	            	    // InternalPipelineParser.g:3157:16: ({...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END ) )
                    	            	    // InternalPipelineParser.g:3157:17: {...}? => ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END )
                    	            	    {
                    	            	    if ( !((true)) ) {
                    	            	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	            	    }
                    	            	    // InternalPipelineParser.g:3157:26: ( (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END )
                    	            	    // InternalPipelineParser.g:3157:27: (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )? this_END_17= RULE_END
                    	            	    {
                    	            	    // InternalPipelineParser.g:3157:27: (otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) ) )?
                    	            	    int alt93=2;
                    	            	    int LA93_0 = input.LA(1);

                    	            	    if ( (LA93_0==Demands) ) {
                    	            	        alt93=1;
                    	            	    }
                    	            	    switch (alt93) {
                    	            	        case 1 :
                    	            	            // InternalPipelineParser.g:3158:17: otherlv_15= Demands ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) )
                    	            	            {
                    	            	            otherlv_15=(Token)match(input,Demands,FOLLOW_33); 

                    	            	            																	newLeafNode(otherlv_15, grammarAccess.getStageAccess().getDemandsKeyword_1_1_1_1_1_0_0());
                    	            	            																
                    	            	            // InternalPipelineParser.g:3162:17: ( ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) ) )
                    	            	            // InternalPipelineParser.g:3163:18: ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) )
                    	            	            {
                    	            	            // InternalPipelineParser.g:3163:18: ( (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues ) )
                    	            	            // InternalPipelineParser.g:3164:19: (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues )
                    	            	            {
                    	            	            // InternalPipelineParser.g:3164:19: (lv_vmDemands_16_1= ruleAnyData | lv_vmDemands_16_2= ruleHyphenValues )
                    	            	            int alt92=2;
                    	            	            int LA92_0 = input.LA(1);

                    	            	            if ( ((LA92_0>=RULE_COMPLEX_EXPRESSION && LA92_0<=RULE_VERSION)||LA92_0==RULE_STRING) ) {
                    	            	                alt92=1;
                    	            	            }
                    	            	            else if ( (LA92_0==HyphenMinus||LA92_0==RULE_BEGIN) ) {
                    	            	                alt92=2;
                    	            	            }
                    	            	            else {
                    	            	                NoViableAltException nvae =
                    	            	                    new NoViableAltException("", 92, 0, input);

                    	            	                throw nvae;
                    	            	            }
                    	            	            switch (alt92) {
                    	            	                case 1 :
                    	            	                    // InternalPipelineParser.g:3165:20: lv_vmDemands_16_1= ruleAnyData
                    	            	                    {

                    	            	                    																				newCompositeNode(grammarAccess.getStageAccess().getVmDemandsAnyDataParserRuleCall_1_1_1_1_1_0_1_0_0());
                    	            	                    																			
                    	            	                    pushFollow(FOLLOW_20);
                    	            	                    lv_vmDemands_16_1=ruleAnyData();

                    	            	                    state._fsp--;


                    	            	                    																				if (current==null) {
                    	            	                    																					current = createModelElementForParent(grammarAccess.getStageRule());
                    	            	                    																				}
                    	            	                    																				set(
                    	            	                    																					current,
                    	            	                    																					"vmDemands",
                    	            	                    																					lv_vmDemands_16_1,
                    	            	                    																					"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    	            	                    																				afterParserOrEnumRuleCall();
                    	            	                    																			

                    	            	                    }
                    	            	                    break;
                    	            	                case 2 :
                    	            	                    // InternalPipelineParser.g:3181:20: lv_vmDemands_16_2= ruleHyphenValues
                    	            	                    {

                    	            	                    																				newCompositeNode(grammarAccess.getStageAccess().getVmDemandsHyphenValuesParserRuleCall_1_1_1_1_1_0_1_0_1());
                    	            	                    																			
                    	            	                    pushFollow(FOLLOW_20);
                    	            	                    lv_vmDemands_16_2=ruleHyphenValues();

                    	            	                    state._fsp--;


                    	            	                    																				if (current==null) {
                    	            	                    																					current = createModelElementForParent(grammarAccess.getStageRule());
                    	            	                    																				}
                    	            	                    																				set(
                    	            	                    																					current,
                    	            	                    																					"vmDemands",
                    	            	                    																					lv_vmDemands_16_2,
                    	            	                    																					"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                    	            	                    																				afterParserOrEnumRuleCall();
                    	            	                    																			

                    	            	                    }
                    	            	                    break;

                    	            	            }


                    	            	            }


                    	            	            }


                    	            	            }
                    	            	            break;

                    	            	    }

                    	            	    this_END_17=(Token)match(input,RULE_END,FOLLOW_72); 

                    	            	    																newLeafNode(this_END_17, grammarAccess.getStageAccess().getENDTerminalRuleCall_1_1_1_1_1_1());
                    	            	    															

                    	            	    }


                    	            	    }

                    	            	     
                    	            	    													getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1());
                    	            	    												

                    	            	    }


                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    if ( cnt94 >= 1 ) break loop94;
                    	                        EarlyExitException eee =
                    	                            new EarlyExitException(94, input);
                    	                        throw eee;
                    	                }
                    	                cnt94++;
                    	            } while (true);

                    	            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1()) ) {
                    	                throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canLeave(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1())");
                    	            }

                    	            }


                    	            }

                    	             
                    	            											  getUnorderedGroupHelper().leave(grammarAccess.getStageAccess().getUnorderedGroup_1_1_1_1());
                    	            											

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // InternalPipelineParser.g:3225:4: ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3225:4: ({...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) ) )
                    	    // InternalPipelineParser.g:3226:5: {...}? => ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2)");
                    	    }
                    	    // InternalPipelineParser.g:3226:102: ( ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) ) )
                    	    // InternalPipelineParser.g:3227:6: ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2);
                    	    					
                    	    // InternalPipelineParser.g:3230:9: ({...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) ) )
                    	    // InternalPipelineParser.g:3230:10: {...}? => (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3230:19: (otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) ) )
                    	    // InternalPipelineParser.g:3230:20: otherlv_18= Condition ( (lv_conditionValue_19_0= ruleAnyData ) )
                    	    {
                    	    otherlv_18=(Token)match(input,Condition,FOLLOW_41); 

                    	    									newLeafNode(otherlv_18, grammarAccess.getStageAccess().getConditionKeyword_1_2_0());
                    	    								
                    	    // InternalPipelineParser.g:3234:9: ( (lv_conditionValue_19_0= ruleAnyData ) )
                    	    // InternalPipelineParser.g:3235:10: (lv_conditionValue_19_0= ruleAnyData )
                    	    {
                    	    // InternalPipelineParser.g:3235:10: (lv_conditionValue_19_0= ruleAnyData )
                    	    // InternalPipelineParser.g:3236:11: lv_conditionValue_19_0= ruleAnyData
                    	    {

                    	    											newCompositeNode(grammarAccess.getStageAccess().getConditionValueAnyDataParserRuleCall_1_2_1_0());
                    	    										
                    	    pushFollow(FOLLOW_68);
                    	    lv_conditionValue_19_0=ruleAnyData();

                    	    state._fsp--;


                    	    											if (current==null) {
                    	    												current = createModelElementForParent(grammarAccess.getStageRule());
                    	    											}
                    	    											set(
                    	    												current,
                    	    												"conditionValue",
                    	    												lv_conditionValue_19_0,
                    	    												"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    	    											afterParserOrEnumRuleCall();
                    	    										

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    // InternalPipelineParser.g:3259:4: ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3259:4: ({...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) ) )
                    	    // InternalPipelineParser.g:3260:5: {...}? => ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3)");
                    	    }
                    	    // InternalPipelineParser.g:3260:102: ( ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) ) )
                    	    // InternalPipelineParser.g:3261:6: ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3);
                    	    					
                    	    // InternalPipelineParser.g:3264:9: ({...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) ) )
                    	    // InternalPipelineParser.g:3264:10: {...}? => (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3264:19: (otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) ) )
                    	    // InternalPipelineParser.g:3264:20: otherlv_20= IsSkippable ( (lv_isSkippable_21_0= RULE_ID ) )
                    	    {
                    	    otherlv_20=(Token)match(input,IsSkippable,FOLLOW_14); 

                    	    									newLeafNode(otherlv_20, grammarAccess.getStageAccess().getIsSkippableKeyword_1_3_0());
                    	    								
                    	    // InternalPipelineParser.g:3268:9: ( (lv_isSkippable_21_0= RULE_ID ) )
                    	    // InternalPipelineParser.g:3269:10: (lv_isSkippable_21_0= RULE_ID )
                    	    {
                    	    // InternalPipelineParser.g:3269:10: (lv_isSkippable_21_0= RULE_ID )
                    	    // InternalPipelineParser.g:3270:11: lv_isSkippable_21_0= RULE_ID
                    	    {
                    	    lv_isSkippable_21_0=(Token)match(input,RULE_ID,FOLLOW_68); 

                    	    											newLeafNode(lv_isSkippable_21_0, grammarAccess.getStageAccess().getIsSkippableIDTerminalRuleCall_1_3_1_0());
                    	    										

                    	    											if (current==null) {
                    	    												current = createModelElement(grammarAccess.getStageRule());
                    	    											}
                    	    											setWithLastConsumed(
                    	    												current,
                    	    												"isSkippable",
                    	    												lv_isSkippable_21_0,
                    	    												"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	    										

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 5 :
                    	    // InternalPipelineParser.g:3292:4: ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3292:4: ({...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) ) )
                    	    // InternalPipelineParser.g:3293:5: {...}? => ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4)");
                    	    }
                    	    // InternalPipelineParser.g:3293:102: ( ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) ) )
                    	    // InternalPipelineParser.g:3294:6: ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4);
                    	    					
                    	    // InternalPipelineParser.g:3297:9: ({...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* ) )
                    	    // InternalPipelineParser.g:3297:10: {...}? => (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3297:19: (otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )* )
                    	    // InternalPipelineParser.g:3297:20: otherlv_22= Variables ( (lv_stageVariables_23_0= ruleVariable ) )*
                    	    {
                    	    otherlv_22=(Token)match(input,Variables,FOLLOW_73); 

                    	    									newLeafNode(otherlv_22, grammarAccess.getStageAccess().getVariablesKeyword_1_4_0());
                    	    								
                    	    // InternalPipelineParser.g:3301:9: ( (lv_stageVariables_23_0= ruleVariable ) )*
                    	    loop96:
                    	    do {
                    	        int alt96=2;
                    	        int LA96_0 = input.LA(1);

                    	        if ( (LA96_0==HyphenMinus) ) {
                    	            int LA96_2 = input.LA(2);

                    	            if ( (LA96_2==Group||LA96_2==Name) ) {
                    	                alt96=1;
                    	            }


                    	        }
                    	        else if ( (LA96_0==RULE_BEGIN) ) {
                    	            int LA96_3 = input.LA(2);

                    	            if ( (LA96_3==RULE_ID) ) {
                    	                alt96=1;
                    	            }


                    	        }


                    	        switch (alt96) {
                    	    	case 1 :
                    	    	    // InternalPipelineParser.g:3302:10: (lv_stageVariables_23_0= ruleVariable )
                    	    	    {
                    	    	    // InternalPipelineParser.g:3302:10: (lv_stageVariables_23_0= ruleVariable )
                    	    	    // InternalPipelineParser.g:3303:11: lv_stageVariables_23_0= ruleVariable
                    	    	    {

                    	    	    											newCompositeNode(grammarAccess.getStageAccess().getStageVariablesVariableParserRuleCall_1_4_1_0());
                    	    	    										
                    	    	    pushFollow(FOLLOW_73);
                    	    	    lv_stageVariables_23_0=ruleVariable();

                    	    	    state._fsp--;


                    	    	    											if (current==null) {
                    	    	    												current = createModelElementForParent(grammarAccess.getStageRule());
                    	    	    											}
                    	    	    											add(
                    	    	    												current,
                    	    	    												"stageVariables",
                    	    	    												lv_stageVariables_23_0,
                    	    	    												"ca.mcgill.devops.pipeline.Pipeline.Variable");
                    	    	    											afterParserOrEnumRuleCall();
                    	    	    										

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop96;
                    	        }
                    	    } while (true);


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 6 :
                    	    // InternalPipelineParser.g:3326:4: ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3326:4: ({...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) ) )
                    	    // InternalPipelineParser.g:3327:5: {...}? => ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5)");
                    	    }
                    	    // InternalPipelineParser.g:3327:102: ( ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) ) )
                    	    // InternalPipelineParser.g:3328:6: ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5);
                    	    					
                    	    // InternalPipelineParser.g:3331:9: ({...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* ) )
                    	    // InternalPipelineParser.g:3331:10: {...}? => (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3331:19: (otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )* )
                    	    // InternalPipelineParser.g:3331:20: otherlv_24= DependsOn ( (otherlv_25= RULE_ID ) )*
                    	    {
                    	    otherlv_24=(Token)match(input,DependsOn,FOLLOW_74); 

                    	    									newLeafNode(otherlv_24, grammarAccess.getStageAccess().getDependsOnKeyword_1_5_0());
                    	    								
                    	    // InternalPipelineParser.g:3335:9: ( (otherlv_25= RULE_ID ) )*
                    	    loop97:
                    	    do {
                    	        int alt97=2;
                    	        int LA97_0 = input.LA(1);

                    	        if ( (LA97_0==RULE_ID) ) {
                    	            alt97=1;
                    	        }


                    	        switch (alt97) {
                    	    	case 1 :
                    	    	    // InternalPipelineParser.g:3336:10: (otherlv_25= RULE_ID )
                    	    	    {
                    	    	    // InternalPipelineParser.g:3336:10: (otherlv_25= RULE_ID )
                    	    	    // InternalPipelineParser.g:3337:11: otherlv_25= RULE_ID
                    	    	    {

                    	    	    											if (current==null) {
                    	    	    												current = createModelElement(grammarAccess.getStageRule());
                    	    	    											}
                    	    	    										
                    	    	    otherlv_25=(Token)match(input,RULE_ID,FOLLOW_74); 

                    	    	    											newLeafNode(otherlv_25, grammarAccess.getStageAccess().getDependsOnStageCrossReference_1_5_1_0());
                    	    	    										

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop97;
                    	        }
                    	    } while (true);


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 7 :
                    	    // InternalPipelineParser.g:3354:4: ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3354:4: ({...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) ) )
                    	    // InternalPipelineParser.g:3355:5: {...}? => ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 6) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 6)");
                    	    }
                    	    // InternalPipelineParser.g:3355:102: ( ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) ) )
                    	    // InternalPipelineParser.g:3356:6: ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 6);
                    	    					
                    	    // InternalPipelineParser.g:3359:9: ({...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END ) )
                    	    // InternalPipelineParser.g:3359:10: {...}? => ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3359:19: ( (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END )
                    	    // InternalPipelineParser.g:3359:20: (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* ) this_END_28= RULE_END
                    	    {
                    	    // InternalPipelineParser.g:3359:20: (otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )* )
                    	    // InternalPipelineParser.g:3360:10: otherlv_26= Jobs ( (lv_jobs_27_0= ruleJob ) )*
                    	    {
                    	    otherlv_26=(Token)match(input,Jobs,FOLLOW_13); 

                    	    										newLeafNode(otherlv_26, grammarAccess.getStageAccess().getJobsKeyword_1_6_0_0());
                    	    									
                    	    // InternalPipelineParser.g:3364:10: ( (lv_jobs_27_0= ruleJob ) )*
                    	    loop98:
                    	    do {
                    	        int alt98=2;
                    	        int LA98_0 = input.LA(1);

                    	        if ( (LA98_0==HyphenMinus||LA98_0==RULE_ID||LA98_0==RULE_STRING) ) {
                    	            alt98=1;
                    	        }


                    	        switch (alt98) {
                    	    	case 1 :
                    	    	    // InternalPipelineParser.g:3365:11: (lv_jobs_27_0= ruleJob )
                    	    	    {
                    	    	    // InternalPipelineParser.g:3365:11: (lv_jobs_27_0= ruleJob )
                    	    	    // InternalPipelineParser.g:3366:12: lv_jobs_27_0= ruleJob
                    	    	    {

                    	    	    												newCompositeNode(grammarAccess.getStageAccess().getJobsJobParserRuleCall_1_6_0_1_0());
                    	    	    											
                    	    	    pushFollow(FOLLOW_13);
                    	    	    lv_jobs_27_0=ruleJob();

                    	    	    state._fsp--;


                    	    	    												if (current==null) {
                    	    	    													current = createModelElementForParent(grammarAccess.getStageRule());
                    	    	    												}
                    	    	    												add(
                    	    	    													current,
                    	    	    													"jobs",
                    	    	    													lv_jobs_27_0,
                    	    	    													"ca.mcgill.devops.pipeline.Pipeline.Job");
                    	    	    												afterParserOrEnumRuleCall();
                    	    	    											

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop98;
                    	        }
                    	    } while (true);


                    	    }

                    	    this_END_28=(Token)match(input,RULE_END,FOLLOW_68); 

                    	    									newLeafNode(this_END_28, grammarAccess.getStageAccess().getENDTerminalRuleCall_1_6_1());
                    	    								

                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt99 >= 1 ) break loop99;
                                EarlyExitException eee =
                                    new EarlyExitException(99, input);
                                throw eee;
                        }
                        cnt99++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStageAccess().getUnorderedGroup_1()) ) {
                        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canLeave(grammarAccess.getStageAccess().getUnorderedGroup_1())");
                    }

                    }


                    }

                     
                    				  getUnorderedGroupHelper().leave(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    				

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStage"


    // $ANTLR start "entryRuleJob"
    // InternalPipelineParser.g:3406:1: entryRuleJob returns [EObject current=null] : iv_ruleJob= ruleJob EOF ;
    public final EObject entryRuleJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJob = null;


        try {
            // InternalPipelineParser.g:3406:44: (iv_ruleJob= ruleJob EOF )
            // InternalPipelineParser.g:3407:2: iv_ruleJob= ruleJob EOF
            {
             newCompositeNode(grammarAccess.getJobRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleJob=ruleJob();

            state._fsp--;

             current =iv_ruleJob; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJob"


    // $ANTLR start "ruleJob"
    // InternalPipelineParser.g:3413:1: ruleJob returns [EObject current=null] : ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) ) ;
    public final EObject ruleJob() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_jobName_3_1=null;
        Token lv_jobName_3_2=null;
        Token otherlv_4=null;
        Token this_BEGIN_5=null;
        Token lv_dependKW_7_1=null;
        Token lv_dependKW_7_2=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_END_17=null;
        EObject lv_jobParameterValues_6_0 = null;

        EObject lv_steps_16_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3419:2: ( ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) ) )
            // InternalPipelineParser.g:3420:2: ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) )
            {
            // InternalPipelineParser.g:3420:2: ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) )
            // InternalPipelineParser.g:3421:3: ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END )
            {
            // InternalPipelineParser.g:3421:3: ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? )
            // InternalPipelineParser.g:3422:4: (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )?
            {
            // InternalPipelineParser.g:3422:4: (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==HyphenMinus) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // InternalPipelineParser.g:3423:5: otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment )
                    {
                    otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_75); 

                    					newLeafNode(otherlv_0, grammarAccess.getJobAccess().getHyphenMinusKeyword_0_0_0());
                    				
                    // InternalPipelineParser.g:3427:5: (otherlv_1= Job | otherlv_2= Deployment )
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==Job) ) {
                        alt101=1;
                    }
                    else if ( (LA101_0==Deployment) ) {
                        alt101=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 101, 0, input);

                        throw nvae;
                    }
                    switch (alt101) {
                        case 1 :
                            // InternalPipelineParser.g:3428:6: otherlv_1= Job
                            {
                            otherlv_1=(Token)match(input,Job,FOLLOW_31); 

                            						newLeafNode(otherlv_1, grammarAccess.getJobAccess().getJobKeyword_0_0_1_0());
                            					

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3433:6: otherlv_2= Deployment
                            {
                            otherlv_2=(Token)match(input,Deployment,FOLLOW_31); 

                            						newLeafNode(otherlv_2, grammarAccess.getJobAccess().getDeploymentKeyword_0_0_1_1());
                            					

                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:3439:4: ( ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) ) )
            // InternalPipelineParser.g:3440:5: ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) )
            {
            // InternalPipelineParser.g:3440:5: ( (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING ) )
            // InternalPipelineParser.g:3441:6: (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING )
            {
            // InternalPipelineParser.g:3441:6: (lv_jobName_3_1= RULE_ID | lv_jobName_3_2= RULE_STRING )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==RULE_ID) ) {
                alt103=1;
            }
            else if ( (LA103_0==RULE_STRING) ) {
                alt103=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }
            switch (alt103) {
                case 1 :
                    // InternalPipelineParser.g:3442:7: lv_jobName_3_1= RULE_ID
                    {
                    lv_jobName_3_1=(Token)match(input,RULE_ID,FOLLOW_76); 

                    							newLeafNode(lv_jobName_3_1, grammarAccess.getJobAccess().getJobNameIDTerminalRuleCall_0_1_0_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getJobRule());
                    							}
                    							setWithLastConsumed(
                    								current,
                    								"jobName",
                    								lv_jobName_3_1,
                    								"ca.mcgill.devops.pipeline.Pipeline.ID");
                    						

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3457:7: lv_jobName_3_2= RULE_STRING
                    {
                    lv_jobName_3_2=(Token)match(input,RULE_STRING,FOLLOW_76); 

                    							newLeafNode(lv_jobName_3_2, grammarAccess.getJobAccess().getJobNameSTRINGTerminalRuleCall_0_1_0_1());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getJobRule());
                    							}
                    							setWithLastConsumed(
                    								current,
                    								"jobName",
                    								lv_jobName_3_2,
                    								"org.eclipse.xtext.common.Terminals.STRING");
                    						

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:3474:4: (otherlv_4= Colon )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==Colon) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // InternalPipelineParser.g:3475:5: otherlv_4= Colon
                    {
                    otherlv_4=(Token)match(input,Colon,FOLLOW_16); 

                    					newLeafNode(otherlv_4, grammarAccess.getJobAccess().getColonKeyword_0_2());
                    				

                    }
                    break;

            }


            }

            // InternalPipelineParser.g:3481:3: (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END )
            // InternalPipelineParser.g:3482:4: this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END
            {
            this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_77); 

            				newLeafNode(this_BEGIN_5, grammarAccess.getJobAccess().getBEGINTerminalRuleCall_1_0());
            			
            // InternalPipelineParser.g:3486:4: ( (lv_jobParameterValues_6_0= ruleParameterValue ) )*
            loop105:
            do {
                int alt105=2;
                alt105 = dfa105.predict(input);
                switch (alt105) {
            	case 1 :
            	    // InternalPipelineParser.g:3487:5: (lv_jobParameterValues_6_0= ruleParameterValue )
            	    {
            	    // InternalPipelineParser.g:3487:5: (lv_jobParameterValues_6_0= ruleParameterValue )
            	    // InternalPipelineParser.g:3488:6: lv_jobParameterValues_6_0= ruleParameterValue
            	    {

            	    						newCompositeNode(grammarAccess.getJobAccess().getJobParameterValuesParameterValueParserRuleCall_1_1_0());
            	    					
            	    pushFollow(FOLLOW_77);
            	    lv_jobParameterValues_6_0=ruleParameterValue();

            	    state._fsp--;


            	    						if (current==null) {
            	    							current = createModelElementForParent(grammarAccess.getJobRule());
            	    						}
            	    						add(
            	    							current,
            	    							"jobParameterValues",
            	    							lv_jobParameterValues_6_0,
            	    							"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
            	    						afterParserOrEnumRuleCall();
            	    					

            	    }


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            // InternalPipelineParser.g:3505:4: ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==DependsOn||LA110_0==Needs) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalPipelineParser.g:3506:5: ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) )
                    {
                    // InternalPipelineParser.g:3506:5: ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) )
                    // InternalPipelineParser.g:3507:6: ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) )
                    {
                    // InternalPipelineParser.g:3507:6: ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) )
                    // InternalPipelineParser.g:3508:7: (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn )
                    {
                    // InternalPipelineParser.g:3508:7: (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn )
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==Needs) ) {
                        alt106=1;
                    }
                    else if ( (LA106_0==DependsOn) ) {
                        alt106=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }
                    switch (alt106) {
                        case 1 :
                            // InternalPipelineParser.g:3509:8: lv_dependKW_7_1= Needs
                            {
                            lv_dependKW_7_1=(Token)match(input,Needs,FOLLOW_78); 

                            								newLeafNode(lv_dependKW_7_1, grammarAccess.getJobAccess().getDependKWNeedsKeyword_1_2_0_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getJobRule());
                            								}
                            								setWithLastConsumed(current, "dependKW", lv_dependKW_7_1, null);
                            							

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3520:8: lv_dependKW_7_2= DependsOn
                            {
                            lv_dependKW_7_2=(Token)match(input,DependsOn,FOLLOW_78); 

                            								newLeafNode(lv_dependKW_7_2, grammarAccess.getJobAccess().getDependKWDependsOnKeyword_1_2_0_0_1());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getJobRule());
                            								}
                            								setWithLastConsumed(current, "dependKW", lv_dependKW_7_2, null);
                            							

                            }
                            break;

                    }


                    }


                    }

                    // InternalPipelineParser.g:3533:5: ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) )
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==None||LA109_0==RULE_ID) ) {
                        alt109=1;
                    }
                    else if ( (LA109_0==LeftSquareBracket) ) {
                        alt109=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        throw nvae;
                    }
                    switch (alt109) {
                        case 1 :
                            // InternalPipelineParser.g:3534:6: ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None )
                            {
                            // InternalPipelineParser.g:3534:6: ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None )
                            int alt107=2;
                            int LA107_0 = input.LA(1);

                            if ( (LA107_0==RULE_ID) ) {
                                alt107=1;
                            }
                            else if ( (LA107_0==None) ) {
                                alt107=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 107, 0, input);

                                throw nvae;
                            }
                            switch (alt107) {
                                case 1 :
                                    // InternalPipelineParser.g:3535:7: ( (otherlv_8= RULE_ID ) )
                                    {
                                    // InternalPipelineParser.g:3535:7: ( (otherlv_8= RULE_ID ) )
                                    // InternalPipelineParser.g:3536:8: (otherlv_8= RULE_ID )
                                    {
                                    // InternalPipelineParser.g:3536:8: (otherlv_8= RULE_ID )
                                    // InternalPipelineParser.g:3537:9: otherlv_8= RULE_ID
                                    {

                                    									if (current==null) {
                                    										current = createModelElement(grammarAccess.getJobRule());
                                    									}
                                    								
                                    otherlv_8=(Token)match(input,RULE_ID,FOLLOW_79); 

                                    									newLeafNode(otherlv_8, grammarAccess.getJobAccess().getReferencesJobCrossReference_1_2_1_0_0_0());
                                    								

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:3549:7: otherlv_9= None
                                    {
                                    otherlv_9=(Token)match(input,None,FOLLOW_79); 

                                    							newLeafNode(otherlv_9, grammarAccess.getJobAccess().getNoneKeyword_1_2_1_0_1());
                                    						

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3555:6: (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket )
                            {
                            // InternalPipelineParser.g:3555:6: (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket )
                            // InternalPipelineParser.g:3556:7: otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket
                            {
                            otherlv_10=(Token)match(input,LeftSquareBracket,FOLLOW_14); 

                            							newLeafNode(otherlv_10, grammarAccess.getJobAccess().getLeftSquareBracketKeyword_1_2_1_1_0());
                            						
                            // InternalPipelineParser.g:3560:7: ( (otherlv_11= RULE_ID ) )
                            // InternalPipelineParser.g:3561:8: (otherlv_11= RULE_ID )
                            {
                            // InternalPipelineParser.g:3561:8: (otherlv_11= RULE_ID )
                            // InternalPipelineParser.g:3562:9: otherlv_11= RULE_ID
                            {

                            									if (current==null) {
                            										current = createModelElement(grammarAccess.getJobRule());
                            									}
                            								
                            otherlv_11=(Token)match(input,RULE_ID,FOLLOW_9); 

                            									newLeafNode(otherlv_11, grammarAccess.getJobAccess().getReferencesJobCrossReference_1_2_1_1_1_0());
                            								

                            }


                            }

                            // InternalPipelineParser.g:3573:7: (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )*
                            loop108:
                            do {
                                int alt108=2;
                                int LA108_0 = input.LA(1);

                                if ( (LA108_0==Comma) ) {
                                    alt108=1;
                                }


                                switch (alt108) {
                            	case 1 :
                            	    // InternalPipelineParser.g:3574:8: otherlv_12= Comma ( (otherlv_13= RULE_ID ) )
                            	    {
                            	    otherlv_12=(Token)match(input,Comma,FOLLOW_14); 

                            	    								newLeafNode(otherlv_12, grammarAccess.getJobAccess().getCommaKeyword_1_2_1_1_2_0());
                            	    							
                            	    // InternalPipelineParser.g:3578:8: ( (otherlv_13= RULE_ID ) )
                            	    // InternalPipelineParser.g:3579:9: (otherlv_13= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:3579:9: (otherlv_13= RULE_ID )
                            	    // InternalPipelineParser.g:3580:10: otherlv_13= RULE_ID
                            	    {

                            	    										if (current==null) {
                            	    											current = createModelElement(grammarAccess.getJobRule());
                            	    										}
                            	    									
                            	    otherlv_13=(Token)match(input,RULE_ID,FOLLOW_9); 

                            	    										newLeafNode(otherlv_13, grammarAccess.getJobAccess().getReferencesJobCrossReference_1_2_1_1_2_1_0());
                            	    									

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop108;
                                }
                            } while (true);

                            otherlv_14=(Token)match(input,RightSquareBracket,FOLLOW_79); 

                            							newLeafNode(otherlv_14, grammarAccess.getJobAccess().getRightSquareBracketKeyword_1_2_1_1_3());
                            						

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:3599:4: (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==Steps) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalPipelineParser.g:3600:5: otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )*
                    {
                    otherlv_15=(Token)match(input,Steps,FOLLOW_46); 

                    					newLeafNode(otherlv_15, grammarAccess.getJobAccess().getStepsKeyword_1_3_0());
                    				
                    // InternalPipelineParser.g:3604:5: ( (lv_steps_16_0= ruleStep ) )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==HyphenMinus) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // InternalPipelineParser.g:3605:6: (lv_steps_16_0= ruleStep )
                    	    {
                    	    // InternalPipelineParser.g:3605:6: (lv_steps_16_0= ruleStep )
                    	    // InternalPipelineParser.g:3606:7: lv_steps_16_0= ruleStep
                    	    {

                    	    							newCompositeNode(grammarAccess.getJobAccess().getStepsStepParserRuleCall_1_3_1_0());
                    	    						
                    	    pushFollow(FOLLOW_46);
                    	    lv_steps_16_0=ruleStep();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getJobRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"steps",
                    	    								lv_steps_16_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.Step");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    }
                    break;

            }

            this_END_17=(Token)match(input,RULE_END,FOLLOW_2); 

            				newLeafNode(this_END_17, grammarAccess.getJobAccess().getENDTerminalRuleCall_1_4());
            			

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJob"


    // $ANTLR start "entryRuleStep"
    // InternalPipelineParser.g:3633:1: entryRuleStep returns [EObject current=null] : iv_ruleStep= ruleStep EOF ;
    public final EObject entryRuleStep() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStep = null;


        try {
            // InternalPipelineParser.g:3633:45: (iv_ruleStep= ruleStep EOF )
            // InternalPipelineParser.g:3634:2: iv_ruleStep= ruleStep EOF
            {
             newCompositeNode(grammarAccess.getStepRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleStep=ruleStep();

            state._fsp--;

             current =iv_ruleStep; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStep"


    // $ANTLR start "ruleStep"
    // InternalPipelineParser.g:3640:1: ruleStep returns [EObject current=null] : (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) ) ;
    public final EObject ruleStep() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_Action_1 = null;

        EObject this_Script_2 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3646:2: ( (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) ) )
            // InternalPipelineParser.g:3647:2: (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) )
            {
            // InternalPipelineParser.g:3647:2: (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) )
            // InternalPipelineParser.g:3648:3: otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript )
            {
            otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_80); 

            			newLeafNode(otherlv_0, grammarAccess.getStepAccess().getHyphenMinusKeyword_0());
            		
            // InternalPipelineParser.g:3652:3: (this_Action_1= ruleAction | this_Script_2= ruleScript )
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // InternalPipelineParser.g:3653:4: this_Action_1= ruleAction
                    {

                    				newCompositeNode(grammarAccess.getStepAccess().getActionParserRuleCall_1_0());
                    			
                    pushFollow(FOLLOW_2);
                    this_Action_1=ruleAction();

                    state._fsp--;


                    				current = this_Action_1;
                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3662:4: this_Script_2= ruleScript
                    {

                    				newCompositeNode(grammarAccess.getStepAccess().getScriptParserRuleCall_1_1());
                    			
                    pushFollow(FOLLOW_2);
                    this_Script_2=ruleScript();

                    state._fsp--;


                    				current = this_Script_2;
                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStep"


    // $ANTLR start "entryRuleScript"
    // InternalPipelineParser.g:3675:1: entryRuleScript returns [EObject current=null] : iv_ruleScript= ruleScript EOF ;
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScript = null;


        try {
            // InternalPipelineParser.g:3675:47: (iv_ruleScript= ruleScript EOF )
            // InternalPipelineParser.g:3676:2: iv_ruleScript= ruleScript EOF
            {
             newCompositeNode(grammarAccess.getScriptRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();

            state._fsp--;

             current =iv_ruleScript; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScript"


    // $ANTLR start "ruleScript"
    // InternalPipelineParser.g:3682:1: ruleScript returns [EObject current=null] : ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? ) ;
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_1=null;
        Token lv_name_0_2=null;
        Token lv_name_0_3=null;
        Token lv_name_0_4=null;
        Token lv_name_0_5=null;
        Token lv_name_0_6=null;
        Token lv_name_0_7=null;
        Token lv_name_0_8=null;
        Token lv_name_0_9=null;
        Token lv_name_0_10=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token this_END_6=null;
        Token this_BEGIN_7=null;
        Token this_END_9=null;
        AntlrDatatypeRuleToken lv_command_1_0 = null;

        AntlrDatatypeRuleToken lv_command_5_0 = null;

        EObject lv_subSteps_8_1 = null;

        EObject lv_subSteps_8_2 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3688:2: ( ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? ) )
            // InternalPipelineParser.g:3689:2: ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? )
            {
            // InternalPipelineParser.g:3689:2: ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? )
            // InternalPipelineParser.g:3690:3: ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )?
            {
            // InternalPipelineParser.g:3690:3: ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) )
            // InternalPipelineParser.g:3691:4: ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) )
            {
            // InternalPipelineParser.g:3691:4: ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) )
            // InternalPipelineParser.g:3692:5: ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) )
            {
            // InternalPipelineParser.g:3692:5: ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) )
            // InternalPipelineParser.g:3693:6: (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task )
            {
            // InternalPipelineParser.g:3693:6: (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task )
            int alt114=10;
            switch ( input.LA(1) ) {
            case Run:
                {
                alt114=1;
                }
                break;
            case Script:
                {
                alt114=2;
                }
                break;
            case Bash:
                {
                alt114=3;
                }
                break;
            case Pwsh:
                {
                alt114=4;
                }
                break;
            case Powershell:
                {
                alt114=5;
                }
                break;
            case Checkout:
                {
                alt114=6;
                }
                break;
            case Download:
                {
                alt114=7;
                }
                break;
            case GetPackage:
                {
                alt114=8;
                }
                break;
            case Publish:
                {
                alt114=9;
                }
                break;
            case Task:
                {
                alt114=10;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // InternalPipelineParser.g:3694:7: lv_name_0_1= Run
                    {
                    lv_name_0_1=(Token)match(input,Run,FOLLOW_81); 

                    							newLeafNode(lv_name_0_1, grammarAccess.getScriptAccess().getNameRunKeyword_0_0_0_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_1, null);
                    						

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3705:7: lv_name_0_2= Script
                    {
                    lv_name_0_2=(Token)match(input,Script,FOLLOW_81); 

                    							newLeafNode(lv_name_0_2, grammarAccess.getScriptAccess().getNameScriptKeyword_0_0_0_1());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_2, null);
                    						

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:3716:7: lv_name_0_3= Bash
                    {
                    lv_name_0_3=(Token)match(input,Bash,FOLLOW_81); 

                    							newLeafNode(lv_name_0_3, grammarAccess.getScriptAccess().getNameBashKeyword_0_0_0_2());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_3, null);
                    						

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:3727:7: lv_name_0_4= Pwsh
                    {
                    lv_name_0_4=(Token)match(input,Pwsh,FOLLOW_81); 

                    							newLeafNode(lv_name_0_4, grammarAccess.getScriptAccess().getNamePwshKeyword_0_0_0_3());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_4, null);
                    						

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:3738:7: lv_name_0_5= Powershell
                    {
                    lv_name_0_5=(Token)match(input,Powershell,FOLLOW_81); 

                    							newLeafNode(lv_name_0_5, grammarAccess.getScriptAccess().getNamePowershellKeyword_0_0_0_4());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_5, null);
                    						

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:3749:7: lv_name_0_6= Checkout
                    {
                    lv_name_0_6=(Token)match(input,Checkout,FOLLOW_81); 

                    							newLeafNode(lv_name_0_6, grammarAccess.getScriptAccess().getNameCheckoutKeyword_0_0_0_5());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_6, null);
                    						

                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:3760:7: lv_name_0_7= Download
                    {
                    lv_name_0_7=(Token)match(input,Download,FOLLOW_81); 

                    							newLeafNode(lv_name_0_7, grammarAccess.getScriptAccess().getNameDownloadKeyword_0_0_0_6());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_7, null);
                    						

                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:3771:7: lv_name_0_8= GetPackage
                    {
                    lv_name_0_8=(Token)match(input,GetPackage,FOLLOW_81); 

                    							newLeafNode(lv_name_0_8, grammarAccess.getScriptAccess().getNameGetPackageKeyword_0_0_0_7());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_8, null);
                    						

                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:3782:7: lv_name_0_9= Publish
                    {
                    lv_name_0_9=(Token)match(input,Publish,FOLLOW_81); 

                    							newLeafNode(lv_name_0_9, grammarAccess.getScriptAccess().getNamePublishKeyword_0_0_0_8());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_9, null);
                    						

                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:3793:7: lv_name_0_10= Task
                    {
                    lv_name_0_10=(Token)match(input,Task,FOLLOW_81); 

                    							newLeafNode(lv_name_0_10, grammarAccess.getScriptAccess().getNameTaskKeyword_0_0_0_9());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_10, null);
                    						

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:3806:4: ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( ((LA116_0>=RULE_COMPLEX_EXPRESSION && LA116_0<=RULE_VERSION)||LA116_0==RULE_STRING) ) {
                alt116=1;
            }
            else if ( (LA116_0==GreaterThanSignHyphenMinus||LA116_0==VerticalLine) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }
            switch (alt116) {
                case 1 :
                    // InternalPipelineParser.g:3807:5: ( (lv_command_1_0= ruleAnyData ) )
                    {
                    // InternalPipelineParser.g:3807:5: ( (lv_command_1_0= ruleAnyData ) )
                    // InternalPipelineParser.g:3808:6: (lv_command_1_0= ruleAnyData )
                    {
                    // InternalPipelineParser.g:3808:6: (lv_command_1_0= ruleAnyData )
                    // InternalPipelineParser.g:3809:7: lv_command_1_0= ruleAnyData
                    {

                    							newCompositeNode(grammarAccess.getScriptAccess().getCommandAnyDataParserRuleCall_0_1_0_0());
                    						
                    pushFollow(FOLLOW_43);
                    lv_command_1_0=ruleAnyData();

                    state._fsp--;


                    							if (current==null) {
                    								current = createModelElementForParent(grammarAccess.getScriptRule());
                    							}
                    							set(
                    								current,
                    								"command",
                    								lv_command_1_0,
                    								"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    							afterParserOrEnumRuleCall();
                    						

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3827:5: ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END )
                    {
                    // InternalPipelineParser.g:3827:5: ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END )
                    // InternalPipelineParser.g:3828:6: (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END
                    {
                    // InternalPipelineParser.g:3828:6: (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus )
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==VerticalLine) ) {
                        alt115=1;
                    }
                    else if ( (LA115_0==GreaterThanSignHyphenMinus) ) {
                        alt115=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 115, 0, input);

                        throw nvae;
                    }
                    switch (alt115) {
                        case 1 :
                            // InternalPipelineParser.g:3829:7: otherlv_2= VerticalLine
                            {
                            otherlv_2=(Token)match(input,VerticalLine,FOLLOW_16); 

                            							newLeafNode(otherlv_2, grammarAccess.getScriptAccess().getVerticalLineKeyword_0_1_1_0_0());
                            						

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3834:7: otherlv_3= GreaterThanSignHyphenMinus
                            {
                            otherlv_3=(Token)match(input,GreaterThanSignHyphenMinus,FOLLOW_16); 

                            							newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getGreaterThanSignHyphenMinusKeyword_0_1_1_0_1());
                            						

                            }
                            break;

                    }

                    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_41); 

                    						newLeafNode(this_BEGIN_4, grammarAccess.getScriptAccess().getBEGINTerminalRuleCall_0_1_1_1());
                    					
                    // InternalPipelineParser.g:3843:6: ( (lv_command_5_0= ruleAnyData ) )
                    // InternalPipelineParser.g:3844:7: (lv_command_5_0= ruleAnyData )
                    {
                    // InternalPipelineParser.g:3844:7: (lv_command_5_0= ruleAnyData )
                    // InternalPipelineParser.g:3845:8: lv_command_5_0= ruleAnyData
                    {

                    								newCompositeNode(grammarAccess.getScriptAccess().getCommandAnyDataParserRuleCall_0_1_1_2_0());
                    							
                    pushFollow(FOLLOW_20);
                    lv_command_5_0=ruleAnyData();

                    state._fsp--;


                    								if (current==null) {
                    									current = createModelElementForParent(grammarAccess.getScriptRule());
                    								}
                    								set(
                    									current,
                    									"command",
                    									lv_command_5_0,
                    									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    								afterParserOrEnumRuleCall();
                    							

                    }


                    }

                    this_END_6=(Token)match(input,RULE_END,FOLLOW_43); 

                    						newLeafNode(this_END_6, grammarAccess.getScriptAccess().getENDTerminalRuleCall_0_1_1_3());
                    					

                    }


                    }
                    break;

            }


            }

            // InternalPipelineParser.g:3869:3: (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==RULE_BEGIN) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // InternalPipelineParser.g:3870:4: this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END
                    {
                    this_BEGIN_7=(Token)match(input,RULE_BEGIN,FOLLOW_82); 

                    				newLeafNode(this_BEGIN_7, grammarAccess.getScriptAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:3874:4: ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( ((LA118_0>=Repository_dispatch && LA118_0<=ContinueOnError_1)||(LA118_0>=Workflow_dispatch && LA118_0<=WorkingDirectory)||(LA118_0>=TimeoutInMinutes && LA118_0<=ContinueOnError)||LA118_0==TimeoutMinutes||LA118_0==ReleaseTrigger||(LA118_0>=Allow_failure && LA118_0<=DeployTrigger)||(LA118_0>=Notifications && LA118_0<=After_script)||(LA118_0>=DefaultsRun && LA118_0<=PathsIgnore)||(LA118_0>=Pull_request && LA118_0<=Workflow_run)||(LA118_0>=Concurrency && LA118_0<=Definitions)||LA118_0==Description||(LA118_0>=DisplayName && LA118_0<=GetPackage)||(LA118_0>=Parameters && LA118_0<=Permission)||(LA118_0>=Powershell && LA118_0<=Artifacts)||(LA118_0>=Condition && LA118_0<=FailFast)||(LA118_0>=Pipelines && LA118_0<=RunPolicy)||(LA118_0>=Schedules && LA118_0<=Workspace)||(LA118_0>=Branches && LA118_0<=Checkout)||(LA118_0>=Defaults && LA118_0<=Download)||(LA118_0>=MaxTime && LA118_0<=PreBuild)||(LA118_0>=Readonly && LA118_0<=Snapshot)||(LA118_0>=Strategy && LA118_0<=Webhooks)||(LA118_0>=Command && LA118_0<=Caches)||(LA118_0>=Docker && LA118_0<=Except)||LA118_0==Inputs||(LA118_0>=Labels && LA118_0<=Policy)||LA118_0==Queued||(LA118_0>=Script && LA118_0<=Stages)||(LA118_0>=Agent && LA118_0<=Image)||(LA118_0>=Paths && LA118_0<=Value)||(LA118_0>=Auth && LA118_0<=Cron)||LA118_0==Name||(LA118_0>=Only && LA118_0<=Pwsh)||(LA118_0>=Step && LA118_0<=With)||(LA118_0>=Env && LA118_0<=Job)||(LA118_0>=Run && LA118_0<=On)||LA118_0==RULE_ID) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // InternalPipelineParser.g:3875:5: ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) )
                    	    {
                    	    // InternalPipelineParser.g:3875:5: ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) )
                    	    // InternalPipelineParser.g:3876:6: (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript )
                    	    {
                    	    // InternalPipelineParser.g:3876:6: (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript )
                    	    int alt117=2;
                    	    alt117 = dfa117.predict(input);
                    	    switch (alt117) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3877:7: lv_subSteps_8_1= ruleAction
                    	            {

                    	            							newCompositeNode(grammarAccess.getScriptAccess().getSubStepsActionParserRuleCall_1_1_0_0());
                    	            						
                    	            pushFollow(FOLLOW_82);
                    	            lv_subSteps_8_1=ruleAction();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getScriptRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_8_1,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Action");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalPipelineParser.g:3893:7: lv_subSteps_8_2= ruleScript
                    	            {

                    	            							newCompositeNode(grammarAccess.getScriptAccess().getSubStepsScriptParserRuleCall_1_1_0_1());
                    	            						
                    	            pushFollow(FOLLOW_82);
                    	            lv_subSteps_8_2=ruleScript();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getScriptRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_8_2,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Script");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);

                    this_END_9=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_9, grammarAccess.getScriptAccess().getENDTerminalRuleCall_1_2());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScript"


    // $ANTLR start "entryRuleAction"
    // InternalPipelineParser.g:3920:1: entryRuleAction returns [EObject current=null] : iv_ruleAction= ruleAction EOF ;
    public final EObject entryRuleAction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAction = null;


        try {
            // InternalPipelineParser.g:3920:47: (iv_ruleAction= ruleAction EOF )
            // InternalPipelineParser.g:3921:2: iv_ruleAction= ruleAction EOF
            {
             newCompositeNode(grammarAccess.getActionRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleAction=ruleAction();

            state._fsp--;

             current =iv_ruleAction; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAction"


    // $ANTLR start "ruleAction"
    // InternalPipelineParser.g:3927:1: ruleAction returns [EObject current=null] : ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? ) ;
    public final EObject ruleAction() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_otherKeyword_3_0=null;
        Token otherlv_4=null;
        Token this_BEGIN_6=null;
        Token this_END_8=null;
        AntlrDatatypeRuleToken lv_actionName_1_0 = null;

        Enumerator lv_actionKeyword_2_0 = null;

        AntlrDatatypeRuleToken lv_actionValue_5_1 = null;

        AntlrDatatypeRuleToken lv_actionValue_5_2 = null;

        EObject lv_subSteps_7_1 = null;

        EObject lv_subSteps_7_2 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3933:2: ( ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? ) )
            // InternalPipelineParser.g:3934:2: ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? )
            {
            // InternalPipelineParser.g:3934:2: ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? )
            // InternalPipelineParser.g:3935:3: ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )?
            {
            // InternalPipelineParser.g:3935:3: ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==Name) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==EOF||(LA123_1>=Repository_dispatch && LA123_1<=ContinueOnError_1)||(LA123_1>=Workflow_dispatch && LA123_1<=WorkingDirectory)||(LA123_1>=TimeoutInMinutes && LA123_1<=ContinueOnError)||LA123_1==TimeoutMinutes||LA123_1==ReleaseTrigger||(LA123_1>=Allow_failure && LA123_1<=DeployTrigger)||(LA123_1>=Notifications && LA123_1<=After_script)||(LA123_1>=DefaultsRun && LA123_1<=PathsIgnore)||(LA123_1>=Pull_request && LA123_1<=Workflow_run)||(LA123_1>=Concurrency && LA123_1<=Definitions)||LA123_1==Description||(LA123_1>=DisplayName && LA123_1<=GetPackage)||(LA123_1>=Parameters && LA123_1<=Permission)||(LA123_1>=Powershell && LA123_1<=Artifacts)||(LA123_1>=Condition && LA123_1<=FailFast)||(LA123_1>=Pipelines && LA123_1<=RunPolicy)||(LA123_1>=Schedules && LA123_1<=Workspace)||(LA123_1>=Branches && LA123_1<=Checkout)||(LA123_1>=Defaults && LA123_1<=Download)||(LA123_1>=MaxTime && LA123_1<=PreBuild)||(LA123_1>=Readonly && LA123_1<=Snapshot)||(LA123_1>=Strategy && LA123_1<=Webhooks)||(LA123_1>=Command && LA123_1<=Caches)||(LA123_1>=Docker && LA123_1<=Except)||LA123_1==Inputs||(LA123_1>=Labels && LA123_1<=Policy)||LA123_1==Queued||(LA123_1>=Script && LA123_1<=Stages)||(LA123_1>=Agent && LA123_1<=Image)||(LA123_1>=Paths && LA123_1<=Value)||(LA123_1>=Auth && LA123_1<=Cron)||LA123_1==Name||(LA123_1>=Only && LA123_1<=Pwsh)||(LA123_1>=Step && LA123_1<=With)||(LA123_1>=Env && LA123_1<=Job)||(LA123_1>=Run && LA123_1<=On)||LA123_1==HyphenMinus||(LA123_1>=RULE_COMPLEX_EXPRESSION && LA123_1<=RULE_FLOAT_LITERAL)||(LA123_1>=RULE_VERSION && LA123_1<=RULE_END)||LA123_1==RULE_STRING) ) {
                    alt123=2;
                }
                else if ( (LA123_1==RULE_ID) ) {
                    alt123=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA123_0>=Repository_dispatch && LA123_0<=ContinueOnError_1)||(LA123_0>=Workflow_dispatch && LA123_0<=WorkingDirectory)||(LA123_0>=TimeoutInMinutes && LA123_0<=ContinueOnError)||LA123_0==TimeoutMinutes||LA123_0==ReleaseTrigger||(LA123_0>=Allow_failure && LA123_0<=DeployTrigger)||(LA123_0>=Notifications && LA123_0<=After_script)||(LA123_0>=DefaultsRun && LA123_0<=PathsIgnore)||(LA123_0>=Pull_request && LA123_0<=Workflow_run)||(LA123_0>=Concurrency && LA123_0<=Definitions)||LA123_0==Description||(LA123_0>=DisplayName && LA123_0<=GetPackage)||(LA123_0>=Parameters && LA123_0<=Permission)||(LA123_0>=Powershell && LA123_0<=Artifacts)||(LA123_0>=Condition && LA123_0<=FailFast)||(LA123_0>=Pipelines && LA123_0<=RunPolicy)||(LA123_0>=Schedules && LA123_0<=Workspace)||(LA123_0>=Branches && LA123_0<=Checkout)||(LA123_0>=Defaults && LA123_0<=Download)||(LA123_0>=MaxTime && LA123_0<=PreBuild)||(LA123_0>=Readonly && LA123_0<=Snapshot)||(LA123_0>=Strategy && LA123_0<=Webhooks)||(LA123_0>=Command && LA123_0<=Caches)||(LA123_0>=Docker && LA123_0<=Except)||LA123_0==Inputs||(LA123_0>=Labels && LA123_0<=Policy)||LA123_0==Queued||(LA123_0>=Script && LA123_0<=Stages)||(LA123_0>=Agent && LA123_0<=Image)||(LA123_0>=Paths && LA123_0<=Value)||(LA123_0>=Auth && LA123_0<=Cron)||(LA123_0>=Only && LA123_0<=Pwsh)||(LA123_0>=Step && LA123_0<=With)||(LA123_0>=Env && LA123_0<=Job)||(LA123_0>=Run && LA123_0<=On)||LA123_0==RULE_ID) ) {
                alt123=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // InternalPipelineParser.g:3936:4: (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) )
                    {
                    // InternalPipelineParser.g:3936:4: (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) )
                    // InternalPipelineParser.g:3937:5: otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) )
                    {
                    otherlv_0=(Token)match(input,Name,FOLLOW_14); 

                    					newLeafNode(otherlv_0, grammarAccess.getActionAccess().getNameKeyword_0_0_0());
                    				
                    // InternalPipelineParser.g:3941:5: ( (lv_actionName_1_0= ruleUnquotedString ) )
                    // InternalPipelineParser.g:3942:6: (lv_actionName_1_0= ruleUnquotedString )
                    {
                    // InternalPipelineParser.g:3942:6: (lv_actionName_1_0= ruleUnquotedString )
                    // InternalPipelineParser.g:3943:7: lv_actionName_1_0= ruleUnquotedString
                    {

                    							newCompositeNode(grammarAccess.getActionAccess().getActionNameUnquotedStringParserRuleCall_0_0_1_0());
                    						
                    pushFollow(FOLLOW_43);
                    lv_actionName_1_0=ruleUnquotedString();

                    state._fsp--;


                    							if (current==null) {
                    								current = createModelElementForParent(grammarAccess.getActionRule());
                    							}
                    							set(
                    								current,
                    								"actionName",
                    								lv_actionName_1_0,
                    								"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
                    							afterParserOrEnumRuleCall();
                    						

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3962:4: ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? )
                    {
                    // InternalPipelineParser.g:3962:4: ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? )
                    // InternalPipelineParser.g:3963:5: ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )?
                    {
                    // InternalPipelineParser.g:3963:5: ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) )
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( ((LA120_0>=Repository_dispatch && LA120_0<=ContinueOnError_1)||(LA120_0>=Workflow_dispatch && LA120_0<=WorkingDirectory)||(LA120_0>=TimeoutInMinutes && LA120_0<=ContinueOnError)||LA120_0==TimeoutMinutes||LA120_0==ReleaseTrigger||(LA120_0>=Allow_failure && LA120_0<=DeployTrigger)||(LA120_0>=Notifications && LA120_0<=After_script)||(LA120_0>=DefaultsRun && LA120_0<=PathsIgnore)||(LA120_0>=Pull_request && LA120_0<=Workflow_run)||(LA120_0>=Concurrency && LA120_0<=Definitions)||LA120_0==Description||(LA120_0>=DisplayName && LA120_0<=GetPackage)||(LA120_0>=Parameters && LA120_0<=Permission)||(LA120_0>=Powershell && LA120_0<=Artifacts)||(LA120_0>=Condition && LA120_0<=FailFast)||(LA120_0>=Pipelines && LA120_0<=RunPolicy)||(LA120_0>=Schedules && LA120_0<=Workspace)||(LA120_0>=Branches && LA120_0<=Checkout)||(LA120_0>=Defaults && LA120_0<=Download)||(LA120_0>=MaxTime && LA120_0<=PreBuild)||(LA120_0>=Readonly && LA120_0<=Snapshot)||(LA120_0>=Strategy && LA120_0<=Webhooks)||(LA120_0>=Command && LA120_0<=Caches)||(LA120_0>=Docker && LA120_0<=Except)||LA120_0==Inputs||(LA120_0>=Labels && LA120_0<=Policy)||LA120_0==Queued||(LA120_0>=Script && LA120_0<=Stages)||(LA120_0>=Agent && LA120_0<=Image)||(LA120_0>=Paths && LA120_0<=Value)||(LA120_0>=Auth && LA120_0<=Cron)||LA120_0==Name||(LA120_0>=Only && LA120_0<=Pwsh)||(LA120_0>=Step && LA120_0<=With)||(LA120_0>=Env && LA120_0<=Job)||(LA120_0>=Run && LA120_0<=On)) ) {
                        alt120=1;
                    }
                    else if ( (LA120_0==RULE_ID) ) {
                        alt120=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 0, input);

                        throw nvae;
                    }
                    switch (alt120) {
                        case 1 :
                            // InternalPipelineParser.g:3964:6: ( (lv_actionKeyword_2_0= rulePipelineKeyword ) )
                            {
                            // InternalPipelineParser.g:3964:6: ( (lv_actionKeyword_2_0= rulePipelineKeyword ) )
                            // InternalPipelineParser.g:3965:7: (lv_actionKeyword_2_0= rulePipelineKeyword )
                            {
                            // InternalPipelineParser.g:3965:7: (lv_actionKeyword_2_0= rulePipelineKeyword )
                            // InternalPipelineParser.g:3966:8: lv_actionKeyword_2_0= rulePipelineKeyword
                            {

                            								newCompositeNode(grammarAccess.getActionAccess().getActionKeywordPipelineKeywordEnumRuleCall_0_1_0_0_0());
                            							
                            pushFollow(FOLLOW_83);
                            lv_actionKeyword_2_0=rulePipelineKeyword();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getActionRule());
                            								}
                            								set(
                            									current,
                            									"actionKeyword",
                            									lv_actionKeyword_2_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.PipelineKeyword");
                            								afterParserOrEnumRuleCall();
                            							

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3984:6: ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon )
                            {
                            // InternalPipelineParser.g:3984:6: ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon )
                            // InternalPipelineParser.g:3985:7: ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon
                            {
                            // InternalPipelineParser.g:3985:7: ( (lv_otherKeyword_3_0= RULE_ID ) )
                            // InternalPipelineParser.g:3986:8: (lv_otherKeyword_3_0= RULE_ID )
                            {
                            // InternalPipelineParser.g:3986:8: (lv_otherKeyword_3_0= RULE_ID )
                            // InternalPipelineParser.g:3987:9: lv_otherKeyword_3_0= RULE_ID
                            {
                            lv_otherKeyword_3_0=(Token)match(input,RULE_ID,FOLLOW_40); 

                            									newLeafNode(lv_otherKeyword_3_0, grammarAccess.getActionAccess().getOtherKeywordIDTerminalRuleCall_0_1_0_1_0_0());
                            								

                            									if (current==null) {
                            										current = createModelElement(grammarAccess.getActionRule());
                            									}
                            									setWithLastConsumed(
                            										current,
                            										"otherKeyword",
                            										lv_otherKeyword_3_0,
                            										"ca.mcgill.devops.pipeline.Pipeline.ID");
                            								

                            }


                            }

                            otherlv_4=(Token)match(input,Colon,FOLLOW_83); 

                            							newLeafNode(otherlv_4, grammarAccess.getActionAccess().getColonKeyword_0_1_0_1_1());
                            						

                            }


                            }
                            break;

                    }

                    // InternalPipelineParser.g:4009:5: ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )?
                    int alt122=2;
                    switch ( input.LA(1) ) {
                        case RULE_COMPLEX_EXPRESSION:
                        case RULE_HEX_INT:
                        case RULE_INT:
                        case RULE_FLOAT_LITERAL:
                        case RULE_VERSION:
                        case RULE_STRING:
                            {
                            alt122=1;
                            }
                            break;
                        case RULE_ID:
                            {
                            int LA122_2 = input.LA(2);

                            if ( (LA122_2==EOF||(LA122_2>=Repository_dispatch && LA122_2<=ContinueOnError_1)||(LA122_2>=Workflow_dispatch && LA122_2<=WorkingDirectory)||(LA122_2>=TimeoutInMinutes && LA122_2<=ContinueOnError)||LA122_2==TimeoutMinutes||LA122_2==ReleaseTrigger||(LA122_2>=Allow_failure && LA122_2<=DeployTrigger)||(LA122_2>=Notifications && LA122_2<=After_script)||(LA122_2>=DefaultsRun && LA122_2<=PathsIgnore)||(LA122_2>=Pull_request && LA122_2<=Workflow_run)||(LA122_2>=Concurrency && LA122_2<=Definitions)||LA122_2==Description||(LA122_2>=DisplayName && LA122_2<=GetPackage)||(LA122_2>=Parameters && LA122_2<=Permission)||(LA122_2>=Powershell && LA122_2<=Artifacts)||(LA122_2>=Condition && LA122_2<=FailFast)||(LA122_2>=Pipelines && LA122_2<=RunPolicy)||(LA122_2>=Schedules && LA122_2<=Workspace)||(LA122_2>=Branches && LA122_2<=Checkout)||(LA122_2>=Defaults && LA122_2<=Download)||(LA122_2>=MaxTime && LA122_2<=PreBuild)||(LA122_2>=Readonly && LA122_2<=Snapshot)||(LA122_2>=Strategy && LA122_2<=Webhooks)||(LA122_2>=Command && LA122_2<=Caches)||(LA122_2>=Docker && LA122_2<=Except)||LA122_2==Inputs||(LA122_2>=Labels && LA122_2<=Policy)||LA122_2==Queued||(LA122_2>=Script && LA122_2<=Stages)||(LA122_2>=Agent && LA122_2<=Image)||(LA122_2>=Paths && LA122_2<=Value)||(LA122_2>=Auth && LA122_2<=Cron)||LA122_2==Name||(LA122_2>=Only && LA122_2<=Pwsh)||(LA122_2>=Step && LA122_2<=With)||(LA122_2>=Env && LA122_2<=Job)||(LA122_2>=Run && LA122_2<=On)||LA122_2==HyphenMinus||LA122_2==RULE_ID||(LA122_2>=RULE_BEGIN && LA122_2<=RULE_END)) ) {
                                alt122=1;
                            }
                            }
                            break;
                        case HyphenMinus:
                            {
                            int LA122_3 = input.LA(2);

                            if ( (LA122_3==RULE_ID) ) {
                                int LA122_6 = input.LA(3);

                                if ( (LA122_6==EOF||(LA122_6>=Repository_dispatch && LA122_6<=ContinueOnError_1)||(LA122_6>=Workflow_dispatch && LA122_6<=WorkingDirectory)||(LA122_6>=TimeoutInMinutes && LA122_6<=ContinueOnError)||LA122_6==TimeoutMinutes||LA122_6==ReleaseTrigger||(LA122_6>=Allow_failure && LA122_6<=DeployTrigger)||(LA122_6>=Notifications && LA122_6<=After_script)||(LA122_6>=DefaultsRun && LA122_6<=PathsIgnore)||(LA122_6>=Pull_request && LA122_6<=Workflow_run)||(LA122_6>=Concurrency && LA122_6<=Definitions)||LA122_6==Description||(LA122_6>=DisplayName && LA122_6<=GetPackage)||(LA122_6>=Parameters && LA122_6<=Permission)||(LA122_6>=Powershell && LA122_6<=Artifacts)||(LA122_6>=Condition && LA122_6<=FailFast)||(LA122_6>=Pipelines && LA122_6<=RunPolicy)||(LA122_6>=Schedules && LA122_6<=Workspace)||(LA122_6>=Branches && LA122_6<=Checkout)||(LA122_6>=Defaults && LA122_6<=Download)||(LA122_6>=MaxTime && LA122_6<=PreBuild)||(LA122_6>=Readonly && LA122_6<=Snapshot)||(LA122_6>=Strategy && LA122_6<=Webhooks)||(LA122_6>=Command && LA122_6<=Caches)||(LA122_6>=Docker && LA122_6<=Except)||LA122_6==Inputs||(LA122_6>=Labels && LA122_6<=Policy)||LA122_6==Queued||(LA122_6>=Script && LA122_6<=Stages)||(LA122_6>=Agent && LA122_6<=Image)||(LA122_6>=Paths && LA122_6<=Value)||(LA122_6>=Auth && LA122_6<=Cron)||LA122_6==Name||(LA122_6>=Only && LA122_6<=Pwsh)||(LA122_6>=Step && LA122_6<=With)||(LA122_6>=Env && LA122_6<=Job)||(LA122_6>=Run && LA122_6<=On)||LA122_6==HyphenMinus||LA122_6==RULE_ID||(LA122_6>=RULE_BEGIN && LA122_6<=RULE_END)) ) {
                                    alt122=1;
                                }
                            }
                            else if ( ((LA122_3>=RULE_COMPLEX_EXPRESSION && LA122_3<=RULE_FLOAT_LITERAL)||LA122_3==RULE_VERSION||LA122_3==RULE_STRING) ) {
                                alt122=1;
                            }
                            }
                            break;
                        case RULE_BEGIN:
                            {
                            int LA122_4 = input.LA(2);

                            if ( (LA122_4==HyphenMinus) ) {
                                alt122=1;
                            }
                            }
                            break;
                    }

                    switch (alt122) {
                        case 1 :
                            // InternalPipelineParser.g:4010:6: ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) )
                            {
                            // InternalPipelineParser.g:4010:6: ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) )
                            // InternalPipelineParser.g:4011:7: (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues )
                            {
                            // InternalPipelineParser.g:4011:7: (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues )
                            int alt121=2;
                            int LA121_0 = input.LA(1);

                            if ( ((LA121_0>=RULE_COMPLEX_EXPRESSION && LA121_0<=RULE_VERSION)||LA121_0==RULE_STRING) ) {
                                alt121=1;
                            }
                            else if ( (LA121_0==HyphenMinus||LA121_0==RULE_BEGIN) ) {
                                alt121=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 121, 0, input);

                                throw nvae;
                            }
                            switch (alt121) {
                                case 1 :
                                    // InternalPipelineParser.g:4012:8: lv_actionValue_5_1= ruleAnyData
                                    {

                                    								newCompositeNode(grammarAccess.getActionAccess().getActionValueAnyDataParserRuleCall_0_1_1_0_0());
                                    							
                                    pushFollow(FOLLOW_43);
                                    lv_actionValue_5_1=ruleAnyData();

                                    state._fsp--;


                                    								if (current==null) {
                                    									current = createModelElementForParent(grammarAccess.getActionRule());
                                    								}
                                    								set(
                                    									current,
                                    									"actionValue",
                                    									lv_actionValue_5_1,
                                    									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                                    								afterParserOrEnumRuleCall();
                                    							

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:4028:8: lv_actionValue_5_2= ruleHyphenValues
                                    {

                                    								newCompositeNode(grammarAccess.getActionAccess().getActionValueHyphenValuesParserRuleCall_0_1_1_0_1());
                                    							
                                    pushFollow(FOLLOW_43);
                                    lv_actionValue_5_2=ruleHyphenValues();

                                    state._fsp--;


                                    								if (current==null) {
                                    									current = createModelElementForParent(grammarAccess.getActionRule());
                                    								}
                                    								set(
                                    									current,
                                    									"actionValue",
                                    									lv_actionValue_5_2,
                                    									"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                                    								afterParserOrEnumRuleCall();
                                    							

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:4048:3: (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==RULE_BEGIN) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // InternalPipelineParser.g:4049:4: this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END
                    {
                    this_BEGIN_6=(Token)match(input,RULE_BEGIN,FOLLOW_82); 

                    				newLeafNode(this_BEGIN_6, grammarAccess.getActionAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:4053:4: ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )*
                    loop125:
                    do {
                        int alt125=2;
                        int LA125_0 = input.LA(1);

                        if ( ((LA125_0>=Repository_dispatch && LA125_0<=ContinueOnError_1)||(LA125_0>=Workflow_dispatch && LA125_0<=WorkingDirectory)||(LA125_0>=TimeoutInMinutes && LA125_0<=ContinueOnError)||LA125_0==TimeoutMinutes||LA125_0==ReleaseTrigger||(LA125_0>=Allow_failure && LA125_0<=DeployTrigger)||(LA125_0>=Notifications && LA125_0<=After_script)||(LA125_0>=DefaultsRun && LA125_0<=PathsIgnore)||(LA125_0>=Pull_request && LA125_0<=Workflow_run)||(LA125_0>=Concurrency && LA125_0<=Definitions)||LA125_0==Description||(LA125_0>=DisplayName && LA125_0<=GetPackage)||(LA125_0>=Parameters && LA125_0<=Permission)||(LA125_0>=Powershell && LA125_0<=Artifacts)||(LA125_0>=Condition && LA125_0<=FailFast)||(LA125_0>=Pipelines && LA125_0<=RunPolicy)||(LA125_0>=Schedules && LA125_0<=Workspace)||(LA125_0>=Branches && LA125_0<=Checkout)||(LA125_0>=Defaults && LA125_0<=Download)||(LA125_0>=MaxTime && LA125_0<=PreBuild)||(LA125_0>=Readonly && LA125_0<=Snapshot)||(LA125_0>=Strategy && LA125_0<=Webhooks)||(LA125_0>=Command && LA125_0<=Caches)||(LA125_0>=Docker && LA125_0<=Except)||LA125_0==Inputs||(LA125_0>=Labels && LA125_0<=Policy)||LA125_0==Queued||(LA125_0>=Script && LA125_0<=Stages)||(LA125_0>=Agent && LA125_0<=Image)||(LA125_0>=Paths && LA125_0<=Value)||(LA125_0>=Auth && LA125_0<=Cron)||LA125_0==Name||(LA125_0>=Only && LA125_0<=Pwsh)||(LA125_0>=Step && LA125_0<=With)||(LA125_0>=Env && LA125_0<=Job)||(LA125_0>=Run && LA125_0<=On)||LA125_0==RULE_ID) ) {
                            alt125=1;
                        }


                        switch (alt125) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4054:5: ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) )
                    	    {
                    	    // InternalPipelineParser.g:4054:5: ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) )
                    	    // InternalPipelineParser.g:4055:6: (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript )
                    	    {
                    	    // InternalPipelineParser.g:4055:6: (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript )
                    	    int alt124=2;
                    	    alt124 = dfa124.predict(input);
                    	    switch (alt124) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:4056:7: lv_subSteps_7_1= ruleAction
                    	            {

                    	            							newCompositeNode(grammarAccess.getActionAccess().getSubStepsActionParserRuleCall_1_1_0_0());
                    	            						
                    	            pushFollow(FOLLOW_82);
                    	            lv_subSteps_7_1=ruleAction();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getActionRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_7_1,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Action");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalPipelineParser.g:4072:7: lv_subSteps_7_2= ruleScript
                    	            {

                    	            							newCompositeNode(grammarAccess.getActionAccess().getSubStepsScriptParserRuleCall_1_1_0_1());
                    	            						
                    	            pushFollow(FOLLOW_82);
                    	            lv_subSteps_7_2=ruleScript();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getActionRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_7_2,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Script");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop125;
                        }
                    } while (true);

                    this_END_8=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_8, grammarAccess.getActionAccess().getENDTerminalRuleCall_1_2());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAction"


    // $ANTLR start "entryRuleParameterValue"
    // InternalPipelineParser.g:4099:1: entryRuleParameterValue returns [EObject current=null] : iv_ruleParameterValue= ruleParameterValue EOF ;
    public final EObject entryRuleParameterValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterValue = null;


        try {
            // InternalPipelineParser.g:4099:55: (iv_ruleParameterValue= ruleParameterValue EOF )
            // InternalPipelineParser.g:4100:2: iv_ruleParameterValue= ruleParameterValue EOF
            {
             newCompositeNode(grammarAccess.getParameterValueRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleParameterValue=ruleParameterValue();

            state._fsp--;

             current =iv_ruleParameterValue; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterValue"


    // $ANTLR start "ruleParameterValue"
    // InternalPipelineParser.g:4106:1: ruleParameterValue returns [EObject current=null] : ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) ) ) ;
    public final EObject ruleParameterValue() throws RecognitionException {
        EObject current = null;

        Token lv_otherName_1_1=null;
        Token lv_otherName_1_2=null;
        Token otherlv_2=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token this_END_7=null;
        Token this_BEGIN_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Enumerator lv_name_0_0 = null;

        AntlrDatatypeRuleToken lv_value_3_1 = null;

        AntlrDatatypeRuleToken lv_value_3_2 = null;

        AntlrDatatypeRuleToken lv_value_3_3 = null;

        EObject lv_subParameters_6_0 = null;

        EObject lv_subParameters_10_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4112:2: ( ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) ) ) )
            // InternalPipelineParser.g:4113:2: ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) ) )
            {
            // InternalPipelineParser.g:4113:2: ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) ) )
            // InternalPipelineParser.g:4114:3: ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) )
            {
            // InternalPipelineParser.g:4114:3: ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=Repository_dispatch && LA128_0<=ContinueOnError_1)||(LA128_0>=Workflow_dispatch && LA128_0<=WorkingDirectory)||(LA128_0>=TimeoutInMinutes && LA128_0<=ContinueOnError)||LA128_0==TimeoutMinutes||LA128_0==ReleaseTrigger||(LA128_0>=Allow_failure && LA128_0<=DeployTrigger)||(LA128_0>=Notifications && LA128_0<=After_script)||(LA128_0>=DefaultsRun && LA128_0<=PathsIgnore)||(LA128_0>=Pull_request && LA128_0<=Workflow_run)||(LA128_0>=Concurrency && LA128_0<=Definitions)||LA128_0==Description||(LA128_0>=DisplayName && LA128_0<=GetPackage)||(LA128_0>=Parameters && LA128_0<=Permission)||(LA128_0>=Powershell && LA128_0<=Artifacts)||(LA128_0>=Condition && LA128_0<=FailFast)||(LA128_0>=Pipelines && LA128_0<=RunPolicy)||(LA128_0>=Schedules && LA128_0<=Workspace)||(LA128_0>=Branches && LA128_0<=Checkout)||(LA128_0>=Defaults && LA128_0<=Download)||(LA128_0>=MaxTime && LA128_0<=PreBuild)||(LA128_0>=Readonly && LA128_0<=Snapshot)||(LA128_0>=Strategy && LA128_0<=Webhooks)||(LA128_0>=Command && LA128_0<=Caches)||(LA128_0>=Docker && LA128_0<=Except)||LA128_0==Inputs||(LA128_0>=Labels && LA128_0<=Policy)||LA128_0==Queued||(LA128_0>=Script && LA128_0<=Stages)||(LA128_0>=Agent && LA128_0<=Image)||(LA128_0>=Paths && LA128_0<=Value)||(LA128_0>=Auth && LA128_0<=Cron)||LA128_0==Name||(LA128_0>=Only && LA128_0<=Pwsh)||(LA128_0>=Step && LA128_0<=With)||(LA128_0>=Env && LA128_0<=Job)||(LA128_0>=Run && LA128_0<=On)) ) {
                alt128=1;
            }
            else if ( (LA128_0==RULE_COMPLEX_EXPRESSION||LA128_0==RULE_ID) ) {
                alt128=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // InternalPipelineParser.g:4115:4: ( (lv_name_0_0= rulePipelineKeyword ) )
                    {
                    // InternalPipelineParser.g:4115:4: ( (lv_name_0_0= rulePipelineKeyword ) )
                    // InternalPipelineParser.g:4116:5: (lv_name_0_0= rulePipelineKeyword )
                    {
                    // InternalPipelineParser.g:4116:5: (lv_name_0_0= rulePipelineKeyword )
                    // InternalPipelineParser.g:4117:6: lv_name_0_0= rulePipelineKeyword
                    {

                    						newCompositeNode(grammarAccess.getParameterValueAccess().getNamePipelineKeywordEnumRuleCall_0_0_0());
                    					
                    pushFollow(FOLLOW_51);
                    lv_name_0_0=rulePipelineKeyword();

                    state._fsp--;


                    						if (current==null) {
                    							current = createModelElementForParent(grammarAccess.getParameterValueRule());
                    						}
                    						set(
                    							current,
                    							"name",
                    							lv_name_0_0,
                    							"ca.mcgill.devops.pipeline.Pipeline.PipelineKeyword");
                    						afterParserOrEnumRuleCall();
                    					

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4135:4: ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon )
                    {
                    // InternalPipelineParser.g:4135:4: ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon )
                    // InternalPipelineParser.g:4136:5: ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon
                    {
                    // InternalPipelineParser.g:4136:5: ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) )
                    // InternalPipelineParser.g:4137:6: ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) )
                    {
                    // InternalPipelineParser.g:4137:6: ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) )
                    // InternalPipelineParser.g:4138:7: (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION )
                    {
                    // InternalPipelineParser.g:4138:7: (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION )
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==RULE_ID) ) {
                        alt127=1;
                    }
                    else if ( (LA127_0==RULE_COMPLEX_EXPRESSION) ) {
                        alt127=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 0, input);

                        throw nvae;
                    }
                    switch (alt127) {
                        case 1 :
                            // InternalPipelineParser.g:4139:8: lv_otherName_1_1= RULE_ID
                            {
                            lv_otherName_1_1=(Token)match(input,RULE_ID,FOLLOW_40); 

                            								newLeafNode(lv_otherName_1_1, grammarAccess.getParameterValueAccess().getOtherNameIDTerminalRuleCall_0_1_0_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getParameterValueRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"otherName",
                            									lv_otherName_1_1,
                            									"ca.mcgill.devops.pipeline.Pipeline.ID");
                            							

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:4154:8: lv_otherName_1_2= RULE_COMPLEX_EXPRESSION
                            {
                            lv_otherName_1_2=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_40); 

                            								newLeafNode(lv_otherName_1_2, grammarAccess.getParameterValueAccess().getOtherNameCOMPLEX_EXPRESSIONTerminalRuleCall_0_1_0_0_1());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getParameterValueRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"otherName",
                            									lv_otherName_1_2,
                            									"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
                            							

                            }
                            break;

                    }


                    }


                    }

                    otherlv_2=(Token)match(input,Colon,FOLLOW_51); 

                    					newLeafNode(otherlv_2, grammarAccess.getParameterValueAccess().getColonKeyword_0_1_1());
                    				

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:4177:3: ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==HyphenMinus||LA135_0==LeftSquareBracket||(LA135_0>=RULE_COMPLEX_EXPRESSION && LA135_0<=RULE_VERSION)||LA135_0==RULE_STRING) ) {
                alt135=1;
            }
            else if ( (LA135_0==RULE_BEGIN) ) {
                int LA135_2 = input.LA(2);

                if ( (LA135_2==HyphenMinus) ) {
                    switch ( input.LA(3) ) {
                    case RULE_HEX_INT:
                    case RULE_INT:
                    case RULE_FLOAT_LITERAL:
                    case RULE_VERSION:
                    case RULE_STRING:
                        {
                        alt135=1;
                        }
                        break;
                    case RULE_ID:
                        {
                        int LA135_5 = input.LA(4);

                        if ( (LA135_5==Colon) ) {
                            alt135=2;
                        }
                        else if ( (LA135_5==HyphenMinus||LA135_5==RULE_END) ) {
                            alt135=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 135, 5, input);

                            throw nvae;
                        }
                        }
                        break;
                    case RULE_COMPLEX_EXPRESSION:
                        {
                        int LA135_6 = input.LA(4);

                        if ( (LA135_6==Colon) ) {
                            alt135=2;
                        }
                        else if ( (LA135_6==HyphenMinus||LA135_6==RULE_END) ) {
                            alt135=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 135, 6, input);

                            throw nvae;
                        }
                        }
                        break;
                    case Repository_dispatch:
                    case CancelInProgress:
                    case ContinueOnError_1:
                    case Workflow_dispatch:
                    case WorkingDirectory:
                    case TimeoutInMinutes:
                    case BranchesIgnore:
                    case ContainerImage:
                    case ContinueOnError:
                    case TimeoutMinutes:
                    case ReleaseTrigger:
                    case Allow_failure:
                    case Before_script:
                    case DeployTrigger:
                    case Notifications:
                    case PullRequests:
                    case Workflow_call:
                    case After_script:
                    case DefaultsRun:
                    case Dependencies:
                    case LockBehavior:
                    case MaxParallel:
                    case PathsIgnore:
                    case Pull_request:
                    case Repositories:
                    case Requirements:
                    case ResourceName:
                    case ResourceType:
                    case TriggerRules:
                    case Workflow_run:
                    case Concurrency:
                    case Credentials:
                    case Definitions:
                    case Description:
                    case DisplayName:
                    case Environment:
                    case IsSkippable:
                    case Permissions:
                    case Provisioner:
                    case ReviewStage:
                    case TagsIgnore:
                    case AutoCancel:
                    case Conditions:
                    case Containers:
                    case Deployment:
                    case GetPackage:
                    case Parameters:
                    case Permission:
                    case Powershell:
                    case Repository:
                    case Approvals:
                    case Artifacts:
                    case Condition:
                    case Container:
                    case DependsOn:
                    case Endpoints:
                    case FailFast:
                    case Pipelines:
                    case PostBuild:
                    case Resources:
                    case RunPolicy:
                    case Schedules:
                    case Variables:
                    case Workflows:
                    case Workspace:
                    case Branches:
                    case Checkout:
                    case Defaults:
                    case Download:
                    case MaxTime:
                    case Packages:
                    case Parallel:
                    case Pipeline:
                    case PreBuild:
                    case Readonly:
                    case Required:
                    case RunName:
                    case Schedule:
                    case Services:
                    case Snapshot:
                    case Strategy:
                    case Template:
                    case Timeouts:
                    case Webhooks:
                    case Command:
                    case Default:
                    case Demands:
                    case Exclude:
                    case Extends:
                    case Filters:
                    case Include:
                    case Inherit:
                    case Options:
                    case Outputs:
                    case Project:
                    case Publish:
                    case Release:
                    case Retries:
                    case RunsOn:
                    case Secrets:
                    case Storage:
                    case Timeout:
                    case Trigger:
                    case Version:
                    case VmImage:
                    case Always:
                    case Builds:
                    case Caches:
                    case Docker:
                    case Drafts:
                    case Except:
                    case Inputs:
                    case Labels:
                    case Matrix:
                    case Policy:
                    case Queued:
                    case Script:
                    case Stages:
                    case Agent:
                    case Batch:
                    case Cache:
                    case Final:
                    case Group:
                    case Image:
                    case Paths:
                    case Ports:
                    case Queue:
                    case Rules:
                    case Shell:
                    case Stage:
                    case Steps:
                    case Tasks:
                    case Types:
                    case Value:
                    case Auth:
                    case Bash:
                    case Cron:
                    case Name:
                    case Only:
                    case Plan:
                    case Pool:
                    case Push:
                    case Pwsh:
                    case Step:
                    case Tags:
                    case Task:
                    case Type:
                    case Uses:
                    case When:
                    case With:
                    case Env:
                    case Jdk:
                    case Job:
                    case Run:
                    case Ssh:
                    case Id:
                    case If:
                    case On:
                        {
                        alt135=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 3, input);

                        throw nvae;
                    }

                }
                else if ( ((LA135_2>=Repository_dispatch && LA135_2<=ContinueOnError_1)||(LA135_2>=Workflow_dispatch && LA135_2<=WorkingDirectory)||(LA135_2>=TimeoutInMinutes && LA135_2<=ContinueOnError)||LA135_2==TimeoutMinutes||LA135_2==ReleaseTrigger||(LA135_2>=Allow_failure && LA135_2<=DeployTrigger)||(LA135_2>=Notifications && LA135_2<=After_script)||(LA135_2>=DefaultsRun && LA135_2<=PathsIgnore)||(LA135_2>=Pull_request && LA135_2<=Workflow_run)||(LA135_2>=Concurrency && LA135_2<=Definitions)||LA135_2==Description||(LA135_2>=DisplayName && LA135_2<=GetPackage)||(LA135_2>=Parameters && LA135_2<=Permission)||(LA135_2>=Powershell && LA135_2<=Artifacts)||(LA135_2>=Condition && LA135_2<=FailFast)||(LA135_2>=Pipelines && LA135_2<=RunPolicy)||(LA135_2>=Schedules && LA135_2<=Workspace)||(LA135_2>=Branches && LA135_2<=Checkout)||(LA135_2>=Defaults && LA135_2<=Download)||(LA135_2>=MaxTime && LA135_2<=PreBuild)||(LA135_2>=Readonly && LA135_2<=Snapshot)||(LA135_2>=Strategy && LA135_2<=Webhooks)||(LA135_2>=Command && LA135_2<=Caches)||(LA135_2>=Docker && LA135_2<=Except)||LA135_2==Inputs||(LA135_2>=Labels && LA135_2<=Policy)||LA135_2==Queued||(LA135_2>=Script && LA135_2<=Stages)||(LA135_2>=Agent && LA135_2<=Image)||(LA135_2>=Paths && LA135_2<=Value)||(LA135_2>=Auth && LA135_2<=Cron)||LA135_2==Name||(LA135_2>=Only && LA135_2<=Pwsh)||(LA135_2>=Step && LA135_2<=With)||(LA135_2>=Env && LA135_2<=Job)||(LA135_2>=Run && LA135_2<=On)||LA135_2==RULE_COMPLEX_EXPRESSION||LA135_2==RULE_ID||LA135_2==RULE_END) ) {
                    alt135=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;
            }
            switch (alt135) {
                case 1 :
                    // InternalPipelineParser.g:4178:4: ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? )
                    {
                    // InternalPipelineParser.g:4178:4: ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? )
                    // InternalPipelineParser.g:4179:5: ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )?
                    {
                    // InternalPipelineParser.g:4179:5: ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) )
                    // InternalPipelineParser.g:4180:6: ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) )
                    {
                    // InternalPipelineParser.g:4180:6: ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) )
                    // InternalPipelineParser.g:4181:7: (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues )
                    {
                    // InternalPipelineParser.g:4181:7: (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues )
                    int alt129=3;
                    switch ( input.LA(1) ) {
                    case RULE_COMPLEX_EXPRESSION:
                    case RULE_HEX_INT:
                    case RULE_INT:
                    case RULE_FLOAT_LITERAL:
                    case RULE_ID:
                    case RULE_VERSION:
                    case RULE_STRING:
                        {
                        alt129=1;
                        }
                        break;
                    case LeftSquareBracket:
                        {
                        alt129=2;
                        }
                        break;
                    case HyphenMinus:
                    case RULE_BEGIN:
                        {
                        alt129=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 129, 0, input);

                        throw nvae;
                    }

                    switch (alt129) {
                        case 1 :
                            // InternalPipelineParser.g:4182:8: lv_value_3_1= ruleAnyData
                            {

                            								newCompositeNode(grammarAccess.getParameterValueAccess().getValueAnyDataParserRuleCall_1_0_0_0_0());
                            							
                            pushFollow(FOLLOW_43);
                            lv_value_3_1=ruleAnyData();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            								}
                            								set(
                            									current,
                            									"value",
                            									lv_value_3_1,
                            									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                            								afterParserOrEnumRuleCall();
                            							

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:4198:8: lv_value_3_2= ruleArrayList
                            {

                            								newCompositeNode(grammarAccess.getParameterValueAccess().getValueArrayListParserRuleCall_1_0_0_0_1());
                            							
                            pushFollow(FOLLOW_43);
                            lv_value_3_2=ruleArrayList();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            								}
                            								set(
                            									current,
                            									"value",
                            									lv_value_3_2,
                            									"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
                            								afterParserOrEnumRuleCall();
                            							

                            }
                            break;
                        case 3 :
                            // InternalPipelineParser.g:4214:8: lv_value_3_3= ruleHyphenValues
                            {

                            								newCompositeNode(grammarAccess.getParameterValueAccess().getValueHyphenValuesParserRuleCall_1_0_0_0_2());
                            							
                            pushFollow(FOLLOW_43);
                            lv_value_3_3=ruleHyphenValues();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            								}
                            								set(
                            									current,
                            									"value",
                            									lv_value_3_3,
                            									"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            								afterParserOrEnumRuleCall();
                            							

                            }
                            break;

                    }


                    }


                    }

                    // InternalPipelineParser.g:4232:5: (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==RULE_BEGIN) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // InternalPipelineParser.g:4233:6: this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END
                            {
                            this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_84); 

                            						newLeafNode(this_BEGIN_4, grammarAccess.getParameterValueAccess().getBEGINTerminalRuleCall_1_0_1_0());
                            					
                            // InternalPipelineParser.g:4237:6: ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )*
                            loop131:
                            do {
                                int alt131=2;
                                int LA131_0 = input.LA(1);

                                if ( ((LA131_0>=Repository_dispatch && LA131_0<=ContinueOnError_1)||(LA131_0>=Workflow_dispatch && LA131_0<=WorkingDirectory)||(LA131_0>=TimeoutInMinutes && LA131_0<=ContinueOnError)||LA131_0==TimeoutMinutes||LA131_0==ReleaseTrigger||(LA131_0>=Allow_failure && LA131_0<=DeployTrigger)||(LA131_0>=Notifications && LA131_0<=After_script)||(LA131_0>=DefaultsRun && LA131_0<=PathsIgnore)||(LA131_0>=Pull_request && LA131_0<=Workflow_run)||(LA131_0>=Concurrency && LA131_0<=Definitions)||LA131_0==Description||(LA131_0>=DisplayName && LA131_0<=GetPackage)||(LA131_0>=Parameters && LA131_0<=Permission)||(LA131_0>=Powershell && LA131_0<=Artifacts)||(LA131_0>=Condition && LA131_0<=FailFast)||(LA131_0>=Pipelines && LA131_0<=RunPolicy)||(LA131_0>=Schedules && LA131_0<=Workspace)||(LA131_0>=Branches && LA131_0<=Checkout)||(LA131_0>=Defaults && LA131_0<=Download)||(LA131_0>=MaxTime && LA131_0<=PreBuild)||(LA131_0>=Readonly && LA131_0<=Snapshot)||(LA131_0>=Strategy && LA131_0<=Webhooks)||(LA131_0>=Command && LA131_0<=Caches)||(LA131_0>=Docker && LA131_0<=Except)||LA131_0==Inputs||(LA131_0>=Labels && LA131_0<=Policy)||LA131_0==Queued||(LA131_0>=Script && LA131_0<=Stages)||(LA131_0>=Agent && LA131_0<=Image)||(LA131_0>=Paths && LA131_0<=Value)||(LA131_0>=Auth && LA131_0<=Cron)||LA131_0==Name||(LA131_0>=Only && LA131_0<=Pwsh)||(LA131_0>=Step && LA131_0<=With)||(LA131_0>=Env && LA131_0<=Job)||(LA131_0>=Run && LA131_0<=On)||LA131_0==HyphenMinus||LA131_0==RULE_COMPLEX_EXPRESSION||LA131_0==RULE_ID) ) {
                                    alt131=1;
                                }


                                switch (alt131) {
                            	case 1 :
                            	    // InternalPipelineParser.g:4238:7: (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) )
                            	    {
                            	    // InternalPipelineParser.g:4238:7: (otherlv_5= HyphenMinus )?
                            	    int alt130=2;
                            	    int LA130_0 = input.LA(1);

                            	    if ( (LA130_0==HyphenMinus) ) {
                            	        alt130=1;
                            	    }
                            	    switch (alt130) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:4239:8: otherlv_5= HyphenMinus
                            	            {
                            	            otherlv_5=(Token)match(input,HyphenMinus,FOLLOW_38); 

                            	            								newLeafNode(otherlv_5, grammarAccess.getParameterValueAccess().getHyphenMinusKeyword_1_0_1_1_0());
                            	            							

                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:4244:7: ( (lv_subParameters_6_0= ruleParameterValue ) )
                            	    // InternalPipelineParser.g:4245:8: (lv_subParameters_6_0= ruleParameterValue )
                            	    {
                            	    // InternalPipelineParser.g:4245:8: (lv_subParameters_6_0= ruleParameterValue )
                            	    // InternalPipelineParser.g:4246:9: lv_subParameters_6_0= ruleParameterValue
                            	    {

                            	    									newCompositeNode(grammarAccess.getParameterValueAccess().getSubParametersParameterValueParserRuleCall_1_0_1_1_1_0());
                            	    								
                            	    pushFollow(FOLLOW_84);
                            	    lv_subParameters_6_0=ruleParameterValue();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"subParameters",
                            	    										lv_subParameters_6_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop131;
                                }
                            } while (true);

                            this_END_7=(Token)match(input,RULE_END,FOLLOW_2); 

                            						newLeafNode(this_END_7, grammarAccess.getParameterValueAccess().getENDTerminalRuleCall_1_0_1_2());
                            					

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4271:4: (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END )
                    {
                    // InternalPipelineParser.g:4271:4: (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END )
                    // InternalPipelineParser.g:4272:5: this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END
                    {
                    this_BEGIN_8=(Token)match(input,RULE_BEGIN,FOLLOW_84); 

                    					newLeafNode(this_BEGIN_8, grammarAccess.getParameterValueAccess().getBEGINTerminalRuleCall_1_1_0());
                    				
                    // InternalPipelineParser.g:4276:5: ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( ((LA134_0>=Repository_dispatch && LA134_0<=ContinueOnError_1)||(LA134_0>=Workflow_dispatch && LA134_0<=WorkingDirectory)||(LA134_0>=TimeoutInMinutes && LA134_0<=ContinueOnError)||LA134_0==TimeoutMinutes||LA134_0==ReleaseTrigger||(LA134_0>=Allow_failure && LA134_0<=DeployTrigger)||(LA134_0>=Notifications && LA134_0<=After_script)||(LA134_0>=DefaultsRun && LA134_0<=PathsIgnore)||(LA134_0>=Pull_request && LA134_0<=Workflow_run)||(LA134_0>=Concurrency && LA134_0<=Definitions)||LA134_0==Description||(LA134_0>=DisplayName && LA134_0<=GetPackage)||(LA134_0>=Parameters && LA134_0<=Permission)||(LA134_0>=Powershell && LA134_0<=Artifacts)||(LA134_0>=Condition && LA134_0<=FailFast)||(LA134_0>=Pipelines && LA134_0<=RunPolicy)||(LA134_0>=Schedules && LA134_0<=Workspace)||(LA134_0>=Branches && LA134_0<=Checkout)||(LA134_0>=Defaults && LA134_0<=Download)||(LA134_0>=MaxTime && LA134_0<=PreBuild)||(LA134_0>=Readonly && LA134_0<=Snapshot)||(LA134_0>=Strategy && LA134_0<=Webhooks)||(LA134_0>=Command && LA134_0<=Caches)||(LA134_0>=Docker && LA134_0<=Except)||LA134_0==Inputs||(LA134_0>=Labels && LA134_0<=Policy)||LA134_0==Queued||(LA134_0>=Script && LA134_0<=Stages)||(LA134_0>=Agent && LA134_0<=Image)||(LA134_0>=Paths && LA134_0<=Value)||(LA134_0>=Auth && LA134_0<=Cron)||LA134_0==Name||(LA134_0>=Only && LA134_0<=Pwsh)||(LA134_0>=Step && LA134_0<=With)||(LA134_0>=Env && LA134_0<=Job)||(LA134_0>=Run && LA134_0<=On)||LA134_0==HyphenMinus||LA134_0==RULE_COMPLEX_EXPRESSION||LA134_0==RULE_ID) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4277:6: (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) )
                    	    {
                    	    // InternalPipelineParser.g:4277:6: (otherlv_9= HyphenMinus )?
                    	    int alt133=2;
                    	    int LA133_0 = input.LA(1);

                    	    if ( (LA133_0==HyphenMinus) ) {
                    	        alt133=1;
                    	    }
                    	    switch (alt133) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:4278:7: otherlv_9= HyphenMinus
                    	            {
                    	            otherlv_9=(Token)match(input,HyphenMinus,FOLLOW_38); 

                    	            							newLeafNode(otherlv_9, grammarAccess.getParameterValueAccess().getHyphenMinusKeyword_1_1_1_0());
                    	            						

                    	            }
                    	            break;

                    	    }

                    	    // InternalPipelineParser.g:4283:6: ( (lv_subParameters_10_0= ruleParameterValue ) )
                    	    // InternalPipelineParser.g:4284:7: (lv_subParameters_10_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:4284:7: (lv_subParameters_10_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:4285:8: lv_subParameters_10_0= ruleParameterValue
                    	    {

                    	    								newCompositeNode(grammarAccess.getParameterValueAccess().getSubParametersParameterValueParserRuleCall_1_1_1_1_0());
                    	    							
                    	    pushFollow(FOLLOW_84);
                    	    lv_subParameters_10_0=ruleParameterValue();

                    	    state._fsp--;


                    	    								if (current==null) {
                    	    									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                    	    								}
                    	    								add(
                    	    									current,
                    	    									"subParameters",
                    	    									lv_subParameters_10_0,
                    	    									"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    								afterParserOrEnumRuleCall();
                    	    							

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);

                    this_END_11=(Token)match(input,RULE_END,FOLLOW_2); 

                    					newLeafNode(this_END_11, grammarAccess.getParameterValueAccess().getENDTerminalRuleCall_1_1_2());
                    				

                    }


                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterValue"


    // $ANTLR start "entryRuleAnyData"
    // InternalPipelineParser.g:4313:1: entryRuleAnyData returns [String current=null] : iv_ruleAnyData= ruleAnyData EOF ;
    public final String entryRuleAnyData() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAnyData = null;


        try {
            // InternalPipelineParser.g:4313:47: (iv_ruleAnyData= ruleAnyData EOF )
            // InternalPipelineParser.g:4314:2: iv_ruleAnyData= ruleAnyData EOF
            {
             newCompositeNode(grammarAccess.getAnyDataRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleAnyData=ruleAnyData();

            state._fsp--;

             current =iv_ruleAnyData.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnyData"


    // $ANTLR start "ruleAnyData"
    // InternalPipelineParser.g:4320:1: ruleAnyData returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT ) ;
    public final AntlrDatatypeRuleToken ruleAnyData() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;
        Token this_COMPLEX_EXPRESSION_4=null;
        Token this_VERSION_5=null;
        Token this_HEX_INT_6=null;
        AntlrDatatypeRuleToken this_Number_1 = null;

        AntlrDatatypeRuleToken this_FloatingPoint_2 = null;

        AntlrDatatypeRuleToken this_SimpleWord_3 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4326:2: ( (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT ) )
            // InternalPipelineParser.g:4327:2: (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT )
            {
            // InternalPipelineParser.g:4327:2: (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT )
            int alt136=7;
            switch ( input.LA(1) ) {
            case RULE_STRING:
                {
                alt136=1;
                }
                break;
            case RULE_INT:
                {
                alt136=2;
                }
                break;
            case RULE_FLOAT_LITERAL:
                {
                alt136=3;
                }
                break;
            case RULE_ID:
                {
                alt136=4;
                }
                break;
            case RULE_COMPLEX_EXPRESSION:
                {
                alt136=5;
                }
                break;
            case RULE_VERSION:
                {
                alt136=6;
                }
                break;
            case RULE_HEX_INT:
                {
                alt136=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }

            switch (alt136) {
                case 1 :
                    // InternalPipelineParser.g:4328:3: this_STRING_0= RULE_STRING
                    {
                    this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); 

                    			current.merge(this_STRING_0);
                    		

                    			newLeafNode(this_STRING_0, grammarAccess.getAnyDataAccess().getSTRINGTerminalRuleCall_0());
                    		

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4336:3: this_Number_1= ruleNumber
                    {

                    			newCompositeNode(grammarAccess.getAnyDataAccess().getNumberParserRuleCall_1());
                    		
                    pushFollow(FOLLOW_2);
                    this_Number_1=ruleNumber();

                    state._fsp--;


                    			current.merge(this_Number_1);
                    		

                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4347:3: this_FloatingPoint_2= ruleFloatingPoint
                    {

                    			newCompositeNode(grammarAccess.getAnyDataAccess().getFloatingPointParserRuleCall_2());
                    		
                    pushFollow(FOLLOW_2);
                    this_FloatingPoint_2=ruleFloatingPoint();

                    state._fsp--;


                    			current.merge(this_FloatingPoint_2);
                    		

                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:4358:3: this_SimpleWord_3= ruleSimpleWord
                    {

                    			newCompositeNode(grammarAccess.getAnyDataAccess().getSimpleWordParserRuleCall_3());
                    		
                    pushFollow(FOLLOW_2);
                    this_SimpleWord_3=ruleSimpleWord();

                    state._fsp--;


                    			current.merge(this_SimpleWord_3);
                    		

                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:4369:3: this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION
                    {
                    this_COMPLEX_EXPRESSION_4=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_2); 

                    			current.merge(this_COMPLEX_EXPRESSION_4);
                    		

                    			newLeafNode(this_COMPLEX_EXPRESSION_4, grammarAccess.getAnyDataAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_4());
                    		

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:4377:3: this_VERSION_5= RULE_VERSION
                    {
                    this_VERSION_5=(Token)match(input,RULE_VERSION,FOLLOW_2); 

                    			current.merge(this_VERSION_5);
                    		

                    			newLeafNode(this_VERSION_5, grammarAccess.getAnyDataAccess().getVERSIONTerminalRuleCall_5());
                    		

                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:4385:3: this_HEX_INT_6= RULE_HEX_INT
                    {
                    this_HEX_INT_6=(Token)match(input,RULE_HEX_INT,FOLLOW_2); 

                    			current.merge(this_HEX_INT_6);
                    		

                    			newLeafNode(this_HEX_INT_6, grammarAccess.getAnyDataAccess().getHEX_INTTerminalRuleCall_6());
                    		

                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnyData"


    // $ANTLR start "entryRuleKeyValue"
    // InternalPipelineParser.g:4396:1: entryRuleKeyValue returns [String current=null] : iv_ruleKeyValue= ruleKeyValue EOF ;
    public final String entryRuleKeyValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleKeyValue = null;


        try {
            // InternalPipelineParser.g:4396:48: (iv_ruleKeyValue= ruleKeyValue EOF )
            // InternalPipelineParser.g:4397:2: iv_ruleKeyValue= ruleKeyValue EOF
            {
             newCompositeNode(grammarAccess.getKeyValueRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleKeyValue=ruleKeyValue();

            state._fsp--;

             current =iv_ruleKeyValue.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleKeyValue"


    // $ANTLR start "ruleKeyValue"
    // InternalPipelineParser.g:4403:1: ruleKeyValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) ) ;
    public final AntlrDatatypeRuleToken ruleKeyValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_AnyData_2 = null;

        AntlrDatatypeRuleToken this_HyphenValues_3 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4409:2: ( (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) ) )
            // InternalPipelineParser.g:4410:2: (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) )
            {
            // InternalPipelineParser.g:4410:2: (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) )
            // InternalPipelineParser.g:4411:3: this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues )
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_40); 

            			current.merge(this_ID_0);
            		

            			newLeafNode(this_ID_0, grammarAccess.getKeyValueAccess().getIDTerminalRuleCall_0());
            		
            kw=(Token)match(input,Colon,FOLLOW_33); 

            			current.merge(kw);
            			newLeafNode(kw, grammarAccess.getKeyValueAccess().getColonKeyword_1());
            		
            // InternalPipelineParser.g:4423:3: (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( ((LA137_0>=RULE_COMPLEX_EXPRESSION && LA137_0<=RULE_VERSION)||LA137_0==RULE_STRING) ) {
                alt137=1;
            }
            else if ( (LA137_0==HyphenMinus||LA137_0==RULE_BEGIN) ) {
                alt137=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // InternalPipelineParser.g:4424:4: this_AnyData_2= ruleAnyData
                    {

                    				newCompositeNode(grammarAccess.getKeyValueAccess().getAnyDataParserRuleCall_2_0());
                    			
                    pushFollow(FOLLOW_2);
                    this_AnyData_2=ruleAnyData();

                    state._fsp--;


                    				current.merge(this_AnyData_2);
                    			

                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4435:4: this_HyphenValues_3= ruleHyphenValues
                    {

                    				newCompositeNode(grammarAccess.getKeyValueAccess().getHyphenValuesParserRuleCall_2_1());
                    			
                    pushFollow(FOLLOW_2);
                    this_HyphenValues_3=ruleHyphenValues();

                    state._fsp--;


                    				current.merge(this_HyphenValues_3);
                    			

                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleKeyValue"


    // $ANTLR start "entryRuleIndPermissionValue"
    // InternalPipelineParser.g:4450:1: entryRuleIndPermissionValue returns [String current=null] : iv_ruleIndPermissionValue= ruleIndPermissionValue EOF ;
    public final String entryRuleIndPermissionValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIndPermissionValue = null;


        try {
            // InternalPipelineParser.g:4450:58: (iv_ruleIndPermissionValue= ruleIndPermissionValue EOF )
            // InternalPipelineParser.g:4451:2: iv_ruleIndPermissionValue= ruleIndPermissionValue EOF
            {
             newCompositeNode(grammarAccess.getIndPermissionValueRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleIndPermissionValue=ruleIndPermissionValue();

            state._fsp--;

             current =iv_ruleIndPermissionValue.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndPermissionValue"


    // $ANTLR start "ruleIndPermissionValue"
    // InternalPipelineParser.g:4457:1: ruleIndPermissionValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) ) ;
    public final AntlrDatatypeRuleToken ruleIndPermissionValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4463:2: ( ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) ) )
            // InternalPipelineParser.g:4464:2: ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) )
            {
            // InternalPipelineParser.g:4464:2: ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) )
            // InternalPipelineParser.g:4465:3: (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None )
            {
            // InternalPipelineParser.g:4465:3: (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses )
            int alt138=13;
            switch ( input.LA(1) ) {
            case Actions:
                {
                alt138=1;
                }
                break;
            case Attestations:
                {
                alt138=2;
                }
                break;
            case Checks:
                {
                alt138=3;
                }
                break;
            case Contents:
                {
                alt138=4;
                }
                break;
            case Deployments:
                {
                alt138=5;
                }
                break;
            case IdToken:
                {
                alt138=6;
                }
                break;
            case Issues:
                {
                alt138=7;
                }
                break;
            case Discussions:
                {
                alt138=8;
                }
                break;
            case Packages:
                {
                alt138=9;
                }
                break;
            case PullRequests:
                {
                alt138=10;
                }
                break;
            case RepositoryProjects:
                {
                alt138=11;
                }
                break;
            case SecurityEvents:
                {
                alt138=12;
                }
                break;
            case Statuses:
                {
                alt138=13;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }

            switch (alt138) {
                case 1 :
                    // InternalPipelineParser.g:4466:4: kw= Actions
                    {
                    kw=(Token)match(input,Actions,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getActionsKeyword_0_0());
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4472:4: kw= Attestations
                    {
                    kw=(Token)match(input,Attestations,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getAttestationsKeyword_0_1());
                    			

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4478:4: kw= Checks
                    {
                    kw=(Token)match(input,Checks,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getChecksKeyword_0_2());
                    			

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:4484:4: kw= Contents
                    {
                    kw=(Token)match(input,Contents,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getContentsKeyword_0_3());
                    			

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:4490:4: kw= Deployments
                    {
                    kw=(Token)match(input,Deployments,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getDeploymentsKeyword_0_4());
                    			

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:4496:4: kw= IdToken
                    {
                    kw=(Token)match(input,IdToken,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getIdTokenKeyword_0_5());
                    			

                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:4502:4: kw= Issues
                    {
                    kw=(Token)match(input,Issues,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getIssuesKeyword_0_6());
                    			

                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:4508:4: kw= Discussions
                    {
                    kw=(Token)match(input,Discussions,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getDiscussionsKeyword_0_7());
                    			

                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:4514:4: kw= Packages
                    {
                    kw=(Token)match(input,Packages,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getPackagesKeyword_0_8());
                    			

                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:4520:4: kw= PullRequests
                    {
                    kw=(Token)match(input,PullRequests,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getPullRequestsKeyword_0_9());
                    			

                    }
                    break;
                case 11 :
                    // InternalPipelineParser.g:4526:4: kw= RepositoryProjects
                    {
                    kw=(Token)match(input,RepositoryProjects,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getRepositoryProjectsKeyword_0_10());
                    			

                    }
                    break;
                case 12 :
                    // InternalPipelineParser.g:4532:4: kw= SecurityEvents
                    {
                    kw=(Token)match(input,SecurityEvents,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getSecurityEventsKeyword_0_11());
                    			

                    }
                    break;
                case 13 :
                    // InternalPipelineParser.g:4538:4: kw= Statuses
                    {
                    kw=(Token)match(input,Statuses,FOLLOW_85); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getStatusesKeyword_0_12());
                    			

                    }
                    break;

            }

            // InternalPipelineParser.g:4544:3: (kw= Read | kw= Write | kw= None )
            int alt139=3;
            switch ( input.LA(1) ) {
            case Read:
                {
                alt139=1;
                }
                break;
            case Write:
                {
                alt139=2;
                }
                break;
            case None:
                {
                alt139=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // InternalPipelineParser.g:4545:4: kw= Read
                    {
                    kw=(Token)match(input,Read,FOLLOW_2); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getReadKeyword_1_0());
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4551:4: kw= Write
                    {
                    kw=(Token)match(input,Write,FOLLOW_2); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getWriteKeyword_1_1());
                    			

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4557:4: kw= None
                    {
                    kw=(Token)match(input,None,FOLLOW_2); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getNoneKeyword_1_2());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndPermissionValue"


    // $ANTLR start "entryRuleUnquotedString"
    // InternalPipelineParser.g:4567:1: entryRuleUnquotedString returns [String current=null] : iv_ruleUnquotedString= ruleUnquotedString EOF ;
    public final String entryRuleUnquotedString() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleUnquotedString = null;


        try {
            // InternalPipelineParser.g:4567:54: (iv_ruleUnquotedString= ruleUnquotedString EOF )
            // InternalPipelineParser.g:4568:2: iv_ruleUnquotedString= ruleUnquotedString EOF
            {
             newCompositeNode(grammarAccess.getUnquotedStringRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleUnquotedString=ruleUnquotedString();

            state._fsp--;

             current =iv_ruleUnquotedString.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnquotedString"


    // $ANTLR start "ruleUnquotedString"
    // InternalPipelineParser.g:4574:1: ruleUnquotedString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* ) ;
    public final AntlrDatatypeRuleToken ruleUnquotedString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token this_ID_1=null;
        Token this_INT_2=null;
        Token this_COMPLEX_EXPRESSION_3=null;
        Token this_VERSION_4=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4580:2: ( (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* ) )
            // InternalPipelineParser.g:4581:2: (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* )
            {
            // InternalPipelineParser.g:4581:2: (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* )
            // InternalPipelineParser.g:4582:3: this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )*
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_86); 

            			current.merge(this_ID_0);
            		

            			newLeafNode(this_ID_0, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_0());
            		
            // InternalPipelineParser.g:4589:3: (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )*
            loop140:
            do {
                int alt140=5;
                switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    alt140=1;
                    }
                    break;
                case RULE_INT:
                    {
                    alt140=2;
                    }
                    break;
                case RULE_COMPLEX_EXPRESSION:
                    {
                    alt140=3;
                    }
                    break;
                case RULE_VERSION:
                    {
                    alt140=4;
                    }
                    break;

                }

                switch (alt140) {
            	case 1 :
            	    // InternalPipelineParser.g:4590:4: this_ID_1= RULE_ID
            	    {
            	    this_ID_1=(Token)match(input,RULE_ID,FOLLOW_86); 

            	    				current.merge(this_ID_1);
            	    			

            	    				newLeafNode(this_ID_1, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_1_0());
            	    			

            	    }
            	    break;
            	case 2 :
            	    // InternalPipelineParser.g:4598:4: this_INT_2= RULE_INT
            	    {
            	    this_INT_2=(Token)match(input,RULE_INT,FOLLOW_86); 

            	    				current.merge(this_INT_2);
            	    			

            	    				newLeafNode(this_INT_2, grammarAccess.getUnquotedStringAccess().getINTTerminalRuleCall_1_1());
            	    			

            	    }
            	    break;
            	case 3 :
            	    // InternalPipelineParser.g:4606:4: this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION
            	    {
            	    this_COMPLEX_EXPRESSION_3=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_86); 

            	    				current.merge(this_COMPLEX_EXPRESSION_3);
            	    			

            	    				newLeafNode(this_COMPLEX_EXPRESSION_3, grammarAccess.getUnquotedStringAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_1_2());
            	    			

            	    }
            	    break;
            	case 4 :
            	    // InternalPipelineParser.g:4614:4: this_VERSION_4= RULE_VERSION
            	    {
            	    this_VERSION_4=(Token)match(input,RULE_VERSION,FOLLOW_86); 

            	    				current.merge(this_VERSION_4);
            	    			

            	    				newLeafNode(this_VERSION_4, grammarAccess.getUnquotedStringAccess().getVERSIONTerminalRuleCall_1_3());
            	    			

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnquotedString"


    // $ANTLR start "entryRuleHyphenValues"
    // InternalPipelineParser.g:4626:1: entryRuleHyphenValues returns [String current=null] : iv_ruleHyphenValues= ruleHyphenValues EOF ;
    public final String entryRuleHyphenValues() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleHyphenValues = null;


        try {
            // InternalPipelineParser.g:4626:52: (iv_ruleHyphenValues= ruleHyphenValues EOF )
            // InternalPipelineParser.g:4627:2: iv_ruleHyphenValues= ruleHyphenValues EOF
            {
             newCompositeNode(grammarAccess.getHyphenValuesRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleHyphenValues=ruleHyphenValues();

            state._fsp--;

             current =iv_ruleHyphenValues.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleHyphenValues"


    // $ANTLR start "ruleHyphenValues"
    // InternalPipelineParser.g:4633:1: ruleHyphenValues returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) ) ;
    public final AntlrDatatypeRuleToken ruleHyphenValues() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_BEGIN_2=null;
        Token this_END_5=null;
        AntlrDatatypeRuleToken this_AnyData_1 = null;

        AntlrDatatypeRuleToken this_AnyData_4 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4639:2: ( ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) ) )
            // InternalPipelineParser.g:4640:2: ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) )
            {
            // InternalPipelineParser.g:4640:2: ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==HyphenMinus) ) {
                alt143=1;
            }
            else if ( (LA143_0==RULE_BEGIN) ) {
                alt143=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // InternalPipelineParser.g:4641:3: (kw= HyphenMinus this_AnyData_1= ruleAnyData )+
                    {
                    // InternalPipelineParser.g:4641:3: (kw= HyphenMinus this_AnyData_1= ruleAnyData )+
                    int cnt141=0;
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==HyphenMinus) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4642:4: kw= HyphenMinus this_AnyData_1= ruleAnyData
                    	    {
                    	    kw=(Token)match(input,HyphenMinus,FOLLOW_41); 

                    	    				current.merge(kw);
                    	    				newLeafNode(kw, grammarAccess.getHyphenValuesAccess().getHyphenMinusKeyword_0_0());
                    	    			

                    	    				newCompositeNode(grammarAccess.getHyphenValuesAccess().getAnyDataParserRuleCall_0_1());
                    	    			
                    	    pushFollow(FOLLOW_12);
                    	    this_AnyData_1=ruleAnyData();

                    	    state._fsp--;


                    	    				current.merge(this_AnyData_1);
                    	    			

                    	    				afterParserOrEnumRuleCall();
                    	    			

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt141 >= 1 ) break loop141;
                                EarlyExitException eee =
                                    new EarlyExitException(141, input);
                                throw eee;
                        }
                        cnt141++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4659:3: (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END )
                    {
                    // InternalPipelineParser.g:4659:3: (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END )
                    // InternalPipelineParser.g:4660:4: this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END
                    {
                    this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_63); 

                    				current.merge(this_BEGIN_2);
                    			

                    				newLeafNode(this_BEGIN_2, grammarAccess.getHyphenValuesAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:4667:4: (kw= HyphenMinus this_AnyData_4= ruleAnyData )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==HyphenMinus) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4668:5: kw= HyphenMinus this_AnyData_4= ruleAnyData
                    	    {
                    	    kw=(Token)match(input,HyphenMinus,FOLLOW_41); 

                    	    					current.merge(kw);
                    	    					newLeafNode(kw, grammarAccess.getHyphenValuesAccess().getHyphenMinusKeyword_1_1_0());
                    	    				

                    	    					newCompositeNode(grammarAccess.getHyphenValuesAccess().getAnyDataParserRuleCall_1_1_1());
                    	    				
                    	    pushFollow(FOLLOW_46);
                    	    this_AnyData_4=ruleAnyData();

                    	    state._fsp--;


                    	    					current.merge(this_AnyData_4);
                    	    				

                    	    					afterParserOrEnumRuleCall();
                    	    				

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);

                    this_END_5=(Token)match(input,RULE_END,FOLLOW_2); 

                    				current.merge(this_END_5);
                    			

                    				newLeafNode(this_END_5, grammarAccess.getHyphenValuesAccess().getENDTerminalRuleCall_1_2());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleHyphenValues"


    // $ANTLR start "entryRuleNumber"
    // InternalPipelineParser.g:4696:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;


        try {
            // InternalPipelineParser.g:4696:46: (iv_ruleNumber= ruleNumber EOF )
            // InternalPipelineParser.g:4697:2: iv_ruleNumber= ruleNumber EOF
            {
             newCompositeNode(grammarAccess.getNumberRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleNumber=ruleNumber();

            state._fsp--;

             current =iv_ruleNumber.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalPipelineParser.g:4703:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_INT_0= RULE_INT ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4709:2: (this_INT_0= RULE_INT )
            // InternalPipelineParser.g:4710:2: this_INT_0= RULE_INT
            {
            this_INT_0=(Token)match(input,RULE_INT,FOLLOW_2); 

            		current.merge(this_INT_0);
            	

            		newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall());
            	

            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleFloatingPoint"
    // InternalPipelineParser.g:4720:1: entryRuleFloatingPoint returns [String current=null] : iv_ruleFloatingPoint= ruleFloatingPoint EOF ;
    public final String entryRuleFloatingPoint() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFloatingPoint = null;


        try {
            // InternalPipelineParser.g:4720:53: (iv_ruleFloatingPoint= ruleFloatingPoint EOF )
            // InternalPipelineParser.g:4721:2: iv_ruleFloatingPoint= ruleFloatingPoint EOF
            {
             newCompositeNode(grammarAccess.getFloatingPointRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleFloatingPoint=ruleFloatingPoint();

            state._fsp--;

             current =iv_ruleFloatingPoint.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFloatingPoint"


    // $ANTLR start "ruleFloatingPoint"
    // InternalPipelineParser.g:4727:1: ruleFloatingPoint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_FLOAT_LITERAL_0= RULE_FLOAT_LITERAL ;
    public final AntlrDatatypeRuleToken ruleFloatingPoint() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_FLOAT_LITERAL_0=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4733:2: (this_FLOAT_LITERAL_0= RULE_FLOAT_LITERAL )
            // InternalPipelineParser.g:4734:2: this_FLOAT_LITERAL_0= RULE_FLOAT_LITERAL
            {
            this_FLOAT_LITERAL_0=(Token)match(input,RULE_FLOAT_LITERAL,FOLLOW_2); 

            		current.merge(this_FLOAT_LITERAL_0);
            	

            		newLeafNode(this_FLOAT_LITERAL_0, grammarAccess.getFloatingPointAccess().getFLOAT_LITERALTerminalRuleCall());
            	

            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFloatingPoint"


    // $ANTLR start "entryRuleSimpleWord"
    // InternalPipelineParser.g:4744:1: entryRuleSimpleWord returns [String current=null] : iv_ruleSimpleWord= ruleSimpleWord EOF ;
    public final String entryRuleSimpleWord() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSimpleWord = null;


        try {
            // InternalPipelineParser.g:4744:50: (iv_ruleSimpleWord= ruleSimpleWord EOF )
            // InternalPipelineParser.g:4745:2: iv_ruleSimpleWord= ruleSimpleWord EOF
            {
             newCompositeNode(grammarAccess.getSimpleWordRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleSimpleWord=ruleSimpleWord();

            state._fsp--;

             current =iv_ruleSimpleWord.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleWord"


    // $ANTLR start "ruleSimpleWord"
    // InternalPipelineParser.g:4751:1: ruleSimpleWord returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_ID_0= RULE_ID ;
    public final AntlrDatatypeRuleToken ruleSimpleWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4757:2: (this_ID_0= RULE_ID )
            // InternalPipelineParser.g:4758:2: this_ID_0= RULE_ID
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); 

            		current.merge(this_ID_0);
            	

            		newLeafNode(this_ID_0, grammarAccess.getSimpleWordAccess().getIDTerminalRuleCall());
            	

            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleWord"


    // $ANTLR start "entryRuleArrayList"
    // InternalPipelineParser.g:4768:1: entryRuleArrayList returns [String current=null] : iv_ruleArrayList= ruleArrayList EOF ;
    public final String entryRuleArrayList() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleArrayList = null;


        try {
            // InternalPipelineParser.g:4768:49: (iv_ruleArrayList= ruleArrayList EOF )
            // InternalPipelineParser.g:4769:2: iv_ruleArrayList= ruleArrayList EOF
            {
             newCompositeNode(grammarAccess.getArrayListRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleArrayList=ruleArrayList();

            state._fsp--;

             current =iv_ruleArrayList.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayList"


    // $ANTLR start "ruleArrayList"
    // InternalPipelineParser.g:4775:1: ruleArrayList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket ) ;
    public final AntlrDatatypeRuleToken ruleArrayList() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_AnyData_1 = null;

        AntlrDatatypeRuleToken this_AnyData_3 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4781:2: ( (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket ) )
            // InternalPipelineParser.g:4782:2: (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket )
            {
            // InternalPipelineParser.g:4782:2: (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket )
            // InternalPipelineParser.g:4783:3: kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket
            {
            kw=(Token)match(input,LeftSquareBracket,FOLLOW_87); 

            			current.merge(kw);
            			newLeafNode(kw, grammarAccess.getArrayListAccess().getLeftSquareBracketKeyword_0());
            		
            // InternalPipelineParser.g:4788:3: (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( ((LA145_0>=RULE_COMPLEX_EXPRESSION && LA145_0<=RULE_VERSION)||LA145_0==RULE_STRING) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // InternalPipelineParser.g:4789:4: this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )*
                    {

                    				newCompositeNode(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_0());
                    			
                    pushFollow(FOLLOW_9);
                    this_AnyData_1=ruleAnyData();

                    state._fsp--;


                    				current.merge(this_AnyData_1);
                    			

                    				afterParserOrEnumRuleCall();
                    			
                    // InternalPipelineParser.g:4799:4: (kw= Comma this_AnyData_3= ruleAnyData )*
                    loop144:
                    do {
                        int alt144=2;
                        int LA144_0 = input.LA(1);

                        if ( (LA144_0==Comma) ) {
                            alt144=1;
                        }


                        switch (alt144) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4800:5: kw= Comma this_AnyData_3= ruleAnyData
                    	    {
                    	    kw=(Token)match(input,Comma,FOLLOW_41); 

                    	    					current.merge(kw);
                    	    					newLeafNode(kw, grammarAccess.getArrayListAccess().getCommaKeyword_1_1_0());
                    	    				

                    	    					newCompositeNode(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_1_1());
                    	    				
                    	    pushFollow(FOLLOW_9);
                    	    this_AnyData_3=ruleAnyData();

                    	    state._fsp--;


                    	    					current.merge(this_AnyData_3);
                    	    				

                    	    					afterParserOrEnumRuleCall();
                    	    				

                    	    }
                    	    break;

                    	default :
                    	    break loop144;
                        }
                    } while (true);


                    }
                    break;

            }

            kw=(Token)match(input,RightSquareBracket,FOLLOW_2); 

            			current.merge(kw);
            			newLeafNode(kw, grammarAccess.getArrayListAccess().getRightSquareBracketKeyword_2());
            		

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayList"


    // $ANTLR start "rulePipelineEventKeyword"
    // InternalPipelineParser.g:4826:1: rulePipelineEventKeyword returns [Enumerator current=null] : ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= Workflow_dispatch ) | (enumLiteral_3= Repository_dispatch ) | (enumLiteral_4= Check_run ) | (enumLiteral_5= Check_suite ) | (enumLiteral_6= Create ) | (enumLiteral_7= Delete ) | (enumLiteral_8= Deployment ) | (enumLiteral_9= Deployment_status ) | (enumLiteral_10= Fork ) | (enumLiteral_11= Gollum ) | (enumLiteral_12= Issue_comment ) | (enumLiteral_13= Issues ) | (enumLiteral_14= Label ) | (enumLiteral_15= Milestone ) | (enumLiteral_16= Page_build ) | (enumLiteral_17= Project ) | (enumLiteral_18= Project_card ) | (enumLiteral_19= Project_column ) | (enumLiteral_20= Public ) | (enumLiteral_21= Pull_request_review ) | (enumLiteral_22= Pull_request_review_comment ) | (enumLiteral_23= Pull_request_target ) | (enumLiteral_24= Registry_package ) | (enumLiteral_25= Release ) | (enumLiteral_26= Status ) | (enumLiteral_27= Watch ) | (enumLiteral_28= Workflow_call ) | (enumLiteral_29= Workflow_run ) | (enumLiteral_30= Trigger ) | (enumLiteral_31= Pr ) | (enumLiteral_32= Branches ) | (enumLiteral_33= Tags ) | (enumLiteral_34= Paths ) | (enumLiteral_35= AutoCancel ) | (enumLiteral_36= Drafts ) | (enumLiteral_37= Only ) | (enumLiteral_38= Except ) | (enumLiteral_39= Rules ) | (enumLiteral_40= WorkflowRules ) | (enumLiteral_41= Pipeline_schedule ) | (enumLiteral_42= Merge_requests ) | (enumLiteral_43= Changes ) | (enumLiteral_44= Pipelines ) | (enumLiteral_45= Default ) | (enumLiteral_46= PullRequests ) | (enumLiteral_47= Custom ) | (enumLiteral_48= Conditions ) | (enumLiteral_49= BitbucketBranchDeleted ) | (enumLiteral_50= BitbucketBranchCreated ) | (enumLiteral_51= BitbucketTagCreated ) | (enumLiteral_52= BitbucketTagDeleted ) | (enumLiteral_53= Repository ) | (enumLiteral_54= Scheduled ) | (enumLiteral_55= Remote ) | (enumLiteral_56= Bitbucket ) | (enumLiteral_57= PlanBranch ) | (enumLiteral_58= Cron ) | (enumLiteral_59= Notifications ) | (enumLiteral_60= LockBehavior ) ) ;
    public final Enumerator rulePipelineEventKeyword() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;
        Token enumLiteral_20=null;
        Token enumLiteral_21=null;
        Token enumLiteral_22=null;
        Token enumLiteral_23=null;
        Token enumLiteral_24=null;
        Token enumLiteral_25=null;
        Token enumLiteral_26=null;
        Token enumLiteral_27=null;
        Token enumLiteral_28=null;
        Token enumLiteral_29=null;
        Token enumLiteral_30=null;
        Token enumLiteral_31=null;
        Token enumLiteral_32=null;
        Token enumLiteral_33=null;
        Token enumLiteral_34=null;
        Token enumLiteral_35=null;
        Token enumLiteral_36=null;
        Token enumLiteral_37=null;
        Token enumLiteral_38=null;
        Token enumLiteral_39=null;
        Token enumLiteral_40=null;
        Token enumLiteral_41=null;
        Token enumLiteral_42=null;
        Token enumLiteral_43=null;
        Token enumLiteral_44=null;
        Token enumLiteral_45=null;
        Token enumLiteral_46=null;
        Token enumLiteral_47=null;
        Token enumLiteral_48=null;
        Token enumLiteral_49=null;
        Token enumLiteral_50=null;
        Token enumLiteral_51=null;
        Token enumLiteral_52=null;
        Token enumLiteral_53=null;
        Token enumLiteral_54=null;
        Token enumLiteral_55=null;
        Token enumLiteral_56=null;
        Token enumLiteral_57=null;
        Token enumLiteral_58=null;
        Token enumLiteral_59=null;
        Token enumLiteral_60=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4832:2: ( ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= Workflow_dispatch ) | (enumLiteral_3= Repository_dispatch ) | (enumLiteral_4= Check_run ) | (enumLiteral_5= Check_suite ) | (enumLiteral_6= Create ) | (enumLiteral_7= Delete ) | (enumLiteral_8= Deployment ) | (enumLiteral_9= Deployment_status ) | (enumLiteral_10= Fork ) | (enumLiteral_11= Gollum ) | (enumLiteral_12= Issue_comment ) | (enumLiteral_13= Issues ) | (enumLiteral_14= Label ) | (enumLiteral_15= Milestone ) | (enumLiteral_16= Page_build ) | (enumLiteral_17= Project ) | (enumLiteral_18= Project_card ) | (enumLiteral_19= Project_column ) | (enumLiteral_20= Public ) | (enumLiteral_21= Pull_request_review ) | (enumLiteral_22= Pull_request_review_comment ) | (enumLiteral_23= Pull_request_target ) | (enumLiteral_24= Registry_package ) | (enumLiteral_25= Release ) | (enumLiteral_26= Status ) | (enumLiteral_27= Watch ) | (enumLiteral_28= Workflow_call ) | (enumLiteral_29= Workflow_run ) | (enumLiteral_30= Trigger ) | (enumLiteral_31= Pr ) | (enumLiteral_32= Branches ) | (enumLiteral_33= Tags ) | (enumLiteral_34= Paths ) | (enumLiteral_35= AutoCancel ) | (enumLiteral_36= Drafts ) | (enumLiteral_37= Only ) | (enumLiteral_38= Except ) | (enumLiteral_39= Rules ) | (enumLiteral_40= WorkflowRules ) | (enumLiteral_41= Pipeline_schedule ) | (enumLiteral_42= Merge_requests ) | (enumLiteral_43= Changes ) | (enumLiteral_44= Pipelines ) | (enumLiteral_45= Default ) | (enumLiteral_46= PullRequests ) | (enumLiteral_47= Custom ) | (enumLiteral_48= Conditions ) | (enumLiteral_49= BitbucketBranchDeleted ) | (enumLiteral_50= BitbucketBranchCreated ) | (enumLiteral_51= BitbucketTagCreated ) | (enumLiteral_52= BitbucketTagDeleted ) | (enumLiteral_53= Repository ) | (enumLiteral_54= Scheduled ) | (enumLiteral_55= Remote ) | (enumLiteral_56= Bitbucket ) | (enumLiteral_57= PlanBranch ) | (enumLiteral_58= Cron ) | (enumLiteral_59= Notifications ) | (enumLiteral_60= LockBehavior ) ) )
            // InternalPipelineParser.g:4833:2: ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= Workflow_dispatch ) | (enumLiteral_3= Repository_dispatch ) | (enumLiteral_4= Check_run ) | (enumLiteral_5= Check_suite ) | (enumLiteral_6= Create ) | (enumLiteral_7= Delete ) | (enumLiteral_8= Deployment ) | (enumLiteral_9= Deployment_status ) | (enumLiteral_10= Fork ) | (enumLiteral_11= Gollum ) | (enumLiteral_12= Issue_comment ) | (enumLiteral_13= Issues ) | (enumLiteral_14= Label ) | (enumLiteral_15= Milestone ) | (enumLiteral_16= Page_build ) | (enumLiteral_17= Project ) | (enumLiteral_18= Project_card ) | (enumLiteral_19= Project_column ) | (enumLiteral_20= Public ) | (enumLiteral_21= Pull_request_review ) | (enumLiteral_22= Pull_request_review_comment ) | (enumLiteral_23= Pull_request_target ) | (enumLiteral_24= Registry_package ) | (enumLiteral_25= Release ) | (enumLiteral_26= Status ) | (enumLiteral_27= Watch ) | (enumLiteral_28= Workflow_call ) | (enumLiteral_29= Workflow_run ) | (enumLiteral_30= Trigger ) | (enumLiteral_31= Pr ) | (enumLiteral_32= Branches ) | (enumLiteral_33= Tags ) | (enumLiteral_34= Paths ) | (enumLiteral_35= AutoCancel ) | (enumLiteral_36= Drafts ) | (enumLiteral_37= Only ) | (enumLiteral_38= Except ) | (enumLiteral_39= Rules ) | (enumLiteral_40= WorkflowRules ) | (enumLiteral_41= Pipeline_schedule ) | (enumLiteral_42= Merge_requests ) | (enumLiteral_43= Changes ) | (enumLiteral_44= Pipelines ) | (enumLiteral_45= Default ) | (enumLiteral_46= PullRequests ) | (enumLiteral_47= Custom ) | (enumLiteral_48= Conditions ) | (enumLiteral_49= BitbucketBranchDeleted ) | (enumLiteral_50= BitbucketBranchCreated ) | (enumLiteral_51= BitbucketTagCreated ) | (enumLiteral_52= BitbucketTagDeleted ) | (enumLiteral_53= Repository ) | (enumLiteral_54= Scheduled ) | (enumLiteral_55= Remote ) | (enumLiteral_56= Bitbucket ) | (enumLiteral_57= PlanBranch ) | (enumLiteral_58= Cron ) | (enumLiteral_59= Notifications ) | (enumLiteral_60= LockBehavior ) )
            {
            // InternalPipelineParser.g:4833:2: ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= Workflow_dispatch ) | (enumLiteral_3= Repository_dispatch ) | (enumLiteral_4= Check_run ) | (enumLiteral_5= Check_suite ) | (enumLiteral_6= Create ) | (enumLiteral_7= Delete ) | (enumLiteral_8= Deployment ) | (enumLiteral_9= Deployment_status ) | (enumLiteral_10= Fork ) | (enumLiteral_11= Gollum ) | (enumLiteral_12= Issue_comment ) | (enumLiteral_13= Issues ) | (enumLiteral_14= Label ) | (enumLiteral_15= Milestone ) | (enumLiteral_16= Page_build ) | (enumLiteral_17= Project ) | (enumLiteral_18= Project_card ) | (enumLiteral_19= Project_column ) | (enumLiteral_20= Public ) | (enumLiteral_21= Pull_request_review ) | (enumLiteral_22= Pull_request_review_comment ) | (enumLiteral_23= Pull_request_target ) | (enumLiteral_24= Registry_package ) | (enumLiteral_25= Release ) | (enumLiteral_26= Status ) | (enumLiteral_27= Watch ) | (enumLiteral_28= Workflow_call ) | (enumLiteral_29= Workflow_run ) | (enumLiteral_30= Trigger ) | (enumLiteral_31= Pr ) | (enumLiteral_32= Branches ) | (enumLiteral_33= Tags ) | (enumLiteral_34= Paths ) | (enumLiteral_35= AutoCancel ) | (enumLiteral_36= Drafts ) | (enumLiteral_37= Only ) | (enumLiteral_38= Except ) | (enumLiteral_39= Rules ) | (enumLiteral_40= WorkflowRules ) | (enumLiteral_41= Pipeline_schedule ) | (enumLiteral_42= Merge_requests ) | (enumLiteral_43= Changes ) | (enumLiteral_44= Pipelines ) | (enumLiteral_45= Default ) | (enumLiteral_46= PullRequests ) | (enumLiteral_47= Custom ) | (enumLiteral_48= Conditions ) | (enumLiteral_49= BitbucketBranchDeleted ) | (enumLiteral_50= BitbucketBranchCreated ) | (enumLiteral_51= BitbucketTagCreated ) | (enumLiteral_52= BitbucketTagDeleted ) | (enumLiteral_53= Repository ) | (enumLiteral_54= Scheduled ) | (enumLiteral_55= Remote ) | (enumLiteral_56= Bitbucket ) | (enumLiteral_57= PlanBranch ) | (enumLiteral_58= Cron ) | (enumLiteral_59= Notifications ) | (enumLiteral_60= LockBehavior ) )
            int alt146=61;
            switch ( input.LA(1) ) {
            case Push:
                {
                alt146=1;
                }
                break;
            case Pull_request:
                {
                alt146=2;
                }
                break;
            case Workflow_dispatch:
                {
                alt146=3;
                }
                break;
            case Repository_dispatch:
                {
                alt146=4;
                }
                break;
            case Check_run:
                {
                alt146=5;
                }
                break;
            case Check_suite:
                {
                alt146=6;
                }
                break;
            case Create:
                {
                alt146=7;
                }
                break;
            case Delete:
                {
                alt146=8;
                }
                break;
            case Deployment:
                {
                alt146=9;
                }
                break;
            case Deployment_status:
                {
                alt146=10;
                }
                break;
            case Fork:
                {
                alt146=11;
                }
                break;
            case Gollum:
                {
                alt146=12;
                }
                break;
            case Issue_comment:
                {
                alt146=13;
                }
                break;
            case Issues:
                {
                alt146=14;
                }
                break;
            case Label:
                {
                alt146=15;
                }
                break;
            case Milestone:
                {
                alt146=16;
                }
                break;
            case Page_build:
                {
                alt146=17;
                }
                break;
            case Project:
                {
                alt146=18;
                }
                break;
            case Project_card:
                {
                alt146=19;
                }
                break;
            case Project_column:
                {
                alt146=20;
                }
                break;
            case Public:
                {
                alt146=21;
                }
                break;
            case Pull_request_review:
                {
                alt146=22;
                }
                break;
            case Pull_request_review_comment:
                {
                alt146=23;
                }
                break;
            case Pull_request_target:
                {
                alt146=24;
                }
                break;
            case Registry_package:
                {
                alt146=25;
                }
                break;
            case Release:
                {
                alt146=26;
                }
                break;
            case Status:
                {
                alt146=27;
                }
                break;
            case Watch:
                {
                alt146=28;
                }
                break;
            case Workflow_call:
                {
                alt146=29;
                }
                break;
            case Workflow_run:
                {
                alt146=30;
                }
                break;
            case Trigger:
                {
                alt146=31;
                }
                break;
            case Pr:
                {
                alt146=32;
                }
                break;
            case Branches:
                {
                alt146=33;
                }
                break;
            case Tags:
                {
                alt146=34;
                }
                break;
            case Paths:
                {
                alt146=35;
                }
                break;
            case AutoCancel:
                {
                alt146=36;
                }
                break;
            case Drafts:
                {
                alt146=37;
                }
                break;
            case Only:
                {
                alt146=38;
                }
                break;
            case Except:
                {
                alt146=39;
                }
                break;
            case Rules:
                {
                alt146=40;
                }
                break;
            case WorkflowRules:
                {
                alt146=41;
                }
                break;
            case Pipeline_schedule:
                {
                alt146=42;
                }
                break;
            case Merge_requests:
                {
                alt146=43;
                }
                break;
            case Changes:
                {
                alt146=44;
                }
                break;
            case Pipelines:
                {
                alt146=45;
                }
                break;
            case Default:
                {
                alt146=46;
                }
                break;
            case PullRequests:
                {
                alt146=47;
                }
                break;
            case Custom:
                {
                alt146=48;
                }
                break;
            case Conditions:
                {
                alt146=49;
                }
                break;
            case BitbucketBranchDeleted:
                {
                alt146=50;
                }
                break;
            case BitbucketBranchCreated:
                {
                alt146=51;
                }
                break;
            case BitbucketTagCreated:
                {
                alt146=52;
                }
                break;
            case BitbucketTagDeleted:
                {
                alt146=53;
                }
                break;
            case Repository:
                {
                alt146=54;
                }
                break;
            case Scheduled:
                {
                alt146=55;
                }
                break;
            case Remote:
                {
                alt146=56;
                }
                break;
            case Bitbucket:
                {
                alt146=57;
                }
                break;
            case PlanBranch:
                {
                alt146=58;
                }
                break;
            case Cron:
                {
                alt146=59;
                }
                break;
            case Notifications:
                {
                alt146=60;
                }
                break;
            case LockBehavior:
                {
                alt146=61;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // InternalPipelineParser.g:4834:3: (enumLiteral_0= Push )
                    {
                    // InternalPipelineParser.g:4834:3: (enumLiteral_0= Push )
                    // InternalPipelineParser.g:4835:4: enumLiteral_0= Push
                    {
                    enumLiteral_0=(Token)match(input,Push,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUSHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_0, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUSHEnumLiteralDeclaration_0());
                    			

                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4842:3: (enumLiteral_1= Pull_request )
                    {
                    // InternalPipelineParser.g:4842:3: (enumLiteral_1= Pull_request )
                    // InternalPipelineParser.g:4843:4: enumLiteral_1= Pull_request
                    {
                    enumLiteral_1=(Token)match(input,Pull_request,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_1, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTEnumLiteralDeclaration_1());
                    			

                    }


                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4850:3: (enumLiteral_2= Workflow_dispatch )
                    {
                    // InternalPipelineParser.g:4850:3: (enumLiteral_2= Workflow_dispatch )
                    // InternalPipelineParser.g:4851:4: enumLiteral_2= Workflow_dispatch
                    {
                    enumLiteral_2=(Token)match(input,Workflow_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_DISPATCHEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_2, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_DISPATCHEnumLiteralDeclaration_2());
                    			

                    }


                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:4858:3: (enumLiteral_3= Repository_dispatch )
                    {
                    // InternalPipelineParser.g:4858:3: (enumLiteral_3= Repository_dispatch )
                    // InternalPipelineParser.g:4859:4: enumLiteral_3= Repository_dispatch
                    {
                    enumLiteral_3=(Token)match(input,Repository_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_DISPATCHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_3, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_DISPATCHEnumLiteralDeclaration_3());
                    			

                    }


                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:4866:3: (enumLiteral_4= Check_run )
                    {
                    // InternalPipelineParser.g:4866:3: (enumLiteral_4= Check_run )
                    // InternalPipelineParser.g:4867:4: enumLiteral_4= Check_run
                    {
                    enumLiteral_4=(Token)match(input,Check_run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_RUNEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_4, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_RUNEnumLiteralDeclaration_4());
                    			

                    }


                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:4874:3: (enumLiteral_5= Check_suite )
                    {
                    // InternalPipelineParser.g:4874:3: (enumLiteral_5= Check_suite )
                    // InternalPipelineParser.g:4875:4: enumLiteral_5= Check_suite
                    {
                    enumLiteral_5=(Token)match(input,Check_suite,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_SUITEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_5, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_SUITEEnumLiteralDeclaration_5());
                    			

                    }


                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:4882:3: (enumLiteral_6= Create )
                    {
                    // InternalPipelineParser.g:4882:3: (enumLiteral_6= Create )
                    // InternalPipelineParser.g:4883:4: enumLiteral_6= Create
                    {
                    enumLiteral_6=(Token)match(input,Create,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CREATEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_6, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CREATEEnumLiteralDeclaration_6());
                    			

                    }


                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:4890:3: (enumLiteral_7= Delete )
                    {
                    // InternalPipelineParser.g:4890:3: (enumLiteral_7= Delete )
                    // InternalPipelineParser.g:4891:4: enumLiteral_7= Delete
                    {
                    enumLiteral_7=(Token)match(input,Delete,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DELETEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_7, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DELETEEnumLiteralDeclaration_7());
                    			

                    }


                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:4898:3: (enumLiteral_8= Deployment )
                    {
                    // InternalPipelineParser.g:4898:3: (enumLiteral_8= Deployment )
                    // InternalPipelineParser.g:4899:4: enumLiteral_8= Deployment
                    {
                    enumLiteral_8=(Token)match(input,Deployment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_8, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENTEnumLiteralDeclaration_8());
                    			

                    }


                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:4906:3: (enumLiteral_9= Deployment_status )
                    {
                    // InternalPipelineParser.g:4906:3: (enumLiteral_9= Deployment_status )
                    // InternalPipelineParser.g:4907:4: enumLiteral_9= Deployment_status
                    {
                    enumLiteral_9=(Token)match(input,Deployment_status,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENT_STATUSEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_9, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENT_STATUSEnumLiteralDeclaration_9());
                    			

                    }


                    }
                    break;
                case 11 :
                    // InternalPipelineParser.g:4914:3: (enumLiteral_10= Fork )
                    {
                    // InternalPipelineParser.g:4914:3: (enumLiteral_10= Fork )
                    // InternalPipelineParser.g:4915:4: enumLiteral_10= Fork
                    {
                    enumLiteral_10=(Token)match(input,Fork,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_FORKEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_10, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_FORKEnumLiteralDeclaration_10());
                    			

                    }


                    }
                    break;
                case 12 :
                    // InternalPipelineParser.g:4922:3: (enumLiteral_11= Gollum )
                    {
                    // InternalPipelineParser.g:4922:3: (enumLiteral_11= Gollum )
                    // InternalPipelineParser.g:4923:4: enumLiteral_11= Gollum
                    {
                    enumLiteral_11=(Token)match(input,Gollum,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_GOLLUMEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_11, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_GOLLUMEnumLiteralDeclaration_11());
                    			

                    }


                    }
                    break;
                case 13 :
                    // InternalPipelineParser.g:4930:3: (enumLiteral_12= Issue_comment )
                    {
                    // InternalPipelineParser.g:4930:3: (enumLiteral_12= Issue_comment )
                    // InternalPipelineParser.g:4931:4: enumLiteral_12= Issue_comment
                    {
                    enumLiteral_12=(Token)match(input,Issue_comment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUE_COMMENTEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_12, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUE_COMMENTEnumLiteralDeclaration_12());
                    			

                    }


                    }
                    break;
                case 14 :
                    // InternalPipelineParser.g:4938:3: (enumLiteral_13= Issues )
                    {
                    // InternalPipelineParser.g:4938:3: (enumLiteral_13= Issues )
                    // InternalPipelineParser.g:4939:4: enumLiteral_13= Issues
                    {
                    enumLiteral_13=(Token)match(input,Issues,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUESEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_13, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUESEnumLiteralDeclaration_13());
                    			

                    }


                    }
                    break;
                case 15 :
                    // InternalPipelineParser.g:4946:3: (enumLiteral_14= Label )
                    {
                    // InternalPipelineParser.g:4946:3: (enumLiteral_14= Label )
                    // InternalPipelineParser.g:4947:4: enumLiteral_14= Label
                    {
                    enumLiteral_14=(Token)match(input,Label,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LABELEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_14, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LABELEnumLiteralDeclaration_14());
                    			

                    }


                    }
                    break;
                case 16 :
                    // InternalPipelineParser.g:4954:3: (enumLiteral_15= Milestone )
                    {
                    // InternalPipelineParser.g:4954:3: (enumLiteral_15= Milestone )
                    // InternalPipelineParser.g:4955:4: enumLiteral_15= Milestone
                    {
                    enumLiteral_15=(Token)match(input,Milestone,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MILESTONEEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_15, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MILESTONEEnumLiteralDeclaration_15());
                    			

                    }


                    }
                    break;
                case 17 :
                    // InternalPipelineParser.g:4962:3: (enumLiteral_16= Page_build )
                    {
                    // InternalPipelineParser.g:4962:3: (enumLiteral_16= Page_build )
                    // InternalPipelineParser.g:4963:4: enumLiteral_16= Page_build
                    {
                    enumLiteral_16=(Token)match(input,Page_build,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PAGE_BUILDEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_16, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PAGE_BUILDEnumLiteralDeclaration_16());
                    			

                    }


                    }
                    break;
                case 18 :
                    // InternalPipelineParser.g:4970:3: (enumLiteral_17= Project )
                    {
                    // InternalPipelineParser.g:4970:3: (enumLiteral_17= Project )
                    // InternalPipelineParser.g:4971:4: enumLiteral_17= Project
                    {
                    enumLiteral_17=(Token)match(input,Project,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECTEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_17, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECTEnumLiteralDeclaration_17());
                    			

                    }


                    }
                    break;
                case 19 :
                    // InternalPipelineParser.g:4978:3: (enumLiteral_18= Project_card )
                    {
                    // InternalPipelineParser.g:4978:3: (enumLiteral_18= Project_card )
                    // InternalPipelineParser.g:4979:4: enumLiteral_18= Project_card
                    {
                    enumLiteral_18=(Token)match(input,Project_card,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_CARDEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_18, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_CARDEnumLiteralDeclaration_18());
                    			

                    }


                    }
                    break;
                case 20 :
                    // InternalPipelineParser.g:4986:3: (enumLiteral_19= Project_column )
                    {
                    // InternalPipelineParser.g:4986:3: (enumLiteral_19= Project_column )
                    // InternalPipelineParser.g:4987:4: enumLiteral_19= Project_column
                    {
                    enumLiteral_19=(Token)match(input,Project_column,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_COLUMNEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_19, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_COLUMNEnumLiteralDeclaration_19());
                    			

                    }


                    }
                    break;
                case 21 :
                    // InternalPipelineParser.g:4994:3: (enumLiteral_20= Public )
                    {
                    // InternalPipelineParser.g:4994:3: (enumLiteral_20= Public )
                    // InternalPipelineParser.g:4995:4: enumLiteral_20= Public
                    {
                    enumLiteral_20=(Token)match(input,Public,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUBLICEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_20, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUBLICEnumLiteralDeclaration_20());
                    			

                    }


                    }
                    break;
                case 22 :
                    // InternalPipelineParser.g:5002:3: (enumLiteral_21= Pull_request_review )
                    {
                    // InternalPipelineParser.g:5002:3: (enumLiteral_21= Pull_request_review )
                    // InternalPipelineParser.g:5003:4: enumLiteral_21= Pull_request_review
                    {
                    enumLiteral_21=(Token)match(input,Pull_request_review,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEWEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_21, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEWEnumLiteralDeclaration_21());
                    			

                    }


                    }
                    break;
                case 23 :
                    // InternalPipelineParser.g:5010:3: (enumLiteral_22= Pull_request_review_comment )
                    {
                    // InternalPipelineParser.g:5010:3: (enumLiteral_22= Pull_request_review_comment )
                    // InternalPipelineParser.g:5011:4: enumLiteral_22= Pull_request_review_comment
                    {
                    enumLiteral_22=(Token)match(input,Pull_request_review_comment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_22, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_22());
                    			

                    }


                    }
                    break;
                case 24 :
                    // InternalPipelineParser.g:5018:3: (enumLiteral_23= Pull_request_target )
                    {
                    // InternalPipelineParser.g:5018:3: (enumLiteral_23= Pull_request_target )
                    // InternalPipelineParser.g:5019:4: enumLiteral_23= Pull_request_target
                    {
                    enumLiteral_23=(Token)match(input,Pull_request_target,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_TARGETEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_23, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_TARGETEnumLiteralDeclaration_23());
                    			

                    }


                    }
                    break;
                case 25 :
                    // InternalPipelineParser.g:5026:3: (enumLiteral_24= Registry_package )
                    {
                    // InternalPipelineParser.g:5026:3: (enumLiteral_24= Registry_package )
                    // InternalPipelineParser.g:5027:4: enumLiteral_24= Registry_package
                    {
                    enumLiteral_24=(Token)match(input,Registry_package,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REGISTRY_PACKAGEEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_24, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REGISTRY_PACKAGEEnumLiteralDeclaration_24());
                    			

                    }


                    }
                    break;
                case 26 :
                    // InternalPipelineParser.g:5034:3: (enumLiteral_25= Release )
                    {
                    // InternalPipelineParser.g:5034:3: (enumLiteral_25= Release )
                    // InternalPipelineParser.g:5035:4: enumLiteral_25= Release
                    {
                    enumLiteral_25=(Token)match(input,Release,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RELEASEEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_25, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RELEASEEnumLiteralDeclaration_25());
                    			

                    }


                    }
                    break;
                case 27 :
                    // InternalPipelineParser.g:5042:3: (enumLiteral_26= Status )
                    {
                    // InternalPipelineParser.g:5042:3: (enumLiteral_26= Status )
                    // InternalPipelineParser.g:5043:4: enumLiteral_26= Status
                    {
                    enumLiteral_26=(Token)match(input,Status,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_STATUSEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_26, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_STATUSEnumLiteralDeclaration_26());
                    			

                    }


                    }
                    break;
                case 28 :
                    // InternalPipelineParser.g:5050:3: (enumLiteral_27= Watch )
                    {
                    // InternalPipelineParser.g:5050:3: (enumLiteral_27= Watch )
                    // InternalPipelineParser.g:5051:4: enumLiteral_27= Watch
                    {
                    enumLiteral_27=(Token)match(input,Watch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WATCHEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_27, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WATCHEnumLiteralDeclaration_27());
                    			

                    }


                    }
                    break;
                case 29 :
                    // InternalPipelineParser.g:5058:3: (enumLiteral_28= Workflow_call )
                    {
                    // InternalPipelineParser.g:5058:3: (enumLiteral_28= Workflow_call )
                    // InternalPipelineParser.g:5059:4: enumLiteral_28= Workflow_call
                    {
                    enumLiteral_28=(Token)match(input,Workflow_call,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_CALLEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_28, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_CALLEnumLiteralDeclaration_28());
                    			

                    }


                    }
                    break;
                case 30 :
                    // InternalPipelineParser.g:5066:3: (enumLiteral_29= Workflow_run )
                    {
                    // InternalPipelineParser.g:5066:3: (enumLiteral_29= Workflow_run )
                    // InternalPipelineParser.g:5067:4: enumLiteral_29= Workflow_run
                    {
                    enumLiteral_29=(Token)match(input,Workflow_run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RUNEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_29, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RUNEnumLiteralDeclaration_29());
                    			

                    }


                    }
                    break;
                case 31 :
                    // InternalPipelineParser.g:5074:3: (enumLiteral_30= Trigger )
                    {
                    // InternalPipelineParser.g:5074:3: (enumLiteral_30= Trigger )
                    // InternalPipelineParser.g:5075:4: enumLiteral_30= Trigger
                    {
                    enumLiteral_30=(Token)match(input,Trigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TRIGGEREnumLiteralDeclaration_30().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_30, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TRIGGEREnumLiteralDeclaration_30());
                    			

                    }


                    }
                    break;
                case 32 :
                    // InternalPipelineParser.g:5082:3: (enumLiteral_31= Pr )
                    {
                    // InternalPipelineParser.g:5082:3: (enumLiteral_31= Pr )
                    // InternalPipelineParser.g:5083:4: enumLiteral_31= Pr
                    {
                    enumLiteral_31=(Token)match(input,Pr,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PREnumLiteralDeclaration_31().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_31, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PREnumLiteralDeclaration_31());
                    			

                    }


                    }
                    break;
                case 33 :
                    // InternalPipelineParser.g:5090:3: (enumLiteral_32= Branches )
                    {
                    // InternalPipelineParser.g:5090:3: (enumLiteral_32= Branches )
                    // InternalPipelineParser.g:5091:4: enumLiteral_32= Branches
                    {
                    enumLiteral_32=(Token)match(input,Branches,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCHESEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_32, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCHESEnumLiteralDeclaration_32());
                    			

                    }


                    }
                    break;
                case 34 :
                    // InternalPipelineParser.g:5098:3: (enumLiteral_33= Tags )
                    {
                    // InternalPipelineParser.g:5098:3: (enumLiteral_33= Tags )
                    // InternalPipelineParser.g:5099:4: enumLiteral_33= Tags
                    {
                    enumLiteral_33=(Token)match(input,Tags,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAGSEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_33, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAGSEnumLiteralDeclaration_33());
                    			

                    }


                    }
                    break;
                case 35 :
                    // InternalPipelineParser.g:5106:3: (enumLiteral_34= Paths )
                    {
                    // InternalPipelineParser.g:5106:3: (enumLiteral_34= Paths )
                    // InternalPipelineParser.g:5107:4: enumLiteral_34= Paths
                    {
                    enumLiteral_34=(Token)match(input,Paths,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PATHSEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_34, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PATHSEnumLiteralDeclaration_34());
                    			

                    }


                    }
                    break;
                case 36 :
                    // InternalPipelineParser.g:5114:3: (enumLiteral_35= AutoCancel )
                    {
                    // InternalPipelineParser.g:5114:3: (enumLiteral_35= AutoCancel )
                    // InternalPipelineParser.g:5115:4: enumLiteral_35= AutoCancel
                    {
                    enumLiteral_35=(Token)match(input,AutoCancel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_AUTO_CANCELEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_35, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_AUTO_CANCELEnumLiteralDeclaration_35());
                    			

                    }


                    }
                    break;
                case 37 :
                    // InternalPipelineParser.g:5122:3: (enumLiteral_36= Drafts )
                    {
                    // InternalPipelineParser.g:5122:3: (enumLiteral_36= Drafts )
                    // InternalPipelineParser.g:5123:4: enumLiteral_36= Drafts
                    {
                    enumLiteral_36=(Token)match(input,Drafts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DRAFTSEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_36, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DRAFTSEnumLiteralDeclaration_36());
                    			

                    }


                    }
                    break;
                case 38 :
                    // InternalPipelineParser.g:5130:3: (enumLiteral_37= Only )
                    {
                    // InternalPipelineParser.g:5130:3: (enumLiteral_37= Only )
                    // InternalPipelineParser.g:5131:4: enumLiteral_37= Only
                    {
                    enumLiteral_37=(Token)match(input,Only,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ONLYEnumLiteralDeclaration_37().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_37, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ONLYEnumLiteralDeclaration_37());
                    			

                    }


                    }
                    break;
                case 39 :
                    // InternalPipelineParser.g:5138:3: (enumLiteral_38= Except )
                    {
                    // InternalPipelineParser.g:5138:3: (enumLiteral_38= Except )
                    // InternalPipelineParser.g:5139:4: enumLiteral_38= Except
                    {
                    enumLiteral_38=(Token)match(input,Except,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_EXCEPTEnumLiteralDeclaration_38().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_38, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_EXCEPTEnumLiteralDeclaration_38());
                    			

                    }


                    }
                    break;
                case 40 :
                    // InternalPipelineParser.g:5146:3: (enumLiteral_39= Rules )
                    {
                    // InternalPipelineParser.g:5146:3: (enumLiteral_39= Rules )
                    // InternalPipelineParser.g:5147:4: enumLiteral_39= Rules
                    {
                    enumLiteral_39=(Token)match(input,Rules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RULESEnumLiteralDeclaration_39().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_39, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RULESEnumLiteralDeclaration_39());
                    			

                    }


                    }
                    break;
                case 41 :
                    // InternalPipelineParser.g:5154:3: (enumLiteral_40= WorkflowRules )
                    {
                    // InternalPipelineParser.g:5154:3: (enumLiteral_40= WorkflowRules )
                    // InternalPipelineParser.g:5155:4: enumLiteral_40= WorkflowRules
                    {
                    enumLiteral_40=(Token)match(input,WorkflowRules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RULESEnumLiteralDeclaration_40().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_40, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RULESEnumLiteralDeclaration_40());
                    			

                    }


                    }
                    break;
                case 42 :
                    // InternalPipelineParser.g:5162:3: (enumLiteral_41= Pipeline_schedule )
                    {
                    // InternalPipelineParser.g:5162:3: (enumLiteral_41= Pipeline_schedule )
                    // InternalPipelineParser.g:5163:4: enumLiteral_41= Pipeline_schedule
                    {
                    enumLiteral_41=(Token)match(input,Pipeline_schedule,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINE_SCHEDULEEnumLiteralDeclaration_41().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_41, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINE_SCHEDULEEnumLiteralDeclaration_41());
                    			

                    }


                    }
                    break;
                case 43 :
                    // InternalPipelineParser.g:5170:3: (enumLiteral_42= Merge_requests )
                    {
                    // InternalPipelineParser.g:5170:3: (enumLiteral_42= Merge_requests )
                    // InternalPipelineParser.g:5171:4: enumLiteral_42= Merge_requests
                    {
                    enumLiteral_42=(Token)match(input,Merge_requests,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MERGE_REQUESTSEnumLiteralDeclaration_42().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_42, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MERGE_REQUESTSEnumLiteralDeclaration_42());
                    			

                    }


                    }
                    break;
                case 44 :
                    // InternalPipelineParser.g:5178:3: (enumLiteral_43= Changes )
                    {
                    // InternalPipelineParser.g:5178:3: (enumLiteral_43= Changes )
                    // InternalPipelineParser.g:5179:4: enumLiteral_43= Changes
                    {
                    enumLiteral_43=(Token)match(input,Changes,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHANGESEnumLiteralDeclaration_43().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_43, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHANGESEnumLiteralDeclaration_43());
                    			

                    }


                    }
                    break;
                case 45 :
                    // InternalPipelineParser.g:5186:3: (enumLiteral_44= Pipelines )
                    {
                    // InternalPipelineParser.g:5186:3: (enumLiteral_44= Pipelines )
                    // InternalPipelineParser.g:5187:4: enumLiteral_44= Pipelines
                    {
                    enumLiteral_44=(Token)match(input,Pipelines,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINESEnumLiteralDeclaration_44().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_44, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINESEnumLiteralDeclaration_44());
                    			

                    }


                    }
                    break;
                case 46 :
                    // InternalPipelineParser.g:5194:3: (enumLiteral_45= Default )
                    {
                    // InternalPipelineParser.g:5194:3: (enumLiteral_45= Default )
                    // InternalPipelineParser.g:5195:4: enumLiteral_45= Default
                    {
                    enumLiteral_45=(Token)match(input,Default,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEFAULTEnumLiteralDeclaration_45().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_45, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEFAULTEnumLiteralDeclaration_45());
                    			

                    }


                    }
                    break;
                case 47 :
                    // InternalPipelineParser.g:5202:3: (enumLiteral_46= PullRequests )
                    {
                    // InternalPipelineParser.g:5202:3: (enumLiteral_46= PullRequests )
                    // InternalPipelineParser.g:5203:4: enumLiteral_46= PullRequests
                    {
                    enumLiteral_46=(Token)match(input,PullRequests,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTSEnumLiteralDeclaration_46().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_46, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTSEnumLiteralDeclaration_46());
                    			

                    }


                    }
                    break;
                case 48 :
                    // InternalPipelineParser.g:5210:3: (enumLiteral_47= Custom )
                    {
                    // InternalPipelineParser.g:5210:3: (enumLiteral_47= Custom )
                    // InternalPipelineParser.g:5211:4: enumLiteral_47= Custom
                    {
                    enumLiteral_47=(Token)match(input,Custom,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CUSTOMEnumLiteralDeclaration_47().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_47, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CUSTOMEnumLiteralDeclaration_47());
                    			

                    }


                    }
                    break;
                case 49 :
                    // InternalPipelineParser.g:5218:3: (enumLiteral_48= Conditions )
                    {
                    // InternalPipelineParser.g:5218:3: (enumLiteral_48= Conditions )
                    // InternalPipelineParser.g:5219:4: enumLiteral_48= Conditions
                    {
                    enumLiteral_48=(Token)match(input,Conditions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CONDITIONSEnumLiteralDeclaration_48().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_48, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CONDITIONSEnumLiteralDeclaration_48());
                    			

                    }


                    }
                    break;
                case 50 :
                    // InternalPipelineParser.g:5226:3: (enumLiteral_49= BitbucketBranchDeleted )
                    {
                    // InternalPipelineParser.g:5226:3: (enumLiteral_49= BitbucketBranchDeleted )
                    // InternalPipelineParser.g:5227:4: enumLiteral_49= BitbucketBranchDeleted
                    {
                    enumLiteral_49=(Token)match(input,BitbucketBranchDeleted,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_DELETEDEnumLiteralDeclaration_49().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_49, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_DELETEDEnumLiteralDeclaration_49());
                    			

                    }


                    }
                    break;
                case 51 :
                    // InternalPipelineParser.g:5234:3: (enumLiteral_50= BitbucketBranchCreated )
                    {
                    // InternalPipelineParser.g:5234:3: (enumLiteral_50= BitbucketBranchCreated )
                    // InternalPipelineParser.g:5235:4: enumLiteral_50= BitbucketBranchCreated
                    {
                    enumLiteral_50=(Token)match(input,BitbucketBranchCreated,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_CREATEDEnumLiteralDeclaration_50().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_50, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_CREATEDEnumLiteralDeclaration_50());
                    			

                    }


                    }
                    break;
                case 52 :
                    // InternalPipelineParser.g:5242:3: (enumLiteral_51= BitbucketTagCreated )
                    {
                    // InternalPipelineParser.g:5242:3: (enumLiteral_51= BitbucketTagCreated )
                    // InternalPipelineParser.g:5243:4: enumLiteral_51= BitbucketTagCreated
                    {
                    enumLiteral_51=(Token)match(input,BitbucketTagCreated,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_CREATEDEnumLiteralDeclaration_51().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_51, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_CREATEDEnumLiteralDeclaration_51());
                    			

                    }


                    }
                    break;
                case 53 :
                    // InternalPipelineParser.g:5250:3: (enumLiteral_52= BitbucketTagDeleted )
                    {
                    // InternalPipelineParser.g:5250:3: (enumLiteral_52= BitbucketTagDeleted )
                    // InternalPipelineParser.g:5251:4: enumLiteral_52= BitbucketTagDeleted
                    {
                    enumLiteral_52=(Token)match(input,BitbucketTagDeleted,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_DELETEDEnumLiteralDeclaration_52().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_52, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_DELETEDEnumLiteralDeclaration_52());
                    			

                    }


                    }
                    break;
                case 54 :
                    // InternalPipelineParser.g:5258:3: (enumLiteral_53= Repository )
                    {
                    // InternalPipelineParser.g:5258:3: (enumLiteral_53= Repository )
                    // InternalPipelineParser.g:5259:4: enumLiteral_53= Repository
                    {
                    enumLiteral_53=(Token)match(input,Repository,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_TRIGGEREnumLiteralDeclaration_53().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_53, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_TRIGGEREnumLiteralDeclaration_53());
                    			

                    }


                    }
                    break;
                case 55 :
                    // InternalPipelineParser.g:5266:3: (enumLiteral_54= Scheduled )
                    {
                    // InternalPipelineParser.g:5266:3: (enumLiteral_54= Scheduled )
                    // InternalPipelineParser.g:5267:4: enumLiteral_54= Scheduled
                    {
                    enumLiteral_54=(Token)match(input,Scheduled,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_SCHEDULED_TRIGGEREnumLiteralDeclaration_54().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_54, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_SCHEDULED_TRIGGEREnumLiteralDeclaration_54());
                    			

                    }


                    }
                    break;
                case 56 :
                    // InternalPipelineParser.g:5274:3: (enumLiteral_55= Remote )
                    {
                    // InternalPipelineParser.g:5274:3: (enumLiteral_55= Remote )
                    // InternalPipelineParser.g:5275:4: enumLiteral_55= Remote
                    {
                    enumLiteral_55=(Token)match(input,Remote,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REMOTE_TRIGGEREnumLiteralDeclaration_55().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_55, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REMOTE_TRIGGEREnumLiteralDeclaration_55());
                    			

                    }


                    }
                    break;
                case 57 :
                    // InternalPipelineParser.g:5282:3: (enumLiteral_56= Bitbucket )
                    {
                    // InternalPipelineParser.g:5282:3: (enumLiteral_56= Bitbucket )
                    // InternalPipelineParser.g:5283:4: enumLiteral_56= Bitbucket
                    {
                    enumLiteral_56=(Token)match(input,Bitbucket,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BITBUCKET_TRIGGEREnumLiteralDeclaration_56().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_56, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BITBUCKET_TRIGGEREnumLiteralDeclaration_56());
                    			

                    }


                    }
                    break;
                case 58 :
                    // InternalPipelineParser.g:5290:3: (enumLiteral_57= PlanBranch )
                    {
                    // InternalPipelineParser.g:5290:3: (enumLiteral_57= PlanBranch )
                    // InternalPipelineParser.g:5291:4: enumLiteral_57= PlanBranch
                    {
                    enumLiteral_57=(Token)match(input,PlanBranch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PLAN_BRANCHEnumLiteralDeclaration_57().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_57, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PLAN_BRANCHEnumLiteralDeclaration_57());
                    			

                    }


                    }
                    break;
                case 59 :
                    // InternalPipelineParser.g:5298:3: (enumLiteral_58= Cron )
                    {
                    // InternalPipelineParser.g:5298:3: (enumLiteral_58= Cron )
                    // InternalPipelineParser.g:5299:4: enumLiteral_58= Cron
                    {
                    enumLiteral_58=(Token)match(input,Cron,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CRONEnumLiteralDeclaration_58().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_58, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CRONEnumLiteralDeclaration_58());
                    			

                    }


                    }
                    break;
                case 60 :
                    // InternalPipelineParser.g:5306:3: (enumLiteral_59= Notifications )
                    {
                    // InternalPipelineParser.g:5306:3: (enumLiteral_59= Notifications )
                    // InternalPipelineParser.g:5307:4: enumLiteral_59= Notifications
                    {
                    enumLiteral_59=(Token)match(input,Notifications,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_NOTIFICATIONSEnumLiteralDeclaration_59().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_59, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_NOTIFICATIONSEnumLiteralDeclaration_59());
                    			

                    }


                    }
                    break;
                case 61 :
                    // InternalPipelineParser.g:5314:3: (enumLiteral_60= LockBehavior )
                    {
                    // InternalPipelineParser.g:5314:3: (enumLiteral_60= LockBehavior )
                    // InternalPipelineParser.g:5315:4: enumLiteral_60= LockBehavior
                    {
                    enumLiteral_60=(Token)match(input,LockBehavior,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LOCK_BEHAVIOREnumLiteralDeclaration_60().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_60, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LOCK_BEHAVIOREnumLiteralDeclaration_60());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePipelineEventKeyword"


    // $ANTLR start "rulePipelineKeyword"
    // InternalPipelineParser.g:5325:1: rulePipelineKeyword returns [Enumerator current=null] : ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= AutoCancel ) | (enumLiteral_24= Workflows ) | (enumLiteral_25= Drafts ) | (enumLiteral_26= Branches ) | (enumLiteral_27= BranchesIgnore ) | (enumLiteral_28= Paths ) | (enumLiteral_29= PathsIgnore ) | (enumLiteral_30= Tags ) | (enumLiteral_31= TagsIgnore ) | (enumLiteral_32= Schedules ) | (enumLiteral_33= Schedule ) | (enumLiteral_34= Workflow_call ) | (enumLiteral_35= Workflow_dispatch ) | (enumLiteral_36= Cron ) | (enumLiteral_37= DisplayName ) | (enumLiteral_38= Always ) | (enumLiteral_39= Stage ) | (enumLiteral_40= Condition ) | (enumLiteral_41= IsSkippable ) | (enumLiteral_42= DependsOn ) | (enumLiteral_43= Job ) | (enumLiteral_44= Deployment ) | (enumLiteral_45= Script ) | (enumLiteral_46= Bash ) | (enumLiteral_47= Pwsh ) | (enumLiteral_48= Powershell ) | (enumLiteral_49= Checkout ) | (enumLiteral_50= Download ) | (enumLiteral_51= GetPackage ) | (enumLiteral_52= Publish ) | (enumLiteral_53= Task ) | (enumLiteral_54= Value ) | (enumLiteral_55= Readonly ) | (enumLiteral_56= Builds ) | (enumLiteral_57= Containers ) | (enumLiteral_58= Pipelines ) | (enumLiteral_59= Repositories ) | (enumLiteral_60= Webhooks ) | (enumLiteral_61= Packages ) | (enumLiteral_62= Inputs ) | (enumLiteral_63= Outputs ) | (enumLiteral_64= Secrets ) | (enumLiteral_65= Description ) | (enumLiteral_66= Required ) | (enumLiteral_67= Default ) | (enumLiteral_68= Type ) | (enumLiteral_69= Options ) | (enumLiteral_70= If ) | (enumLiteral_71= RunsOn ) | (enumLiteral_72= Strategy ) | (enumLiteral_73= Matrix ) | (enumLiteral_74= Container ) | (enumLiteral_75= Services ) | (enumLiteral_76= Steps ) | (enumLiteral_77= Uses ) | (enumLiteral_78= With ) | (enumLiteral_79= TimeoutMinutes ) | (enumLiteral_80= ContinueOnError_1 ) | (enumLiteral_81= Environment ) | (enumLiteral_82= Id ) | (enumLiteral_83= Permissions ) | (enumLiteral_84= Timeouts ) | (enumLiteral_85= DefaultsRun ) | (enumLiteral_86= Push ) | (enumLiteral_87= Pull_request ) | (enumLiteral_88= Repository_dispatch ) | (enumLiteral_89= Workflow_run ) | (enumLiteral_90= Filters ) | (enumLiteral_91= Exclude ) | (enumLiteral_92= FailFast ) | (enumLiteral_93= MaxParallel ) | (enumLiteral_94= ContainerImage ) | (enumLiteral_95= Credentials ) | (enumLiteral_96= Ports ) | (enumLiteral_97= Inherit ) | (enumLiteral_98= Trigger ) | (enumLiteral_99= Template ) | (enumLiteral_100= Workspace ) | (enumLiteral_101= Pipeline ) | (enumLiteral_102= TimeoutInMinutes ) | (enumLiteral_103= ContinueOnError ) | (enumLiteral_104= ResourceType ) | (enumLiteral_105= ResourceName ) | (enumLiteral_106= Stages ) | (enumLiteral_107= Only ) | (enumLiteral_108= Except ) | (enumLiteral_109= Image ) | (enumLiteral_110= Cache ) | (enumLiteral_111= Artifacts ) | (enumLiteral_112= Retries ) | (enumLiteral_113= Rules ) | (enumLiteral_114= Before_script ) | (enumLiteral_115= After_script ) | (enumLiteral_116= Timeout ) | (enumLiteral_117= When ) | (enumLiteral_118= Allow_failure ) | (enumLiteral_119= Dependencies ) | (enumLiteral_120= PullRequests ) | (enumLiteral_121= Step ) | (enumLiteral_122= Definitions ) | (enumLiteral_123= Caches ) | (enumLiteral_124= Parallel ) | (enumLiteral_125= Conditions ) | (enumLiteral_126= MaxTime ) | (enumLiteral_127= Project ) | (enumLiteral_128= Plan ) | (enumLiteral_129= Tasks ) | (enumLiteral_130= Requirements ) | (enumLiteral_131= Final ) | (enumLiteral_132= Jdk ) | (enumLiteral_133= Labels ) | (enumLiteral_134= Repository ) | (enumLiteral_135= Release ) | (enumLiteral_136= Docker ) | (enumLiteral_137= Agent ) | (enumLiteral_138= Queue ) | (enumLiteral_139= Snapshot ) | (enumLiteral_140= Policy ) | (enumLiteral_141= Approvals ) | (enumLiteral_142= PreBuild ) | (enumLiteral_143= PostBuild ) | (enumLiteral_144= Ssh ) | (enumLiteral_145= Auth ) | (enumLiteral_146= Storage ) | (enumLiteral_147= Endpoints ) | (enumLiteral_148= Command ) | (enumLiteral_149= Provisioner ) | (enumLiteral_150= TriggerRules ) | (enumLiteral_151= RunPolicy ) | (enumLiteral_152= Queued ) | (enumLiteral_153= Notifications ) | (enumLiteral_154= DeployTrigger ) | (enumLiteral_155= ReleaseTrigger ) | (enumLiteral_156= LockBehavior ) | (enumLiteral_157= ReviewStage ) ) ;
    public final Enumerator rulePipelineKeyword() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;
        Token enumLiteral_20=null;
        Token enumLiteral_21=null;
        Token enumLiteral_22=null;
        Token enumLiteral_23=null;
        Token enumLiteral_24=null;
        Token enumLiteral_25=null;
        Token enumLiteral_26=null;
        Token enumLiteral_27=null;
        Token enumLiteral_28=null;
        Token enumLiteral_29=null;
        Token enumLiteral_30=null;
        Token enumLiteral_31=null;
        Token enumLiteral_32=null;
        Token enumLiteral_33=null;
        Token enumLiteral_34=null;
        Token enumLiteral_35=null;
        Token enumLiteral_36=null;
        Token enumLiteral_37=null;
        Token enumLiteral_38=null;
        Token enumLiteral_39=null;
        Token enumLiteral_40=null;
        Token enumLiteral_41=null;
        Token enumLiteral_42=null;
        Token enumLiteral_43=null;
        Token enumLiteral_44=null;
        Token enumLiteral_45=null;
        Token enumLiteral_46=null;
        Token enumLiteral_47=null;
        Token enumLiteral_48=null;
        Token enumLiteral_49=null;
        Token enumLiteral_50=null;
        Token enumLiteral_51=null;
        Token enumLiteral_52=null;
        Token enumLiteral_53=null;
        Token enumLiteral_54=null;
        Token enumLiteral_55=null;
        Token enumLiteral_56=null;
        Token enumLiteral_57=null;
        Token enumLiteral_58=null;
        Token enumLiteral_59=null;
        Token enumLiteral_60=null;
        Token enumLiteral_61=null;
        Token enumLiteral_62=null;
        Token enumLiteral_63=null;
        Token enumLiteral_64=null;
        Token enumLiteral_65=null;
        Token enumLiteral_66=null;
        Token enumLiteral_67=null;
        Token enumLiteral_68=null;
        Token enumLiteral_69=null;
        Token enumLiteral_70=null;
        Token enumLiteral_71=null;
        Token enumLiteral_72=null;
        Token enumLiteral_73=null;
        Token enumLiteral_74=null;
        Token enumLiteral_75=null;
        Token enumLiteral_76=null;
        Token enumLiteral_77=null;
        Token enumLiteral_78=null;
        Token enumLiteral_79=null;
        Token enumLiteral_80=null;
        Token enumLiteral_81=null;
        Token enumLiteral_82=null;
        Token enumLiteral_83=null;
        Token enumLiteral_84=null;
        Token enumLiteral_85=null;
        Token enumLiteral_86=null;
        Token enumLiteral_87=null;
        Token enumLiteral_88=null;
        Token enumLiteral_89=null;
        Token enumLiteral_90=null;
        Token enumLiteral_91=null;
        Token enumLiteral_92=null;
        Token enumLiteral_93=null;
        Token enumLiteral_94=null;
        Token enumLiteral_95=null;
        Token enumLiteral_96=null;
        Token enumLiteral_97=null;
        Token enumLiteral_98=null;
        Token enumLiteral_99=null;
        Token enumLiteral_100=null;
        Token enumLiteral_101=null;
        Token enumLiteral_102=null;
        Token enumLiteral_103=null;
        Token enumLiteral_104=null;
        Token enumLiteral_105=null;
        Token enumLiteral_106=null;
        Token enumLiteral_107=null;
        Token enumLiteral_108=null;
        Token enumLiteral_109=null;
        Token enumLiteral_110=null;
        Token enumLiteral_111=null;
        Token enumLiteral_112=null;
        Token enumLiteral_113=null;
        Token enumLiteral_114=null;
        Token enumLiteral_115=null;
        Token enumLiteral_116=null;
        Token enumLiteral_117=null;
        Token enumLiteral_118=null;
        Token enumLiteral_119=null;
        Token enumLiteral_120=null;
        Token enumLiteral_121=null;
        Token enumLiteral_122=null;
        Token enumLiteral_123=null;
        Token enumLiteral_124=null;
        Token enumLiteral_125=null;
        Token enumLiteral_126=null;
        Token enumLiteral_127=null;
        Token enumLiteral_128=null;
        Token enumLiteral_129=null;
        Token enumLiteral_130=null;
        Token enumLiteral_131=null;
        Token enumLiteral_132=null;
        Token enumLiteral_133=null;
        Token enumLiteral_134=null;
        Token enumLiteral_135=null;
        Token enumLiteral_136=null;
        Token enumLiteral_137=null;
        Token enumLiteral_138=null;
        Token enumLiteral_139=null;
        Token enumLiteral_140=null;
        Token enumLiteral_141=null;
        Token enumLiteral_142=null;
        Token enumLiteral_143=null;
        Token enumLiteral_144=null;
        Token enumLiteral_145=null;
        Token enumLiteral_146=null;
        Token enumLiteral_147=null;
        Token enumLiteral_148=null;
        Token enumLiteral_149=null;
        Token enumLiteral_150=null;
        Token enumLiteral_151=null;
        Token enumLiteral_152=null;
        Token enumLiteral_153=null;
        Token enumLiteral_154=null;
        Token enumLiteral_155=null;
        Token enumLiteral_156=null;
        Token enumLiteral_157=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:5331:2: ( ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= AutoCancel ) | (enumLiteral_24= Workflows ) | (enumLiteral_25= Drafts ) | (enumLiteral_26= Branches ) | (enumLiteral_27= BranchesIgnore ) | (enumLiteral_28= Paths ) | (enumLiteral_29= PathsIgnore ) | (enumLiteral_30= Tags ) | (enumLiteral_31= TagsIgnore ) | (enumLiteral_32= Schedules ) | (enumLiteral_33= Schedule ) | (enumLiteral_34= Workflow_call ) | (enumLiteral_35= Workflow_dispatch ) | (enumLiteral_36= Cron ) | (enumLiteral_37= DisplayName ) | (enumLiteral_38= Always ) | (enumLiteral_39= Stage ) | (enumLiteral_40= Condition ) | (enumLiteral_41= IsSkippable ) | (enumLiteral_42= DependsOn ) | (enumLiteral_43= Job ) | (enumLiteral_44= Deployment ) | (enumLiteral_45= Script ) | (enumLiteral_46= Bash ) | (enumLiteral_47= Pwsh ) | (enumLiteral_48= Powershell ) | (enumLiteral_49= Checkout ) | (enumLiteral_50= Download ) | (enumLiteral_51= GetPackage ) | (enumLiteral_52= Publish ) | (enumLiteral_53= Task ) | (enumLiteral_54= Value ) | (enumLiteral_55= Readonly ) | (enumLiteral_56= Builds ) | (enumLiteral_57= Containers ) | (enumLiteral_58= Pipelines ) | (enumLiteral_59= Repositories ) | (enumLiteral_60= Webhooks ) | (enumLiteral_61= Packages ) | (enumLiteral_62= Inputs ) | (enumLiteral_63= Outputs ) | (enumLiteral_64= Secrets ) | (enumLiteral_65= Description ) | (enumLiteral_66= Required ) | (enumLiteral_67= Default ) | (enumLiteral_68= Type ) | (enumLiteral_69= Options ) | (enumLiteral_70= If ) | (enumLiteral_71= RunsOn ) | (enumLiteral_72= Strategy ) | (enumLiteral_73= Matrix ) | (enumLiteral_74= Container ) | (enumLiteral_75= Services ) | (enumLiteral_76= Steps ) | (enumLiteral_77= Uses ) | (enumLiteral_78= With ) | (enumLiteral_79= TimeoutMinutes ) | (enumLiteral_80= ContinueOnError_1 ) | (enumLiteral_81= Environment ) | (enumLiteral_82= Id ) | (enumLiteral_83= Permissions ) | (enumLiteral_84= Timeouts ) | (enumLiteral_85= DefaultsRun ) | (enumLiteral_86= Push ) | (enumLiteral_87= Pull_request ) | (enumLiteral_88= Repository_dispatch ) | (enumLiteral_89= Workflow_run ) | (enumLiteral_90= Filters ) | (enumLiteral_91= Exclude ) | (enumLiteral_92= FailFast ) | (enumLiteral_93= MaxParallel ) | (enumLiteral_94= ContainerImage ) | (enumLiteral_95= Credentials ) | (enumLiteral_96= Ports ) | (enumLiteral_97= Inherit ) | (enumLiteral_98= Trigger ) | (enumLiteral_99= Template ) | (enumLiteral_100= Workspace ) | (enumLiteral_101= Pipeline ) | (enumLiteral_102= TimeoutInMinutes ) | (enumLiteral_103= ContinueOnError ) | (enumLiteral_104= ResourceType ) | (enumLiteral_105= ResourceName ) | (enumLiteral_106= Stages ) | (enumLiteral_107= Only ) | (enumLiteral_108= Except ) | (enumLiteral_109= Image ) | (enumLiteral_110= Cache ) | (enumLiteral_111= Artifacts ) | (enumLiteral_112= Retries ) | (enumLiteral_113= Rules ) | (enumLiteral_114= Before_script ) | (enumLiteral_115= After_script ) | (enumLiteral_116= Timeout ) | (enumLiteral_117= When ) | (enumLiteral_118= Allow_failure ) | (enumLiteral_119= Dependencies ) | (enumLiteral_120= PullRequests ) | (enumLiteral_121= Step ) | (enumLiteral_122= Definitions ) | (enumLiteral_123= Caches ) | (enumLiteral_124= Parallel ) | (enumLiteral_125= Conditions ) | (enumLiteral_126= MaxTime ) | (enumLiteral_127= Project ) | (enumLiteral_128= Plan ) | (enumLiteral_129= Tasks ) | (enumLiteral_130= Requirements ) | (enumLiteral_131= Final ) | (enumLiteral_132= Jdk ) | (enumLiteral_133= Labels ) | (enumLiteral_134= Repository ) | (enumLiteral_135= Release ) | (enumLiteral_136= Docker ) | (enumLiteral_137= Agent ) | (enumLiteral_138= Queue ) | (enumLiteral_139= Snapshot ) | (enumLiteral_140= Policy ) | (enumLiteral_141= Approvals ) | (enumLiteral_142= PreBuild ) | (enumLiteral_143= PostBuild ) | (enumLiteral_144= Ssh ) | (enumLiteral_145= Auth ) | (enumLiteral_146= Storage ) | (enumLiteral_147= Endpoints ) | (enumLiteral_148= Command ) | (enumLiteral_149= Provisioner ) | (enumLiteral_150= TriggerRules ) | (enumLiteral_151= RunPolicy ) | (enumLiteral_152= Queued ) | (enumLiteral_153= Notifications ) | (enumLiteral_154= DeployTrigger ) | (enumLiteral_155= ReleaseTrigger ) | (enumLiteral_156= LockBehavior ) | (enumLiteral_157= ReviewStage ) ) )
            // InternalPipelineParser.g:5332:2: ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= AutoCancel ) | (enumLiteral_24= Workflows ) | (enumLiteral_25= Drafts ) | (enumLiteral_26= Branches ) | (enumLiteral_27= BranchesIgnore ) | (enumLiteral_28= Paths ) | (enumLiteral_29= PathsIgnore ) | (enumLiteral_30= Tags ) | (enumLiteral_31= TagsIgnore ) | (enumLiteral_32= Schedules ) | (enumLiteral_33= Schedule ) | (enumLiteral_34= Workflow_call ) | (enumLiteral_35= Workflow_dispatch ) | (enumLiteral_36= Cron ) | (enumLiteral_37= DisplayName ) | (enumLiteral_38= Always ) | (enumLiteral_39= Stage ) | (enumLiteral_40= Condition ) | (enumLiteral_41= IsSkippable ) | (enumLiteral_42= DependsOn ) | (enumLiteral_43= Job ) | (enumLiteral_44= Deployment ) | (enumLiteral_45= Script ) | (enumLiteral_46= Bash ) | (enumLiteral_47= Pwsh ) | (enumLiteral_48= Powershell ) | (enumLiteral_49= Checkout ) | (enumLiteral_50= Download ) | (enumLiteral_51= GetPackage ) | (enumLiteral_52= Publish ) | (enumLiteral_53= Task ) | (enumLiteral_54= Value ) | (enumLiteral_55= Readonly ) | (enumLiteral_56= Builds ) | (enumLiteral_57= Containers ) | (enumLiteral_58= Pipelines ) | (enumLiteral_59= Repositories ) | (enumLiteral_60= Webhooks ) | (enumLiteral_61= Packages ) | (enumLiteral_62= Inputs ) | (enumLiteral_63= Outputs ) | (enumLiteral_64= Secrets ) | (enumLiteral_65= Description ) | (enumLiteral_66= Required ) | (enumLiteral_67= Default ) | (enumLiteral_68= Type ) | (enumLiteral_69= Options ) | (enumLiteral_70= If ) | (enumLiteral_71= RunsOn ) | (enumLiteral_72= Strategy ) | (enumLiteral_73= Matrix ) | (enumLiteral_74= Container ) | (enumLiteral_75= Services ) | (enumLiteral_76= Steps ) | (enumLiteral_77= Uses ) | (enumLiteral_78= With ) | (enumLiteral_79= TimeoutMinutes ) | (enumLiteral_80= ContinueOnError_1 ) | (enumLiteral_81= Environment ) | (enumLiteral_82= Id ) | (enumLiteral_83= Permissions ) | (enumLiteral_84= Timeouts ) | (enumLiteral_85= DefaultsRun ) | (enumLiteral_86= Push ) | (enumLiteral_87= Pull_request ) | (enumLiteral_88= Repository_dispatch ) | (enumLiteral_89= Workflow_run ) | (enumLiteral_90= Filters ) | (enumLiteral_91= Exclude ) | (enumLiteral_92= FailFast ) | (enumLiteral_93= MaxParallel ) | (enumLiteral_94= ContainerImage ) | (enumLiteral_95= Credentials ) | (enumLiteral_96= Ports ) | (enumLiteral_97= Inherit ) | (enumLiteral_98= Trigger ) | (enumLiteral_99= Template ) | (enumLiteral_100= Workspace ) | (enumLiteral_101= Pipeline ) | (enumLiteral_102= TimeoutInMinutes ) | (enumLiteral_103= ContinueOnError ) | (enumLiteral_104= ResourceType ) | (enumLiteral_105= ResourceName ) | (enumLiteral_106= Stages ) | (enumLiteral_107= Only ) | (enumLiteral_108= Except ) | (enumLiteral_109= Image ) | (enumLiteral_110= Cache ) | (enumLiteral_111= Artifacts ) | (enumLiteral_112= Retries ) | (enumLiteral_113= Rules ) | (enumLiteral_114= Before_script ) | (enumLiteral_115= After_script ) | (enumLiteral_116= Timeout ) | (enumLiteral_117= When ) | (enumLiteral_118= Allow_failure ) | (enumLiteral_119= Dependencies ) | (enumLiteral_120= PullRequests ) | (enumLiteral_121= Step ) | (enumLiteral_122= Definitions ) | (enumLiteral_123= Caches ) | (enumLiteral_124= Parallel ) | (enumLiteral_125= Conditions ) | (enumLiteral_126= MaxTime ) | (enumLiteral_127= Project ) | (enumLiteral_128= Plan ) | (enumLiteral_129= Tasks ) | (enumLiteral_130= Requirements ) | (enumLiteral_131= Final ) | (enumLiteral_132= Jdk ) | (enumLiteral_133= Labels ) | (enumLiteral_134= Repository ) | (enumLiteral_135= Release ) | (enumLiteral_136= Docker ) | (enumLiteral_137= Agent ) | (enumLiteral_138= Queue ) | (enumLiteral_139= Snapshot ) | (enumLiteral_140= Policy ) | (enumLiteral_141= Approvals ) | (enumLiteral_142= PreBuild ) | (enumLiteral_143= PostBuild ) | (enumLiteral_144= Ssh ) | (enumLiteral_145= Auth ) | (enumLiteral_146= Storage ) | (enumLiteral_147= Endpoints ) | (enumLiteral_148= Command ) | (enumLiteral_149= Provisioner ) | (enumLiteral_150= TriggerRules ) | (enumLiteral_151= RunPolicy ) | (enumLiteral_152= Queued ) | (enumLiteral_153= Notifications ) | (enumLiteral_154= DeployTrigger ) | (enumLiteral_155= ReleaseTrigger ) | (enumLiteral_156= LockBehavior ) | (enumLiteral_157= ReviewStage ) )
            {
            // InternalPipelineParser.g:5332:2: ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= AutoCancel ) | (enumLiteral_24= Workflows ) | (enumLiteral_25= Drafts ) | (enumLiteral_26= Branches ) | (enumLiteral_27= BranchesIgnore ) | (enumLiteral_28= Paths ) | (enumLiteral_29= PathsIgnore ) | (enumLiteral_30= Tags ) | (enumLiteral_31= TagsIgnore ) | (enumLiteral_32= Schedules ) | (enumLiteral_33= Schedule ) | (enumLiteral_34= Workflow_call ) | (enumLiteral_35= Workflow_dispatch ) | (enumLiteral_36= Cron ) | (enumLiteral_37= DisplayName ) | (enumLiteral_38= Always ) | (enumLiteral_39= Stage ) | (enumLiteral_40= Condition ) | (enumLiteral_41= IsSkippable ) | (enumLiteral_42= DependsOn ) | (enumLiteral_43= Job ) | (enumLiteral_44= Deployment ) | (enumLiteral_45= Script ) | (enumLiteral_46= Bash ) | (enumLiteral_47= Pwsh ) | (enumLiteral_48= Powershell ) | (enumLiteral_49= Checkout ) | (enumLiteral_50= Download ) | (enumLiteral_51= GetPackage ) | (enumLiteral_52= Publish ) | (enumLiteral_53= Task ) | (enumLiteral_54= Value ) | (enumLiteral_55= Readonly ) | (enumLiteral_56= Builds ) | (enumLiteral_57= Containers ) | (enumLiteral_58= Pipelines ) | (enumLiteral_59= Repositories ) | (enumLiteral_60= Webhooks ) | (enumLiteral_61= Packages ) | (enumLiteral_62= Inputs ) | (enumLiteral_63= Outputs ) | (enumLiteral_64= Secrets ) | (enumLiteral_65= Description ) | (enumLiteral_66= Required ) | (enumLiteral_67= Default ) | (enumLiteral_68= Type ) | (enumLiteral_69= Options ) | (enumLiteral_70= If ) | (enumLiteral_71= RunsOn ) | (enumLiteral_72= Strategy ) | (enumLiteral_73= Matrix ) | (enumLiteral_74= Container ) | (enumLiteral_75= Services ) | (enumLiteral_76= Steps ) | (enumLiteral_77= Uses ) | (enumLiteral_78= With ) | (enumLiteral_79= TimeoutMinutes ) | (enumLiteral_80= ContinueOnError_1 ) | (enumLiteral_81= Environment ) | (enumLiteral_82= Id ) | (enumLiteral_83= Permissions ) | (enumLiteral_84= Timeouts ) | (enumLiteral_85= DefaultsRun ) | (enumLiteral_86= Push ) | (enumLiteral_87= Pull_request ) | (enumLiteral_88= Repository_dispatch ) | (enumLiteral_89= Workflow_run ) | (enumLiteral_90= Filters ) | (enumLiteral_91= Exclude ) | (enumLiteral_92= FailFast ) | (enumLiteral_93= MaxParallel ) | (enumLiteral_94= ContainerImage ) | (enumLiteral_95= Credentials ) | (enumLiteral_96= Ports ) | (enumLiteral_97= Inherit ) | (enumLiteral_98= Trigger ) | (enumLiteral_99= Template ) | (enumLiteral_100= Workspace ) | (enumLiteral_101= Pipeline ) | (enumLiteral_102= TimeoutInMinutes ) | (enumLiteral_103= ContinueOnError ) | (enumLiteral_104= ResourceType ) | (enumLiteral_105= ResourceName ) | (enumLiteral_106= Stages ) | (enumLiteral_107= Only ) | (enumLiteral_108= Except ) | (enumLiteral_109= Image ) | (enumLiteral_110= Cache ) | (enumLiteral_111= Artifacts ) | (enumLiteral_112= Retries ) | (enumLiteral_113= Rules ) | (enumLiteral_114= Before_script ) | (enumLiteral_115= After_script ) | (enumLiteral_116= Timeout ) | (enumLiteral_117= When ) | (enumLiteral_118= Allow_failure ) | (enumLiteral_119= Dependencies ) | (enumLiteral_120= PullRequests ) | (enumLiteral_121= Step ) | (enumLiteral_122= Definitions ) | (enumLiteral_123= Caches ) | (enumLiteral_124= Parallel ) | (enumLiteral_125= Conditions ) | (enumLiteral_126= MaxTime ) | (enumLiteral_127= Project ) | (enumLiteral_128= Plan ) | (enumLiteral_129= Tasks ) | (enumLiteral_130= Requirements ) | (enumLiteral_131= Final ) | (enumLiteral_132= Jdk ) | (enumLiteral_133= Labels ) | (enumLiteral_134= Repository ) | (enumLiteral_135= Release ) | (enumLiteral_136= Docker ) | (enumLiteral_137= Agent ) | (enumLiteral_138= Queue ) | (enumLiteral_139= Snapshot ) | (enumLiteral_140= Policy ) | (enumLiteral_141= Approvals ) | (enumLiteral_142= PreBuild ) | (enumLiteral_143= PostBuild ) | (enumLiteral_144= Ssh ) | (enumLiteral_145= Auth ) | (enumLiteral_146= Storage ) | (enumLiteral_147= Endpoints ) | (enumLiteral_148= Command ) | (enumLiteral_149= Provisioner ) | (enumLiteral_150= TriggerRules ) | (enumLiteral_151= RunPolicy ) | (enumLiteral_152= Queued ) | (enumLiteral_153= Notifications ) | (enumLiteral_154= DeployTrigger ) | (enumLiteral_155= ReleaseTrigger ) | (enumLiteral_156= LockBehavior ) | (enumLiteral_157= ReviewStage ) )
            int alt147=158;
            switch ( input.LA(1) ) {
            case Name:
                {
                alt147=1;
                }
                break;
            case RunName:
                {
                alt147=2;
                }
                break;
            case On:
                {
                alt147=3;
                }
                break;
            case Defaults:
                {
                alt147=4;
                }
                break;
            case Run:
                {
                alt147=5;
                }
                break;
            case Shell:
                {
                alt147=6;
                }
                break;
            case WorkingDirectory:
                {
                alt147=7;
                }
                break;
            case Env:
                {
                alt147=8;
                }
                break;
            case Permission:
                {
                alt147=9;
                }
                break;
            case Concurrency:
                {
                alt147=10;
                }
                break;
            case Group:
                {
                alt147=11;
                }
                break;
            case CancelInProgress:
                {
                alt147=12;
                }
                break;
            case Pool:
                {
                alt147=13;
                }
                break;
            case VmImage:
                {
                alt147=14;
                }
                break;
            case Demands:
                {
                alt147=15;
                }
                break;
            case Resources:
                {
                alt147=16;
                }
                break;
            case Version:
                {
                alt147=17;
                }
                break;
            case Variables:
                {
                alt147=18;
                }
                break;
            case Parameters:
                {
                alt147=19;
                }
                break;
            case Extends:
                {
                alt147=20;
                }
                break;
            case Include:
                {
                alt147=21;
                }
                break;
            case Types:
                {
                alt147=22;
                }
                break;
            case Batch:
                {
                alt147=23;
                }
                break;
            case AutoCancel:
                {
                alt147=24;
                }
                break;
            case Workflows:
                {
                alt147=25;
                }
                break;
            case Drafts:
                {
                alt147=26;
                }
                break;
            case Branches:
                {
                alt147=27;
                }
                break;
            case BranchesIgnore:
                {
                alt147=28;
                }
                break;
            case Paths:
                {
                alt147=29;
                }
                break;
            case PathsIgnore:
                {
                alt147=30;
                }
                break;
            case Tags:
                {
                alt147=31;
                }
                break;
            case TagsIgnore:
                {
                alt147=32;
                }
                break;
            case Schedules:
                {
                alt147=33;
                }
                break;
            case Schedule:
                {
                alt147=34;
                }
                break;
            case Workflow_call:
                {
                alt147=35;
                }
                break;
            case Workflow_dispatch:
                {
                alt147=36;
                }
                break;
            case Cron:
                {
                alt147=37;
                }
                break;
            case DisplayName:
                {
                alt147=38;
                }
                break;
            case Always:
                {
                alt147=39;
                }
                break;
            case Stage:
                {
                alt147=40;
                }
                break;
            case Condition:
                {
                alt147=41;
                }
                break;
            case IsSkippable:
                {
                alt147=42;
                }
                break;
            case DependsOn:
                {
                alt147=43;
                }
                break;
            case Job:
                {
                alt147=44;
                }
                break;
            case Deployment:
                {
                alt147=45;
                }
                break;
            case Script:
                {
                alt147=46;
                }
                break;
            case Bash:
                {
                alt147=47;
                }
                break;
            case Pwsh:
                {
                alt147=48;
                }
                break;
            case Powershell:
                {
                alt147=49;
                }
                break;
            case Checkout:
                {
                alt147=50;
                }
                break;
            case Download:
                {
                alt147=51;
                }
                break;
            case GetPackage:
                {
                alt147=52;
                }
                break;
            case Publish:
                {
                alt147=53;
                }
                break;
            case Task:
                {
                alt147=54;
                }
                break;
            case Value:
                {
                alt147=55;
                }
                break;
            case Readonly:
                {
                alt147=56;
                }
                break;
            case Builds:
                {
                alt147=57;
                }
                break;
            case Containers:
                {
                alt147=58;
                }
                break;
            case Pipelines:
                {
                alt147=59;
                }
                break;
            case Repositories:
                {
                alt147=60;
                }
                break;
            case Webhooks:
                {
                alt147=61;
                }
                break;
            case Packages:
                {
                alt147=62;
                }
                break;
            case Inputs:
                {
                alt147=63;
                }
                break;
            case Outputs:
                {
                alt147=64;
                }
                break;
            case Secrets:
                {
                alt147=65;
                }
                break;
            case Description:
                {
                alt147=66;
                }
                break;
            case Required:
                {
                alt147=67;
                }
                break;
            case Default:
                {
                alt147=68;
                }
                break;
            case Type:
                {
                alt147=69;
                }
                break;
            case Options:
                {
                alt147=70;
                }
                break;
            case If:
                {
                alt147=71;
                }
                break;
            case RunsOn:
                {
                alt147=72;
                }
                break;
            case Strategy:
                {
                alt147=73;
                }
                break;
            case Matrix:
                {
                alt147=74;
                }
                break;
            case Container:
                {
                alt147=75;
                }
                break;
            case Services:
                {
                alt147=76;
                }
                break;
            case Steps:
                {
                alt147=77;
                }
                break;
            case Uses:
                {
                alt147=78;
                }
                break;
            case With:
                {
                alt147=79;
                }
                break;
            case TimeoutMinutes:
                {
                alt147=80;
                }
                break;
            case ContinueOnError_1:
                {
                alt147=81;
                }
                break;
            case Environment:
                {
                alt147=82;
                }
                break;
            case Id:
                {
                alt147=83;
                }
                break;
            case Permissions:
                {
                alt147=84;
                }
                break;
            case Timeouts:
                {
                alt147=85;
                }
                break;
            case DefaultsRun:
                {
                alt147=86;
                }
                break;
            case Push:
                {
                alt147=87;
                }
                break;
            case Pull_request:
                {
                alt147=88;
                }
                break;
            case Repository_dispatch:
                {
                alt147=89;
                }
                break;
            case Workflow_run:
                {
                alt147=90;
                }
                break;
            case Filters:
                {
                alt147=91;
                }
                break;
            case Exclude:
                {
                alt147=92;
                }
                break;
            case FailFast:
                {
                alt147=93;
                }
                break;
            case MaxParallel:
                {
                alt147=94;
                }
                break;
            case ContainerImage:
                {
                alt147=95;
                }
                break;
            case Credentials:
                {
                alt147=96;
                }
                break;
            case Ports:
                {
                alt147=97;
                }
                break;
            case Inherit:
                {
                alt147=98;
                }
                break;
            case Trigger:
                {
                alt147=99;
                }
                break;
            case Template:
                {
                alt147=100;
                }
                break;
            case Workspace:
                {
                alt147=101;
                }
                break;
            case Pipeline:
                {
                alt147=102;
                }
                break;
            case TimeoutInMinutes:
                {
                alt147=103;
                }
                break;
            case ContinueOnError:
                {
                alt147=104;
                }
                break;
            case ResourceType:
                {
                alt147=105;
                }
                break;
            case ResourceName:
                {
                alt147=106;
                }
                break;
            case Stages:
                {
                alt147=107;
                }
                break;
            case Only:
                {
                alt147=108;
                }
                break;
            case Except:
                {
                alt147=109;
                }
                break;
            case Image:
                {
                alt147=110;
                }
                break;
            case Cache:
                {
                alt147=111;
                }
                break;
            case Artifacts:
                {
                alt147=112;
                }
                break;
            case Retries:
                {
                alt147=113;
                }
                break;
            case Rules:
                {
                alt147=114;
                }
                break;
            case Before_script:
                {
                alt147=115;
                }
                break;
            case After_script:
                {
                alt147=116;
                }
                break;
            case Timeout:
                {
                alt147=117;
                }
                break;
            case When:
                {
                alt147=118;
                }
                break;
            case Allow_failure:
                {
                alt147=119;
                }
                break;
            case Dependencies:
                {
                alt147=120;
                }
                break;
            case PullRequests:
                {
                alt147=121;
                }
                break;
            case Step:
                {
                alt147=122;
                }
                break;
            case Definitions:
                {
                alt147=123;
                }
                break;
            case Caches:
                {
                alt147=124;
                }
                break;
            case Parallel:
                {
                alt147=125;
                }
                break;
            case Conditions:
                {
                alt147=126;
                }
                break;
            case MaxTime:
                {
                alt147=127;
                }
                break;
            case Project:
                {
                alt147=128;
                }
                break;
            case Plan:
                {
                alt147=129;
                }
                break;
            case Tasks:
                {
                alt147=130;
                }
                break;
            case Requirements:
                {
                alt147=131;
                }
                break;
            case Final:
                {
                alt147=132;
                }
                break;
            case Jdk:
                {
                alt147=133;
                }
                break;
            case Labels:
                {
                alt147=134;
                }
                break;
            case Repository:
                {
                alt147=135;
                }
                break;
            case Release:
                {
                alt147=136;
                }
                break;
            case Docker:
                {
                alt147=137;
                }
                break;
            case Agent:
                {
                alt147=138;
                }
                break;
            case Queue:
                {
                alt147=139;
                }
                break;
            case Snapshot:
                {
                alt147=140;
                }
                break;
            case Policy:
                {
                alt147=141;
                }
                break;
            case Approvals:
                {
                alt147=142;
                }
                break;
            case PreBuild:
                {
                alt147=143;
                }
                break;
            case PostBuild:
                {
                alt147=144;
                }
                break;
            case Ssh:
                {
                alt147=145;
                }
                break;
            case Auth:
                {
                alt147=146;
                }
                break;
            case Storage:
                {
                alt147=147;
                }
                break;
            case Endpoints:
                {
                alt147=148;
                }
                break;
            case Command:
                {
                alt147=149;
                }
                break;
            case Provisioner:
                {
                alt147=150;
                }
                break;
            case TriggerRules:
                {
                alt147=151;
                }
                break;
            case RunPolicy:
                {
                alt147=152;
                }
                break;
            case Queued:
                {
                alt147=153;
                }
                break;
            case Notifications:
                {
                alt147=154;
                }
                break;
            case DeployTrigger:
                {
                alt147=155;
                }
                break;
            case ReleaseTrigger:
                {
                alt147=156;
                }
                break;
            case LockBehavior:
                {
                alt147=157;
                }
                break;
            case ReviewStage:
                {
                alt147=158;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // InternalPipelineParser.g:5333:3: (enumLiteral_0= Name )
                    {
                    // InternalPipelineParser.g:5333:3: (enumLiteral_0= Name )
                    // InternalPipelineParser.g:5334:4: enumLiteral_0= Name
                    {
                    enumLiteral_0=(Token)match(input,Name,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_NAMEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_0, grammarAccess.getPipelineKeywordAccess().getPPL_KW_NAMEEnumLiteralDeclaration_0());
                    			

                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:5341:3: (enumLiteral_1= RunName )
                    {
                    // InternalPipelineParser.g:5341:3: (enumLiteral_1= RunName )
                    // InternalPipelineParser.g:5342:4: enumLiteral_1= RunName
                    {
                    enumLiteral_1=(Token)match(input,RunName,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_NAMEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_1, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_NAMEEnumLiteralDeclaration_1());
                    			

                    }


                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:5349:3: (enumLiteral_2= On )
                    {
                    // InternalPipelineParser.g:5349:3: (enumLiteral_2= On )
                    // InternalPipelineParser.g:5350:4: enumLiteral_2= On
                    {
                    enumLiteral_2=(Token)match(input,On,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_2, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONEnumLiteralDeclaration_2());
                    			

                    }


                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:5357:3: (enumLiteral_3= Defaults )
                    {
                    // InternalPipelineParser.g:5357:3: (enumLiteral_3= Defaults )
                    // InternalPipelineParser.g:5358:4: enumLiteral_3= Defaults
                    {
                    enumLiteral_3=(Token)match(input,Defaults,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_3, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTSEnumLiteralDeclaration_3());
                    			

                    }


                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:5365:3: (enumLiteral_4= Run )
                    {
                    // InternalPipelineParser.g:5365:3: (enumLiteral_4= Run )
                    // InternalPipelineParser.g:5366:4: enumLiteral_4= Run
                    {
                    enumLiteral_4=(Token)match(input,Run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_4, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNEnumLiteralDeclaration_4());
                    			

                    }


                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:5373:3: (enumLiteral_5= Shell )
                    {
                    // InternalPipelineParser.g:5373:3: (enumLiteral_5= Shell )
                    // InternalPipelineParser.g:5374:4: enumLiteral_5= Shell
                    {
                    enumLiteral_5=(Token)match(input,Shell,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SHELLEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_5, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SHELLEnumLiteralDeclaration_5());
                    			

                    }


                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:5381:3: (enumLiteral_6= WorkingDirectory )
                    {
                    // InternalPipelineParser.g:5381:3: (enumLiteral_6= WorkingDirectory )
                    // InternalPipelineParser.g:5382:4: enumLiteral_6= WorkingDirectory
                    {
                    enumLiteral_6=(Token)match(input,WorkingDirectory,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKING_DIRECTORYEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_6, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKING_DIRECTORYEnumLiteralDeclaration_6());
                    			

                    }


                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:5389:3: (enumLiteral_7= Env )
                    {
                    // InternalPipelineParser.g:5389:3: (enumLiteral_7= Env )
                    // InternalPipelineParser.g:5390:4: enumLiteral_7= Env
                    {
                    enumLiteral_7=(Token)match(input,Env,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_7, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVEnumLiteralDeclaration_7());
                    			

                    }


                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:5397:3: (enumLiteral_8= Permission )
                    {
                    // InternalPipelineParser.g:5397:3: (enumLiteral_8= Permission )
                    // InternalPipelineParser.g:5398:4: enumLiteral_8= Permission
                    {
                    enumLiteral_8=(Token)match(input,Permission,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_8, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONEnumLiteralDeclaration_8());
                    			

                    }


                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:5405:3: (enumLiteral_9= Concurrency )
                    {
                    // InternalPipelineParser.g:5405:3: (enumLiteral_9= Concurrency )
                    // InternalPipelineParser.g:5406:4: enumLiteral_9= Concurrency
                    {
                    enumLiteral_9=(Token)match(input,Concurrency,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONCURRENCYEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_9, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONCURRENCYEnumLiteralDeclaration_9());
                    			

                    }


                    }
                    break;
                case 11 :
                    // InternalPipelineParser.g:5413:3: (enumLiteral_10= Group )
                    {
                    // InternalPipelineParser.g:5413:3: (enumLiteral_10= Group )
                    // InternalPipelineParser.g:5414:4: enumLiteral_10= Group
                    {
                    enumLiteral_10=(Token)match(input,Group,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_GROUPEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_10, grammarAccess.getPipelineKeywordAccess().getPPL_KW_GROUPEnumLiteralDeclaration_10());
                    			

                    }


                    }
                    break;
                case 12 :
                    // InternalPipelineParser.g:5421:3: (enumLiteral_11= CancelInProgress )
                    {
                    // InternalPipelineParser.g:5421:3: (enumLiteral_11= CancelInProgress )
                    // InternalPipelineParser.g:5422:4: enumLiteral_11= CancelInProgress
                    {
                    enumLiteral_11=(Token)match(input,CancelInProgress,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CANCEL_IN_PROGRESSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_11, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CANCEL_IN_PROGRESSEnumLiteralDeclaration_11());
                    			

                    }


                    }
                    break;
                case 13 :
                    // InternalPipelineParser.g:5429:3: (enumLiteral_12= Pool )
                    {
                    // InternalPipelineParser.g:5429:3: (enumLiteral_12= Pool )
                    // InternalPipelineParser.g:5430:4: enumLiteral_12= Pool
                    {
                    enumLiteral_12=(Token)match(input,Pool,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POOLEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_12, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POOLEnumLiteralDeclaration_12());
                    			

                    }


                    }
                    break;
                case 14 :
                    // InternalPipelineParser.g:5437:3: (enumLiteral_13= VmImage )
                    {
                    // InternalPipelineParser.g:5437:3: (enumLiteral_13= VmImage )
                    // InternalPipelineParser.g:5438:4: enumLiteral_13= VmImage
                    {
                    enumLiteral_13=(Token)match(input,VmImage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VM_IMAGEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_13, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VM_IMAGEEnumLiteralDeclaration_13());
                    			

                    }


                    }
                    break;
                case 15 :
                    // InternalPipelineParser.g:5445:3: (enumLiteral_14= Demands )
                    {
                    // InternalPipelineParser.g:5445:3: (enumLiteral_14= Demands )
                    // InternalPipelineParser.g:5446:4: enumLiteral_14= Demands
                    {
                    enumLiteral_14=(Token)match(input,Demands,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEMANDSEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_14, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEMANDSEnumLiteralDeclaration_14());
                    			

                    }


                    }
                    break;
                case 16 :
                    // InternalPipelineParser.g:5453:3: (enumLiteral_15= Resources )
                    {
                    // InternalPipelineParser.g:5453:3: (enumLiteral_15= Resources )
                    // InternalPipelineParser.g:5454:4: enumLiteral_15= Resources
                    {
                    enumLiteral_15=(Token)match(input,Resources,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCESEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_15, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCESEnumLiteralDeclaration_15());
                    			

                    }


                    }
                    break;
                case 17 :
                    // InternalPipelineParser.g:5461:3: (enumLiteral_16= Version )
                    {
                    // InternalPipelineParser.g:5461:3: (enumLiteral_16= Version )
                    // InternalPipelineParser.g:5462:4: enumLiteral_16= Version
                    {
                    enumLiteral_16=(Token)match(input,Version,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VERSIONEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_16, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VERSIONEnumLiteralDeclaration_16());
                    			

                    }


                    }
                    break;
                case 18 :
                    // InternalPipelineParser.g:5469:3: (enumLiteral_17= Variables )
                    {
                    // InternalPipelineParser.g:5469:3: (enumLiteral_17= Variables )
                    // InternalPipelineParser.g:5470:4: enumLiteral_17= Variables
                    {
                    enumLiteral_17=(Token)match(input,Variables,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VARIABLESEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_17, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VARIABLESEnumLiteralDeclaration_17());
                    			

                    }


                    }
                    break;
                case 19 :
                    // InternalPipelineParser.g:5477:3: (enumLiteral_18= Parameters )
                    {
                    // InternalPipelineParser.g:5477:3: (enumLiteral_18= Parameters )
                    // InternalPipelineParser.g:5478:4: enumLiteral_18= Parameters
                    {
                    enumLiteral_18=(Token)match(input,Parameters,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARAMETERSEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_18, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARAMETERSEnumLiteralDeclaration_18());
                    			

                    }


                    }
                    break;
                case 20 :
                    // InternalPipelineParser.g:5485:3: (enumLiteral_19= Extends )
                    {
                    // InternalPipelineParser.g:5485:3: (enumLiteral_19= Extends )
                    // InternalPipelineParser.g:5486:4: enumLiteral_19= Extends
                    {
                    enumLiteral_19=(Token)match(input,Extends,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXTENDSEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_19, grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXTENDSEnumLiteralDeclaration_19());
                    			

                    }


                    }
                    break;
                case 21 :
                    // InternalPipelineParser.g:5493:3: (enumLiteral_20= Include )
                    {
                    // InternalPipelineParser.g:5493:3: (enumLiteral_20= Include )
                    // InternalPipelineParser.g:5494:4: enumLiteral_20= Include
                    {
                    enumLiteral_20=(Token)match(input,Include,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_INCLUDEEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_20, grammarAccess.getPipelineKeywordAccess().getPPL_KW_INCLUDEEnumLiteralDeclaration_20());
                    			

                    }


                    }
                    break;
                case 22 :
                    // InternalPipelineParser.g:5501:3: (enumLiteral_21= Types )
                    {
                    // InternalPipelineParser.g:5501:3: (enumLiteral_21= Types )
                    // InternalPipelineParser.g:5502:4: enumLiteral_21= Types
                    {
                    enumLiteral_21=(Token)match(input,Types,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPESEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_21, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPESEnumLiteralDeclaration_21());
                    			

                    }


                    }
                    break;
                case 23 :
                    // InternalPipelineParser.g:5509:3: (enumLiteral_22= Batch )
                    {
                    // InternalPipelineParser.g:5509:3: (enumLiteral_22= Batch )
                    // InternalPipelineParser.g:5510:4: enumLiteral_22= Batch
                    {
                    enumLiteral_22=(Token)match(input,Batch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BATCHEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_22, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BATCHEnumLiteralDeclaration_22());
                    			

                    }


                    }
                    break;
                case 24 :
                    // InternalPipelineParser.g:5517:3: (enumLiteral_23= AutoCancel )
                    {
                    // InternalPipelineParser.g:5517:3: (enumLiteral_23= AutoCancel )
                    // InternalPipelineParser.g:5518:4: enumLiteral_23= AutoCancel
                    {
                    enumLiteral_23=(Token)match(input,AutoCancel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTO_CANCELEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_23, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTO_CANCELEnumLiteralDeclaration_23());
                    			

                    }


                    }
                    break;
                case 25 :
                    // InternalPipelineParser.g:5525:3: (enumLiteral_24= Workflows )
                    {
                    // InternalPipelineParser.g:5525:3: (enumLiteral_24= Workflows )
                    // InternalPipelineParser.g:5526:4: enumLiteral_24= Workflows
                    {
                    enumLiteral_24=(Token)match(input,Workflows,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOWSEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_24, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOWSEnumLiteralDeclaration_24());
                    			

                    }


                    }
                    break;
                case 26 :
                    // InternalPipelineParser.g:5533:3: (enumLiteral_25= Drafts )
                    {
                    // InternalPipelineParser.g:5533:3: (enumLiteral_25= Drafts )
                    // InternalPipelineParser.g:5534:4: enumLiteral_25= Drafts
                    {
                    enumLiteral_25=(Token)match(input,Drafts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DRAFTSEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_25, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DRAFTSEnumLiteralDeclaration_25());
                    			

                    }


                    }
                    break;
                case 27 :
                    // InternalPipelineParser.g:5541:3: (enumLiteral_26= Branches )
                    {
                    // InternalPipelineParser.g:5541:3: (enumLiteral_26= Branches )
                    // InternalPipelineParser.g:5542:4: enumLiteral_26= Branches
                    {
                    enumLiteral_26=(Token)match(input,Branches,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHESEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_26, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHESEnumLiteralDeclaration_26());
                    			

                    }


                    }
                    break;
                case 28 :
                    // InternalPipelineParser.g:5549:3: (enumLiteral_27= BranchesIgnore )
                    {
                    // InternalPipelineParser.g:5549:3: (enumLiteral_27= BranchesIgnore )
                    // InternalPipelineParser.g:5550:4: enumLiteral_27= BranchesIgnore
                    {
                    enumLiteral_27=(Token)match(input,BranchesIgnore,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHES_IGNOREEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_27, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHES_IGNOREEnumLiteralDeclaration_27());
                    			

                    }


                    }
                    break;
                case 29 :
                    // InternalPipelineParser.g:5557:3: (enumLiteral_28= Paths )
                    {
                    // InternalPipelineParser.g:5557:3: (enumLiteral_28= Paths )
                    // InternalPipelineParser.g:5558:4: enumLiteral_28= Paths
                    {
                    enumLiteral_28=(Token)match(input,Paths,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHSEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_28, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHSEnumLiteralDeclaration_28());
                    			

                    }


                    }
                    break;
                case 30 :
                    // InternalPipelineParser.g:5565:3: (enumLiteral_29= PathsIgnore )
                    {
                    // InternalPipelineParser.g:5565:3: (enumLiteral_29= PathsIgnore )
                    // InternalPipelineParser.g:5566:4: enumLiteral_29= PathsIgnore
                    {
                    enumLiteral_29=(Token)match(input,PathsIgnore,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHS_IGNOREEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_29, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHS_IGNOREEnumLiteralDeclaration_29());
                    			

                    }


                    }
                    break;
                case 31 :
                    // InternalPipelineParser.g:5573:3: (enumLiteral_30= Tags )
                    {
                    // InternalPipelineParser.g:5573:3: (enumLiteral_30= Tags )
                    // InternalPipelineParser.g:5574:4: enumLiteral_30= Tags
                    {
                    enumLiteral_30=(Token)match(input,Tags,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGSEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_30, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGSEnumLiteralDeclaration_30());
                    			

                    }


                    }
                    break;
                case 32 :
                    // InternalPipelineParser.g:5581:3: (enumLiteral_31= TagsIgnore )
                    {
                    // InternalPipelineParser.g:5581:3: (enumLiteral_31= TagsIgnore )
                    // InternalPipelineParser.g:5582:4: enumLiteral_31= TagsIgnore
                    {
                    enumLiteral_31=(Token)match(input,TagsIgnore,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGS_IGNOREEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_31, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGS_IGNOREEnumLiteralDeclaration_31());
                    			

                    }


                    }
                    break;
                case 33 :
                    // InternalPipelineParser.g:5589:3: (enumLiteral_32= Schedules )
                    {
                    // InternalPipelineParser.g:5589:3: (enumLiteral_32= Schedules )
                    // InternalPipelineParser.g:5590:4: enumLiteral_32= Schedules
                    {
                    enumLiteral_32=(Token)match(input,Schedules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULESEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_32, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULESEnumLiteralDeclaration_32());
                    			

                    }


                    }
                    break;
                case 34 :
                    // InternalPipelineParser.g:5597:3: (enumLiteral_33= Schedule )
                    {
                    // InternalPipelineParser.g:5597:3: (enumLiteral_33= Schedule )
                    // InternalPipelineParser.g:5598:4: enumLiteral_33= Schedule
                    {
                    enumLiteral_33=(Token)match(input,Schedule,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULEEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_33, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULEEnumLiteralDeclaration_33());
                    			

                    }


                    }
                    break;
                case 35 :
                    // InternalPipelineParser.g:5605:3: (enumLiteral_34= Workflow_call )
                    {
                    // InternalPipelineParser.g:5605:3: (enumLiteral_34= Workflow_call )
                    // InternalPipelineParser.g:5606:4: enumLiteral_34= Workflow_call
                    {
                    enumLiteral_34=(Token)match(input,Workflow_call,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_CALLEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_34, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_CALLEnumLiteralDeclaration_34());
                    			

                    }


                    }
                    break;
                case 36 :
                    // InternalPipelineParser.g:5613:3: (enumLiteral_35= Workflow_dispatch )
                    {
                    // InternalPipelineParser.g:5613:3: (enumLiteral_35= Workflow_dispatch )
                    // InternalPipelineParser.g:5614:4: enumLiteral_35= Workflow_dispatch
                    {
                    enumLiteral_35=(Token)match(input,Workflow_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_DISPATCHEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_35, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_DISPATCHEnumLiteralDeclaration_35());
                    			

                    }


                    }
                    break;
                case 37 :
                    // InternalPipelineParser.g:5621:3: (enumLiteral_36= Cron )
                    {
                    // InternalPipelineParser.g:5621:3: (enumLiteral_36= Cron )
                    // InternalPipelineParser.g:5622:4: enumLiteral_36= Cron
                    {
                    enumLiteral_36=(Token)match(input,Cron,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CRONEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_36, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CRONEnumLiteralDeclaration_36());
                    			

                    }


                    }
                    break;
                case 38 :
                    // InternalPipelineParser.g:5629:3: (enumLiteral_37= DisplayName )
                    {
                    // InternalPipelineParser.g:5629:3: (enumLiteral_37= DisplayName )
                    // InternalPipelineParser.g:5630:4: enumLiteral_37= DisplayName
                    {
                    enumLiteral_37=(Token)match(input,DisplayName,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DISPLAY_NAMEEnumLiteralDeclaration_37().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_37, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DISPLAY_NAMEEnumLiteralDeclaration_37());
                    			

                    }


                    }
                    break;
                case 39 :
                    // InternalPipelineParser.g:5637:3: (enumLiteral_38= Always )
                    {
                    // InternalPipelineParser.g:5637:3: (enumLiteral_38= Always )
                    // InternalPipelineParser.g:5638:4: enumLiteral_38= Always
                    {
                    enumLiteral_38=(Token)match(input,Always,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALWAYSEnumLiteralDeclaration_38().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_38, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALWAYSEnumLiteralDeclaration_38());
                    			

                    }


                    }
                    break;
                case 40 :
                    // InternalPipelineParser.g:5645:3: (enumLiteral_39= Stage )
                    {
                    // InternalPipelineParser.g:5645:3: (enumLiteral_39= Stage )
                    // InternalPipelineParser.g:5646:4: enumLiteral_39= Stage
                    {
                    enumLiteral_39=(Token)match(input,Stage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGEEnumLiteralDeclaration_39().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_39, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGEEnumLiteralDeclaration_39());
                    			

                    }


                    }
                    break;
                case 41 :
                    // InternalPipelineParser.g:5653:3: (enumLiteral_40= Condition )
                    {
                    // InternalPipelineParser.g:5653:3: (enumLiteral_40= Condition )
                    // InternalPipelineParser.g:5654:4: enumLiteral_40= Condition
                    {
                    enumLiteral_40=(Token)match(input,Condition,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONEnumLiteralDeclaration_40().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_40, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONEnumLiteralDeclaration_40());
                    			

                    }


                    }
                    break;
                case 42 :
                    // InternalPipelineParser.g:5661:3: (enumLiteral_41= IsSkippable )
                    {
                    // InternalPipelineParser.g:5661:3: (enumLiteral_41= IsSkippable )
                    // InternalPipelineParser.g:5662:4: enumLiteral_41= IsSkippable
                    {
                    enumLiteral_41=(Token)match(input,IsSkippable,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IS_SKIPPABLEEnumLiteralDeclaration_41().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_41, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IS_SKIPPABLEEnumLiteralDeclaration_41());
                    			

                    }


                    }
                    break;
                case 43 :
                    // InternalPipelineParser.g:5669:3: (enumLiteral_42= DependsOn )
                    {
                    // InternalPipelineParser.g:5669:3: (enumLiteral_42= DependsOn )
                    // InternalPipelineParser.g:5670:4: enumLiteral_42= DependsOn
                    {
                    enumLiteral_42=(Token)match(input,DependsOn,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDS_ONEnumLiteralDeclaration_42().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_42, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDS_ONEnumLiteralDeclaration_42());
                    			

                    }


                    }
                    break;
                case 44 :
                    // InternalPipelineParser.g:5677:3: (enumLiteral_43= Job )
                    {
                    // InternalPipelineParser.g:5677:3: (enumLiteral_43= Job )
                    // InternalPipelineParser.g:5678:4: enumLiteral_43= Job
                    {
                    enumLiteral_43=(Token)match(input,Job,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_JOBEnumLiteralDeclaration_43().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_43, grammarAccess.getPipelineKeywordAccess().getPPL_KW_JOBEnumLiteralDeclaration_43());
                    			

                    }


                    }
                    break;
                case 45 :
                    // InternalPipelineParser.g:5685:3: (enumLiteral_44= Deployment )
                    {
                    // InternalPipelineParser.g:5685:3: (enumLiteral_44= Deployment )
                    // InternalPipelineParser.g:5686:4: enumLiteral_44= Deployment
                    {
                    enumLiteral_44=(Token)match(input,Deployment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOYMENTEnumLiteralDeclaration_44().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_44, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOYMENTEnumLiteralDeclaration_44());
                    			

                    }


                    }
                    break;
                case 46 :
                    // InternalPipelineParser.g:5693:3: (enumLiteral_45= Script )
                    {
                    // InternalPipelineParser.g:5693:3: (enumLiteral_45= Script )
                    // InternalPipelineParser.g:5694:4: enumLiteral_45= Script
                    {
                    enumLiteral_45=(Token)match(input,Script,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCRIPTEnumLiteralDeclaration_45().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_45, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCRIPTEnumLiteralDeclaration_45());
                    			

                    }


                    }
                    break;
                case 47 :
                    // InternalPipelineParser.g:5701:3: (enumLiteral_46= Bash )
                    {
                    // InternalPipelineParser.g:5701:3: (enumLiteral_46= Bash )
                    // InternalPipelineParser.g:5702:4: enumLiteral_46= Bash
                    {
                    enumLiteral_46=(Token)match(input,Bash,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BASHEnumLiteralDeclaration_46().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_46, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BASHEnumLiteralDeclaration_46());
                    			

                    }


                    }
                    break;
                case 48 :
                    // InternalPipelineParser.g:5709:3: (enumLiteral_47= Pwsh )
                    {
                    // InternalPipelineParser.g:5709:3: (enumLiteral_47= Pwsh )
                    // InternalPipelineParser.g:5710:4: enumLiteral_47= Pwsh
                    {
                    enumLiteral_47=(Token)match(input,Pwsh,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PWSHEnumLiteralDeclaration_47().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_47, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PWSHEnumLiteralDeclaration_47());
                    			

                    }


                    }
                    break;
                case 49 :
                    // InternalPipelineParser.g:5717:3: (enumLiteral_48= Powershell )
                    {
                    // InternalPipelineParser.g:5717:3: (enumLiteral_48= Powershell )
                    // InternalPipelineParser.g:5718:4: enumLiteral_48= Powershell
                    {
                    enumLiteral_48=(Token)match(input,Powershell,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POWERSHELLEnumLiteralDeclaration_48().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_48, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POWERSHELLEnumLiteralDeclaration_48());
                    			

                    }


                    }
                    break;
                case 50 :
                    // InternalPipelineParser.g:5725:3: (enumLiteral_49= Checkout )
                    {
                    // InternalPipelineParser.g:5725:3: (enumLiteral_49= Checkout )
                    // InternalPipelineParser.g:5726:4: enumLiteral_49= Checkout
                    {
                    enumLiteral_49=(Token)match(input,Checkout,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CHECKOUTEnumLiteralDeclaration_49().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_49, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CHECKOUTEnumLiteralDeclaration_49());
                    			

                    }


                    }
                    break;
                case 51 :
                    // InternalPipelineParser.g:5733:3: (enumLiteral_50= Download )
                    {
                    // InternalPipelineParser.g:5733:3: (enumLiteral_50= Download )
                    // InternalPipelineParser.g:5734:4: enumLiteral_50= Download
                    {
                    enumLiteral_50=(Token)match(input,Download,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOWNLOADEnumLiteralDeclaration_50().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_50, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOWNLOADEnumLiteralDeclaration_50());
                    			

                    }


                    }
                    break;
                case 52 :
                    // InternalPipelineParser.g:5741:3: (enumLiteral_51= GetPackage )
                    {
                    // InternalPipelineParser.g:5741:3: (enumLiteral_51= GetPackage )
                    // InternalPipelineParser.g:5742:4: enumLiteral_51= GetPackage
                    {
                    enumLiteral_51=(Token)match(input,GetPackage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_GET_PACKAGEEnumLiteralDeclaration_51().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_51, grammarAccess.getPipelineKeywordAccess().getPPL_KW_GET_PACKAGEEnumLiteralDeclaration_51());
                    			

                    }


                    }
                    break;
                case 53 :
                    // InternalPipelineParser.g:5749:3: (enumLiteral_52= Publish )
                    {
                    // InternalPipelineParser.g:5749:3: (enumLiteral_52= Publish )
                    // InternalPipelineParser.g:5750:4: enumLiteral_52= Publish
                    {
                    enumLiteral_52=(Token)match(input,Publish,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUBLISHEnumLiteralDeclaration_52().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_52, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUBLISHEnumLiteralDeclaration_52());
                    			

                    }


                    }
                    break;
                case 54 :
                    // InternalPipelineParser.g:5757:3: (enumLiteral_53= Task )
                    {
                    // InternalPipelineParser.g:5757:3: (enumLiteral_53= Task )
                    // InternalPipelineParser.g:5758:4: enumLiteral_53= Task
                    {
                    enumLiteral_53=(Token)match(input,Task,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKEnumLiteralDeclaration_53().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_53, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKEnumLiteralDeclaration_53());
                    			

                    }


                    }
                    break;
                case 55 :
                    // InternalPipelineParser.g:5765:3: (enumLiteral_54= Value )
                    {
                    // InternalPipelineParser.g:5765:3: (enumLiteral_54= Value )
                    // InternalPipelineParser.g:5766:4: enumLiteral_54= Value
                    {
                    enumLiteral_54=(Token)match(input,Value,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VALUEEnumLiteralDeclaration_54().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_54, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VALUEEnumLiteralDeclaration_54());
                    			

                    }


                    }
                    break;
                case 56 :
                    // InternalPipelineParser.g:5773:3: (enumLiteral_55= Readonly )
                    {
                    // InternalPipelineParser.g:5773:3: (enumLiteral_55= Readonly )
                    // InternalPipelineParser.g:5774:4: enumLiteral_55= Readonly
                    {
                    enumLiteral_55=(Token)match(input,Readonly,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_READONLYEnumLiteralDeclaration_55().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_55, grammarAccess.getPipelineKeywordAccess().getPPL_KW_READONLYEnumLiteralDeclaration_55());
                    			

                    }


                    }
                    break;
                case 57 :
                    // InternalPipelineParser.g:5781:3: (enumLiteral_56= Builds )
                    {
                    // InternalPipelineParser.g:5781:3: (enumLiteral_56= Builds )
                    // InternalPipelineParser.g:5782:4: enumLiteral_56= Builds
                    {
                    enumLiteral_56=(Token)match(input,Builds,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BUILDSEnumLiteralDeclaration_56().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_56, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BUILDSEnumLiteralDeclaration_56());
                    			

                    }


                    }
                    break;
                case 58 :
                    // InternalPipelineParser.g:5789:3: (enumLiteral_57= Containers )
                    {
                    // InternalPipelineParser.g:5789:3: (enumLiteral_57= Containers )
                    // InternalPipelineParser.g:5790:4: enumLiteral_57= Containers
                    {
                    enumLiteral_57=(Token)match(input,Containers,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINERSEnumLiteralDeclaration_57().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_57, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINERSEnumLiteralDeclaration_57());
                    			

                    }


                    }
                    break;
                case 59 :
                    // InternalPipelineParser.g:5797:3: (enumLiteral_58= Pipelines )
                    {
                    // InternalPipelineParser.g:5797:3: (enumLiteral_58= Pipelines )
                    // InternalPipelineParser.g:5798:4: enumLiteral_58= Pipelines
                    {
                    enumLiteral_58=(Token)match(input,Pipelines,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINESEnumLiteralDeclaration_58().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_58, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINESEnumLiteralDeclaration_58());
                    			

                    }


                    }
                    break;
                case 60 :
                    // InternalPipelineParser.g:5805:3: (enumLiteral_59= Repositories )
                    {
                    // InternalPipelineParser.g:5805:3: (enumLiteral_59= Repositories )
                    // InternalPipelineParser.g:5806:4: enumLiteral_59= Repositories
                    {
                    enumLiteral_59=(Token)match(input,Repositories,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORIESEnumLiteralDeclaration_59().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_59, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORIESEnumLiteralDeclaration_59());
                    			

                    }


                    }
                    break;
                case 61 :
                    // InternalPipelineParser.g:5813:3: (enumLiteral_60= Webhooks )
                    {
                    // InternalPipelineParser.g:5813:3: (enumLiteral_60= Webhooks )
                    // InternalPipelineParser.g:5814:4: enumLiteral_60= Webhooks
                    {
                    enumLiteral_60=(Token)match(input,Webhooks,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WEBHOOKSEnumLiteralDeclaration_60().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_60, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WEBHOOKSEnumLiteralDeclaration_60());
                    			

                    }


                    }
                    break;
                case 62 :
                    // InternalPipelineParser.g:5821:3: (enumLiteral_61= Packages )
                    {
                    // InternalPipelineParser.g:5821:3: (enumLiteral_61= Packages )
                    // InternalPipelineParser.g:5822:4: enumLiteral_61= Packages
                    {
                    enumLiteral_61=(Token)match(input,Packages,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PACKAGESEnumLiteralDeclaration_61().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_61, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PACKAGESEnumLiteralDeclaration_61());
                    			

                    }


                    }
                    break;
                case 63 :
                    // InternalPipelineParser.g:5829:3: (enumLiteral_62= Inputs )
                    {
                    // InternalPipelineParser.g:5829:3: (enumLiteral_62= Inputs )
                    // InternalPipelineParser.g:5830:4: enumLiteral_62= Inputs
                    {
                    enumLiteral_62=(Token)match(input,Inputs,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_INPUTSEnumLiteralDeclaration_62().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_62, grammarAccess.getPipelineKeywordAccess().getPPL_KW_INPUTSEnumLiteralDeclaration_62());
                    			

                    }


                    }
                    break;
                case 64 :
                    // InternalPipelineParser.g:5837:3: (enumLiteral_63= Outputs )
                    {
                    // InternalPipelineParser.g:5837:3: (enumLiteral_63= Outputs )
                    // InternalPipelineParser.g:5838:4: enumLiteral_63= Outputs
                    {
                    enumLiteral_63=(Token)match(input,Outputs,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_OUTPUTSEnumLiteralDeclaration_63().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_63, grammarAccess.getPipelineKeywordAccess().getPPL_KW_OUTPUTSEnumLiteralDeclaration_63());
                    			

                    }


                    }
                    break;
                case 65 :
                    // InternalPipelineParser.g:5845:3: (enumLiteral_64= Secrets )
                    {
                    // InternalPipelineParser.g:5845:3: (enumLiteral_64= Secrets )
                    // InternalPipelineParser.g:5846:4: enumLiteral_64= Secrets
                    {
                    enumLiteral_64=(Token)match(input,Secrets,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SECRETSEnumLiteralDeclaration_64().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_64, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SECRETSEnumLiteralDeclaration_64());
                    			

                    }


                    }
                    break;
                case 66 :
                    // InternalPipelineParser.g:5853:3: (enumLiteral_65= Description )
                    {
                    // InternalPipelineParser.g:5853:3: (enumLiteral_65= Description )
                    // InternalPipelineParser.g:5854:4: enumLiteral_65= Description
                    {
                    enumLiteral_65=(Token)match(input,Description,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DESCRIPTIONEnumLiteralDeclaration_65().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_65, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DESCRIPTIONEnumLiteralDeclaration_65());
                    			

                    }


                    }
                    break;
                case 67 :
                    // InternalPipelineParser.g:5861:3: (enumLiteral_66= Required )
                    {
                    // InternalPipelineParser.g:5861:3: (enumLiteral_66= Required )
                    // InternalPipelineParser.g:5862:4: enumLiteral_66= Required
                    {
                    enumLiteral_66=(Token)match(input,Required,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREDEnumLiteralDeclaration_66().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_66, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREDEnumLiteralDeclaration_66());
                    			

                    }


                    }
                    break;
                case 68 :
                    // InternalPipelineParser.g:5869:3: (enumLiteral_67= Default )
                    {
                    // InternalPipelineParser.g:5869:3: (enumLiteral_67= Default )
                    // InternalPipelineParser.g:5870:4: enumLiteral_67= Default
                    {
                    enumLiteral_67=(Token)match(input,Default,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTEnumLiteralDeclaration_67().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_67, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTEnumLiteralDeclaration_67());
                    			

                    }


                    }
                    break;
                case 69 :
                    // InternalPipelineParser.g:5877:3: (enumLiteral_68= Type )
                    {
                    // InternalPipelineParser.g:5877:3: (enumLiteral_68= Type )
                    // InternalPipelineParser.g:5878:4: enumLiteral_68= Type
                    {
                    enumLiteral_68=(Token)match(input,Type,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPEEnumLiteralDeclaration_68().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_68, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPEEnumLiteralDeclaration_68());
                    			

                    }


                    }
                    break;
                case 70 :
                    // InternalPipelineParser.g:5885:3: (enumLiteral_69= Options )
                    {
                    // InternalPipelineParser.g:5885:3: (enumLiteral_69= Options )
                    // InternalPipelineParser.g:5886:4: enumLiteral_69= Options
                    {
                    enumLiteral_69=(Token)match(input,Options,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_OPTIONSEnumLiteralDeclaration_69().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_69, grammarAccess.getPipelineKeywordAccess().getPPL_KW_OPTIONSEnumLiteralDeclaration_69());
                    			

                    }


                    }
                    break;
                case 71 :
                    // InternalPipelineParser.g:5893:3: (enumLiteral_70= If )
                    {
                    // InternalPipelineParser.g:5893:3: (enumLiteral_70= If )
                    // InternalPipelineParser.g:5894:4: enumLiteral_70= If
                    {
                    enumLiteral_70=(Token)match(input,If,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IFEnumLiteralDeclaration_70().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_70, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IFEnumLiteralDeclaration_70());
                    			

                    }


                    }
                    break;
                case 72 :
                    // InternalPipelineParser.g:5901:3: (enumLiteral_71= RunsOn )
                    {
                    // InternalPipelineParser.g:5901:3: (enumLiteral_71= RunsOn )
                    // InternalPipelineParser.g:5902:4: enumLiteral_71= RunsOn
                    {
                    enumLiteral_71=(Token)match(input,RunsOn,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNS_ONEnumLiteralDeclaration_71().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_71, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNS_ONEnumLiteralDeclaration_71());
                    			

                    }


                    }
                    break;
                case 73 :
                    // InternalPipelineParser.g:5909:3: (enumLiteral_72= Strategy )
                    {
                    // InternalPipelineParser.g:5909:3: (enumLiteral_72= Strategy )
                    // InternalPipelineParser.g:5910:4: enumLiteral_72= Strategy
                    {
                    enumLiteral_72=(Token)match(input,Strategy,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STRATEGYEnumLiteralDeclaration_72().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_72, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STRATEGYEnumLiteralDeclaration_72());
                    			

                    }


                    }
                    break;
                case 74 :
                    // InternalPipelineParser.g:5917:3: (enumLiteral_73= Matrix )
                    {
                    // InternalPipelineParser.g:5917:3: (enumLiteral_73= Matrix )
                    // InternalPipelineParser.g:5918:4: enumLiteral_73= Matrix
                    {
                    enumLiteral_73=(Token)match(input,Matrix,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_MATRIXEnumLiteralDeclaration_73().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_73, grammarAccess.getPipelineKeywordAccess().getPPL_KW_MATRIXEnumLiteralDeclaration_73());
                    			

                    }


                    }
                    break;
                case 75 :
                    // InternalPipelineParser.g:5925:3: (enumLiteral_74= Container )
                    {
                    // InternalPipelineParser.g:5925:3: (enumLiteral_74= Container )
                    // InternalPipelineParser.g:5926:4: enumLiteral_74= Container
                    {
                    enumLiteral_74=(Token)match(input,Container,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINEREnumLiteralDeclaration_74().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_74, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINEREnumLiteralDeclaration_74());
                    			

                    }


                    }
                    break;
                case 76 :
                    // InternalPipelineParser.g:5933:3: (enumLiteral_75= Services )
                    {
                    // InternalPipelineParser.g:5933:3: (enumLiteral_75= Services )
                    // InternalPipelineParser.g:5934:4: enumLiteral_75= Services
                    {
                    enumLiteral_75=(Token)match(input,Services,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SERVICESEnumLiteralDeclaration_75().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_75, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SERVICESEnumLiteralDeclaration_75());
                    			

                    }


                    }
                    break;
                case 77 :
                    // InternalPipelineParser.g:5941:3: (enumLiteral_76= Steps )
                    {
                    // InternalPipelineParser.g:5941:3: (enumLiteral_76= Steps )
                    // InternalPipelineParser.g:5942:4: enumLiteral_76= Steps
                    {
                    enumLiteral_76=(Token)match(input,Steps,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPSEnumLiteralDeclaration_76().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_76, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPSEnumLiteralDeclaration_76());
                    			

                    }


                    }
                    break;
                case 78 :
                    // InternalPipelineParser.g:5949:3: (enumLiteral_77= Uses )
                    {
                    // InternalPipelineParser.g:5949:3: (enumLiteral_77= Uses )
                    // InternalPipelineParser.g:5950:4: enumLiteral_77= Uses
                    {
                    enumLiteral_77=(Token)match(input,Uses,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_USESEnumLiteralDeclaration_77().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_77, grammarAccess.getPipelineKeywordAccess().getPPL_KW_USESEnumLiteralDeclaration_77());
                    			

                    }


                    }
                    break;
                case 79 :
                    // InternalPipelineParser.g:5957:3: (enumLiteral_78= With )
                    {
                    // InternalPipelineParser.g:5957:3: (enumLiteral_78= With )
                    // InternalPipelineParser.g:5958:4: enumLiteral_78= With
                    {
                    enumLiteral_78=(Token)match(input,With,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WITHEnumLiteralDeclaration_78().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_78, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WITHEnumLiteralDeclaration_78());
                    			

                    }


                    }
                    break;
                case 80 :
                    // InternalPipelineParser.g:5965:3: (enumLiteral_79= TimeoutMinutes )
                    {
                    // InternalPipelineParser.g:5965:3: (enumLiteral_79= TimeoutMinutes )
                    // InternalPipelineParser.g:5966:4: enumLiteral_79= TimeoutMinutes
                    {
                    enumLiteral_79=(Token)match(input,TimeoutMinutes,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_MINUTESEnumLiteralDeclaration_79().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_79, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_MINUTESEnumLiteralDeclaration_79());
                    			

                    }


                    }
                    break;
                case 81 :
                    // InternalPipelineParser.g:5973:3: (enumLiteral_80= ContinueOnError_1 )
                    {
                    // InternalPipelineParser.g:5973:3: (enumLiteral_80= ContinueOnError_1 )
                    // InternalPipelineParser.g:5974:4: enumLiteral_80= ContinueOnError_1
                    {
                    enumLiteral_80=(Token)match(input,ContinueOnError_1,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERROREnumLiteralDeclaration_80().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_80, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERROREnumLiteralDeclaration_80());
                    			

                    }


                    }
                    break;
                case 82 :
                    // InternalPipelineParser.g:5981:3: (enumLiteral_81= Environment )
                    {
                    // InternalPipelineParser.g:5981:3: (enumLiteral_81= Environment )
                    // InternalPipelineParser.g:5982:4: enumLiteral_81= Environment
                    {
                    enumLiteral_81=(Token)match(input,Environment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVIRONMENTEnumLiteralDeclaration_81().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_81, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVIRONMENTEnumLiteralDeclaration_81());
                    			

                    }


                    }
                    break;
                case 83 :
                    // InternalPipelineParser.g:5989:3: (enumLiteral_82= Id )
                    {
                    // InternalPipelineParser.g:5989:3: (enumLiteral_82= Id )
                    // InternalPipelineParser.g:5990:4: enumLiteral_82= Id
                    {
                    enumLiteral_82=(Token)match(input,Id,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IDEnumLiteralDeclaration_82().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_82, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IDEnumLiteralDeclaration_82());
                    			

                    }


                    }
                    break;
                case 84 :
                    // InternalPipelineParser.g:5997:3: (enumLiteral_83= Permissions )
                    {
                    // InternalPipelineParser.g:5997:3: (enumLiteral_83= Permissions )
                    // InternalPipelineParser.g:5998:4: enumLiteral_83= Permissions
                    {
                    enumLiteral_83=(Token)match(input,Permissions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONSEnumLiteralDeclaration_83().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_83, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONSEnumLiteralDeclaration_83());
                    			

                    }


                    }
                    break;
                case 85 :
                    // InternalPipelineParser.g:6005:3: (enumLiteral_84= Timeouts )
                    {
                    // InternalPipelineParser.g:6005:3: (enumLiteral_84= Timeouts )
                    // InternalPipelineParser.g:6006:4: enumLiteral_84= Timeouts
                    {
                    enumLiteral_84=(Token)match(input,Timeouts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTSEnumLiteralDeclaration_84().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_84, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTSEnumLiteralDeclaration_84());
                    			

                    }


                    }
                    break;
                case 86 :
                    // InternalPipelineParser.g:6013:3: (enumLiteral_85= DefaultsRun )
                    {
                    // InternalPipelineParser.g:6013:3: (enumLiteral_85= DefaultsRun )
                    // InternalPipelineParser.g:6014:4: enumLiteral_85= DefaultsRun
                    {
                    enumLiteral_85=(Token)match(input,DefaultsRun,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTS_RUNEnumLiteralDeclaration_85().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_85, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTS_RUNEnumLiteralDeclaration_85());
                    			

                    }


                    }
                    break;
                case 87 :
                    // InternalPipelineParser.g:6021:3: (enumLiteral_86= Push )
                    {
                    // InternalPipelineParser.g:6021:3: (enumLiteral_86= Push )
                    // InternalPipelineParser.g:6022:4: enumLiteral_86= Push
                    {
                    enumLiteral_86=(Token)match(input,Push,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUSHEnumLiteralDeclaration_86().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_86, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUSHEnumLiteralDeclaration_86());
                    			

                    }


                    }
                    break;
                case 88 :
                    // InternalPipelineParser.g:6029:3: (enumLiteral_87= Pull_request )
                    {
                    // InternalPipelineParser.g:6029:3: (enumLiteral_87= Pull_request )
                    // InternalPipelineParser.g:6030:4: enumLiteral_87= Pull_request
                    {
                    enumLiteral_87=(Token)match(input,Pull_request,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTEnumLiteralDeclaration_87().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_87, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTEnumLiteralDeclaration_87());
                    			

                    }


                    }
                    break;
                case 89 :
                    // InternalPipelineParser.g:6037:3: (enumLiteral_88= Repository_dispatch )
                    {
                    // InternalPipelineParser.g:6037:3: (enumLiteral_88= Repository_dispatch )
                    // InternalPipelineParser.g:6038:4: enumLiteral_88= Repository_dispatch
                    {
                    enumLiteral_88=(Token)match(input,Repository_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORY_DISPATCHEnumLiteralDeclaration_88().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_88, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORY_DISPATCHEnumLiteralDeclaration_88());
                    			

                    }


                    }
                    break;
                case 90 :
                    // InternalPipelineParser.g:6045:3: (enumLiteral_89= Workflow_run )
                    {
                    // InternalPipelineParser.g:6045:3: (enumLiteral_89= Workflow_run )
                    // InternalPipelineParser.g:6046:4: enumLiteral_89= Workflow_run
                    {
                    enumLiteral_89=(Token)match(input,Workflow_run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_RUNEnumLiteralDeclaration_89().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_89, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_RUNEnumLiteralDeclaration_89());
                    			

                    }


                    }
                    break;
                case 91 :
                    // InternalPipelineParser.g:6053:3: (enumLiteral_90= Filters )
                    {
                    // InternalPipelineParser.g:6053:3: (enumLiteral_90= Filters )
                    // InternalPipelineParser.g:6054:4: enumLiteral_90= Filters
                    {
                    enumLiteral_90=(Token)match(input,Filters,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_FILTERSEnumLiteralDeclaration_90().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_90, grammarAccess.getPipelineKeywordAccess().getPPL_KW_FILTERSEnumLiteralDeclaration_90());
                    			

                    }


                    }
                    break;
                case 92 :
                    // InternalPipelineParser.g:6061:3: (enumLiteral_91= Exclude )
                    {
                    // InternalPipelineParser.g:6061:3: (enumLiteral_91= Exclude )
                    // InternalPipelineParser.g:6062:4: enumLiteral_91= Exclude
                    {
                    enumLiteral_91=(Token)match(input,Exclude,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCLUDEEnumLiteralDeclaration_91().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_91, grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCLUDEEnumLiteralDeclaration_91());
                    			

                    }


                    }
                    break;
                case 93 :
                    // InternalPipelineParser.g:6069:3: (enumLiteral_92= FailFast )
                    {
                    // InternalPipelineParser.g:6069:3: (enumLiteral_92= FailFast )
                    // InternalPipelineParser.g:6070:4: enumLiteral_92= FailFast
                    {
                    enumLiteral_92=(Token)match(input,FailFast,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_FAIL_FASTEnumLiteralDeclaration_92().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_92, grammarAccess.getPipelineKeywordAccess().getPPL_KW_FAIL_FASTEnumLiteralDeclaration_92());
                    			

                    }


                    }
                    break;
                case 94 :
                    // InternalPipelineParser.g:6077:3: (enumLiteral_93= MaxParallel )
                    {
                    // InternalPipelineParser.g:6077:3: (enumLiteral_93= MaxParallel )
                    // InternalPipelineParser.g:6078:4: enumLiteral_93= MaxParallel
                    {
                    enumLiteral_93=(Token)match(input,MaxParallel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_PARALLELEnumLiteralDeclaration_93().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_93, grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_PARALLELEnumLiteralDeclaration_93());
                    			

                    }


                    }
                    break;
                case 95 :
                    // InternalPipelineParser.g:6085:3: (enumLiteral_94= ContainerImage )
                    {
                    // InternalPipelineParser.g:6085:3: (enumLiteral_94= ContainerImage )
                    // InternalPipelineParser.g:6086:4: enumLiteral_94= ContainerImage
                    {
                    enumLiteral_94=(Token)match(input,ContainerImage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINER_IMAGEEnumLiteralDeclaration_94().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_94, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINER_IMAGEEnumLiteralDeclaration_94());
                    			

                    }


                    }
                    break;
                case 96 :
                    // InternalPipelineParser.g:6093:3: (enumLiteral_95= Credentials )
                    {
                    // InternalPipelineParser.g:6093:3: (enumLiteral_95= Credentials )
                    // InternalPipelineParser.g:6094:4: enumLiteral_95= Credentials
                    {
                    enumLiteral_95=(Token)match(input,Credentials,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CREDENTIALSEnumLiteralDeclaration_95().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_95, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CREDENTIALSEnumLiteralDeclaration_95());
                    			

                    }


                    }
                    break;
                case 97 :
                    // InternalPipelineParser.g:6101:3: (enumLiteral_96= Ports )
                    {
                    // InternalPipelineParser.g:6101:3: (enumLiteral_96= Ports )
                    // InternalPipelineParser.g:6102:4: enumLiteral_96= Ports
                    {
                    enumLiteral_96=(Token)match(input,Ports,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PORTSEnumLiteralDeclaration_96().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_96, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PORTSEnumLiteralDeclaration_96());
                    			

                    }


                    }
                    break;
                case 98 :
                    // InternalPipelineParser.g:6109:3: (enumLiteral_97= Inherit )
                    {
                    // InternalPipelineParser.g:6109:3: (enumLiteral_97= Inherit )
                    // InternalPipelineParser.g:6110:4: enumLiteral_97= Inherit
                    {
                    enumLiteral_97=(Token)match(input,Inherit,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_INHERITEnumLiteralDeclaration_97().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_97, grammarAccess.getPipelineKeywordAccess().getPPL_KW_INHERITEnumLiteralDeclaration_97());
                    			

                    }


                    }
                    break;
                case 99 :
                    // InternalPipelineParser.g:6117:3: (enumLiteral_98= Trigger )
                    {
                    // InternalPipelineParser.g:6117:3: (enumLiteral_98= Trigger )
                    // InternalPipelineParser.g:6118:4: enumLiteral_98= Trigger
                    {
                    enumLiteral_98=(Token)match(input,Trigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGEREnumLiteralDeclaration_98().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_98, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGEREnumLiteralDeclaration_98());
                    			

                    }


                    }
                    break;
                case 100 :
                    // InternalPipelineParser.g:6125:3: (enumLiteral_99= Template )
                    {
                    // InternalPipelineParser.g:6125:3: (enumLiteral_99= Template )
                    // InternalPipelineParser.g:6126:4: enumLiteral_99= Template
                    {
                    enumLiteral_99=(Token)match(input,Template,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TEMPLATEEnumLiteralDeclaration_99().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_99, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TEMPLATEEnumLiteralDeclaration_99());
                    			

                    }


                    }
                    break;
                case 101 :
                    // InternalPipelineParser.g:6133:3: (enumLiteral_100= Workspace )
                    {
                    // InternalPipelineParser.g:6133:3: (enumLiteral_100= Workspace )
                    // InternalPipelineParser.g:6134:4: enumLiteral_100= Workspace
                    {
                    enumLiteral_100=(Token)match(input,Workspace,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKSPACEEnumLiteralDeclaration_100().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_100, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKSPACEEnumLiteralDeclaration_100());
                    			

                    }


                    }
                    break;
                case 102 :
                    // InternalPipelineParser.g:6141:3: (enumLiteral_101= Pipeline )
                    {
                    // InternalPipelineParser.g:6141:3: (enumLiteral_101= Pipeline )
                    // InternalPipelineParser.g:6142:4: enumLiteral_101= Pipeline
                    {
                    enumLiteral_101=(Token)match(input,Pipeline,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINEEnumLiteralDeclaration_101().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_101, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINEEnumLiteralDeclaration_101());
                    			

                    }


                    }
                    break;
                case 103 :
                    // InternalPipelineParser.g:6149:3: (enumLiteral_102= TimeoutInMinutes )
                    {
                    // InternalPipelineParser.g:6149:3: (enumLiteral_102= TimeoutInMinutes )
                    // InternalPipelineParser.g:6150:4: enumLiteral_102= TimeoutInMinutes
                    {
                    enumLiteral_102=(Token)match(input,TimeoutInMinutes,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_IN_MINUTESEnumLiteralDeclaration_102().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_102, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_IN_MINUTESEnumLiteralDeclaration_102());
                    			

                    }


                    }
                    break;
                case 104 :
                    // InternalPipelineParser.g:6157:3: (enumLiteral_103= ContinueOnError )
                    {
                    // InternalPipelineParser.g:6157:3: (enumLiteral_103= ContinueOnError )
                    // InternalPipelineParser.g:6158:4: enumLiteral_103= ContinueOnError
                    {
                    enumLiteral_103=(Token)match(input,ContinueOnError,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERREnumLiteralDeclaration_103().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_103, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERREnumLiteralDeclaration_103());
                    			

                    }


                    }
                    break;
                case 105 :
                    // InternalPipelineParser.g:6165:3: (enumLiteral_104= ResourceType )
                    {
                    // InternalPipelineParser.g:6165:3: (enumLiteral_104= ResourceType )
                    // InternalPipelineParser.g:6166:4: enumLiteral_104= ResourceType
                    {
                    enumLiteral_104=(Token)match(input,ResourceType,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_TYPEEnumLiteralDeclaration_104().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_104, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_TYPEEnumLiteralDeclaration_104());
                    			

                    }


                    }
                    break;
                case 106 :
                    // InternalPipelineParser.g:6173:3: (enumLiteral_105= ResourceName )
                    {
                    // InternalPipelineParser.g:6173:3: (enumLiteral_105= ResourceName )
                    // InternalPipelineParser.g:6174:4: enumLiteral_105= ResourceName
                    {
                    enumLiteral_105=(Token)match(input,ResourceName,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_NAMEEnumLiteralDeclaration_105().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_105, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_NAMEEnumLiteralDeclaration_105());
                    			

                    }


                    }
                    break;
                case 107 :
                    // InternalPipelineParser.g:6181:3: (enumLiteral_106= Stages )
                    {
                    // InternalPipelineParser.g:6181:3: (enumLiteral_106= Stages )
                    // InternalPipelineParser.g:6182:4: enumLiteral_106= Stages
                    {
                    enumLiteral_106=(Token)match(input,Stages,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGESEnumLiteralDeclaration_106().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_106, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGESEnumLiteralDeclaration_106());
                    			

                    }


                    }
                    break;
                case 108 :
                    // InternalPipelineParser.g:6189:3: (enumLiteral_107= Only )
                    {
                    // InternalPipelineParser.g:6189:3: (enumLiteral_107= Only )
                    // InternalPipelineParser.g:6190:4: enumLiteral_107= Only
                    {
                    enumLiteral_107=(Token)match(input,Only,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONLYEnumLiteralDeclaration_107().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_107, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONLYEnumLiteralDeclaration_107());
                    			

                    }


                    }
                    break;
                case 109 :
                    // InternalPipelineParser.g:6197:3: (enumLiteral_108= Except )
                    {
                    // InternalPipelineParser.g:6197:3: (enumLiteral_108= Except )
                    // InternalPipelineParser.g:6198:4: enumLiteral_108= Except
                    {
                    enumLiteral_108=(Token)match(input,Except,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCEPTEnumLiteralDeclaration_108().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_108, grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCEPTEnumLiteralDeclaration_108());
                    			

                    }


                    }
                    break;
                case 110 :
                    // InternalPipelineParser.g:6205:3: (enumLiteral_109= Image )
                    {
                    // InternalPipelineParser.g:6205:3: (enumLiteral_109= Image )
                    // InternalPipelineParser.g:6206:4: enumLiteral_109= Image
                    {
                    enumLiteral_109=(Token)match(input,Image,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IMAGEEnumLiteralDeclaration_109().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_109, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IMAGEEnumLiteralDeclaration_109());
                    			

                    }


                    }
                    break;
                case 111 :
                    // InternalPipelineParser.g:6213:3: (enumLiteral_110= Cache )
                    {
                    // InternalPipelineParser.g:6213:3: (enumLiteral_110= Cache )
                    // InternalPipelineParser.g:6214:4: enumLiteral_110= Cache
                    {
                    enumLiteral_110=(Token)match(input,Cache,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHEEnumLiteralDeclaration_110().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_110, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHEEnumLiteralDeclaration_110());
                    			

                    }


                    }
                    break;
                case 112 :
                    // InternalPipelineParser.g:6221:3: (enumLiteral_111= Artifacts )
                    {
                    // InternalPipelineParser.g:6221:3: (enumLiteral_111= Artifacts )
                    // InternalPipelineParser.g:6222:4: enumLiteral_111= Artifacts
                    {
                    enumLiteral_111=(Token)match(input,Artifacts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ARTIFACTSEnumLiteralDeclaration_111().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_111, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ARTIFACTSEnumLiteralDeclaration_111());
                    			

                    }


                    }
                    break;
                case 113 :
                    // InternalPipelineParser.g:6229:3: (enumLiteral_112= Retries )
                    {
                    // InternalPipelineParser.g:6229:3: (enumLiteral_112= Retries )
                    // InternalPipelineParser.g:6230:4: enumLiteral_112= Retries
                    {
                    enumLiteral_112=(Token)match(input,Retries,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RETRIESEnumLiteralDeclaration_112().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_112, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RETRIESEnumLiteralDeclaration_112());
                    			

                    }


                    }
                    break;
                case 114 :
                    // InternalPipelineParser.g:6237:3: (enumLiteral_113= Rules )
                    {
                    // InternalPipelineParser.g:6237:3: (enumLiteral_113= Rules )
                    // InternalPipelineParser.g:6238:4: enumLiteral_113= Rules
                    {
                    enumLiteral_113=(Token)match(input,Rules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RULESEnumLiteralDeclaration_113().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_113, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RULESEnumLiteralDeclaration_113());
                    			

                    }


                    }
                    break;
                case 115 :
                    // InternalPipelineParser.g:6245:3: (enumLiteral_114= Before_script )
                    {
                    // InternalPipelineParser.g:6245:3: (enumLiteral_114= Before_script )
                    // InternalPipelineParser.g:6246:4: enumLiteral_114= Before_script
                    {
                    enumLiteral_114=(Token)match(input,Before_script,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BEFORE_SCRIPTEnumLiteralDeclaration_114().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_114, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BEFORE_SCRIPTEnumLiteralDeclaration_114());
                    			

                    }


                    }
                    break;
                case 116 :
                    // InternalPipelineParser.g:6253:3: (enumLiteral_115= After_script )
                    {
                    // InternalPipelineParser.g:6253:3: (enumLiteral_115= After_script )
                    // InternalPipelineParser.g:6254:4: enumLiteral_115= After_script
                    {
                    enumLiteral_115=(Token)match(input,After_script,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AFTER_SCRIPTEnumLiteralDeclaration_115().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_115, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AFTER_SCRIPTEnumLiteralDeclaration_115());
                    			

                    }


                    }
                    break;
                case 117 :
                    // InternalPipelineParser.g:6261:3: (enumLiteral_116= Timeout )
                    {
                    // InternalPipelineParser.g:6261:3: (enumLiteral_116= Timeout )
                    // InternalPipelineParser.g:6262:4: enumLiteral_116= Timeout
                    {
                    enumLiteral_116=(Token)match(input,Timeout,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTEnumLiteralDeclaration_116().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_116, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTEnumLiteralDeclaration_116());
                    			

                    }


                    }
                    break;
                case 118 :
                    // InternalPipelineParser.g:6269:3: (enumLiteral_117= When )
                    {
                    // InternalPipelineParser.g:6269:3: (enumLiteral_117= When )
                    // InternalPipelineParser.g:6270:4: enumLiteral_117= When
                    {
                    enumLiteral_117=(Token)match(input,When,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WHENEnumLiteralDeclaration_117().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_117, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WHENEnumLiteralDeclaration_117());
                    			

                    }


                    }
                    break;
                case 119 :
                    // InternalPipelineParser.g:6277:3: (enumLiteral_118= Allow_failure )
                    {
                    // InternalPipelineParser.g:6277:3: (enumLiteral_118= Allow_failure )
                    // InternalPipelineParser.g:6278:4: enumLiteral_118= Allow_failure
                    {
                    enumLiteral_118=(Token)match(input,Allow_failure,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALLOW_FAILUREEnumLiteralDeclaration_118().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_118, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALLOW_FAILUREEnumLiteralDeclaration_118());
                    			

                    }


                    }
                    break;
                case 120 :
                    // InternalPipelineParser.g:6285:3: (enumLiteral_119= Dependencies )
                    {
                    // InternalPipelineParser.g:6285:3: (enumLiteral_119= Dependencies )
                    // InternalPipelineParser.g:6286:4: enumLiteral_119= Dependencies
                    {
                    enumLiteral_119=(Token)match(input,Dependencies,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDENCIESEnumLiteralDeclaration_119().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_119, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDENCIESEnumLiteralDeclaration_119());
                    			

                    }


                    }
                    break;
                case 121 :
                    // InternalPipelineParser.g:6293:3: (enumLiteral_120= PullRequests )
                    {
                    // InternalPipelineParser.g:6293:3: (enumLiteral_120= PullRequests )
                    // InternalPipelineParser.g:6294:4: enumLiteral_120= PullRequests
                    {
                    enumLiteral_120=(Token)match(input,PullRequests,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTSEnumLiteralDeclaration_120().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_120, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTSEnumLiteralDeclaration_120());
                    			

                    }


                    }
                    break;
                case 122 :
                    // InternalPipelineParser.g:6301:3: (enumLiteral_121= Step )
                    {
                    // InternalPipelineParser.g:6301:3: (enumLiteral_121= Step )
                    // InternalPipelineParser.g:6302:4: enumLiteral_121= Step
                    {
                    enumLiteral_121=(Token)match(input,Step,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPEnumLiteralDeclaration_121().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_121, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPEnumLiteralDeclaration_121());
                    			

                    }


                    }
                    break;
                case 123 :
                    // InternalPipelineParser.g:6309:3: (enumLiteral_122= Definitions )
                    {
                    // InternalPipelineParser.g:6309:3: (enumLiteral_122= Definitions )
                    // InternalPipelineParser.g:6310:4: enumLiteral_122= Definitions
                    {
                    enumLiteral_122=(Token)match(input,Definitions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFINITIONSEnumLiteralDeclaration_122().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_122, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFINITIONSEnumLiteralDeclaration_122());
                    			

                    }


                    }
                    break;
                case 124 :
                    // InternalPipelineParser.g:6317:3: (enumLiteral_123= Caches )
                    {
                    // InternalPipelineParser.g:6317:3: (enumLiteral_123= Caches )
                    // InternalPipelineParser.g:6318:4: enumLiteral_123= Caches
                    {
                    enumLiteral_123=(Token)match(input,Caches,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHESEnumLiteralDeclaration_123().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_123, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHESEnumLiteralDeclaration_123());
                    			

                    }


                    }
                    break;
                case 125 :
                    // InternalPipelineParser.g:6325:3: (enumLiteral_124= Parallel )
                    {
                    // InternalPipelineParser.g:6325:3: (enumLiteral_124= Parallel )
                    // InternalPipelineParser.g:6326:4: enumLiteral_124= Parallel
                    {
                    enumLiteral_124=(Token)match(input,Parallel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARALLELEnumLiteralDeclaration_124().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_124, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARALLELEnumLiteralDeclaration_124());
                    			

                    }


                    }
                    break;
                case 126 :
                    // InternalPipelineParser.g:6333:3: (enumLiteral_125= Conditions )
                    {
                    // InternalPipelineParser.g:6333:3: (enumLiteral_125= Conditions )
                    // InternalPipelineParser.g:6334:4: enumLiteral_125= Conditions
                    {
                    enumLiteral_125=(Token)match(input,Conditions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONSEnumLiteralDeclaration_125().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_125, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONSEnumLiteralDeclaration_125());
                    			

                    }


                    }
                    break;
                case 127 :
                    // InternalPipelineParser.g:6341:3: (enumLiteral_126= MaxTime )
                    {
                    // InternalPipelineParser.g:6341:3: (enumLiteral_126= MaxTime )
                    // InternalPipelineParser.g:6342:4: enumLiteral_126= MaxTime
                    {
                    enumLiteral_126=(Token)match(input,MaxTime,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_TIMEEnumLiteralDeclaration_126().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_126, grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_TIMEEnumLiteralDeclaration_126());
                    			

                    }


                    }
                    break;
                case 128 :
                    // InternalPipelineParser.g:6349:3: (enumLiteral_127= Project )
                    {
                    // InternalPipelineParser.g:6349:3: (enumLiteral_127= Project )
                    // InternalPipelineParser.g:6350:4: enumLiteral_127= Project
                    {
                    enumLiteral_127=(Token)match(input,Project,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROJECTEnumLiteralDeclaration_127().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_127, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROJECTEnumLiteralDeclaration_127());
                    			

                    }


                    }
                    break;
                case 129 :
                    // InternalPipelineParser.g:6357:3: (enumLiteral_128= Plan )
                    {
                    // InternalPipelineParser.g:6357:3: (enumLiteral_128= Plan )
                    // InternalPipelineParser.g:6358:4: enumLiteral_128= Plan
                    {
                    enumLiteral_128=(Token)match(input,Plan,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PLANEnumLiteralDeclaration_128().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_128, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PLANEnumLiteralDeclaration_128());
                    			

                    }


                    }
                    break;
                case 130 :
                    // InternalPipelineParser.g:6365:3: (enumLiteral_129= Tasks )
                    {
                    // InternalPipelineParser.g:6365:3: (enumLiteral_129= Tasks )
                    // InternalPipelineParser.g:6366:4: enumLiteral_129= Tasks
                    {
                    enumLiteral_129=(Token)match(input,Tasks,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKSEnumLiteralDeclaration_129().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_129, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKSEnumLiteralDeclaration_129());
                    			

                    }


                    }
                    break;
                case 131 :
                    // InternalPipelineParser.g:6373:3: (enumLiteral_130= Requirements )
                    {
                    // InternalPipelineParser.g:6373:3: (enumLiteral_130= Requirements )
                    // InternalPipelineParser.g:6374:4: enumLiteral_130= Requirements
                    {
                    enumLiteral_130=(Token)match(input,Requirements,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREMENTSEnumLiteralDeclaration_130().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_130, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREMENTSEnumLiteralDeclaration_130());
                    			

                    }


                    }
                    break;
                case 132 :
                    // InternalPipelineParser.g:6381:3: (enumLiteral_131= Final )
                    {
                    // InternalPipelineParser.g:6381:3: (enumLiteral_131= Final )
                    // InternalPipelineParser.g:6382:4: enumLiteral_131= Final
                    {
                    enumLiteral_131=(Token)match(input,Final,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_FINALEnumLiteralDeclaration_131().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_131, grammarAccess.getPipelineKeywordAccess().getPPL_KW_FINALEnumLiteralDeclaration_131());
                    			

                    }


                    }
                    break;
                case 133 :
                    // InternalPipelineParser.g:6389:3: (enumLiteral_132= Jdk )
                    {
                    // InternalPipelineParser.g:6389:3: (enumLiteral_132= Jdk )
                    // InternalPipelineParser.g:6390:4: enumLiteral_132= Jdk
                    {
                    enumLiteral_132=(Token)match(input,Jdk,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_JDKEnumLiteralDeclaration_132().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_132, grammarAccess.getPipelineKeywordAccess().getPPL_KW_JDKEnumLiteralDeclaration_132());
                    			

                    }


                    }
                    break;
                case 134 :
                    // InternalPipelineParser.g:6397:3: (enumLiteral_133= Labels )
                    {
                    // InternalPipelineParser.g:6397:3: (enumLiteral_133= Labels )
                    // InternalPipelineParser.g:6398:4: enumLiteral_133= Labels
                    {
                    enumLiteral_133=(Token)match(input,Labels,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_LABELSEnumLiteralDeclaration_133().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_133, grammarAccess.getPipelineKeywordAccess().getPPL_KW_LABELSEnumLiteralDeclaration_133());
                    			

                    }


                    }
                    break;
                case 135 :
                    // InternalPipelineParser.g:6405:3: (enumLiteral_134= Repository )
                    {
                    // InternalPipelineParser.g:6405:3: (enumLiteral_134= Repository )
                    // InternalPipelineParser.g:6406:4: enumLiteral_134= Repository
                    {
                    enumLiteral_134=(Token)match(input,Repository,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORYEnumLiteralDeclaration_134().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_134, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORYEnumLiteralDeclaration_134());
                    			

                    }


                    }
                    break;
                case 136 :
                    // InternalPipelineParser.g:6413:3: (enumLiteral_135= Release )
                    {
                    // InternalPipelineParser.g:6413:3: (enumLiteral_135= Release )
                    // InternalPipelineParser.g:6414:4: enumLiteral_135= Release
                    {
                    enumLiteral_135=(Token)match(input,Release,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASEEnumLiteralDeclaration_135().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_135, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASEEnumLiteralDeclaration_135());
                    			

                    }


                    }
                    break;
                case 137 :
                    // InternalPipelineParser.g:6421:3: (enumLiteral_136= Docker )
                    {
                    // InternalPipelineParser.g:6421:3: (enumLiteral_136= Docker )
                    // InternalPipelineParser.g:6422:4: enumLiteral_136= Docker
                    {
                    enumLiteral_136=(Token)match(input,Docker,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOCKEREnumLiteralDeclaration_136().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_136, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOCKEREnumLiteralDeclaration_136());
                    			

                    }


                    }
                    break;
                case 138 :
                    // InternalPipelineParser.g:6429:3: (enumLiteral_137= Agent )
                    {
                    // InternalPipelineParser.g:6429:3: (enumLiteral_137= Agent )
                    // InternalPipelineParser.g:6430:4: enumLiteral_137= Agent
                    {
                    enumLiteral_137=(Token)match(input,Agent,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AGENTEnumLiteralDeclaration_137().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_137, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AGENTEnumLiteralDeclaration_137());
                    			

                    }


                    }
                    break;
                case 139 :
                    // InternalPipelineParser.g:6437:3: (enumLiteral_138= Queue )
                    {
                    // InternalPipelineParser.g:6437:3: (enumLiteral_138= Queue )
                    // InternalPipelineParser.g:6438:4: enumLiteral_138= Queue
                    {
                    enumLiteral_138=(Token)match(input,Queue,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEEnumLiteralDeclaration_138().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_138, grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEEnumLiteralDeclaration_138());
                    			

                    }


                    }
                    break;
                case 140 :
                    // InternalPipelineParser.g:6445:3: (enumLiteral_139= Snapshot )
                    {
                    // InternalPipelineParser.g:6445:3: (enumLiteral_139= Snapshot )
                    // InternalPipelineParser.g:6446:4: enumLiteral_139= Snapshot
                    {
                    enumLiteral_139=(Token)match(input,Snapshot,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SNAPSHOTEnumLiteralDeclaration_139().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_139, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SNAPSHOTEnumLiteralDeclaration_139());
                    			

                    }


                    }
                    break;
                case 141 :
                    // InternalPipelineParser.g:6453:3: (enumLiteral_140= Policy )
                    {
                    // InternalPipelineParser.g:6453:3: (enumLiteral_140= Policy )
                    // InternalPipelineParser.g:6454:4: enumLiteral_140= Policy
                    {
                    enumLiteral_140=(Token)match(input,Policy,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POLICYEnumLiteralDeclaration_140().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_140, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POLICYEnumLiteralDeclaration_140());
                    			

                    }


                    }
                    break;
                case 142 :
                    // InternalPipelineParser.g:6461:3: (enumLiteral_141= Approvals )
                    {
                    // InternalPipelineParser.g:6461:3: (enumLiteral_141= Approvals )
                    // InternalPipelineParser.g:6462:4: enumLiteral_141= Approvals
                    {
                    enumLiteral_141=(Token)match(input,Approvals,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_APPROVALSEnumLiteralDeclaration_141().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_141, grammarAccess.getPipelineKeywordAccess().getPPL_KW_APPROVALSEnumLiteralDeclaration_141());
                    			

                    }


                    }
                    break;
                case 143 :
                    // InternalPipelineParser.g:6469:3: (enumLiteral_142= PreBuild )
                    {
                    // InternalPipelineParser.g:6469:3: (enumLiteral_142= PreBuild )
                    // InternalPipelineParser.g:6470:4: enumLiteral_142= PreBuild
                    {
                    enumLiteral_142=(Token)match(input,PreBuild,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PREBUILDEnumLiteralDeclaration_142().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_142, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PREBUILDEnumLiteralDeclaration_142());
                    			

                    }


                    }
                    break;
                case 144 :
                    // InternalPipelineParser.g:6477:3: (enumLiteral_143= PostBuild )
                    {
                    // InternalPipelineParser.g:6477:3: (enumLiteral_143= PostBuild )
                    // InternalPipelineParser.g:6478:4: enumLiteral_143= PostBuild
                    {
                    enumLiteral_143=(Token)match(input,PostBuild,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POSTBUILDEnumLiteralDeclaration_143().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_143, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POSTBUILDEnumLiteralDeclaration_143());
                    			

                    }


                    }
                    break;
                case 145 :
                    // InternalPipelineParser.g:6485:3: (enumLiteral_144= Ssh )
                    {
                    // InternalPipelineParser.g:6485:3: (enumLiteral_144= Ssh )
                    // InternalPipelineParser.g:6486:4: enumLiteral_144= Ssh
                    {
                    enumLiteral_144=(Token)match(input,Ssh,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SSHEnumLiteralDeclaration_144().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_144, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SSHEnumLiteralDeclaration_144());
                    			

                    }


                    }
                    break;
                case 146 :
                    // InternalPipelineParser.g:6493:3: (enumLiteral_145= Auth )
                    {
                    // InternalPipelineParser.g:6493:3: (enumLiteral_145= Auth )
                    // InternalPipelineParser.g:6494:4: enumLiteral_145= Auth
                    {
                    enumLiteral_145=(Token)match(input,Auth,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTHEnumLiteralDeclaration_145().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_145, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTHEnumLiteralDeclaration_145());
                    			

                    }


                    }
                    break;
                case 147 :
                    // InternalPipelineParser.g:6501:3: (enumLiteral_146= Storage )
                    {
                    // InternalPipelineParser.g:6501:3: (enumLiteral_146= Storage )
                    // InternalPipelineParser.g:6502:4: enumLiteral_146= Storage
                    {
                    enumLiteral_146=(Token)match(input,Storage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STORAGEEnumLiteralDeclaration_146().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_146, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STORAGEEnumLiteralDeclaration_146());
                    			

                    }


                    }
                    break;
                case 148 :
                    // InternalPipelineParser.g:6509:3: (enumLiteral_147= Endpoints )
                    {
                    // InternalPipelineParser.g:6509:3: (enumLiteral_147= Endpoints )
                    // InternalPipelineParser.g:6510:4: enumLiteral_147= Endpoints
                    {
                    enumLiteral_147=(Token)match(input,Endpoints,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENDPOINTSEnumLiteralDeclaration_147().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_147, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENDPOINTSEnumLiteralDeclaration_147());
                    			

                    }


                    }
                    break;
                case 149 :
                    // InternalPipelineParser.g:6517:3: (enumLiteral_148= Command )
                    {
                    // InternalPipelineParser.g:6517:3: (enumLiteral_148= Command )
                    // InternalPipelineParser.g:6518:4: enumLiteral_148= Command
                    {
                    enumLiteral_148=(Token)match(input,Command,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_COMMANDEnumLiteralDeclaration_148().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_148, grammarAccess.getPipelineKeywordAccess().getPPL_KW_COMMANDEnumLiteralDeclaration_148());
                    			

                    }


                    }
                    break;
                case 150 :
                    // InternalPipelineParser.g:6525:3: (enumLiteral_149= Provisioner )
                    {
                    // InternalPipelineParser.g:6525:3: (enumLiteral_149= Provisioner )
                    // InternalPipelineParser.g:6526:4: enumLiteral_149= Provisioner
                    {
                    enumLiteral_149=(Token)match(input,Provisioner,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROVISIONEREnumLiteralDeclaration_149().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_149, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROVISIONEREnumLiteralDeclaration_149());
                    			

                    }


                    }
                    break;
                case 151 :
                    // InternalPipelineParser.g:6533:3: (enumLiteral_150= TriggerRules )
                    {
                    // InternalPipelineParser.g:6533:3: (enumLiteral_150= TriggerRules )
                    // InternalPipelineParser.g:6534:4: enumLiteral_150= TriggerRules
                    {
                    enumLiteral_150=(Token)match(input,TriggerRules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGER_RULESEnumLiteralDeclaration_150().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_150, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGER_RULESEnumLiteralDeclaration_150());
                    			

                    }


                    }
                    break;
                case 152 :
                    // InternalPipelineParser.g:6541:3: (enumLiteral_151= RunPolicy )
                    {
                    // InternalPipelineParser.g:6541:3: (enumLiteral_151= RunPolicy )
                    // InternalPipelineParser.g:6542:4: enumLiteral_151= RunPolicy
                    {
                    enumLiteral_151=(Token)match(input,RunPolicy,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_POLICYEnumLiteralDeclaration_151().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_151, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_POLICYEnumLiteralDeclaration_151());
                    			

                    }


                    }
                    break;
                case 153 :
                    // InternalPipelineParser.g:6549:3: (enumLiteral_152= Queued )
                    {
                    // InternalPipelineParser.g:6549:3: (enumLiteral_152= Queued )
                    // InternalPipelineParser.g:6550:4: enumLiteral_152= Queued
                    {
                    enumLiteral_152=(Token)match(input,Queued,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEDEnumLiteralDeclaration_152().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_152, grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEDEnumLiteralDeclaration_152());
                    			

                    }


                    }
                    break;
                case 154 :
                    // InternalPipelineParser.g:6557:3: (enumLiteral_153= Notifications )
                    {
                    // InternalPipelineParser.g:6557:3: (enumLiteral_153= Notifications )
                    // InternalPipelineParser.g:6558:4: enumLiteral_153= Notifications
                    {
                    enumLiteral_153=(Token)match(input,Notifications,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_NOTIFICATIONSEnumLiteralDeclaration_153().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_153, grammarAccess.getPipelineKeywordAccess().getPPL_KW_NOTIFICATIONSEnumLiteralDeclaration_153());
                    			

                    }


                    }
                    break;
                case 155 :
                    // InternalPipelineParser.g:6565:3: (enumLiteral_154= DeployTrigger )
                    {
                    // InternalPipelineParser.g:6565:3: (enumLiteral_154= DeployTrigger )
                    // InternalPipelineParser.g:6566:4: enumLiteral_154= DeployTrigger
                    {
                    enumLiteral_154=(Token)match(input,DeployTrigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOY_TRIGGEREnumLiteralDeclaration_154().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_154, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOY_TRIGGEREnumLiteralDeclaration_154());
                    			

                    }


                    }
                    break;
                case 156 :
                    // InternalPipelineParser.g:6573:3: (enumLiteral_155= ReleaseTrigger )
                    {
                    // InternalPipelineParser.g:6573:3: (enumLiteral_155= ReleaseTrigger )
                    // InternalPipelineParser.g:6574:4: enumLiteral_155= ReleaseTrigger
                    {
                    enumLiteral_155=(Token)match(input,ReleaseTrigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASE_TRIGGEREnumLiteralDeclaration_155().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_155, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASE_TRIGGEREnumLiteralDeclaration_155());
                    			

                    }


                    }
                    break;
                case 157 :
                    // InternalPipelineParser.g:6581:3: (enumLiteral_156= LockBehavior )
                    {
                    // InternalPipelineParser.g:6581:3: (enumLiteral_156= LockBehavior )
                    // InternalPipelineParser.g:6582:4: enumLiteral_156= LockBehavior
                    {
                    enumLiteral_156=(Token)match(input,LockBehavior,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_LOCK_BEHAVIOREnumLiteralDeclaration_156().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_156, grammarAccess.getPipelineKeywordAccess().getPPL_KW_LOCK_BEHAVIOREnumLiteralDeclaration_156());
                    			

                    }


                    }
                    break;
                case 158 :
                    // InternalPipelineParser.g:6589:3: (enumLiteral_157= ReviewStage )
                    {
                    // InternalPipelineParser.g:6589:3: (enumLiteral_157= ReviewStage )
                    // InternalPipelineParser.g:6590:4: enumLiteral_157= ReviewStage
                    {
                    enumLiteral_157=(Token)match(input,ReviewStage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REVIEW_STAGEEnumLiteralDeclaration_157().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_157, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REVIEW_STAGEEnumLiteralDeclaration_157());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePipelineKeyword"

    // Delegated rules


    protected DFA30 dfa30 = new DFA30(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA124 dfa124 = new DFA124(this);
    static final String dfa_1s = "\16\uffff";
    static final String dfa_2s = "\1\1\15\uffff";
    static final String dfa_3s = "\1\4\15\uffff";
    static final String dfa_4s = "\1\u00e7\15\uffff";
    static final String dfa_5s = "\1\uffff\1\15\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String dfa_6s = "\1\0\15\uffff}>";
    static final String[] dfa_7s = {
            "\7\1\1\uffff\1\1\2\uffff\3\1\1\4\1\1\6\uffff\2\1\1\uffff\1\1\3\uffff\4\1\4\uffff\1\1\2\uffff\2\1\5\uffff\2\1\1\7\10\uffff\1\6\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\14\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\5\uffff\2\1\1\uffff\1\11\1\uffff\2\1\1\13\3\uffff\1\1\2\uffff\1\4\12\uffff\1\3\1\1\10\uffff\1\1\1\uffff\1\1\2\uffff\1\15\1\uffff\1\15\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\12\5\uffff\3\1\1\uffff\3\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\2\1\6\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\3\uffff\3\1\1\2\1\uffff\1\1\1\uffff\1\10\1\1\3\uffff\1\1\6\uffff\1\5\10\uffff\2\1\13\uffff\1\1\2\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()* loopback of 329:5: ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( (lv_defaultShellValue_11_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( (lv_defaultWDValue_13_0= RULE_STRING ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_33= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_35= RULE_BEGIN (otherlv_36= Name ( (lv_vmName_37_0= RULE_ID ) ) ) (otherlv_38= VmImage ( ( (lv_vmImage_39_1= RULE_ID | lv_vmImage_39_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_40= Demands ( ( (lv_vmDemands_41_1= ruleAnyData | lv_vmDemands_41_2= ruleHyphenValues ) ) ) )? this_END_42= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_43= Resources (this_BEGIN_44= RULE_BEGIN ( (lv_resources_45_0= ruleResource ) )* this_END_46= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_47= Version ( (lv_version_48_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= Variables ( (lv_pplVariables_50_0= ruleVariable ) )* ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Parameters (otherlv_52= HyphenMinus ( (lv_parameterValues_53_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_54_1= Extends | lv_extendOrInclude_54_2= Include ) ) ) (this_BEGIN_55= RULE_BEGIN ( (lv_extendedParameters_56_0= ruleParameterValue ) )+ this_END_57= RULE_END ) ) ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_0 = input.LA(1);

                         
                        int index30_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA30_0==EOF||(LA30_0>=Pull_request_review_comment && LA30_0<=Pull_request_target)||LA30_0==Repository_dispatch||(LA30_0>=Deployment_status && LA30_0<=Workflow_dispatch)||LA30_0==Registry_package||(LA30_0>=Merge_requests && LA30_0<=Project_column)||LA30_0==WorkflowRules||(LA30_0>=Issue_comment && LA30_0<=Workflow_call)||LA30_0==LockBehavior||(LA30_0>=Project_card && LA30_0<=Pull_request)||(LA30_0>=Workflow_run && LA30_0<=Check_suite)||(LA30_0>=AutoCancel && LA30_0<=Conditions)||LA30_0==Deployment||LA30_0==Page_build||LA30_0==PlanBranch||LA30_0==Repository||(LA30_0>=Bitbucket && LA30_0<=Check_run)||(LA30_0>=Milestone && LA30_0<=Pipelines)||(LA30_0>=Scheduled && LA30_0<=Schedules)||LA30_0==Branches||LA30_0==Schedule||LA30_0==Changes||LA30_0==Default||LA30_0==Project||LA30_0==Release||LA30_0==Trigger||(LA30_0>=Create && LA30_0<=Delete)||(LA30_0>=Drafts && LA30_0<=Gollum)||LA30_0==Issues||LA30_0==Public||LA30_0==Remote||(LA30_0>=Stages && LA30_0<=Status)||LA30_0==Label||LA30_0==Paths||LA30_0==Rules||LA30_0==Watch||(LA30_0>=Cron && LA30_0<=Jobs)||LA30_0==Only||LA30_0==Push||LA30_0==Tags||(LA30_0>=On && LA30_0<=Pr)||LA30_0==RULE_ID) ) {s = 1;}

                        else if ( LA30_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA30_0 == RunName && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( ( LA30_0 == WorkingDirectory || LA30_0 == Defaults || LA30_0 == RULE_END ) && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA30_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA30_0 == Permissions && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA30_0 == Concurrency && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA30_0 == Pool && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA30_0 == Resources && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7) ) {s = 9;}

                        else if ( LA30_0 == Version && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8) ) {s = 10;}

                        else if ( LA30_0 == Variables && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9) ) {s = 11;}

                        else if ( LA30_0 == Parameters && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10) ) {s = 12;}

                        else if ( ( LA30_0 == Extends || LA30_0 == Include ) && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11) ) {s = 13;}

                         
                        input.seek(index30_0);
                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_8s = "\15\uffff";
    static final String dfa_9s = "\1\25\14\uffff";
    static final String dfa_10s = "\1\u00e7\14\uffff";
    static final String dfa_11s = "\1\uffff\1\14\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String dfa_12s = "\1\0\14\uffff}>";
    static final String[] dfa_13s = {
            "\1\10\25\uffff\1\12\25\uffff\1\14\1\4\33\uffff\1\5\2\uffff\1\7\65\uffff\1\6\16\uffff\1\3\6\uffff\1\11\7\uffff\1\2\21\uffff\1\13\37\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "()* loopback of 1615:8: ( ({...}? => ( ({...}? => (otherlv_6= Types ( (lv_activities_7_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_8= Batch ( (lv_batch_9_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_10= AutoCancel ( (lv_autoCancel_11_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_12= Workflows ( ( (lv_workflows_13_1= ruleArrayList | lv_workflows_13_2= ruleHyphenValues | lv_workflows_13_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_14= Drafts ( (lv_drafts_15_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Branches ( ( ( (lv_includedBranches_17_0= ruleBranch ) )* | (otherlv_18= LeftSquareBracket ( (lv_includedBranches_19_0= ruleBranch ) ) (otherlv_20= Comma ( (lv_includedBranches_21_0= ruleBranch ) ) )* otherlv_22= RightSquareBracket ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_includedBranches_24_0= ruleBranch ) )* (otherlv_25= Include ( (lv_includedBranches_26_0= ruleBranch ) )* )? (otherlv_27= Exclude ( (lv_excludedBranches_28_0= ruleBranch ) )* )? this_END_29= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_30= BranchesIgnore ( ( ( (lv_excludedBranches_31_0= ruleBranch ) )* | (otherlv_32= LeftSquareBracket ( (lv_excludedBranches_33_0= ruleBranch ) ) (otherlv_34= Comma ( (lv_excludedBranches_35_0= ruleBranch ) ) )* otherlv_36= RightSquareBracket ) ) | (this_BEGIN_37= RULE_BEGIN ( (lv_excludedBranches_38_0= ruleBranch ) )* this_END_39= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_40= Paths ( (lv_includedPaths_41_0= ruleHyphenValues ) )? (this_BEGIN_42= RULE_BEGIN (otherlv_43= Include ( (lv_includedPaths_44_0= ruleHyphenValues ) ) )? (otherlv_45= Exclude ( (lv_excludedPaths_46_0= ruleHyphenValues ) ) )? this_END_47= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= PathsIgnore ( (lv_excludedPaths_49_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Tags ( (lv_includedTags_51_0= ruleHyphenValues ) )? (this_BEGIN_52= RULE_BEGIN (otherlv_53= Include ( (lv_includedTags_54_0= ruleHyphenValues ) ) )? (otherlv_55= Exclude ( (lv_excludedTags_56_0= ruleHyphenValues ) ) )? this_END_57= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_58= TagsIgnore ( (lv_excludedTags_59_0= ruleHyphenValues ) ) ) ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA67_0 = input.LA(1);

                         
                        int index67_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA67_0==RULE_END) ) {s = 1;}

                        else if ( LA67_0 == Types && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 0) ) {s = 2;}

                        else if ( LA67_0 == Batch && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 1) ) {s = 3;}

                        else if ( LA67_0 == AutoCancel && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 2) ) {s = 4;}

                        else if ( LA67_0 == Workflows && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 3) ) {s = 5;}

                        else if ( LA67_0 == Drafts && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 4) ) {s = 6;}

                        else if ( LA67_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 5) ) {s = 7;}

                        else if ( LA67_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 6) ) {s = 8;}

                        else if ( LA67_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 7) ) {s = 9;}

                        else if ( LA67_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 8) ) {s = 10;}

                        else if ( LA67_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 9) ) {s = 11;}

                        else if ( LA67_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_2_1(), 10) ) {s = 12;}

                         
                        input.seek(index67_0);
                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 67, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\1\14\1\uffff\1\u00d1\1\u00db\2\uffff\1\u00de\1\14\1\u00da\1\14\1\u00e0\1\uffff\1\u00da";
    static final String dfa_15s = "\1\u00e7\1\uffff\2\u00ea\2\uffff\2\u00ea\1\u00de\1\u00e7\1\u00ea\1\uffff\1\u00de";
    static final String dfa_16s = "\1\uffff\1\2\2\uffff\2\1\5\uffff\1\1\1\uffff";
    static final String dfa_17s = "\15\uffff}>";
    static final String[] dfa_18s = {
            "\3\4\2\uffff\2\4\1\uffff\4\4\1\uffff\1\4\2\uffff\1\4\1\uffff\3\4\1\uffff\4\4\1\uffff\5\4\1\uffff\7\4\1\uffff\3\4\1\uffff\1\4\1\uffff\14\4\1\uffff\2\4\1\uffff\4\4\2\uffff\2\4\1\2\2\4\1\uffff\4\4\1\uffff\4\4\1\uffff\2\4\1\uffff\2\4\1\uffff\5\4\1\uffff\6\4\1\uffff\4\4\2\uffff\30\4\4\uffff\3\4\1\uffff\1\4\1\uffff\3\4\1\uffff\1\4\1\uffff\2\4\1\uffff\6\4\1\uffff\1\1\6\4\1\3\3\4\2\uffff\3\4\2\uffff\1\4\1\uffff\5\4\1\uffff\7\4\1\uffff\3\4\2\uffff\5\4\10\uffff\1\4\3\uffff\1\4\2\uffff\1\1",
            "",
            "\1\1\11\uffff\1\5\1\uffff\1\6\2\uffff\2\5\2\4\3\5\3\uffff\1\4",
            "\1\7\1\uffff\1\5\2\uffff\7\5\1\1\2\uffff\1\5",
            "",
            "",
            "\1\5\1\uffff\4\5\1\10\1\5\4\uffff\1\5",
            "\3\1\2\uffff\2\1\1\uffff\4\1\1\uffff\1\1\2\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\uffff\5\1\1\uffff\7\1\1\uffff\3\1\1\uffff\1\1\1\uffff\14\1\1\uffff\2\1\1\uffff\4\1\2\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1\uffff\2\1\1\uffff\2\1\1\uffff\5\1\1\uffff\6\1\1\uffff\4\1\2\uffff\30\1\4\uffff\3\1\1\uffff\1\1\1\uffff\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\6\1\2\uffff\12\1\2\uffff\3\1\2\uffff\1\1\1\uffff\5\1\1\uffff\7\1\1\uffff\3\1\2\uffff\5\1\10\uffff\4\5\1\11\1\5\4\uffff\1\5",
            "\1\12\3\uffff\1\13",
            "\3\13\2\uffff\2\13\1\uffff\4\13\1\uffff\1\13\2\uffff\1\13\1\uffff\3\13\1\uffff\4\13\1\uffff\5\13\1\uffff\7\13\1\uffff\3\13\1\uffff\1\13\1\uffff\14\13\1\uffff\2\13\1\uffff\4\13\2\uffff\5\13\1\uffff\4\13\1\uffff\4\13\1\uffff\2\13\1\uffff\2\13\1\uffff\5\13\1\uffff\6\13\1\uffff\4\13\2\uffff\30\13\4\uffff\3\13\1\uffff\1\13\1\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\6\13\1\uffff\13\13\2\uffff\3\13\2\uffff\1\4\1\uffff\5\13\1\uffff\7\13\1\uffff\3\13\2\uffff\5\13\3\uffff\1\13\1\1\3\uffff\1\13\3\uffff\1\13\1\uffff\2\13",
            "\4\13\1\14\1\13\4\uffff\1\13",
            "",
            "\1\12\3\uffff\1\13"
    };
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "()* loopback of 3486:4: ( (lv_jobParameterValues_6_0= ruleParameterValue ) )*";
        }
    }
    static final String dfa_19s = "\24\uffff";
    static final String dfa_20s = "\2\uffff\12\22\10\uffff";
    static final String dfa_21s = "\1\14\1\uffff\12\u00d9\10\uffff";
    static final String dfa_22s = "\1\u00e4\1\uffff\12\u00ea\10\uffff";
    static final String dfa_23s = "\1\uffff\1\1\12\uffff\7\1\1\2";
    static final String dfa_24s = "\24\uffff}>";
    static final String[] dfa_25s = {
            "\3\1\2\uffff\2\1\1\uffff\4\1\1\uffff\1\1\2\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\uffff\5\1\1\uffff\7\1\1\uffff\3\1\1\uffff\1\1\1\uffff\13\1\1\11\1\uffff\2\1\1\uffff\1\6\3\1\2\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1\uffff\1\1\1\7\1\uffff\1\1\1\10\1\uffff\5\1\1\uffff\6\1\1\uffff\4\1\2\uffff\13\1\1\12\14\1\4\uffff\3\1\1\uffff\1\1\1\uffff\3\1\1\uffff\1\1\1\uffff\1\3\1\1\1\uffff\6\1\2\uffff\12\1\2\uffff\1\1\1\4\1\1\2\uffff\1\1\1\uffff\4\1\1\5\1\uffff\2\1\1\13\4\1\1\uffff\3\1\2\uffff\1\2\4\1\14\uffff\1\1",
            "",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[][] dfa_25 = unpackEncodedStringArray(dfa_25s);

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_19;
            this.eof = dfa_20;
            this.min = dfa_21;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_25;
        }
        public String getDescription() {
            return "3652:3: (this_Action_1= ruleAction | this_Script_2= ruleScript )";
        }
    }
    static final String dfa_26s = "\1\14\1\uffff\12\14\10\uffff";
    static final String[] dfa_27s = {
            "\3\1\2\uffff\2\1\1\uffff\4\1\1\uffff\1\1\2\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\uffff\5\1\1\uffff\7\1\1\uffff\3\1\1\uffff\1\1\1\uffff\13\1\1\11\1\uffff\2\1\1\uffff\1\6\3\1\2\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1\uffff\1\1\1\7\1\uffff\1\1\1\10\1\uffff\5\1\1\uffff\6\1\1\uffff\4\1\2\uffff\13\1\1\12\14\1\4\uffff\3\1\1\uffff\1\1\1\uffff\3\1\1\uffff\1\1\1\uffff\1\3\1\1\1\uffff\6\1\2\uffff\12\1\2\uffff\1\1\1\4\1\1\2\uffff\1\1\1\uffff\4\1\1\5\1\uffff\2\1\1\13\4\1\1\uffff\3\1\2\uffff\1\2\4\1\14\uffff\1\1",
            "",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\2\22\1\uffff\6\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_26 = DFA.unpackEncodedStringToUnsignedChars(dfa_26s);
    static final short[][] dfa_27 = unpackEncodedStringArray(dfa_27s);

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_26;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_27;
        }
        public String getDescription() {
            return "3876:6: (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript )";
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_26;
            this.max = dfa_22;
            this.accept = dfa_23;
            this.special = dfa_24;
            this.transition = dfa_27;
        }
        public String getDescription() {
            return "4055:6: (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript )";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000001001800089L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000005021000089L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x188128128BB81050L,0x0000001001000089L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x188128128BB81050L,0x0000009001000089L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000001021000089L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000800000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000044000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000001001000089L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004008000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000049008000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4000000000002001L,0x0000008000004004L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4002000000002001L,0x0000008000004004L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009008000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001008000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0500004801000800L,0x0108014800000000L,0x0000000008040000L,0x0000008000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x4020000000040002L,0x5000801022000100L,0x4000000000006001L,0x000000C000004004L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041000000000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x4020000000040002L,0x5000801022000100L,0x4000000000002001L,0x000000C000004004L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000047F08000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000400000000000L,0x0080010000800010L,0x0000000000010000L,0x0000008000000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4000000000002001L,0x000000C008004004L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4000000000002001L,0x0000008008004004L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7ED75C3FFFFL,0x0000001100F9DFDFL});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7ED75C3FFFFL,0x0000009100F9DFDFL});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000043F00000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000020000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008008000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000045008000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000045018000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x0000008000000080L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000208L,0x0000047F28000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000047F28000000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x000004D028000080L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x0000049008000080L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041008000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000001L,0x0000049008000000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000049008000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x000004FF08000080L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x000000C000000080L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000001L,0x0000008000000000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000208L,0x000004FF28000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0800000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000008000L,0x0000008000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x2000000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000004000000004L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x2800000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000004000000004L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x000004FF00000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x2000000000000002L,0x10000000200A0000L,0x2000000000004000L,0x000000C000000004L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x2000000000000002L,0x10000000200A0000L,0x2000000000000000L,0x000000C000000004L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x2000000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000004008000004L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x2000000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000005000000004L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FF7ED75C3FFFFL,0x0000009100F9DFDFL});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001020020000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7ED75C3FFFFL,0x0000001000F9DFDFL});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000043F82000000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7ED75C3FFFFL,0x0000009000F9DFDFL});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000047F08000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7ED75C3FFFFL,0x0000009108F9DFDFL});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000062000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000003500000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000043F40000000L});

}
