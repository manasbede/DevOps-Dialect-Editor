package ca.mcgill.devops.pipeline.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

@SuppressWarnings("all")
public class InternalPipelineParser extends AbstractInternalAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Pull_request_review_comment", "BitbucketBranchCreated", "BitbucketBranchDeleted", "BitbucketTagCreated", "BitbucketTagDeleted", "Pull_request_review", "Pull_request_target", "RepositoryProjects", "Repository_dispatch", "CancelInProgress", "ContinueOnError_1", "Deployment_status", "Pipeline_schedule", "Workflow_dispatch", "WorkingDirectory", "Registry_package", "TimeoutInMinutes", "BranchesIgnore", "ContainerImage", "ContinueOnError", "SecurityEvents", "TimeoutMinutes", "Merge_requests", "Project_column", "ReleaseTrigger", "WorkflowRules", "Allow_failure", "Before_script", "DeployTrigger", "Issue_comment", "Notifications", "PullRequests", "Workflow_call", "After_script", "Attestations", "DefaultsRun", "Dependencies", "LockBehavior", "MaxParallel", "PathsIgnore", "Project_card", "Pull_request", "Repositories", "Requirements", "ResourceName", "ResourceType", "TriggerRules", "Workflow_run", "Check_suite", "Concurrency", "Credentials", "Definitions", "Deployments", "Description", "Discussions", "DisplayName", "Environment", "IsSkippable", "Permissions", "Provisioner", "ReviewStage", "TagsIgnore", "AutoCancel", "Conditions", "Containers", "Deployment", "GetPackage", "Page_build", "Parameters", "Permission", "PlanBranch", "Powershell", "Repository", "Approvals", "Artifacts", "Bitbucket", "Check_run", "Condition", "Container", "DependsOn", "Endpoints", "FailFast", "Milestone", "Pipelines", "PostBuild", "Resources", "RunPolicy", "Scheduled", "Schedules", "Variables", "Workflows", "Workspace", "WriteAll", "Branches", "Checkout", "Contents", "Defaults", "Download", "IdToken", "MaxTime", "Packages", "Parallel", "Pipeline", "PreBuild", "ReadAll", "Readonly", "Required", "RunName", "Schedule", "Services", "Snapshot", "Statuses", "Strategy", "Template", "Timeouts", "Webhooks", "Actions", "Changes", "Command", "Default", "Demands", "Exclude", "Extends", "Filters", "Include", "Inherit", "Options", "Outputs", "Project", "Publish", "Release", "Retries", "RunsOn", "Secrets", "Storage", "Timeout", "Trigger", "Version", "VmImage", "Always", "Builds", "Caches", "Checks", "Create", "Custom", "Delete", "Docker", "Drafts", "Except", "Gollum", "Inputs", "Issues", "Labels", "Matrix", "Policy", "Public", "Queued", "Remote", "Script", "Stages", "Status", "Agent", "Batch", "Cache", "Final", "Group", "Image", "Label", "Needs", "Paths", "Ports", "Queue", "Rules", "Shell", "Stage", "Steps", "Tasks", "Types", "Value", "Watch", "Write_1", "Auth", "Bash", "Cron", "Fork", "Jobs", "Name", "None_1", "Only", "Plan", "Pool", "Push", "Pwsh", "Read_1", "Step", "Tags", "Task", "Type", "Uses", "When", "With", "Write", "Env", "Jdk", "Job", "None", "Read", "Run", "Ssh", "Id", "If", "On", "Pr", "GreaterThanSignHyphenMinus", "Comma", "HyphenMinus", "Colon", "LeftSquareBracket", "RightSquareBracket", "VerticalLine", "RULE_COMPLEX_EXPRESSION", "RULE_HEX_INT", "RULE_INT", "RULE_FLOAT_LITERAL", "RULE_ID", "RULE_VERSION", "RULE_BEGIN", "RULE_END", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_STRING", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int Delete=149;
    public static final int Pipelines=87;
    public static final int Needs=172;
    public static final int RunName=111;
    public static final int Before_script=31;
    public static final int Checkout=98;
    public static final int Docker=150;
    public static final int Concurrency=53;
    public static final int TagsIgnore=65;
    public static final int Permission=73;
    public static final int Stage=178;
    public static final int Pool=194;
    public static final int Tags=199;
    public static final int Status=164;
    public static final int Pr=216;
    public static final int Parameters=72;
    public static final int BitbucketTagCreated=7;
    public static final int RULE_ID=228;
    public static final int ContinueOnError_1=14;
    public static final int Artifacts=78;
    public static final int Project=132;
    public static final int Defaults=100;
    public static final int Statuses=115;
    public static final int RULE_INT=226;
    public static final int Outputs=131;
    public static final int Bitbucket=79;
    public static final int Repositories=46;
    public static final int Group=169;
    public static final int Read_1=197;
    public static final int Powershell=75;
    public static final int SecurityEvents=24;
    public static final int Jdk=207;
    public static final int Allow_failure=30;
    public static final int Readonly=109;
    public static final int Jobs=189;
    public static final int Registry_package=19;
    public static final int Gollum=153;
    public static final int Watch=183;
    public static final int RULE_COMPLEX_EXPRESSION=224;
    public static final int Paths=173;
    public static final int Download=101;
    public static final int Queue=175;
    public static final int IdToken=102;
    public static final int None_1=191;
    public static final int Definitions=55;
    public static final int Provisioner=63;
    public static final int ResourceType=49;
    public static final int Run=211;
    public static final int LockBehavior=41;
    public static final int Rules=176;
    public static final int PlanBranch=74;
    public static final int Services=113;
    public static final int Repository=76;
    public static final int Issue_comment=33;
    public static final int Credentials=54;
    public static final int Types=181;
    public static final int RULE_BEGIN=230;
    public static final int Discussions=58;
    public static final int Label=171;
    public static final int Deployment=69;
    public static final int Caches=145;
    public static final int AutoCancel=66;
    public static final int Cron=187;
    public static final int Name=190;
    public static final int Container=82;
    public static final int Version=141;
    public static final int BitbucketBranchDeleted=6;
    public static final int Permissions=62;
    public static final int Pwsh=196;
    public static final int Dependencies=40;
    public static final int WorkflowRules=29;
    public static final int Builds=144;
    public static final int DeployTrigger=32;
    public static final int Workflows=94;
    public static final int Milestone=86;
    public static final int WriteAll=96;
    public static final int PostBuild=88;
    public static final int BitbucketBranchCreated=5;
    public static final int Storage=138;
    public static final int GetPackage=70;
    public static final int FailFast=85;
    public static final int Checks=146;
    public static final int PreBuild=107;
    public static final int Cache=167;
    public static final int Options=130;
    public static final int RULE_END=231;
    public static final int Fork=188;
    public static final int Pull_request_target=10;
    public static final int Demands=124;
    public static final int BitbucketTagDeleted=8;
    public static final int Step=198;
    public static final int Env=206;
    public static final int With=204;
    public static final int RULE_SL_COMMENT=233;
    public static final int Shell=177;
    public static final int Batch=166;
    public static final int Colon=220;
    public static final int EOF=-1;
    public static final int Inputs=154;
    public static final int Condition=81;
    public static final int IsSkippable=61;
    public static final int RunPolicy=90;
    public static final int Bash=186;
    public static final int Workflow_dispatch=17;
    public static final int DependsOn=83;
    public static final int Command=122;
    public static final int Schedule=112;
    public static final int Workflow_run=51;
    public static final int PullRequests=35;
    public static final int Secrets=137;
    public static final int ResourceName=48;
    public static final int Deployments=56;
    public static final int Approvals=77;
    public static final int Image=170;
    public static final int Matrix=157;
    public static final int RULE_VERSION=229;
    public static final int Workflow_call=36;
    public static final int Extends=126;
    public static final int Push=195;
    public static final int RepositoryProjects=11;
    public static final int Agent=165;
    public static final int Repository_dispatch=12;
    public static final int Actions=120;
    public static final int Labels=156;
    public static final int Snapshot=114;
    public static final int Contents=99;
    public static final int MaxParallel=42;
    public static final int VerticalLine=223;
    public static final int RULE_ML_COMMENT=232;
    public static final int LeftSquareBracket=221;
    public static final int Resources=89;
    public static final int Always=143;
    public static final int Id=213;
    public static final int ContinueOnError=23;
    public static final int If=214;
    public static final int Write=205;
    public static final int Schedules=92;
    public static final int Description=57;
    public static final int TriggerRules=50;
    public static final int Check_suite=52;
    public static final int Timeouts=118;
    public static final int Containers=68;
    public static final int VmImage=142;
    public static final int Queued=160;
    public static final int Pull_request_review=9;
    public static final int Scheduled=91;
    public static final int Comma=218;
    public static final int Project_card=44;
    public static final int HyphenMinus=219;
    public static final int Attestations=38;
    public static final int Final=168;
    public static final int RULE_HEX_INT=225;
    public static final int TimeoutMinutes=25;
    public static final int Stages=163;
    public static final int Ports=174;
    public static final int Custom=148;
    public static final int Plan=193;
    public static final int Default=123;
    public static final int Pipeline=106;
    public static final int Drafts=151;
    public static final int Type=201;
    public static final int When=203;
    public static final int Write_1=184;
    public static final int ContainerImage=22;
    public static final int Pull_request=45;
    public static final int Webhooks=119;
    public static final int None=209;
    public static final int TimeoutInMinutes=20;
    public static final int Merge_requests=26;
    public static final int Policy=158;
    public static final int Task=200;
    public static final int Deployment_status=15;
    public static final int Include=128;
    public static final int Parallel=105;
    public static final int ReleaseTrigger=28;
    public static final int Check_run=80;
    public static final int Requirements=47;
    public static final int Conditions=67;
    public static final int Template=117;
    public static final int Pull_request_review_comment=4;
    public static final int Read=210;
    public static final int Filters=127;
    public static final int Trigger=140;
    public static final int Packages=104;
    public static final int ReadAll=108;
    public static final int Retries=135;
    public static final int Job=208;
    public static final int Inherit=129;
    public static final int RightSquareBracket=222;
    public static final int WorkingDirectory=18;
    public static final int Script=162;
    public static final int Tasks=180;
    public static final int Branches=97;
    public static final int Timeout=139;
    public static final int ReviewStage=64;
    public static final int Public=159;
    public static final int After_script=37;
    public static final int Value=182;
    public static final int GreaterThanSignHyphenMinus=217;
    public static final int Environment=60;
    public static final int MaxTime=103;
    public static final int Notifications=34;
    public static final int Except=152;
    public static final int Steps=179;
    public static final int Exclude=125;
    public static final int Uses=202;
    public static final int Issues=155;
    public static final int Remote=161;
    public static final int RULE_STRING=234;
    public static final int CancelInProgress=13;
    public static final int Endpoints=84;
    public static final int Variables=93;
    public static final int RULE_FLOAT_LITERAL=227;
    public static final int DefaultsRun=39;
    public static final int Project_column=27;
    public static final int Required=110;
    public static final int Page_build=71;
    public static final int Create=147;
    public static final int Auth=185;
    public static final int DisplayName=59;
    public static final int Publish=133;
    public static final int Release=134;
    public static final int Changes=121;
    public static final int BranchesIgnore=21;
    public static final int Pipeline_schedule=16;
    public static final int PathsIgnore=43;
    public static final int RULE_WS=235;
    public static final int Only=192;
    public static final int Ssh=212;
    public static final int RULE_ANY_OTHER=236;
    public static final int RunsOn=136;
    public static final int Strategy=116;
    public static final int Workspace=95;
    public static final int On=215;

    // delegates
    // delegators


        public InternalPipelineParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalPipelineParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalPipelineParser.tokenNames; }
    public String getGrammarFileName() { return "InternalPipelineParser.g"; }



     	private PipelineGrammarAccess grammarAccess;

        public InternalPipelineParser(TokenStream input, PipelineGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
            registerRules(grammarAccess.getGrammar());
        }

        @Override
        protected String getFirstRuleName() {
        	return "Pipeline";
       	}

       	@Override
       	protected PipelineGrammarAccess getGrammarAccess() {
       		return grammarAccess;
       	}




    // $ANTLR start "entryRulePipeline"
    // InternalPipelineParser.g:58:1: entryRulePipeline returns [EObject current=null] : iv_rulePipeline= rulePipeline EOF ;
    public final EObject entryRulePipeline() throws RecognitionException {
        EObject current = null;

        EObject iv_rulePipeline = null;


        try {
            // InternalPipelineParser.g:58:49: (iv_rulePipeline= rulePipeline EOF )
            // InternalPipelineParser.g:59:2: iv_rulePipeline= rulePipeline EOF
            {
             newCompositeNode(grammarAccess.getPipelineRule()); 
            pushFollow(FOLLOW_1);
            iv_rulePipeline=rulePipeline();

            state._fsp--;

             current =iv_rulePipeline; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRulePipeline"


    // $ANTLR start "rulePipeline"
    // InternalPipelineParser.g:65:1: rulePipeline returns [EObject current=null] : ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) ) ;
    public final EObject rulePipeline() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token this_BEGIN_2=null;
        Token this_END_4=null;
        Token otherlv_6=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_jobOrStageVar_12_1=null;
        Token lv_jobOrStageVar_12_2=null;
        Token this_BEGIN_14=null;
        Token this_END_16=null;
        EObject lv_pipelineConfiguration_0_0 = null;

        EObject lv_triggers_3_0 = null;

        EObject lv_triggers_5_0 = null;

        EObject lv_triggers_7_0 = null;

        EObject lv_triggers_9_0 = null;

        EObject lv_triggers_11_0 = null;

        EObject lv_stages_13_0 = null;

        EObject lv_jobs_15_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:71:2: ( ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) ) )
            // InternalPipelineParser.g:72:2: ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) )
            {
            // InternalPipelineParser.g:72:2: ( ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) ) )
            // InternalPipelineParser.g:73:3: ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) ) ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* ) ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) )
            {
            // InternalPipelineParser.g:73:3: ( (lv_pipelineConfiguration_0_0= ruleConfigurations ) )
            // InternalPipelineParser.g:74:4: (lv_pipelineConfiguration_0_0= ruleConfigurations )
            {
            // InternalPipelineParser.g:74:4: (lv_pipelineConfiguration_0_0= ruleConfigurations )
            // InternalPipelineParser.g:75:5: lv_pipelineConfiguration_0_0= ruleConfigurations
            {

            					newCompositeNode(grammarAccess.getPipelineAccess().getPipelineConfigurationConfigurationsParserRuleCall_0_0());
            				
            pushFollow(FOLLOW_3);
            lv_pipelineConfiguration_0_0=ruleConfigurations();

            state._fsp--;


            					if (current==null) {
            						current = createModelElementForParent(grammarAccess.getPipelineRule());
            					}
            					set(
            						current,
            						"pipelineConfiguration",
            						lv_pipelineConfiguration_0_0,
            						"ca.mcgill.devops.pipeline.Pipeline.Configurations");
            					afterParserOrEnumRuleCall();
            				

            }


            }

            // InternalPipelineParser.g:92:3: ( (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? ) | ( (lv_triggers_11_0= ruleEvent ) )* )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==On) ) {
                alt6=1;
            }
            else if ( ((LA6_0>=Pull_request_review_comment && LA6_0<=Pull_request_target)||LA6_0==Repository_dispatch||(LA6_0>=Deployment_status && LA6_0<=Workflow_dispatch)||LA6_0==Registry_package||(LA6_0>=Merge_requests && LA6_0<=Project_column)||LA6_0==WorkflowRules||(LA6_0>=Issue_comment && LA6_0<=Workflow_call)||LA6_0==LockBehavior||(LA6_0>=Project_card && LA6_0<=Pull_request)||(LA6_0>=Workflow_run && LA6_0<=Check_suite)||(LA6_0>=AutoCancel && LA6_0<=Conditions)||LA6_0==Deployment||LA6_0==Page_build||LA6_0==PlanBranch||LA6_0==Repository||(LA6_0>=Bitbucket && LA6_0<=Check_run)||(LA6_0>=Milestone && LA6_0<=Pipelines)||(LA6_0>=Scheduled && LA6_0<=Schedules)||LA6_0==Branches||LA6_0==Schedule||LA6_0==Changes||LA6_0==Default||LA6_0==Project||LA6_0==Release||LA6_0==Trigger||(LA6_0>=Create && LA6_0<=Delete)||(LA6_0>=Drafts && LA6_0<=Gollum)||LA6_0==Issues||LA6_0==Public||LA6_0==Remote||(LA6_0>=Stages && LA6_0<=Status)||LA6_0==Label||LA6_0==Paths||LA6_0==Rules||LA6_0==Watch||(LA6_0>=Cron && LA6_0<=Jobs)||LA6_0==Only||LA6_0==Push||LA6_0==Tags||LA6_0==None||LA6_0==Pr||LA6_0==RULE_ID) ) {
                alt6=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalPipelineParser.g:93:4: (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? )
                    {
                    // InternalPipelineParser.g:93:4: (otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )? )
                    // InternalPipelineParser.g:94:5: otherlv_1= On (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )? ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )?
                    {
                    otherlv_1=(Token)match(input,On,FOLLOW_4); 

                    					newLeafNode(otherlv_1, grammarAccess.getPipelineAccess().getOnKeyword_1_0_0());
                    				
                    // InternalPipelineParser.g:98:5: (this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END )?
                    int alt2=2;
                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==RULE_BEGIN) ) {
                        alt2=1;
                    }
                    switch (alt2) {
                        case 1 :
                            // InternalPipelineParser.g:99:6: this_BEGIN_2= RULE_BEGIN ( (lv_triggers_3_0= ruleEvent ) )+ this_END_4= RULE_END
                            {
                            this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_5); 

                            						newLeafNode(this_BEGIN_2, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_1_0_1_0());
                            					
                            // InternalPipelineParser.g:103:6: ( (lv_triggers_3_0= ruleEvent ) )+
                            int cnt1=0;
                            loop1:
                            do {
                                int alt1=2;
                                int LA1_0 = input.LA(1);

                                if ( ((LA1_0>=Pull_request_review_comment && LA1_0<=Pull_request_target)||LA1_0==Repository_dispatch||(LA1_0>=Deployment_status && LA1_0<=Workflow_dispatch)||LA1_0==Registry_package||(LA1_0>=Merge_requests && LA1_0<=Project_column)||LA1_0==WorkflowRules||(LA1_0>=Issue_comment && LA1_0<=Workflow_call)||LA1_0==LockBehavior||(LA1_0>=Project_card && LA1_0<=Pull_request)||(LA1_0>=Workflow_run && LA1_0<=Check_suite)||(LA1_0>=AutoCancel && LA1_0<=Conditions)||LA1_0==Deployment||LA1_0==Page_build||LA1_0==PlanBranch||LA1_0==Repository||(LA1_0>=Bitbucket && LA1_0<=Check_run)||(LA1_0>=Milestone && LA1_0<=Pipelines)||(LA1_0>=Scheduled && LA1_0<=Schedules)||LA1_0==Branches||LA1_0==Schedule||LA1_0==Changes||LA1_0==Default||LA1_0==Project||LA1_0==Release||LA1_0==Trigger||(LA1_0>=Create && LA1_0<=Delete)||(LA1_0>=Drafts && LA1_0<=Gollum)||LA1_0==Issues||LA1_0==Public||LA1_0==Remote||LA1_0==Status||LA1_0==Label||LA1_0==Paths||LA1_0==Rules||LA1_0==Watch||(LA1_0>=Cron && LA1_0<=Fork)||LA1_0==Only||LA1_0==Push||LA1_0==Tags||LA1_0==None||LA1_0==Pr||LA1_0==RULE_ID) ) {
                                    alt1=1;
                                }


                                switch (alt1) {
                            	case 1 :
                            	    // InternalPipelineParser.g:104:7: (lv_triggers_3_0= ruleEvent )
                            	    {
                            	    // InternalPipelineParser.g:104:7: (lv_triggers_3_0= ruleEvent )
                            	    // InternalPipelineParser.g:105:8: lv_triggers_3_0= ruleEvent
                            	    {

                            	    								newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_1_1_0());
                            	    							
                            	    pushFollow(FOLLOW_6);
                            	    lv_triggers_3_0=ruleEvent();

                            	    state._fsp--;


                            	    								if (current==null) {
                            	    									current = createModelElementForParent(grammarAccess.getPipelineRule());
                            	    								}
                            	    								add(
                            	    									current,
                            	    									"triggers",
                            	    									lv_triggers_3_0,
                            	    									"ca.mcgill.devops.pipeline.Pipeline.Event");
                            	    								afterParserOrEnumRuleCall();
                            	    							

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt1 >= 1 ) break loop1;
                                        EarlyExitException eee =
                                            new EarlyExitException(1, input);
                                        throw eee;
                                }
                                cnt1++;
                            } while (true);

                            this_END_4=(Token)match(input,RULE_END,FOLLOW_7); 

                            						newLeafNode(this_END_4, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_1_0_1_2());
                            					

                            }
                            break;

                    }

                    // InternalPipelineParser.g:127:5: ( ( (lv_triggers_5_0= ruleEvent ) ) | (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket ) )?
                    int alt4=3;
                    int LA4_0 = input.LA(1);

                    if ( ((LA4_0>=Pull_request_review_comment && LA4_0<=Pull_request_target)||LA4_0==Repository_dispatch||(LA4_0>=Deployment_status && LA4_0<=Workflow_dispatch)||LA4_0==Registry_package||(LA4_0>=Merge_requests && LA4_0<=Project_column)||LA4_0==WorkflowRules||(LA4_0>=Issue_comment && LA4_0<=Workflow_call)||LA4_0==LockBehavior||(LA4_0>=Project_card && LA4_0<=Pull_request)||(LA4_0>=Workflow_run && LA4_0<=Check_suite)||(LA4_0>=AutoCancel && LA4_0<=Conditions)||LA4_0==Deployment||LA4_0==Page_build||LA4_0==PlanBranch||LA4_0==Repository||(LA4_0>=Bitbucket && LA4_0<=Check_run)||(LA4_0>=Milestone && LA4_0<=Pipelines)||(LA4_0>=Scheduled && LA4_0<=Schedules)||LA4_0==Branches||LA4_0==Schedule||LA4_0==Changes||LA4_0==Default||LA4_0==Project||LA4_0==Release||LA4_0==Trigger||(LA4_0>=Create && LA4_0<=Delete)||(LA4_0>=Drafts && LA4_0<=Gollum)||LA4_0==Issues||LA4_0==Public||LA4_0==Remote||LA4_0==Status||LA4_0==Label||LA4_0==Paths||LA4_0==Rules||LA4_0==Watch||(LA4_0>=Cron && LA4_0<=Fork)||LA4_0==Only||LA4_0==Push||LA4_0==Tags||LA4_0==None||LA4_0==Pr||LA4_0==RULE_ID) ) {
                        alt4=1;
                    }
                    else if ( (LA4_0==LeftSquareBracket) ) {
                        alt4=2;
                    }
                    switch (alt4) {
                        case 1 :
                            // InternalPipelineParser.g:128:6: ( (lv_triggers_5_0= ruleEvent ) )
                            {
                            // InternalPipelineParser.g:128:6: ( (lv_triggers_5_0= ruleEvent ) )
                            // InternalPipelineParser.g:129:7: (lv_triggers_5_0= ruleEvent )
                            {
                            // InternalPipelineParser.g:129:7: (lv_triggers_5_0= ruleEvent )
                            // InternalPipelineParser.g:130:8: lv_triggers_5_0= ruleEvent
                            {

                            								newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_2_0_0());
                            							
                            pushFollow(FOLLOW_8);
                            lv_triggers_5_0=ruleEvent();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getPipelineRule());
                            								}
                            								add(
                            									current,
                            									"triggers",
                            									lv_triggers_5_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.Event");
                            								afterParserOrEnumRuleCall();
                            							

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:148:6: (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket )
                            {
                            // InternalPipelineParser.g:148:6: (otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket )
                            // InternalPipelineParser.g:149:7: otherlv_6= LeftSquareBracket ( (lv_triggers_7_0= ruleEvent ) ) (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )* otherlv_10= RightSquareBracket
                            {
                            otherlv_6=(Token)match(input,LeftSquareBracket,FOLLOW_5); 

                            							newLeafNode(otherlv_6, grammarAccess.getPipelineAccess().getLeftSquareBracketKeyword_1_0_2_1_0());
                            						
                            // InternalPipelineParser.g:153:7: ( (lv_triggers_7_0= ruleEvent ) )
                            // InternalPipelineParser.g:154:8: (lv_triggers_7_0= ruleEvent )
                            {
                            // InternalPipelineParser.g:154:8: (lv_triggers_7_0= ruleEvent )
                            // InternalPipelineParser.g:155:9: lv_triggers_7_0= ruleEvent
                            {

                            									newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_2_1_1_0());
                            								
                            pushFollow(FOLLOW_9);
                            lv_triggers_7_0=ruleEvent();

                            state._fsp--;


                            									if (current==null) {
                            										current = createModelElementForParent(grammarAccess.getPipelineRule());
                            									}
                            									add(
                            										current,
                            										"triggers",
                            										lv_triggers_7_0,
                            										"ca.mcgill.devops.pipeline.Pipeline.Event");
                            									afterParserOrEnumRuleCall();
                            								

                            }


                            }

                            // InternalPipelineParser.g:172:7: (otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) ) )*
                            loop3:
                            do {
                                int alt3=2;
                                int LA3_0 = input.LA(1);

                                if ( (LA3_0==Comma) ) {
                                    alt3=1;
                                }


                                switch (alt3) {
                            	case 1 :
                            	    // InternalPipelineParser.g:173:8: otherlv_8= Comma ( (lv_triggers_9_0= ruleEvent ) )
                            	    {
                            	    otherlv_8=(Token)match(input,Comma,FOLLOW_5); 

                            	    								newLeafNode(otherlv_8, grammarAccess.getPipelineAccess().getCommaKeyword_1_0_2_1_2_0());
                            	    							
                            	    // InternalPipelineParser.g:177:8: ( (lv_triggers_9_0= ruleEvent ) )
                            	    // InternalPipelineParser.g:178:9: (lv_triggers_9_0= ruleEvent )
                            	    {
                            	    // InternalPipelineParser.g:178:9: (lv_triggers_9_0= ruleEvent )
                            	    // InternalPipelineParser.g:179:10: lv_triggers_9_0= ruleEvent
                            	    {

                            	    										newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_0_2_1_2_1_0());
                            	    									
                            	    pushFollow(FOLLOW_9);
                            	    lv_triggers_9_0=ruleEvent();

                            	    state._fsp--;


                            	    										if (current==null) {
                            	    											current = createModelElementForParent(grammarAccess.getPipelineRule());
                            	    										}
                            	    										add(
                            	    											current,
                            	    											"triggers",
                            	    											lv_triggers_9_0,
                            	    											"ca.mcgill.devops.pipeline.Pipeline.Event");
                            	    										afterParserOrEnumRuleCall();
                            	    									

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);

                            otherlv_10=(Token)match(input,RightSquareBracket,FOLLOW_8); 

                            							newLeafNode(otherlv_10, grammarAccess.getPipelineAccess().getRightSquareBracketKeyword_1_0_2_1_3());
                            						

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:205:4: ( (lv_triggers_11_0= ruleEvent ) )*
                    {
                    // InternalPipelineParser.g:205:4: ( (lv_triggers_11_0= ruleEvent ) )*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( ((LA5_0>=Pull_request_review_comment && LA5_0<=Pull_request_target)||LA5_0==Repository_dispatch||(LA5_0>=Deployment_status && LA5_0<=Workflow_dispatch)||LA5_0==Registry_package||(LA5_0>=Merge_requests && LA5_0<=Project_column)||LA5_0==WorkflowRules||(LA5_0>=Issue_comment && LA5_0<=Workflow_call)||LA5_0==LockBehavior||(LA5_0>=Project_card && LA5_0<=Pull_request)||(LA5_0>=Workflow_run && LA5_0<=Check_suite)||(LA5_0>=AutoCancel && LA5_0<=Conditions)||LA5_0==Deployment||LA5_0==Page_build||LA5_0==PlanBranch||LA5_0==Repository||(LA5_0>=Bitbucket && LA5_0<=Check_run)||(LA5_0>=Milestone && LA5_0<=Pipelines)||(LA5_0>=Scheduled && LA5_0<=Schedules)||LA5_0==Branches||LA5_0==Schedule||LA5_0==Changes||LA5_0==Default||LA5_0==Project||LA5_0==Release||LA5_0==Trigger||(LA5_0>=Create && LA5_0<=Delete)||(LA5_0>=Drafts && LA5_0<=Gollum)||LA5_0==Issues||LA5_0==Public||LA5_0==Remote||LA5_0==Status||LA5_0==Label||LA5_0==Paths||LA5_0==Rules||LA5_0==Watch||(LA5_0>=Cron && LA5_0<=Fork)||LA5_0==Only||LA5_0==Push||LA5_0==Tags||LA5_0==None||LA5_0==Pr||LA5_0==RULE_ID) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    // InternalPipelineParser.g:206:5: (lv_triggers_11_0= ruleEvent )
                    	    {
                    	    // InternalPipelineParser.g:206:5: (lv_triggers_11_0= ruleEvent )
                    	    // InternalPipelineParser.g:207:6: lv_triggers_11_0= ruleEvent
                    	    {

                    	    						newCompositeNode(grammarAccess.getPipelineAccess().getTriggersEventParserRuleCall_1_1_0());
                    	    					
                    	    pushFollow(FOLLOW_10);
                    	    lv_triggers_11_0=ruleEvent();

                    	    state._fsp--;


                    	    						if (current==null) {
                    	    							current = createModelElementForParent(grammarAccess.getPipelineRule());
                    	    						}
                    	    						add(
                    	    							current,
                    	    							"triggers",
                    	    							lv_triggers_11_0,
                    	    							"ca.mcgill.devops.pipeline.Pipeline.Event");
                    	    						afterParserOrEnumRuleCall();
                    	    					

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);


                    }
                    break;

            }

            // InternalPipelineParser.g:225:3: ( ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) ) )
            // InternalPipelineParser.g:226:4: ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) ) ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) )
            {
            // InternalPipelineParser.g:226:4: ( ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) ) )
            // InternalPipelineParser.g:227:5: ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) )
            {
            // InternalPipelineParser.g:227:5: ( (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs ) )
            // InternalPipelineParser.g:228:6: (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs )
            {
            // InternalPipelineParser.g:228:6: (lv_jobOrStageVar_12_1= Stages | lv_jobOrStageVar_12_2= Jobs )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==Stages) ) {
                alt7=1;
            }
            else if ( (LA7_0==Jobs) ) {
                alt7=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // InternalPipelineParser.g:229:7: lv_jobOrStageVar_12_1= Stages
                    {
                    lv_jobOrStageVar_12_1=(Token)match(input,Stages,FOLLOW_11); 

                    							newLeafNode(lv_jobOrStageVar_12_1, grammarAccess.getPipelineAccess().getJobOrStageVarStagesKeyword_2_0_0_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getPipelineRule());
                    							}
                    							setWithLastConsumed(current, "jobOrStageVar", lv_jobOrStageVar_12_1, null);
                    						

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:240:7: lv_jobOrStageVar_12_2= Jobs
                    {
                    lv_jobOrStageVar_12_2=(Token)match(input,Jobs,FOLLOW_11); 

                    							newLeafNode(lv_jobOrStageVar_12_2, grammarAccess.getPipelineAccess().getJobOrStageVarJobsKeyword_2_0_0_1());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getPipelineRule());
                    							}
                    							setWithLastConsumed(current, "jobOrStageVar", lv_jobOrStageVar_12_2, null);
                    						

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:253:4: ( ( (lv_stages_13_0= ruleStage ) )* | (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==EOF||LA10_0==HyphenMinus) ) {
                alt10=1;
            }
            else if ( (LA10_0==RULE_BEGIN) ) {
                alt10=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // InternalPipelineParser.g:254:5: ( (lv_stages_13_0= ruleStage ) )*
                    {
                    // InternalPipelineParser.g:254:5: ( (lv_stages_13_0= ruleStage ) )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==HyphenMinus) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // InternalPipelineParser.g:255:6: (lv_stages_13_0= ruleStage )
                    	    {
                    	    // InternalPipelineParser.g:255:6: (lv_stages_13_0= ruleStage )
                    	    // InternalPipelineParser.g:256:7: lv_stages_13_0= ruleStage
                    	    {

                    	    							newCompositeNode(grammarAccess.getPipelineAccess().getStagesStageParserRuleCall_2_1_0_0());
                    	    						
                    	    pushFollow(FOLLOW_12);
                    	    lv_stages_13_0=ruleStage();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getPipelineRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"stages",
                    	    								lv_stages_13_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.Stage");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:274:5: (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END )
                    {
                    // InternalPipelineParser.g:274:5: (this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END )
                    // InternalPipelineParser.g:275:6: this_BEGIN_14= RULE_BEGIN ( (lv_jobs_15_0= ruleJob ) )* this_END_16= RULE_END
                    {
                    this_BEGIN_14=(Token)match(input,RULE_BEGIN,FOLLOW_13); 

                    						newLeafNode(this_BEGIN_14, grammarAccess.getPipelineAccess().getBEGINTerminalRuleCall_2_1_1_0());
                    					
                    // InternalPipelineParser.g:279:6: ( (lv_jobs_15_0= ruleJob ) )*
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==HyphenMinus||LA9_0==RULE_ID||LA9_0==RULE_STRING) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // InternalPipelineParser.g:280:7: (lv_jobs_15_0= ruleJob )
                    	    {
                    	    // InternalPipelineParser.g:280:7: (lv_jobs_15_0= ruleJob )
                    	    // InternalPipelineParser.g:281:8: lv_jobs_15_0= ruleJob
                    	    {

                    	    								newCompositeNode(grammarAccess.getPipelineAccess().getJobsJobParserRuleCall_2_1_1_1_0());
                    	    							
                    	    pushFollow(FOLLOW_13);
                    	    lv_jobs_15_0=ruleJob();

                    	    state._fsp--;


                    	    								if (current==null) {
                    	    									current = createModelElementForParent(grammarAccess.getPipelineRule());
                    	    								}
                    	    								add(
                    	    									current,
                    	    									"jobs",
                    	    									lv_jobs_15_0,
                    	    									"ca.mcgill.devops.pipeline.Pipeline.Job");
                    	    								afterParserOrEnumRuleCall();
                    	    							

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop9;
                        }
                    } while (true);

                    this_END_16=(Token)match(input,RULE_END,FOLLOW_2); 

                    						newLeafNode(this_END_16, grammarAccess.getPipelineAccess().getENDTerminalRuleCall_2_1_1_2());
                    					

                    }


                    }
                    break;

            }


            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePipeline"


    // $ANTLR start "entryRuleConfigurations"
    // InternalPipelineParser.g:309:1: entryRuleConfigurations returns [EObject current=null] : iv_ruleConfigurations= ruleConfigurations EOF ;
    public final EObject entryRuleConfigurations() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleConfigurations = null;


        try {
            // InternalPipelineParser.g:309:55: (iv_ruleConfigurations= ruleConfigurations EOF )
            // InternalPipelineParser.g:310:2: iv_ruleConfigurations= ruleConfigurations EOF
            {
             newCompositeNode(grammarAccess.getConfigurationsRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleConfigurations=ruleConfigurations();

            state._fsp--;

             current =iv_ruleConfigurations; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleConfigurations"


    // $ANTLR start "ruleConfigurations"
    // InternalPipelineParser.g:316:1: ruleConfigurations returns [EObject current=null] : ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* ) ) ) ;
    public final EObject ruleConfigurations() throws RecognitionException {
        EObject current = null;

        Token otherlv_1=null;
        Token otherlv_3=null;
        Token otherlv_6=null;
        Token this_BEGIN_7=null;
        Token otherlv_8=null;
        Token this_BEGIN_9=null;
        Token otherlv_10=null;
        Token lv_defaultShellValue_11_1=null;
        Token lv_defaultShellValue_11_2=null;
        Token otherlv_12=null;
        Token lv_defaultWDValue_13_1=null;
        Token lv_defaultWDValue_13_2=null;
        Token this_END_14=null;
        Token this_END_15=null;
        Token otherlv_16=null;
        Token this_BEGIN_17=null;
        Token otherlv_18=null;
        Token this_END_20=null;
        Token otherlv_21=null;
        Token lv_allPermission_22_0=null;
        Token this_BEGIN_23=null;
        Token this_END_25=null;
        Token otherlv_26=null;
        Token this_BEGIN_27=null;
        Token otherlv_28=null;
        Token lv_group_29_1=null;
        Token lv_group_29_2=null;
        Token otherlv_30=null;
        Token lv_cancelConcurrence_31_1=null;
        Token lv_cancelConcurrence_31_2=null;
        Token this_END_32=null;
        Token otherlv_34=null;
        Token this_BEGIN_36=null;
        Token otherlv_37=null;
        Token lv_vmName_38_0=null;
        Token otherlv_39=null;
        Token lv_vmImage_40_1=null;
        Token lv_vmImage_40_2=null;
        Token otherlv_41=null;
        Token this_END_43=null;
        Token otherlv_44=null;
        Token this_BEGIN_45=null;
        Token this_END_47=null;
        Token otherlv_48=null;
        Token lv_version_49_0=null;
        Token otherlv_50=null;
        Token this_BEGIN_51=null;
        Token this_END_53=null;
        Token otherlv_54=null;
        Token otherlv_55=null;
        Token lv_extendOrInclude_57_1=null;
        Token lv_extendOrInclude_57_2=null;
        Token this_BEGIN_58=null;
        Token this_END_60=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        AntlrDatatypeRuleToken lv_runName_4_0 = null;

        AntlrDatatypeRuleToken lv_env_19_0 = null;

        AntlrDatatypeRuleToken lv_indPermissions_24_0 = null;

        AntlrDatatypeRuleToken lv_concurrency_33_1 = null;

        AntlrDatatypeRuleToken lv_concurrency_33_2 = null;

        AntlrDatatypeRuleToken lv_vmDemands_42_1 = null;

        AntlrDatatypeRuleToken lv_vmDemands_42_2 = null;

        EObject lv_resources_46_0 = null;

        EObject lv_pplVariables_52_0 = null;

        EObject lv_parameterValues_56_0 = null;

        EObject lv_extendedParameters_59_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:322:2: ( ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* ) ) ) )
            // InternalPipelineParser.g:323:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* ) ) )
            {
            // InternalPipelineParser.g:323:2: ( ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* ) ) )
            // InternalPipelineParser.g:324:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* ) )
            {
            // InternalPipelineParser.g:324:3: ( ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* ) )
            // InternalPipelineParser.g:325:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* )
            {
             
            			  getUnorderedGroupHelper().enter(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            			
            // InternalPipelineParser.g:328:4: ( ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )* )
            // InternalPipelineParser.g:329:5: ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )*
            {
            // InternalPipelineParser.g:329:5: ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )*
            loop34:
            do {
                int alt34=13;
                alt34 = dfa34.predict(input);
                switch (alt34) {
            	case 1 :
            	    // InternalPipelineParser.g:330:3: ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:330:3: ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) )
            	    // InternalPipelineParser.g:331:4: {...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0)");
            	    }
            	    // InternalPipelineParser.g:331:108: ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) )
            	    // InternalPipelineParser.g:332:5: ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0);
            	    				
            	    // InternalPipelineParser.g:335:8: ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) )
            	    // InternalPipelineParser.g:335:9: {...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:335:18: (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) )
            	    // InternalPipelineParser.g:335:19: otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) )
            	    {
            	    otherlv_1=(Token)match(input,Name,FOLLOW_14); 

            	    								newLeafNode(otherlv_1, grammarAccess.getConfigurationsAccess().getNameKeyword_0_0());
            	    							
            	    // InternalPipelineParser.g:339:8: ( (lv_name_2_0= ruleUnquotedString ) )
            	    // InternalPipelineParser.g:340:9: (lv_name_2_0= ruleUnquotedString )
            	    {
            	    // InternalPipelineParser.g:340:9: (lv_name_2_0= ruleUnquotedString )
            	    // InternalPipelineParser.g:341:10: lv_name_2_0= ruleUnquotedString
            	    {

            	    										newCompositeNode(grammarAccess.getConfigurationsAccess().getNameUnquotedStringParserRuleCall_0_1_0());
            	    									
            	    pushFollow(FOLLOW_15);
            	    lv_name_2_0=ruleUnquotedString();

            	    state._fsp--;


            	    										if (current==null) {
            	    											current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    										}
            	    										set(
            	    											current,
            	    											"name",
            	    											lv_name_2_0,
            	    											"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
            	    										afterParserOrEnumRuleCall();
            	    									

            	    }


            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 2 :
            	    // InternalPipelineParser.g:364:3: ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:364:3: ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) )
            	    // InternalPipelineParser.g:365:4: {...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1)");
            	    }
            	    // InternalPipelineParser.g:365:108: ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) )
            	    // InternalPipelineParser.g:366:5: ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1);
            	    				
            	    // InternalPipelineParser.g:369:8: ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) )
            	    // InternalPipelineParser.g:369:9: {...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:369:18: (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) )
            	    // InternalPipelineParser.g:369:19: otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) )
            	    {
            	    otherlv_3=(Token)match(input,RunName,FOLLOW_14); 

            	    								newLeafNode(otherlv_3, grammarAccess.getConfigurationsAccess().getRunNameKeyword_1_0());
            	    							
            	    // InternalPipelineParser.g:373:8: ( (lv_runName_4_0= ruleUnquotedString ) )
            	    // InternalPipelineParser.g:374:9: (lv_runName_4_0= ruleUnquotedString )
            	    {
            	    // InternalPipelineParser.g:374:9: (lv_runName_4_0= ruleUnquotedString )
            	    // InternalPipelineParser.g:375:10: lv_runName_4_0= ruleUnquotedString
            	    {

            	    										newCompositeNode(grammarAccess.getConfigurationsAccess().getRunNameUnquotedStringParserRuleCall_1_1_0());
            	    									
            	    pushFollow(FOLLOW_15);
            	    lv_runName_4_0=ruleUnquotedString();

            	    state._fsp--;


            	    										if (current==null) {
            	    											current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    										}
            	    										set(
            	    											current,
            	    											"runName",
            	    											lv_runName_4_0,
            	    											"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
            	    										afterParserOrEnumRuleCall();
            	    									

            	    }


            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 3 :
            	    // InternalPipelineParser.g:398:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:398:3: ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    // InternalPipelineParser.g:399:4: {...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2)");
            	    }
            	    // InternalPipelineParser.g:399:108: ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    // InternalPipelineParser.g:400:5: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2);
            	    				
            	    // InternalPipelineParser.g:403:8: ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    // InternalPipelineParser.g:403:9: {...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:403:18: ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) )
            	    // InternalPipelineParser.g:403:19: ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) )
            	    {
            	    // InternalPipelineParser.g:403:19: ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) )
            	    // InternalPipelineParser.g:404:9: ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?)
            	    {
            	     
            	    								  getUnorderedGroupHelper().enter(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    								
            	    // InternalPipelineParser.g:407:9: ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?)
            	    // InternalPipelineParser.g:408:10: ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?
            	    {
            	    // InternalPipelineParser.g:408:10: ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+
            	    int cnt15=0;
            	    loop15:
            	    do {
            	        int alt15=3;
            	        switch ( input.LA(1) ) {
            	        case Defaults:
            	            {
            	            int LA15_2 = input.LA(2);

            	            if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0) ) {
            	                alt15=1;
            	            }


            	            }
            	            break;
            	        case WorkingDirectory:
            	            {
            	            int LA15_3 = input.LA(2);

            	            if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1) ) {
            	                alt15=2;
            	            }


            	            }
            	            break;
            	        case RULE_END:
            	            {
            	            int LA15_4 = input.LA(2);

            	            if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1) ) {
            	                alt15=2;
            	            }


            	            }
            	            break;

            	        }

            	        switch (alt15) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:409:8: ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:409:8: ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) )
            	    	    // InternalPipelineParser.g:410:9: {...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0)");
            	    	    }
            	    	    // InternalPipelineParser.g:410:115: ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) )
            	    	    // InternalPipelineParser.g:411:10: ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) )
            	    	    {

            	    	    										getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 0);
            	    	    									
            	    	    // InternalPipelineParser.g:414:13: ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) )
            	    	    // InternalPipelineParser.g:414:14: {...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:414:23: (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? )
            	    	    // InternalPipelineParser.g:414:24: otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )?
            	    	    {
            	    	    otherlv_6=(Token)match(input,Defaults,FOLLOW_16); 

            	    	    													newLeafNode(otherlv_6, grammarAccess.getConfigurationsAccess().getDefaultsKeyword_2_0_0());
            	    	    												
            	    	    this_BEGIN_7=(Token)match(input,RULE_BEGIN,FOLLOW_17); 

            	    	    													newLeafNode(this_BEGIN_7, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_2_0_1());
            	    	    												
            	    	    otherlv_8=(Token)match(input,Run,FOLLOW_16); 

            	    	    													newLeafNode(otherlv_8, grammarAccess.getConfigurationsAccess().getRunKeyword_2_0_2());
            	    	    												
            	    	    this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_18); 

            	    	    													newLeafNode(this_BEGIN_9, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_2_0_3());
            	    	    												
            	    	    // InternalPipelineParser.g:430:13: (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )?
            	    	    int alt12=2;
            	    	    int LA12_0 = input.LA(1);

            	    	    if ( (LA12_0==Shell) ) {
            	    	        alt12=1;
            	    	    }
            	    	    switch (alt12) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:431:14: otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) )
            	    	            {
            	    	            otherlv_10=(Token)match(input,Shell,FOLLOW_19); 

            	    	            														newLeafNode(otherlv_10, grammarAccess.getConfigurationsAccess().getShellKeyword_2_0_4_0());
            	    	            													
            	    	            // InternalPipelineParser.g:435:14: ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) )
            	    	            // InternalPipelineParser.g:436:15: ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) )
            	    	            {
            	    	            // InternalPipelineParser.g:436:15: ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) )
            	    	            // InternalPipelineParser.g:437:16: (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID )
            	    	            {
            	    	            // InternalPipelineParser.g:437:16: (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID )
            	    	            int alt11=2;
            	    	            int LA11_0 = input.LA(1);

            	    	            if ( (LA11_0==RULE_STRING) ) {
            	    	                alt11=1;
            	    	            }
            	    	            else if ( (LA11_0==RULE_ID) ) {
            	    	                alt11=2;
            	    	            }
            	    	            else {
            	    	                NoViableAltException nvae =
            	    	                    new NoViableAltException("", 11, 0, input);

            	    	                throw nvae;
            	    	            }
            	    	            switch (alt11) {
            	    	                case 1 :
            	    	                    // InternalPipelineParser.g:438:17: lv_defaultShellValue_11_1= RULE_STRING
            	    	                    {
            	    	                    lv_defaultShellValue_11_1=(Token)match(input,RULE_STRING,FOLLOW_15); 

            	    	                    																	newLeafNode(lv_defaultShellValue_11_1, grammarAccess.getConfigurationsAccess().getDefaultShellValueSTRINGTerminalRuleCall_2_0_4_1_0_0());
            	    	                    																

            	    	                    																	if (current==null) {
            	    	                    																		current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																	}
            	    	                    																	setWithLastConsumed(
            	    	                    																		current,
            	    	                    																		"defaultShellValue",
            	    	                    																		lv_defaultShellValue_11_1,
            	    	                    																		"org.eclipse.xtext.common.Terminals.STRING");
            	    	                    																

            	    	                    }
            	    	                    break;
            	    	                case 2 :
            	    	                    // InternalPipelineParser.g:453:17: lv_defaultShellValue_11_2= RULE_ID
            	    	                    {
            	    	                    lv_defaultShellValue_11_2=(Token)match(input,RULE_ID,FOLLOW_15); 

            	    	                    																	newLeafNode(lv_defaultShellValue_11_2, grammarAccess.getConfigurationsAccess().getDefaultShellValueIDTerminalRuleCall_2_0_4_1_0_1());
            	    	                    																

            	    	                    																	if (current==null) {
            	    	                    																		current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																	}
            	    	                    																	setWithLastConsumed(
            	    	                    																		current,
            	    	                    																		"defaultShellValue",
            	    	                    																		lv_defaultShellValue_11_2,
            	    	                    																		"ca.mcgill.devops.pipeline.Pipeline.ID");
            	    	                    																

            	    	                    }
            	    	                    break;

            	    	            }


            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }


            	    	    }


            	    	    }

            	    	     
            	    	    										getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    	    									

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalPipelineParser.g:477:8: ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:477:8: ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) )
            	    	    // InternalPipelineParser.g:478:9: {...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1)");
            	    	    }
            	    	    // InternalPipelineParser.g:478:115: ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) )
            	    	    // InternalPipelineParser.g:479:10: ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) )
            	    	    {

            	    	    										getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2(), 1);
            	    	    									
            	    	    // InternalPipelineParser.g:482:13: ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) )
            	    	    // InternalPipelineParser.g:482:14: {...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:482:23: ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END )
            	    	    // InternalPipelineParser.g:482:24: (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END
            	    	    {
            	    	    // InternalPipelineParser.g:482:24: (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )?
            	    	    int alt14=2;
            	    	    int LA14_0 = input.LA(1);

            	    	    if ( (LA14_0==WorkingDirectory) ) {
            	    	        alt14=1;
            	    	    }
            	    	    switch (alt14) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:483:14: otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) )
            	    	            {
            	    	            otherlv_12=(Token)match(input,WorkingDirectory,FOLLOW_19); 

            	    	            														newLeafNode(otherlv_12, grammarAccess.getConfigurationsAccess().getWorkingDirectoryKeyword_2_1_0_0());
            	    	            													
            	    	            // InternalPipelineParser.g:487:14: ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) )
            	    	            // InternalPipelineParser.g:488:15: ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) )
            	    	            {
            	    	            // InternalPipelineParser.g:488:15: ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) )
            	    	            // InternalPipelineParser.g:489:16: (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID )
            	    	            {
            	    	            // InternalPipelineParser.g:489:16: (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID )
            	    	            int alt13=2;
            	    	            int LA13_0 = input.LA(1);

            	    	            if ( (LA13_0==RULE_STRING) ) {
            	    	                alt13=1;
            	    	            }
            	    	            else if ( (LA13_0==RULE_ID) ) {
            	    	                alt13=2;
            	    	            }
            	    	            else {
            	    	                NoViableAltException nvae =
            	    	                    new NoViableAltException("", 13, 0, input);

            	    	                throw nvae;
            	    	            }
            	    	            switch (alt13) {
            	    	                case 1 :
            	    	                    // InternalPipelineParser.g:490:17: lv_defaultWDValue_13_1= RULE_STRING
            	    	                    {
            	    	                    lv_defaultWDValue_13_1=(Token)match(input,RULE_STRING,FOLLOW_20); 

            	    	                    																	newLeafNode(lv_defaultWDValue_13_1, grammarAccess.getConfigurationsAccess().getDefaultWDValueSTRINGTerminalRuleCall_2_1_0_1_0_0());
            	    	                    																

            	    	                    																	if (current==null) {
            	    	                    																		current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																	}
            	    	                    																	setWithLastConsumed(
            	    	                    																		current,
            	    	                    																		"defaultWDValue",
            	    	                    																		lv_defaultWDValue_13_1,
            	    	                    																		"org.eclipse.xtext.common.Terminals.STRING");
            	    	                    																

            	    	                    }
            	    	                    break;
            	    	                case 2 :
            	    	                    // InternalPipelineParser.g:505:17: lv_defaultWDValue_13_2= RULE_ID
            	    	                    {
            	    	                    lv_defaultWDValue_13_2=(Token)match(input,RULE_ID,FOLLOW_20); 

            	    	                    																	newLeafNode(lv_defaultWDValue_13_2, grammarAccess.getConfigurationsAccess().getDefaultWDValueIDTerminalRuleCall_2_1_0_1_0_1());
            	    	                    																

            	    	                    																	if (current==null) {
            	    	                    																		current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																	}
            	    	                    																	setWithLastConsumed(
            	    	                    																		current,
            	    	                    																		"defaultWDValue",
            	    	                    																		lv_defaultWDValue_13_2,
            	    	                    																		"ca.mcgill.devops.pipeline.Pipeline.ID");
            	    	                    																

            	    	                    }
            	    	                    break;

            	    	            }


            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }

            	    	    this_END_14=(Token)match(input,RULE_END,FOLLOW_20); 

            	    	    													newLeafNode(this_END_14, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_2_1_1());
            	    	    												
            	    	    this_END_15=(Token)match(input,RULE_END,FOLLOW_15); 

            	    	    													newLeafNode(this_END_15, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_2_1_2());
            	    	    												

            	    	    }


            	    	    }

            	    	     
            	    	    										getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    	    									

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt15 >= 1 ) break loop15;
            	                EarlyExitException eee =
            	                    new EarlyExitException(15, input);
            	                throw eee;
            	        }
            	        cnt15++;
            	    } while (true);

            	    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2()) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2())");
            	    }

            	    }


            	    }

            	     
            	    								  getUnorderedGroupHelper().leave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_2());
            	    								

            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 4 :
            	    // InternalPipelineParser.g:550:3: ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) )
            	    {
            	    // InternalPipelineParser.g:550:3: ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:551:4: {...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3)");
            	    }
            	    // InternalPipelineParser.g:551:108: ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) )
            	    // InternalPipelineParser.g:552:5: ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3);
            	    				
            	    // InternalPipelineParser.g:555:8: ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) )
            	    // InternalPipelineParser.g:555:9: {...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:555:18: (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END )
            	    // InternalPipelineParser.g:555:19: otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END
            	    {
            	    otherlv_16=(Token)match(input,Env,FOLLOW_16); 

            	    								newLeafNode(otherlv_16, grammarAccess.getConfigurationsAccess().getEnvKeyword_3_0());
            	    							
            	    this_BEGIN_17=(Token)match(input,RULE_BEGIN,FOLLOW_21); 

            	    								newLeafNode(this_BEGIN_17, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_3_1());
            	    							
            	    // InternalPipelineParser.g:563:8: ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )*
            	    loop17:
            	    do {
            	        int alt17=2;
            	        int LA17_0 = input.LA(1);

            	        if ( (LA17_0==HyphenMinus||LA17_0==RULE_ID) ) {
            	            alt17=1;
            	        }


            	        switch (alt17) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:564:9: (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) )
            	    	    {
            	    	    // InternalPipelineParser.g:564:9: (otherlv_18= HyphenMinus )?
            	    	    int alt16=2;
            	    	    int LA16_0 = input.LA(1);

            	    	    if ( (LA16_0==HyphenMinus) ) {
            	    	        alt16=1;
            	    	    }
            	    	    switch (alt16) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:565:10: otherlv_18= HyphenMinus
            	    	            {
            	    	            otherlv_18=(Token)match(input,HyphenMinus,FOLLOW_22); 

            	    	            										newLeafNode(otherlv_18, grammarAccess.getConfigurationsAccess().getHyphenMinusKeyword_3_2_0());
            	    	            									

            	    	            }
            	    	            break;

            	    	    }

            	    	    // InternalPipelineParser.g:570:9: ( (lv_env_19_0= ruleKeyValue ) )
            	    	    // InternalPipelineParser.g:571:10: (lv_env_19_0= ruleKeyValue )
            	    	    {
            	    	    // InternalPipelineParser.g:571:10: (lv_env_19_0= ruleKeyValue )
            	    	    // InternalPipelineParser.g:572:11: lv_env_19_0= ruleKeyValue
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getEnvKeyValueParserRuleCall_3_2_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_21);
            	    	    lv_env_19_0=ruleKeyValue();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"env",
            	    	    												lv_env_19_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.KeyValue");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop17;
            	        }
            	    } while (true);

            	    this_END_20=(Token)match(input,RULE_END,FOLLOW_15); 

            	    								newLeafNode(this_END_20, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_3_3());
            	    							

            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 5 :
            	    // InternalPipelineParser.g:600:3: ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:600:3: ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) )
            	    // InternalPipelineParser.g:601:4: {...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4)");
            	    }
            	    // InternalPipelineParser.g:601:108: ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:602:5: ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4);
            	    				
            	    // InternalPipelineParser.g:605:8: ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:605:9: {...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:605:18: (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) )
            	    // InternalPipelineParser.g:605:19: otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) )
            	    {
            	    otherlv_21=(Token)match(input,Permissions,FOLLOW_23); 

            	    								newLeafNode(otherlv_21, grammarAccess.getConfigurationsAccess().getPermissionsKeyword_4_0());
            	    							
            	    // InternalPipelineParser.g:609:8: ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) )
            	    int alt19=2;
            	    int LA19_0 = input.LA(1);

            	    if ( (LA19_0==RULE_ID) ) {
            	        alt19=1;
            	    }
            	    else if ( (LA19_0==RULE_BEGIN) ) {
            	        alt19=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 19, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt19) {
            	        case 1 :
            	            // InternalPipelineParser.g:610:9: ( (lv_allPermission_22_0= RULE_ID ) )
            	            {
            	            // InternalPipelineParser.g:610:9: ( (lv_allPermission_22_0= RULE_ID ) )
            	            // InternalPipelineParser.g:611:10: (lv_allPermission_22_0= RULE_ID )
            	            {
            	            // InternalPipelineParser.g:611:10: (lv_allPermission_22_0= RULE_ID )
            	            // InternalPipelineParser.g:612:11: lv_allPermission_22_0= RULE_ID
            	            {
            	            lv_allPermission_22_0=(Token)match(input,RULE_ID,FOLLOW_15); 

            	            											newLeafNode(lv_allPermission_22_0, grammarAccess.getConfigurationsAccess().getAllPermissionIDTerminalRuleCall_4_1_0_0());
            	            										

            	            											if (current==null) {
            	            												current = createModelElement(grammarAccess.getConfigurationsRule());
            	            											}
            	            											setWithLastConsumed(
            	            												current,
            	            												"allPermission",
            	            												lv_allPermission_22_0,
            	            												"ca.mcgill.devops.pipeline.Pipeline.ID");
            	            										

            	            }


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:629:9: (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END )
            	            {
            	            // InternalPipelineParser.g:629:9: (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END )
            	            // InternalPipelineParser.g:630:10: this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END
            	            {
            	            this_BEGIN_23=(Token)match(input,RULE_BEGIN,FOLLOW_24); 

            	            										newLeafNode(this_BEGIN_23, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_4_1_1_0());
            	            									
            	            // InternalPipelineParser.g:634:10: ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )*
            	            loop18:
            	            do {
            	                int alt18=2;
            	                int LA18_0 = input.LA(1);

            	                if ( (LA18_0==RepositoryProjects||LA18_0==SecurityEvents||LA18_0==PullRequests||LA18_0==Attestations||LA18_0==Deployments||LA18_0==Discussions||LA18_0==Contents||LA18_0==IdToken||LA18_0==Packages||LA18_0==Statuses||LA18_0==Actions||LA18_0==Checks||LA18_0==Issues) ) {
            	                    alt18=1;
            	                }


            	                switch (alt18) {
            	            	case 1 :
            	            	    // InternalPipelineParser.g:635:11: (lv_indPermissions_24_0= ruleIndPermissionValue )
            	            	    {
            	            	    // InternalPipelineParser.g:635:11: (lv_indPermissions_24_0= ruleIndPermissionValue )
            	            	    // InternalPipelineParser.g:636:12: lv_indPermissions_24_0= ruleIndPermissionValue
            	            	    {

            	            	    												newCompositeNode(grammarAccess.getConfigurationsAccess().getIndPermissionsIndPermissionValueParserRuleCall_4_1_1_1_0());
            	            	    											
            	            	    pushFollow(FOLLOW_24);
            	            	    lv_indPermissions_24_0=ruleIndPermissionValue();

            	            	    state._fsp--;


            	            	    												if (current==null) {
            	            	    													current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	            	    												}
            	            	    												add(
            	            	    													current,
            	            	    													"indPermissions",
            	            	    													lv_indPermissions_24_0,
            	            	    													"ca.mcgill.devops.pipeline.Pipeline.IndPermissionValue");
            	            	    												afterParserOrEnumRuleCall();
            	            	    											

            	            	    }


            	            	    }
            	            	    break;

            	            	default :
            	            	    break loop18;
            	                }
            	            } while (true);

            	            this_END_25=(Token)match(input,RULE_END,FOLLOW_15); 

            	            										newLeafNode(this_END_25, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_4_1_1_2());
            	            									

            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 6 :
            	    // InternalPipelineParser.g:665:3: ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:665:3: ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) )
            	    // InternalPipelineParser.g:666:4: {...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5)");
            	    }
            	    // InternalPipelineParser.g:666:108: ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) )
            	    // InternalPipelineParser.g:667:5: ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5);
            	    				
            	    // InternalPipelineParser.g:670:8: ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) )
            	    // InternalPipelineParser.g:670:9: {...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:670:18: (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) )
            	    // InternalPipelineParser.g:670:19: otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) )
            	    {
            	    otherlv_26=(Token)match(input,Concurrency,FOLLOW_25); 

            	    								newLeafNode(otherlv_26, grammarAccess.getConfigurationsAccess().getConcurrencyKeyword_5_0());
            	    							
            	    // InternalPipelineParser.g:674:8: ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) )
            	    int alt23=2;
            	    int LA23_0 = input.LA(1);

            	    if ( (LA23_0==RULE_BEGIN) ) {
            	        alt23=1;
            	    }
            	    else if ( (LA23_0==LeftSquareBracket||(LA23_0>=RULE_COMPLEX_EXPRESSION && LA23_0<=RULE_VERSION)||LA23_0==RULE_STRING) ) {
            	        alt23=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 23, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt23) {
            	        case 1 :
            	            // InternalPipelineParser.g:675:9: (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END )
            	            {
            	            // InternalPipelineParser.g:675:9: (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END )
            	            // InternalPipelineParser.g:676:10: this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END
            	            {
            	            this_BEGIN_27=(Token)match(input,RULE_BEGIN,FOLLOW_26); 

            	            										newLeafNode(this_BEGIN_27, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_5_1_0_0());
            	            									
            	            // InternalPipelineParser.g:680:10: (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) )
            	            // InternalPipelineParser.g:681:11: otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) )
            	            {
            	            otherlv_28=(Token)match(input,Group,FOLLOW_27); 

            	            											newLeafNode(otherlv_28, grammarAccess.getConfigurationsAccess().getGroupKeyword_5_1_0_1_0());
            	            										
            	            // InternalPipelineParser.g:685:11: ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) )
            	            // InternalPipelineParser.g:686:12: ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) )
            	            {
            	            // InternalPipelineParser.g:686:12: ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) )
            	            // InternalPipelineParser.g:687:13: (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION )
            	            {
            	            // InternalPipelineParser.g:687:13: (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION )
            	            int alt20=2;
            	            int LA20_0 = input.LA(1);

            	            if ( (LA20_0==RULE_ID) ) {
            	                alt20=1;
            	            }
            	            else if ( (LA20_0==RULE_COMPLEX_EXPRESSION) ) {
            	                alt20=2;
            	            }
            	            else {
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 20, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt20) {
            	                case 1 :
            	                    // InternalPipelineParser.g:688:14: lv_group_29_1= RULE_ID
            	                    {
            	                    lv_group_29_1=(Token)match(input,RULE_ID,FOLLOW_28); 

            	                    														newLeafNode(lv_group_29_1, grammarAccess.getConfigurationsAccess().getGroupIDTerminalRuleCall_5_1_0_1_1_0_0());
            	                    													

            	                    														if (current==null) {
            	                    															current = createModelElement(grammarAccess.getConfigurationsRule());
            	                    														}
            	                    														setWithLastConsumed(
            	                    															current,
            	                    															"group",
            	                    															lv_group_29_1,
            	                    															"ca.mcgill.devops.pipeline.Pipeline.ID");
            	                    													

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalPipelineParser.g:703:14: lv_group_29_2= RULE_COMPLEX_EXPRESSION
            	                    {
            	                    lv_group_29_2=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_28); 

            	                    														newLeafNode(lv_group_29_2, grammarAccess.getConfigurationsAccess().getGroupCOMPLEX_EXPRESSIONTerminalRuleCall_5_1_0_1_1_0_1());
            	                    													

            	                    														if (current==null) {
            	                    															current = createModelElement(grammarAccess.getConfigurationsRule());
            	                    														}
            	                    														setWithLastConsumed(
            	                    															current,
            	                    															"group",
            	                    															lv_group_29_2,
            	                    															"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
            	                    													

            	                    }
            	                    break;

            	            }


            	            }


            	            }


            	            }

            	            // InternalPipelineParser.g:721:10: (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) )
            	            // InternalPipelineParser.g:722:11: otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) )
            	            {
            	            otherlv_30=(Token)match(input,CancelInProgress,FOLLOW_27); 

            	            											newLeafNode(otherlv_30, grammarAccess.getConfigurationsAccess().getCancelInProgressKeyword_5_1_0_2_0());
            	            										
            	            // InternalPipelineParser.g:726:11: ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) )
            	            // InternalPipelineParser.g:727:12: ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) )
            	            {
            	            // InternalPipelineParser.g:727:12: ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) )
            	            // InternalPipelineParser.g:728:13: (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION )
            	            {
            	            // InternalPipelineParser.g:728:13: (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION )
            	            int alt21=2;
            	            int LA21_0 = input.LA(1);

            	            if ( (LA21_0==RULE_ID) ) {
            	                alt21=1;
            	            }
            	            else if ( (LA21_0==RULE_COMPLEX_EXPRESSION) ) {
            	                alt21=2;
            	            }
            	            else {
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 21, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt21) {
            	                case 1 :
            	                    // InternalPipelineParser.g:729:14: lv_cancelConcurrence_31_1= RULE_ID
            	                    {
            	                    lv_cancelConcurrence_31_1=(Token)match(input,RULE_ID,FOLLOW_20); 

            	                    														newLeafNode(lv_cancelConcurrence_31_1, grammarAccess.getConfigurationsAccess().getCancelConcurrenceIDTerminalRuleCall_5_1_0_2_1_0_0());
            	                    													

            	                    														if (current==null) {
            	                    															current = createModelElement(grammarAccess.getConfigurationsRule());
            	                    														}
            	                    														setWithLastConsumed(
            	                    															current,
            	                    															"cancelConcurrence",
            	                    															lv_cancelConcurrence_31_1,
            	                    															"ca.mcgill.devops.pipeline.Pipeline.ID");
            	                    													

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalPipelineParser.g:744:14: lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION
            	                    {
            	                    lv_cancelConcurrence_31_2=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_20); 

            	                    														newLeafNode(lv_cancelConcurrence_31_2, grammarAccess.getConfigurationsAccess().getCancelConcurrenceCOMPLEX_EXPRESSIONTerminalRuleCall_5_1_0_2_1_0_1());
            	                    													

            	                    														if (current==null) {
            	                    															current = createModelElement(grammarAccess.getConfigurationsRule());
            	                    														}
            	                    														setWithLastConsumed(
            	                    															current,
            	                    															"cancelConcurrence",
            	                    															lv_cancelConcurrence_31_2,
            	                    															"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
            	                    													

            	                    }
            	                    break;

            	            }


            	            }


            	            }


            	            }

            	            this_END_32=(Token)match(input,RULE_END,FOLLOW_15); 

            	            										newLeafNode(this_END_32, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_5_1_0_3());
            	            									

            	            }


            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:768:9: ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) )
            	            {
            	            // InternalPipelineParser.g:768:9: ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) )
            	            // InternalPipelineParser.g:769:10: ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) )
            	            {
            	            // InternalPipelineParser.g:769:10: ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) )
            	            // InternalPipelineParser.g:770:11: (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList )
            	            {
            	            // InternalPipelineParser.g:770:11: (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList )
            	            int alt22=2;
            	            int LA22_0 = input.LA(1);

            	            if ( ((LA22_0>=RULE_COMPLEX_EXPRESSION && LA22_0<=RULE_VERSION)||LA22_0==RULE_STRING) ) {
            	                alt22=1;
            	            }
            	            else if ( (LA22_0==LeftSquareBracket) ) {
            	                alt22=2;
            	            }
            	            else {
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 22, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt22) {
            	                case 1 :
            	                    // InternalPipelineParser.g:771:12: lv_concurrency_33_1= ruleAnyData
            	                    {

            	                    												newCompositeNode(grammarAccess.getConfigurationsAccess().getConcurrencyAnyDataParserRuleCall_5_1_1_0_0());
            	                    											
            	                    pushFollow(FOLLOW_15);
            	                    lv_concurrency_33_1=ruleAnyData();

            	                    state._fsp--;


            	                    												if (current==null) {
            	                    													current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	                    												}
            	                    												set(
            	                    													current,
            	                    													"concurrency",
            	                    													lv_concurrency_33_1,
            	                    													"ca.mcgill.devops.pipeline.Pipeline.AnyData");
            	                    												afterParserOrEnumRuleCall();
            	                    											

            	                    }
            	                    break;
            	                case 2 :
            	                    // InternalPipelineParser.g:787:12: lv_concurrency_33_2= ruleArrayList
            	                    {

            	                    												newCompositeNode(grammarAccess.getConfigurationsAccess().getConcurrencyArrayListParserRuleCall_5_1_1_0_1());
            	                    											
            	                    pushFollow(FOLLOW_15);
            	                    lv_concurrency_33_2=ruleArrayList();

            	                    state._fsp--;


            	                    												if (current==null) {
            	                    													current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	                    												}
            	                    												set(
            	                    													current,
            	                    													"concurrency",
            	                    													lv_concurrency_33_2,
            	                    													"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
            	                    												afterParserOrEnumRuleCall();
            	                    											

            	                    }
            	                    break;

            	            }


            	            }


            	            }


            	            }
            	            break;

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 7 :
            	    // InternalPipelineParser.g:812:3: ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:812:3: ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) )
            	    // InternalPipelineParser.g:813:4: {...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6)");
            	    }
            	    // InternalPipelineParser.g:813:108: ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) )
            	    // InternalPipelineParser.g:814:5: ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6);
            	    				
            	    // InternalPipelineParser.g:817:8: ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) )
            	    // InternalPipelineParser.g:817:9: {...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:817:18: (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) )
            	    // InternalPipelineParser.g:817:19: otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) )
            	    {
            	    otherlv_34=(Token)match(input,Pool,FOLLOW_29); 

            	    								newLeafNode(otherlv_34, grammarAccess.getConfigurationsAccess().getPoolKeyword_6_0());
            	    							
            	    // InternalPipelineParser.g:821:8: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) )
            	    // InternalPipelineParser.g:822:9: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) )
            	    {
            	    // InternalPipelineParser.g:822:9: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) )
            	    // InternalPipelineParser.g:823:10: ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?)
            	    {
            	     
            	    									  getUnorderedGroupHelper().enter(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    									
            	    // InternalPipelineParser.g:826:10: ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?)
            	    // InternalPipelineParser.g:827:11: ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?
            	    {
            	    // InternalPipelineParser.g:827:11: ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+
            	    int cnt28=0;
            	    loop28:
            	    do {
            	        int alt28=3;
            	        int LA28_0 = input.LA(1);

            	        if ( (LA28_0==RULE_END) ) {
            	            int LA28_2 = input.LA(2);

            	            if ( (LA28_2==RULE_END) ) {
            	                int LA28_5 = input.LA(3);

            	                if ( getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	                    alt28=2;
            	                }


            	            }
            	            else if ( ( LA28_2 == EOF || LA28_2 >= Pull_request_review_comment && LA28_2 <= Pull_request_target || LA28_2 == Repository_dispatch || LA28_2 >= Deployment_status && LA28_2 <= Registry_package || LA28_2 >= Merge_requests && LA28_2 <= Project_column || LA28_2 == WorkflowRules || LA28_2 >= Issue_comment && LA28_2 <= Workflow_call || LA28_2 == LockBehavior || LA28_2 >= Project_card && LA28_2 <= Pull_request || LA28_2 >= Workflow_run && LA28_2 <= Concurrency || LA28_2 == Permissions || LA28_2 >= AutoCancel && LA28_2 <= Conditions || LA28_2 == Deployment || LA28_2 >= Page_build && LA28_2 <= Parameters || LA28_2 == PlanBranch || LA28_2 == Repository || LA28_2 >= Bitbucket && LA28_2 <= Check_run || LA28_2 >= Milestone && LA28_2 <= Pipelines || LA28_2 == Resources || LA28_2 >= Scheduled && LA28_2 <= Variables || LA28_2 == Branches || LA28_2 == Defaults || LA28_2 >= RunName && LA28_2 <= Schedule || LA28_2 == Changes || LA28_2 >= Default && LA28_2 <= Demands || LA28_2 == Extends || LA28_2 == Include || LA28_2 == Project || LA28_2 == Release || LA28_2 >= Trigger && LA28_2 <= Version || LA28_2 >= Create && LA28_2 <= Delete || LA28_2 >= Drafts && LA28_2 <= Gollum || LA28_2 == Issues || LA28_2 == Public || LA28_2 == Remote || LA28_2 >= Stages && LA28_2 <= Status || LA28_2 == Label || LA28_2 == Paths || LA28_2 == Rules || LA28_2 == Watch || LA28_2 >= Cron && LA28_2 <= Name || LA28_2 == Only || LA28_2 >= Pool && LA28_2 <= Push || LA28_2 == Tags || LA28_2 == Env || LA28_2 == None || LA28_2 >= On && LA28_2 <= Pr || LA28_2 == RULE_ID || LA28_2 == RULE_BEGIN ) && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	                alt28=2;
            	            }


            	        }
            	        else if ( LA28_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0) ) {
            	            alt28=1;
            	        }
            	        else if ( LA28_0 == Demands && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	            alt28=2;
            	        }


            	        switch (alt28) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:828:9: ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:828:9: ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) )
            	    	    // InternalPipelineParser.g:829:10: {...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0)");
            	    	    }
            	    	    // InternalPipelineParser.g:829:118: ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) )
            	    	    // InternalPipelineParser.g:830:11: ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) )
            	    	    {

            	    	    											getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 0);
            	    	    										
            	    	    // InternalPipelineParser.g:833:14: ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) )
            	    	    // InternalPipelineParser.g:833:15: {...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:833:24: (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? )
            	    	    // InternalPipelineParser.g:833:25: this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )?
            	    	    {
            	    	    this_BEGIN_36=(Token)match(input,RULE_BEGIN,FOLLOW_30); 

            	    	    														newLeafNode(this_BEGIN_36, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_6_1_0_0());
            	    	    													
            	    	    // InternalPipelineParser.g:837:14: (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) )
            	    	    // InternalPipelineParser.g:838:15: otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) )
            	    	    {
            	    	    otherlv_37=(Token)match(input,Name,FOLLOW_14); 

            	    	    															newLeafNode(otherlv_37, grammarAccess.getConfigurationsAccess().getNameKeyword_6_1_0_1_0());
            	    	    														
            	    	    // InternalPipelineParser.g:842:15: ( (lv_vmName_38_0= RULE_ID ) )
            	    	    // InternalPipelineParser.g:843:16: (lv_vmName_38_0= RULE_ID )
            	    	    {
            	    	    // InternalPipelineParser.g:843:16: (lv_vmName_38_0= RULE_ID )
            	    	    // InternalPipelineParser.g:844:17: lv_vmName_38_0= RULE_ID
            	    	    {
            	    	    lv_vmName_38_0=(Token)match(input,RULE_ID,FOLLOW_31); 

            	    	    																	newLeafNode(lv_vmName_38_0, grammarAccess.getConfigurationsAccess().getVmNameIDTerminalRuleCall_6_1_0_1_1_0());
            	    	    																

            	    	    																	if (current==null) {
            	    	    																		current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	    																	}
            	    	    																	setWithLastConsumed(
            	    	    																		current,
            	    	    																		"vmName",
            	    	    																		lv_vmName_38_0,
            	    	    																		"ca.mcgill.devops.pipeline.Pipeline.ID");
            	    	    																

            	    	    }


            	    	    }


            	    	    }

            	    	    // InternalPipelineParser.g:861:14: (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )?
            	    	    int alt25=2;
            	    	    int LA25_0 = input.LA(1);

            	    	    if ( (LA25_0==VmImage) ) {
            	    	        alt25=1;
            	    	    }
            	    	    switch (alt25) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:862:15: otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) )
            	    	            {
            	    	            otherlv_39=(Token)match(input,VmImage,FOLLOW_19); 

            	    	            															newLeafNode(otherlv_39, grammarAccess.getConfigurationsAccess().getVmImageKeyword_6_1_0_2_0());
            	    	            														
            	    	            // InternalPipelineParser.g:866:15: ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) )
            	    	            // InternalPipelineParser.g:867:16: ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) )
            	    	            {
            	    	            // InternalPipelineParser.g:867:16: ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) )
            	    	            // InternalPipelineParser.g:868:17: (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING )
            	    	            {
            	    	            // InternalPipelineParser.g:868:17: (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING )
            	    	            int alt24=2;
            	    	            int LA24_0 = input.LA(1);

            	    	            if ( (LA24_0==RULE_ID) ) {
            	    	                alt24=1;
            	    	            }
            	    	            else if ( (LA24_0==RULE_STRING) ) {
            	    	                alt24=2;
            	    	            }
            	    	            else {
            	    	                NoViableAltException nvae =
            	    	                    new NoViableAltException("", 24, 0, input);

            	    	                throw nvae;
            	    	            }
            	    	            switch (alt24) {
            	    	                case 1 :
            	    	                    // InternalPipelineParser.g:869:18: lv_vmImage_40_1= RULE_ID
            	    	                    {
            	    	                    lv_vmImage_40_1=(Token)match(input,RULE_ID,FOLLOW_32); 

            	    	                    																		newLeafNode(lv_vmImage_40_1, grammarAccess.getConfigurationsAccess().getVmImageIDTerminalRuleCall_6_1_0_2_1_0_0());
            	    	                    																	

            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		setWithLastConsumed(
            	    	                    																			current,
            	    	                    																			"vmImage",
            	    	                    																			lv_vmImage_40_1,
            	    	                    																			"ca.mcgill.devops.pipeline.Pipeline.ID");
            	    	                    																	

            	    	                    }
            	    	                    break;
            	    	                case 2 :
            	    	                    // InternalPipelineParser.g:884:18: lv_vmImage_40_2= RULE_STRING
            	    	                    {
            	    	                    lv_vmImage_40_2=(Token)match(input,RULE_STRING,FOLLOW_32); 

            	    	                    																		newLeafNode(lv_vmImage_40_2, grammarAccess.getConfigurationsAccess().getVmImageSTRINGTerminalRuleCall_6_1_0_2_1_0_1());
            	    	                    																	

            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElement(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		setWithLastConsumed(
            	    	                    																			current,
            	    	                    																			"vmImage",
            	    	                    																			lv_vmImage_40_2,
            	    	                    																			"org.eclipse.xtext.common.Terminals.STRING");
            	    	                    																	

            	    	                    }
            	    	                    break;

            	    	            }


            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }


            	    	    }


            	    	    }

            	    	     
            	    	    											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // InternalPipelineParser.g:908:9: ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) )
            	    	    {
            	    	    // InternalPipelineParser.g:908:9: ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) )
            	    	    // InternalPipelineParser.g:909:10: {...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) )
            	    	    {
            	    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1)");
            	    	    }
            	    	    // InternalPipelineParser.g:909:118: ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) )
            	    	    // InternalPipelineParser.g:910:11: ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) )
            	    	    {

            	    	    											getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1(), 1);
            	    	    										
            	    	    // InternalPipelineParser.g:913:14: ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) )
            	    	    // InternalPipelineParser.g:913:15: {...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END )
            	    	    {
            	    	    if ( !((true)) ) {
            	    	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    	    }
            	    	    // InternalPipelineParser.g:913:24: ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END )
            	    	    // InternalPipelineParser.g:913:25: (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END
            	    	    {
            	    	    // InternalPipelineParser.g:913:25: (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )?
            	    	    int alt27=2;
            	    	    int LA27_0 = input.LA(1);

            	    	    if ( (LA27_0==Demands) ) {
            	    	        alt27=1;
            	    	    }
            	    	    switch (alt27) {
            	    	        case 1 :
            	    	            // InternalPipelineParser.g:914:15: otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) )
            	    	            {
            	    	            otherlv_41=(Token)match(input,Demands,FOLLOW_33); 

            	    	            															newLeafNode(otherlv_41, grammarAccess.getConfigurationsAccess().getDemandsKeyword_6_1_1_0_0());
            	    	            														
            	    	            // InternalPipelineParser.g:918:15: ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) )
            	    	            // InternalPipelineParser.g:919:16: ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) )
            	    	            {
            	    	            // InternalPipelineParser.g:919:16: ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) )
            	    	            // InternalPipelineParser.g:920:17: (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues )
            	    	            {
            	    	            // InternalPipelineParser.g:920:17: (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues )
            	    	            int alt26=2;
            	    	            int LA26_0 = input.LA(1);

            	    	            if ( ((LA26_0>=RULE_COMPLEX_EXPRESSION && LA26_0<=RULE_VERSION)||LA26_0==RULE_STRING) ) {
            	    	                alt26=1;
            	    	            }
            	    	            else if ( (LA26_0==HyphenMinus||LA26_0==RULE_BEGIN) ) {
            	    	                alt26=2;
            	    	            }
            	    	            else {
            	    	                NoViableAltException nvae =
            	    	                    new NoViableAltException("", 26, 0, input);

            	    	                throw nvae;
            	    	            }
            	    	            switch (alt26) {
            	    	                case 1 :
            	    	                    // InternalPipelineParser.g:921:18: lv_vmDemands_42_1= ruleAnyData
            	    	                    {

            	    	                    																		newCompositeNode(grammarAccess.getConfigurationsAccess().getVmDemandsAnyDataParserRuleCall_6_1_1_0_1_0_0());
            	    	                    																	
            	    	                    pushFollow(FOLLOW_20);
            	    	                    lv_vmDemands_42_1=ruleAnyData();

            	    	                    state._fsp--;


            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		set(
            	    	                    																			current,
            	    	                    																			"vmDemands",
            	    	                    																			lv_vmDemands_42_1,
            	    	                    																			"ca.mcgill.devops.pipeline.Pipeline.AnyData");
            	    	                    																		afterParserOrEnumRuleCall();
            	    	                    																	

            	    	                    }
            	    	                    break;
            	    	                case 2 :
            	    	                    // InternalPipelineParser.g:937:18: lv_vmDemands_42_2= ruleHyphenValues
            	    	                    {

            	    	                    																		newCompositeNode(grammarAccess.getConfigurationsAccess().getVmDemandsHyphenValuesParserRuleCall_6_1_1_0_1_0_1());
            	    	                    																	
            	    	                    pushFollow(FOLLOW_20);
            	    	                    lv_vmDemands_42_2=ruleHyphenValues();

            	    	                    state._fsp--;


            	    	                    																		if (current==null) {
            	    	                    																			current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	                    																		}
            	    	                    																		set(
            	    	                    																			current,
            	    	                    																			"vmDemands",
            	    	                    																			lv_vmDemands_42_2,
            	    	                    																			"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
            	    	                    																		afterParserOrEnumRuleCall();
            	    	                    																	

            	    	                    }
            	    	                    break;

            	    	            }


            	    	            }


            	    	            }


            	    	            }
            	    	            break;

            	    	    }

            	    	    this_END_43=(Token)match(input,RULE_END,FOLLOW_32); 

            	    	    														newLeafNode(this_END_43, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_6_1_1_1());
            	    	    													

            	    	    }


            	    	    }

            	    	     
            	    	    											getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt28 >= 1 ) break loop28;
            	                EarlyExitException eee =
            	                    new EarlyExitException(28, input);
            	                throw eee;
            	        }
            	        cnt28++;
            	    } while (true);

            	    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1()) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canLeave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1())");
            	    }

            	    }


            	    }

            	     
            	    									  getUnorderedGroupHelper().leave(grammarAccess.getConfigurationsAccess().getUnorderedGroup_6_1());
            	    									

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 8 :
            	    // InternalPipelineParser.g:980:3: ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:980:3: ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:981:4: {...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7)");
            	    }
            	    // InternalPipelineParser.g:981:108: ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:982:5: ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7);
            	    				
            	    // InternalPipelineParser.g:985:8: ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) )
            	    // InternalPipelineParser.g:985:9: {...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:985:18: (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) )
            	    // InternalPipelineParser.g:985:19: otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END )
            	    {
            	    otherlv_44=(Token)match(input,Resources,FOLLOW_16); 

            	    								newLeafNode(otherlv_44, grammarAccess.getConfigurationsAccess().getResourcesKeyword_7_0());
            	    							
            	    // InternalPipelineParser.g:989:8: (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END )
            	    // InternalPipelineParser.g:990:9: this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END
            	    {
            	    this_BEGIN_45=(Token)match(input,RULE_BEGIN,FOLLOW_34); 

            	    									newLeafNode(this_BEGIN_45, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_7_1_0());
            	    								
            	    // InternalPipelineParser.g:994:9: ( (lv_resources_46_0= ruleResource ) )*
            	    loop29:
            	    do {
            	        int alt29=2;
            	        int LA29_0 = input.LA(1);

            	        if ( (LA29_0==Repositories||LA29_0==Containers||LA29_0==Pipelines||LA29_0==Packages||LA29_0==Webhooks||LA29_0==Builds) ) {
            	            alt29=1;
            	        }


            	        switch (alt29) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:995:10: (lv_resources_46_0= ruleResource )
            	    	    {
            	    	    // InternalPipelineParser.g:995:10: (lv_resources_46_0= ruleResource )
            	    	    // InternalPipelineParser.g:996:11: lv_resources_46_0= ruleResource
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getResourcesResourceParserRuleCall_7_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_34);
            	    	    lv_resources_46_0=ruleResource();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"resources",
            	    	    												lv_resources_46_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.Resource");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop29;
            	        }
            	    } while (true);

            	    this_END_47=(Token)match(input,RULE_END,FOLLOW_15); 

            	    									newLeafNode(this_END_47, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_7_1_2());
            	    								

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 9 :
            	    // InternalPipelineParser.g:1024:3: ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:1024:3: ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) )
            	    // InternalPipelineParser.g:1025:4: {...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8)");
            	    }
            	    // InternalPipelineParser.g:1025:108: ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) )
            	    // InternalPipelineParser.g:1026:5: ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8);
            	    				
            	    // InternalPipelineParser.g:1029:8: ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) )
            	    // InternalPipelineParser.g:1029:9: {...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:1029:18: (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) )
            	    // InternalPipelineParser.g:1029:19: otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) )
            	    {
            	    otherlv_48=(Token)match(input,Version,FOLLOW_35); 

            	    								newLeafNode(otherlv_48, grammarAccess.getConfigurationsAccess().getVersionKeyword_8_0());
            	    							
            	    // InternalPipelineParser.g:1033:8: ( (lv_version_49_0= RULE_VERSION ) )
            	    // InternalPipelineParser.g:1034:9: (lv_version_49_0= RULE_VERSION )
            	    {
            	    // InternalPipelineParser.g:1034:9: (lv_version_49_0= RULE_VERSION )
            	    // InternalPipelineParser.g:1035:10: lv_version_49_0= RULE_VERSION
            	    {
            	    lv_version_49_0=(Token)match(input,RULE_VERSION,FOLLOW_15); 

            	    										newLeafNode(lv_version_49_0, grammarAccess.getConfigurationsAccess().getVersionVERSIONTerminalRuleCall_8_1_0());
            	    									

            	    										if (current==null) {
            	    											current = createModelElement(grammarAccess.getConfigurationsRule());
            	    										}
            	    										setWithLastConsumed(
            	    											current,
            	    											"version",
            	    											lv_version_49_0,
            	    											"ca.mcgill.devops.pipeline.Pipeline.VERSION");
            	    									

            	    }


            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 10 :
            	    // InternalPipelineParser.g:1057:3: ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:1057:3: ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:1058:4: {...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9)");
            	    }
            	    // InternalPipelineParser.g:1058:108: ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:1059:5: ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9);
            	    				
            	    // InternalPipelineParser.g:1062:8: ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) )
            	    // InternalPipelineParser.g:1062:9: {...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:1062:18: (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) )
            	    // InternalPipelineParser.g:1062:19: otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END )
            	    {
            	    otherlv_50=(Token)match(input,Variables,FOLLOW_16); 

            	    								newLeafNode(otherlv_50, grammarAccess.getConfigurationsAccess().getVariablesKeyword_9_0());
            	    							
            	    // InternalPipelineParser.g:1066:8: (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END )
            	    // InternalPipelineParser.g:1067:9: this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END
            	    {
            	    this_BEGIN_51=(Token)match(input,RULE_BEGIN,FOLLOW_36); 

            	    									newLeafNode(this_BEGIN_51, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_9_1_0());
            	    								
            	    // InternalPipelineParser.g:1071:9: ( (lv_pplVariables_52_0= ruleVariable ) )*
            	    loop30:
            	    do {
            	        int alt30=2;
            	        int LA30_0 = input.LA(1);

            	        if ( (LA30_0==HyphenMinus||LA30_0==RULE_ID||LA30_0==RULE_BEGIN) ) {
            	            alt30=1;
            	        }


            	        switch (alt30) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:1072:10: (lv_pplVariables_52_0= ruleVariable )
            	    	    {
            	    	    // InternalPipelineParser.g:1072:10: (lv_pplVariables_52_0= ruleVariable )
            	    	    // InternalPipelineParser.g:1073:11: lv_pplVariables_52_0= ruleVariable
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getPplVariablesVariableParserRuleCall_9_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_36);
            	    	    lv_pplVariables_52_0=ruleVariable();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"pplVariables",
            	    	    												lv_pplVariables_52_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.Variable");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop30;
            	        }
            	    } while (true);

            	    this_END_53=(Token)match(input,RULE_END,FOLLOW_15); 

            	    									newLeafNode(this_END_53, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_9_1_2());
            	    								

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 11 :
            	    // InternalPipelineParser.g:1101:3: ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) )
            	    {
            	    // InternalPipelineParser.g:1101:3: ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) )
            	    // InternalPipelineParser.g:1102:4: {...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10)");
            	    }
            	    // InternalPipelineParser.g:1102:109: ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) )
            	    // InternalPipelineParser.g:1103:5: ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10);
            	    				
            	    // InternalPipelineParser.g:1106:8: ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) )
            	    // InternalPipelineParser.g:1106:9: {...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:1106:18: (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* )
            	    // InternalPipelineParser.g:1106:19: otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )*
            	    {
            	    otherlv_54=(Token)match(input,Parameters,FOLLOW_37); 

            	    								newLeafNode(otherlv_54, grammarAccess.getConfigurationsAccess().getParametersKeyword_10_0());
            	    							
            	    // InternalPipelineParser.g:1110:8: (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )*
            	    loop31:
            	    do {
            	        int alt31=2;
            	        int LA31_0 = input.LA(1);

            	        if ( (LA31_0==HyphenMinus) ) {
            	            alt31=1;
            	        }


            	        switch (alt31) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:1111:9: otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) )
            	    	    {
            	    	    otherlv_55=(Token)match(input,HyphenMinus,FOLLOW_38); 

            	    	    									newLeafNode(otherlv_55, grammarAccess.getConfigurationsAccess().getHyphenMinusKeyword_10_1_0());
            	    	    								
            	    	    // InternalPipelineParser.g:1115:9: ( (lv_parameterValues_56_0= ruleParameterValue ) )
            	    	    // InternalPipelineParser.g:1116:10: (lv_parameterValues_56_0= ruleParameterValue )
            	    	    {
            	    	    // InternalPipelineParser.g:1116:10: (lv_parameterValues_56_0= ruleParameterValue )
            	    	    // InternalPipelineParser.g:1117:11: lv_parameterValues_56_0= ruleParameterValue
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getParameterValuesParameterValueParserRuleCall_10_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_37);
            	    	    lv_parameterValues_56_0=ruleParameterValue();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"parameterValues",
            	    	    												lv_parameterValues_56_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop31;
            	        }
            	    } while (true);


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;
            	case 12 :
            	    // InternalPipelineParser.g:1141:3: ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) )
            	    {
            	    // InternalPipelineParser.g:1141:3: ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) )
            	    // InternalPipelineParser.g:1142:4: {...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) )
            	    {
            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11)");
            	    }
            	    // InternalPipelineParser.g:1142:109: ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) )
            	    // InternalPipelineParser.g:1143:5: ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) )
            	    {

            	    					getUnorderedGroupHelper().select(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11);
            	    				
            	    // InternalPipelineParser.g:1146:8: ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) )
            	    // InternalPipelineParser.g:1146:9: {...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) )
            	    {
            	    if ( !((true)) ) {
            	        throw new FailedPredicateException(input, "ruleConfigurations", "true");
            	    }
            	    // InternalPipelineParser.g:1146:18: ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) )
            	    // InternalPipelineParser.g:1146:19: ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END )
            	    {
            	    // InternalPipelineParser.g:1146:19: ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) )
            	    // InternalPipelineParser.g:1147:9: ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) )
            	    {
            	    // InternalPipelineParser.g:1147:9: ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) )
            	    // InternalPipelineParser.g:1148:10: (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include )
            	    {
            	    // InternalPipelineParser.g:1148:10: (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include )
            	    int alt32=2;
            	    int LA32_0 = input.LA(1);

            	    if ( (LA32_0==Extends) ) {
            	        alt32=1;
            	    }
            	    else if ( (LA32_0==Include) ) {
            	        alt32=2;
            	    }
            	    else {
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 32, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt32) {
            	        case 1 :
            	            // InternalPipelineParser.g:1149:11: lv_extendOrInclude_57_1= Extends
            	            {
            	            lv_extendOrInclude_57_1=(Token)match(input,Extends,FOLLOW_16); 

            	            											newLeafNode(lv_extendOrInclude_57_1, grammarAccess.getConfigurationsAccess().getExtendOrIncludeExtendsKeyword_11_0_0_0());
            	            										

            	            											if (current==null) {
            	            												current = createModelElement(grammarAccess.getConfigurationsRule());
            	            											}
            	            											setWithLastConsumed(current, "extendOrInclude", lv_extendOrInclude_57_1, null);
            	            										

            	            }
            	            break;
            	        case 2 :
            	            // InternalPipelineParser.g:1160:11: lv_extendOrInclude_57_2= Include
            	            {
            	            lv_extendOrInclude_57_2=(Token)match(input,Include,FOLLOW_16); 

            	            											newLeafNode(lv_extendOrInclude_57_2, grammarAccess.getConfigurationsAccess().getExtendOrIncludeIncludeKeyword_11_0_0_1());
            	            										

            	            											if (current==null) {
            	            												current = createModelElement(grammarAccess.getConfigurationsRule());
            	            											}
            	            											setWithLastConsumed(current, "extendOrInclude", lv_extendOrInclude_57_2, null);
            	            										

            	            }
            	            break;

            	    }


            	    }


            	    }

            	    // InternalPipelineParser.g:1173:8: (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END )
            	    // InternalPipelineParser.g:1174:9: this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END
            	    {
            	    this_BEGIN_58=(Token)match(input,RULE_BEGIN,FOLLOW_38); 

            	    									newLeafNode(this_BEGIN_58, grammarAccess.getConfigurationsAccess().getBEGINTerminalRuleCall_11_1_0());
            	    								
            	    // InternalPipelineParser.g:1178:9: ( (lv_extendedParameters_59_0= ruleParameterValue ) )+
            	    int cnt33=0;
            	    loop33:
            	    do {
            	        int alt33=2;
            	        int LA33_0 = input.LA(1);

            	        if ( ((LA33_0>=Repository_dispatch && LA33_0<=ContinueOnError_1)||(LA33_0>=Workflow_dispatch && LA33_0<=WorkingDirectory)||(LA33_0>=TimeoutInMinutes && LA33_0<=ContinueOnError)||LA33_0==TimeoutMinutes||LA33_0==ReleaseTrigger||(LA33_0>=Allow_failure && LA33_0<=DeployTrigger)||(LA33_0>=Notifications && LA33_0<=After_script)||(LA33_0>=DefaultsRun && LA33_0<=PathsIgnore)||(LA33_0>=Pull_request && LA33_0<=Workflow_run)||(LA33_0>=Concurrency && LA33_0<=Definitions)||LA33_0==Description||(LA33_0>=DisplayName && LA33_0<=GetPackage)||(LA33_0>=Parameters && LA33_0<=Permission)||(LA33_0>=Powershell && LA33_0<=Artifacts)||(LA33_0>=Condition && LA33_0<=FailFast)||(LA33_0>=Pipelines && LA33_0<=RunPolicy)||(LA33_0>=Schedules && LA33_0<=Workspace)||(LA33_0>=Branches && LA33_0<=Checkout)||(LA33_0>=Defaults && LA33_0<=Download)||(LA33_0>=MaxTime && LA33_0<=PreBuild)||(LA33_0>=Readonly && LA33_0<=Snapshot)||(LA33_0>=Strategy && LA33_0<=Webhooks)||(LA33_0>=Command && LA33_0<=Caches)||(LA33_0>=Docker && LA33_0<=Except)||LA33_0==Inputs||(LA33_0>=Labels && LA33_0<=Policy)||LA33_0==Queued||(LA33_0>=Script && LA33_0<=Image)||(LA33_0>=Paths && LA33_0<=Value)||(LA33_0>=Auth && LA33_0<=Cron)||LA33_0==Name||(LA33_0>=Only && LA33_0<=Pwsh)||(LA33_0>=Step && LA33_0<=With)||(LA33_0>=Env && LA33_0<=Job)||(LA33_0>=Run && LA33_0<=On)||LA33_0==RULE_COMPLEX_EXPRESSION||LA33_0==RULE_ID) ) {
            	            alt33=1;
            	        }


            	        switch (alt33) {
            	    	case 1 :
            	    	    // InternalPipelineParser.g:1179:10: (lv_extendedParameters_59_0= ruleParameterValue )
            	    	    {
            	    	    // InternalPipelineParser.g:1179:10: (lv_extendedParameters_59_0= ruleParameterValue )
            	    	    // InternalPipelineParser.g:1180:11: lv_extendedParameters_59_0= ruleParameterValue
            	    	    {

            	    	    											newCompositeNode(grammarAccess.getConfigurationsAccess().getExtendedParametersParameterValueParserRuleCall_11_1_1_0());
            	    	    										
            	    	    pushFollow(FOLLOW_39);
            	    	    lv_extendedParameters_59_0=ruleParameterValue();

            	    	    state._fsp--;


            	    	    											if (current==null) {
            	    	    												current = createModelElementForParent(grammarAccess.getConfigurationsRule());
            	    	    											}
            	    	    											add(
            	    	    												current,
            	    	    												"extendedParameters",
            	    	    												lv_extendedParameters_59_0,
            	    	    												"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
            	    	    											afterParserOrEnumRuleCall();
            	    	    										

            	    	    }


            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt33 >= 1 ) break loop33;
            	                EarlyExitException eee =
            	                    new EarlyExitException(33, input);
            	                throw eee;
            	        }
            	        cnt33++;
            	    } while (true);

            	    this_END_60=(Token)match(input,RULE_END,FOLLOW_15); 

            	    									newLeafNode(this_END_60, grammarAccess.getConfigurationsAccess().getENDTerminalRuleCall_11_1_2());
            	    								

            	    }


            	    }


            	    }

            	     
            	    					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            	    				

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }


            }

             
            			  getUnorderedGroupHelper().leave(grammarAccess.getConfigurationsAccess().getUnorderedGroup());
            			

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleConfigurations"


    // $ANTLR start "entryRuleVariable"
    // InternalPipelineParser.g:1218:1: entryRuleVariable returns [EObject current=null] : iv_ruleVariable= ruleVariable EOF ;
    public final EObject entryRuleVariable() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleVariable = null;


        try {
            // InternalPipelineParser.g:1218:49: (iv_ruleVariable= ruleVariable EOF )
            // InternalPipelineParser.g:1219:2: iv_ruleVariable= ruleVariable EOF
            {
             newCompositeNode(grammarAccess.getVariableRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleVariable=ruleVariable();

            state._fsp--;

             current =iv_ruleVariable; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleVariable"


    // $ANTLR start "ruleVariable"
    // InternalPipelineParser.g:1225:1: ruleVariable returns [EObject current=null] : ( ( ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) ) | ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? ) ) | (this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END ) ) ;
    public final EObject ruleVariable() throws RecognitionException {
        EObject current = null;

        Token lv_variableKey_0_0=null;
        Token otherlv_1=null;
        Token lv_variableValue_2_1=null;
        Token lv_variableValue_2_2=null;
        Token lv_variableValue_2_3=null;
        Token otherlv_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token this_BEGIN_7=null;
        Token otherlv_8=null;
        Token otherlv_10=null;
        Token lv_readonly_11_0=null;
        Token this_END_12=null;
        Token this_BEGIN_13=null;
        Token lv_name_14_0=null;
        Token otherlv_15=null;
        Token this_BEGIN_16=null;
        Token this_END_18=null;
        Token this_END_19=null;
        AntlrDatatypeRuleToken lv_name_6_0 = null;

        AntlrDatatypeRuleToken lv_value_9_0 = null;

        AntlrDatatypeRuleToken lv_variables_17_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:1231:2: ( ( ( ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) ) | ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? ) ) | (this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END ) ) )
            // InternalPipelineParser.g:1232:2: ( ( ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) ) | ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? ) ) | (this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END ) )
            {
            // InternalPipelineParser.g:1232:2: ( ( ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) ) | ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? ) ) | (this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END ) )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==HyphenMinus||LA41_0==RULE_ID) ) {
                alt41=1;
            }
            else if ( (LA41_0==RULE_BEGIN) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // InternalPipelineParser.g:1233:3: ( ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) ) | ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? ) )
                    {
                    // InternalPipelineParser.g:1233:3: ( ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) ) | ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? ) )
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==RULE_ID) ) {
                        alt39=1;
                    }
                    else if ( (LA39_0==HyphenMinus) ) {
                        alt39=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 39, 0, input);

                        throw nvae;
                    }
                    switch (alt39) {
                        case 1 :
                            // InternalPipelineParser.g:1234:4: ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) )
                            {
                            // InternalPipelineParser.g:1234:4: ( ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) ) )
                            // InternalPipelineParser.g:1235:5: ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon ) ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) )
                            {
                            // InternalPipelineParser.g:1235:5: ( ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon )
                            // InternalPipelineParser.g:1236:6: ( (lv_variableKey_0_0= RULE_ID ) ) otherlv_1= Colon
                            {
                            // InternalPipelineParser.g:1236:6: ( (lv_variableKey_0_0= RULE_ID ) )
                            // InternalPipelineParser.g:1237:7: (lv_variableKey_0_0= RULE_ID )
                            {
                            // InternalPipelineParser.g:1237:7: (lv_variableKey_0_0= RULE_ID )
                            // InternalPipelineParser.g:1238:8: lv_variableKey_0_0= RULE_ID
                            {
                            lv_variableKey_0_0=(Token)match(input,RULE_ID,FOLLOW_40); 

                            								newLeafNode(lv_variableKey_0_0, grammarAccess.getVariableAccess().getVariableKeyIDTerminalRuleCall_0_0_0_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getVariableRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"variableKey",
                            									lv_variableKey_0_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.ID");
                            							

                            }


                            }

                            otherlv_1=(Token)match(input,Colon,FOLLOW_41); 

                            						newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getColonKeyword_0_0_0_1());
                            					

                            }

                            // InternalPipelineParser.g:1259:5: ( ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) ) )
                            // InternalPipelineParser.g:1260:6: ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) )
                            {
                            // InternalPipelineParser.g:1260:6: ( (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION ) )
                            // InternalPipelineParser.g:1261:7: (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION )
                            {
                            // InternalPipelineParser.g:1261:7: (lv_variableValue_2_1= RULE_ID | lv_variableValue_2_2= RULE_STRING | lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION )
                            int alt35=3;
                            switch ( input.LA(1) ) {
                            case RULE_ID:
                                {
                                alt35=1;
                                }
                                break;
                            case RULE_STRING:
                                {
                                alt35=2;
                                }
                                break;
                            case RULE_COMPLEX_EXPRESSION:
                                {
                                alt35=3;
                                }
                                break;
                            default:
                                NoViableAltException nvae =
                                    new NoViableAltException("", 35, 0, input);

                                throw nvae;
                            }

                            switch (alt35) {
                                case 1 :
                                    // InternalPipelineParser.g:1262:8: lv_variableValue_2_1= RULE_ID
                                    {
                                    lv_variableValue_2_1=(Token)match(input,RULE_ID,FOLLOW_2); 

                                    								newLeafNode(lv_variableValue_2_1, grammarAccess.getVariableAccess().getVariableValueIDTerminalRuleCall_0_0_1_0_0());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getVariableRule());
                                    								}
                                    								setWithLastConsumed(
                                    									current,
                                    									"variableValue",
                                    									lv_variableValue_2_1,
                                    									"ca.mcgill.devops.pipeline.Pipeline.ID");
                                    							

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:1277:8: lv_variableValue_2_2= RULE_STRING
                                    {
                                    lv_variableValue_2_2=(Token)match(input,RULE_STRING,FOLLOW_2); 

                                    								newLeafNode(lv_variableValue_2_2, grammarAccess.getVariableAccess().getVariableValueSTRINGTerminalRuleCall_0_0_1_0_1());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getVariableRule());
                                    								}
                                    								setWithLastConsumed(
                                    									current,
                                    									"variableValue",
                                    									lv_variableValue_2_2,
                                    									"org.eclipse.xtext.common.Terminals.STRING");
                                    							

                                    }
                                    break;
                                case 3 :
                                    // InternalPipelineParser.g:1292:8: lv_variableValue_2_3= RULE_COMPLEX_EXPRESSION
                                    {
                                    lv_variableValue_2_3=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_2); 

                                    								newLeafNode(lv_variableValue_2_3, grammarAccess.getVariableAccess().getVariableValueCOMPLEX_EXPRESSIONTerminalRuleCall_0_0_1_0_2());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getVariableRule());
                                    								}
                                    								setWithLastConsumed(
                                    									current,
                                    									"variableValue",
                                    									lv_variableValue_2_3,
                                    									"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
                                    							

                                    }
                                    break;

                            }


                            }


                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:1311:4: ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? )
                            {
                            // InternalPipelineParser.g:1311:4: ( (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )? )
                            // InternalPipelineParser.g:1312:5: (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) ) (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )?
                            {
                            // InternalPipelineParser.g:1312:5: (otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) ) )
                            // InternalPipelineParser.g:1313:6: otherlv_3= HyphenMinus (otherlv_4= Name | otherlv_5= Group ) ( (lv_name_6_0= ruleAnyData ) )
                            {
                            otherlv_3=(Token)match(input,HyphenMinus,FOLLOW_42); 

                            						newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getHyphenMinusKeyword_0_1_0_0());
                            					
                            // InternalPipelineParser.g:1317:6: (otherlv_4= Name | otherlv_5= Group )
                            int alt36=2;
                            int LA36_0 = input.LA(1);

                            if ( (LA36_0==Name) ) {
                                alt36=1;
                            }
                            else if ( (LA36_0==Group) ) {
                                alt36=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 36, 0, input);

                                throw nvae;
                            }
                            switch (alt36) {
                                case 1 :
                                    // InternalPipelineParser.g:1318:7: otherlv_4= Name
                                    {
                                    otherlv_4=(Token)match(input,Name,FOLLOW_43); 

                                    							newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getNameKeyword_0_1_0_1_0());
                                    						

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:1323:7: otherlv_5= Group
                                    {
                                    otherlv_5=(Token)match(input,Group,FOLLOW_43); 

                                    							newLeafNode(otherlv_5, grammarAccess.getVariableAccess().getGroupKeyword_0_1_0_1_1());
                                    						

                                    }
                                    break;

                            }

                            // InternalPipelineParser.g:1328:6: ( (lv_name_6_0= ruleAnyData ) )
                            // InternalPipelineParser.g:1329:7: (lv_name_6_0= ruleAnyData )
                            {
                            // InternalPipelineParser.g:1329:7: (lv_name_6_0= ruleAnyData )
                            // InternalPipelineParser.g:1330:8: lv_name_6_0= ruleAnyData
                            {

                            								newCompositeNode(grammarAccess.getVariableAccess().getNameAnyDataParserRuleCall_0_1_0_2_0());
                            							
                            pushFollow(FOLLOW_44);
                            lv_name_6_0=ruleAnyData();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getVariableRule());
                            								}
                            								set(
                            									current,
                            									"name",
                            									lv_name_6_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                            								afterParserOrEnumRuleCall();
                            							

                            }


                            }


                            }

                            // InternalPipelineParser.g:1348:5: (this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END )?
                            int alt38=2;
                            int LA38_0 = input.LA(1);

                            if ( (LA38_0==RULE_BEGIN) ) {
                                int LA38_1 = input.LA(2);

                                if ( (LA38_1==Value) ) {
                                    alt38=1;
                                }
                            }
                            switch (alt38) {
                                case 1 :
                                    // InternalPipelineParser.g:1349:6: this_BEGIN_7= RULE_BEGIN (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) ) (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )? this_END_12= RULE_END
                                    {
                                    this_BEGIN_7=(Token)match(input,RULE_BEGIN,FOLLOW_45); 

                                    						newLeafNode(this_BEGIN_7, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_0_1_1_0());
                                    					
                                    // InternalPipelineParser.g:1353:6: (otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) ) )
                                    // InternalPipelineParser.g:1354:7: otherlv_8= Value ( (lv_value_9_0= ruleAnyData ) )
                                    {
                                    otherlv_8=(Token)match(input,Value,FOLLOW_43); 

                                    							newLeafNode(otherlv_8, grammarAccess.getVariableAccess().getValueKeyword_0_1_1_1_0());
                                    						
                                    // InternalPipelineParser.g:1358:7: ( (lv_value_9_0= ruleAnyData ) )
                                    // InternalPipelineParser.g:1359:8: (lv_value_9_0= ruleAnyData )
                                    {
                                    // InternalPipelineParser.g:1359:8: (lv_value_9_0= ruleAnyData )
                                    // InternalPipelineParser.g:1360:9: lv_value_9_0= ruleAnyData
                                    {

                                    									newCompositeNode(grammarAccess.getVariableAccess().getValueAnyDataParserRuleCall_0_1_1_1_1_0());
                                    								
                                    pushFollow(FOLLOW_46);
                                    lv_value_9_0=ruleAnyData();

                                    state._fsp--;


                                    									if (current==null) {
                                    										current = createModelElementForParent(grammarAccess.getVariableRule());
                                    									}
                                    									set(
                                    										current,
                                    										"value",
                                    										lv_value_9_0,
                                    										"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                                    									afterParserOrEnumRuleCall();
                                    								

                                    }


                                    }


                                    }

                                    // InternalPipelineParser.g:1378:6: (otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) ) )?
                                    int alt37=2;
                                    int LA37_0 = input.LA(1);

                                    if ( (LA37_0==Readonly) ) {
                                        alt37=1;
                                    }
                                    switch (alt37) {
                                        case 1 :
                                            // InternalPipelineParser.g:1379:7: otherlv_10= Readonly ( (lv_readonly_11_0= RULE_ID ) )
                                            {
                                            otherlv_10=(Token)match(input,Readonly,FOLLOW_14); 

                                            							newLeafNode(otherlv_10, grammarAccess.getVariableAccess().getReadonlyKeyword_0_1_1_2_0());
                                            						
                                            // InternalPipelineParser.g:1383:7: ( (lv_readonly_11_0= RULE_ID ) )
                                            // InternalPipelineParser.g:1384:8: (lv_readonly_11_0= RULE_ID )
                                            {
                                            // InternalPipelineParser.g:1384:8: (lv_readonly_11_0= RULE_ID )
                                            // InternalPipelineParser.g:1385:9: lv_readonly_11_0= RULE_ID
                                            {
                                            lv_readonly_11_0=(Token)match(input,RULE_ID,FOLLOW_20); 

                                            									newLeafNode(lv_readonly_11_0, grammarAccess.getVariableAccess().getReadonlyIDTerminalRuleCall_0_1_1_2_1_0());
                                            								

                                            									if (current==null) {
                                            										current = createModelElement(grammarAccess.getVariableRule());
                                            									}
                                            									setWithLastConsumed(
                                            										current,
                                            										"readonly",
                                            										lv_readonly_11_0,
                                            										"ca.mcgill.devops.pipeline.Pipeline.ID");
                                            								

                                            }


                                            }


                                            }
                                            break;

                                    }

                                    this_END_12=(Token)match(input,RULE_END,FOLLOW_2); 

                                    						newLeafNode(this_END_12, grammarAccess.getVariableAccess().getENDTerminalRuleCall_0_1_1_3());
                                    					

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:1410:3: (this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END )
                    {
                    // InternalPipelineParser.g:1410:3: (this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END )
                    // InternalPipelineParser.g:1411:4: this_BEGIN_13= RULE_BEGIN ( (lv_name_14_0= RULE_ID ) ) otherlv_15= Colon (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END ) this_END_19= RULE_END
                    {
                    this_BEGIN_13=(Token)match(input,RULE_BEGIN,FOLLOW_14); 

                    				newLeafNode(this_BEGIN_13, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:1415:4: ( (lv_name_14_0= RULE_ID ) )
                    // InternalPipelineParser.g:1416:5: (lv_name_14_0= RULE_ID )
                    {
                    // InternalPipelineParser.g:1416:5: (lv_name_14_0= RULE_ID )
                    // InternalPipelineParser.g:1417:6: lv_name_14_0= RULE_ID
                    {
                    lv_name_14_0=(Token)match(input,RULE_ID,FOLLOW_40); 

                    						newLeafNode(lv_name_14_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_1_0());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getVariableRule());
                    						}
                    						setWithLastConsumed(
                    							current,
                    							"name",
                    							lv_name_14_0,
                    							"ca.mcgill.devops.pipeline.Pipeline.ID");
                    					

                    }


                    }

                    otherlv_15=(Token)match(input,Colon,FOLLOW_16); 

                    				newLeafNode(otherlv_15, grammarAccess.getVariableAccess().getColonKeyword_1_2());
                    			
                    // InternalPipelineParser.g:1437:4: (this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END )
                    // InternalPipelineParser.g:1438:5: this_BEGIN_16= RULE_BEGIN ( (lv_variables_17_0= ruleKeyValue ) )+ this_END_18= RULE_END
                    {
                    this_BEGIN_16=(Token)match(input,RULE_BEGIN,FOLLOW_22); 

                    					newLeafNode(this_BEGIN_16, grammarAccess.getVariableAccess().getBEGINTerminalRuleCall_1_3_0());
                    				
                    // InternalPipelineParser.g:1442:5: ( (lv_variables_17_0= ruleKeyValue ) )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==RULE_ID) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1443:6: (lv_variables_17_0= ruleKeyValue )
                    	    {
                    	    // InternalPipelineParser.g:1443:6: (lv_variables_17_0= ruleKeyValue )
                    	    // InternalPipelineParser.g:1444:7: lv_variables_17_0= ruleKeyValue
                    	    {

                    	    							newCompositeNode(grammarAccess.getVariableAccess().getVariablesKeyValueParserRuleCall_1_3_1_0());
                    	    						
                    	    pushFollow(FOLLOW_21);
                    	    lv_variables_17_0=ruleKeyValue();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getVariableRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"variables",
                    	    								lv_variables_17_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.KeyValue");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);

                    this_END_18=(Token)match(input,RULE_END,FOLLOW_20); 

                    					newLeafNode(this_END_18, grammarAccess.getVariableAccess().getENDTerminalRuleCall_1_3_2());
                    				

                    }

                    this_END_19=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_19, grammarAccess.getVariableAccess().getENDTerminalRuleCall_1_4());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleVariable"


    // $ANTLR start "entryRuleResource"
    // InternalPipelineParser.g:1475:1: entryRuleResource returns [EObject current=null] : iv_ruleResource= ruleResource EOF ;
    public final EObject entryRuleResource() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleResource = null;


        try {
            // InternalPipelineParser.g:1475:49: (iv_ruleResource= ruleResource EOF )
            // InternalPipelineParser.g:1476:2: iv_ruleResource= ruleResource EOF
            {
             newCompositeNode(grammarAccess.getResourceRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleResource=ruleResource();

            state._fsp--;

             current =iv_ruleResource; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleResource"


    // $ANTLR start "ruleResource"
    // InternalPipelineParser.g:1482:1: ruleResource returns [EObject current=null] : ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) ) ;
    public final EObject ruleResource() throws RecognitionException {
        EObject current = null;

        Token lv_resourceName_0_1=null;
        Token lv_resourceName_0_2=null;
        Token lv_resourceName_0_3=null;
        Token lv_resourceName_0_4=null;
        Token lv_resourceName_0_5=null;
        Token lv_resourceName_0_6=null;
        Token otherlv_1=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token this_END_6=null;
        EObject lv_resourceValues_2_0 = null;

        EObject lv_resourceValues_5_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:1488:2: ( ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) ) )
            // InternalPipelineParser.g:1489:2: ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) )
            {
            // InternalPipelineParser.g:1489:2: ( ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) ) )
            // InternalPipelineParser.g:1490:3: ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) ) ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) )
            {
            // InternalPipelineParser.g:1490:3: ( ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) ) )
            // InternalPipelineParser.g:1491:4: ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) )
            {
            // InternalPipelineParser.g:1491:4: ( (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages ) )
            // InternalPipelineParser.g:1492:5: (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages )
            {
            // InternalPipelineParser.g:1492:5: (lv_resourceName_0_1= Builds | lv_resourceName_0_2= Containers | lv_resourceName_0_3= Pipelines | lv_resourceName_0_4= Repositories | lv_resourceName_0_5= Webhooks | lv_resourceName_0_6= Packages )
            int alt42=6;
            switch ( input.LA(1) ) {
            case Builds:
                {
                alt42=1;
                }
                break;
            case Containers:
                {
                alt42=2;
                }
                break;
            case Pipelines:
                {
                alt42=3;
                }
                break;
            case Repositories:
                {
                alt42=4;
                }
                break;
            case Webhooks:
                {
                alt42=5;
                }
                break;
            case Packages:
                {
                alt42=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // InternalPipelineParser.g:1493:6: lv_resourceName_0_1= Builds
                    {
                    lv_resourceName_0_1=(Token)match(input,Builds,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_1, grammarAccess.getResourceAccess().getResourceNameBuildsKeyword_0_0_0());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_1, null);
                    					

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:1504:6: lv_resourceName_0_2= Containers
                    {
                    lv_resourceName_0_2=(Token)match(input,Containers,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_2, grammarAccess.getResourceAccess().getResourceNameContainersKeyword_0_0_1());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_2, null);
                    					

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:1515:6: lv_resourceName_0_3= Pipelines
                    {
                    lv_resourceName_0_3=(Token)match(input,Pipelines,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_3, grammarAccess.getResourceAccess().getResourceNamePipelinesKeyword_0_0_2());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_3, null);
                    					

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:1526:6: lv_resourceName_0_4= Repositories
                    {
                    lv_resourceName_0_4=(Token)match(input,Repositories,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_4, grammarAccess.getResourceAccess().getResourceNameRepositoriesKeyword_0_0_3());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_4, null);
                    					

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:1537:6: lv_resourceName_0_5= Webhooks
                    {
                    lv_resourceName_0_5=(Token)match(input,Webhooks,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_5, grammarAccess.getResourceAccess().getResourceNameWebhooksKeyword_0_0_4());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_5, null);
                    					

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:1548:6: lv_resourceName_0_6= Packages
                    {
                    lv_resourceName_0_6=(Token)match(input,Packages,FOLLOW_11); 

                    						newLeafNode(lv_resourceName_0_6, grammarAccess.getResourceAccess().getResourceNamePackagesKeyword_0_0_5());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getResourceRule());
                    						}
                    						setWithLastConsumed(current, "resourceName", lv_resourceName_0_6, null);
                    					

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:1561:3: ( (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )* | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END ) )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==EOF||LA45_0==Repositories||LA45_0==Containers||LA45_0==Pipelines||LA45_0==Packages||LA45_0==Webhooks||LA45_0==Builds||LA45_0==HyphenMinus||LA45_0==RULE_END) ) {
                alt45=1;
            }
            else if ( (LA45_0==RULE_BEGIN) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // InternalPipelineParser.g:1562:4: (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )*
                    {
                    // InternalPipelineParser.g:1562:4: (otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) ) )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( (LA43_0==HyphenMinus) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1563:5: otherlv_1= HyphenMinus ( (lv_resourceValues_2_0= ruleParameterValue ) )
                    	    {
                    	    otherlv_1=(Token)match(input,HyphenMinus,FOLLOW_38); 

                    	    					newLeafNode(otherlv_1, grammarAccess.getResourceAccess().getHyphenMinusKeyword_1_0_0());
                    	    				
                    	    // InternalPipelineParser.g:1567:5: ( (lv_resourceValues_2_0= ruleParameterValue ) )
                    	    // InternalPipelineParser.g:1568:6: (lv_resourceValues_2_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:1568:6: (lv_resourceValues_2_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:1569:7: lv_resourceValues_2_0= ruleParameterValue
                    	    {

                    	    							newCompositeNode(grammarAccess.getResourceAccess().getResourceValuesParameterValueParserRuleCall_1_0_1_0());
                    	    						
                    	    pushFollow(FOLLOW_12);
                    	    lv_resourceValues_2_0=ruleParameterValue();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getResourceRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"resourceValues",
                    	    								lv_resourceValues_2_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:1588:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END )
                    {
                    // InternalPipelineParser.g:1588:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END )
                    // InternalPipelineParser.g:1589:5: this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )* this_END_6= RULE_END
                    {
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_47); 

                    					newLeafNode(this_BEGIN_3, grammarAccess.getResourceAccess().getBEGINTerminalRuleCall_1_1_0());
                    				
                    // InternalPipelineParser.g:1593:5: (otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) ) )*
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==HyphenMinus) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1594:6: otherlv_4= HyphenMinus ( (lv_resourceValues_5_0= ruleParameterValue ) )
                    	    {
                    	    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_38); 

                    	    						newLeafNode(otherlv_4, grammarAccess.getResourceAccess().getHyphenMinusKeyword_1_1_1_0());
                    	    					
                    	    // InternalPipelineParser.g:1598:6: ( (lv_resourceValues_5_0= ruleParameterValue ) )
                    	    // InternalPipelineParser.g:1599:7: (lv_resourceValues_5_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:1599:7: (lv_resourceValues_5_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:1600:8: lv_resourceValues_5_0= ruleParameterValue
                    	    {

                    	    								newCompositeNode(grammarAccess.getResourceAccess().getResourceValuesParameterValueParserRuleCall_1_1_1_1_0());
                    	    							
                    	    pushFollow(FOLLOW_47);
                    	    lv_resourceValues_5_0=ruleParameterValue();

                    	    state._fsp--;


                    	    								if (current==null) {
                    	    									current = createModelElementForParent(grammarAccess.getResourceRule());
                    	    								}
                    	    								add(
                    	    									current,
                    	    									"resourceValues",
                    	    									lv_resourceValues_5_0,
                    	    									"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    								afterParserOrEnumRuleCall();
                    	    							

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop44;
                        }
                    } while (true);

                    this_END_6=(Token)match(input,RULE_END,FOLLOW_2); 

                    					newLeafNode(this_END_6, grammarAccess.getResourceAccess().getENDTerminalRuleCall_1_1_2());
                    				

                    }


                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleResource"


    // $ANTLR start "entryRuleEvent"
    // InternalPipelineParser.g:1628:1: entryRuleEvent returns [EObject current=null] : iv_ruleEvent= ruleEvent EOF ;
    public final EObject entryRuleEvent() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleEvent = null;


        try {
            // InternalPipelineParser.g:1628:46: (iv_ruleEvent= ruleEvent EOF )
            // InternalPipelineParser.g:1629:2: iv_ruleEvent= ruleEvent EOF
            {
             newCompositeNode(grammarAccess.getEventRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleEvent=ruleEvent();

            state._fsp--;

             current =iv_ruleEvent; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleEvent"


    // $ANTLR start "ruleEvent"
    // InternalPipelineParser.g:1635:1: ruleEvent returns [EObject current=null] : ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) ) ) ) ;
    public final EObject ruleEvent() throws RecognitionException {
        EObject current = null;

        Token lv_simpleEvent_1_0=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_BEGIN_5=null;
        Token otherlv_7=null;
        Token otherlv_9=null;
        Token lv_batch_10_0=null;
        Token otherlv_11=null;
        Token lv_autoCancel_12_0=null;
        Token otherlv_13=null;
        Token lv_workflows_14_3=null;
        Token otherlv_15=null;
        Token lv_drafts_16_0=null;
        Token otherlv_17=null;
        Token otherlv_19=null;
        Token otherlv_21=null;
        Token otherlv_23=null;
        Token this_BEGIN_24=null;
        Token otherlv_26=null;
        Token otherlv_28=null;
        Token this_END_30=null;
        Token otherlv_31=null;
        Token otherlv_33=null;
        Token otherlv_35=null;
        Token otherlv_37=null;
        Token this_BEGIN_38=null;
        Token this_END_40=null;
        Token otherlv_41=null;
        Token this_BEGIN_43=null;
        Token otherlv_44=null;
        Token otherlv_46=null;
        Token this_END_48=null;
        Token otherlv_49=null;
        Token otherlv_51=null;
        Token this_BEGIN_53=null;
        Token otherlv_54=null;
        Token otherlv_56=null;
        Token this_END_58=null;
        Token otherlv_59=null;
        Token this_END_61=null;
        Token lv_scheduleNameKW_62_1=null;
        Token lv_scheduleNameKW_62_2=null;
        Token lv_workflowTypeKW_64_0=null;
        Token otherlv_65=null;
        Token this_BEGIN_66=null;
        Token this_END_68=null;
        Enumerator lv_name_0_0 = null;

        EObject lv_includedBranches_4_0 = null;

        EObject lv_activities_8_0 = null;

        AntlrDatatypeRuleToken lv_workflows_14_1 = null;

        AntlrDatatypeRuleToken lv_workflows_14_2 = null;

        EObject lv_includedBranches_18_0 = null;

        EObject lv_includedBranches_20_0 = null;

        EObject lv_includedBranches_22_0 = null;

        EObject lv_includedBranches_25_0 = null;

        EObject lv_includedBranches_27_0 = null;

        EObject lv_excludedBranches_29_0 = null;

        EObject lv_excludedBranches_32_0 = null;

        EObject lv_excludedBranches_34_0 = null;

        EObject lv_excludedBranches_36_0 = null;

        EObject lv_excludedBranches_39_0 = null;

        AntlrDatatypeRuleToken lv_includedPaths_42_0 = null;

        AntlrDatatypeRuleToken lv_includedPaths_45_0 = null;

        AntlrDatatypeRuleToken lv_excludedPaths_47_0 = null;

        AntlrDatatypeRuleToken lv_excludedPaths_50_0 = null;

        AntlrDatatypeRuleToken lv_includedTags_52_0 = null;

        AntlrDatatypeRuleToken lv_includedTags_55_0 = null;

        AntlrDatatypeRuleToken lv_excludedTags_57_0 = null;

        AntlrDatatypeRuleToken lv_excludedTags_60_0 = null;

        EObject lv_triggerSchedules_63_0 = null;

        EObject lv_workFlowActivities_67_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:1641:2: ( ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) ) ) ) )
            // InternalPipelineParser.g:1642:2: ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) ) ) )
            {
            // InternalPipelineParser.g:1642:2: ( ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )? ) | ( ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) ) ) )
            int alt80=2;
            switch ( input.LA(1) ) {
            case Pull_request_review_comment:
            case BitbucketBranchCreated:
            case BitbucketBranchDeleted:
            case BitbucketTagCreated:
            case BitbucketTagDeleted:
            case Pull_request_review:
            case Pull_request_target:
            case Repository_dispatch:
            case Deployment_status:
            case Pipeline_schedule:
            case Registry_package:
            case Merge_requests:
            case Project_column:
            case WorkflowRules:
            case Issue_comment:
            case Notifications:
            case PullRequests:
            case LockBehavior:
            case Project_card:
            case Pull_request:
            case Workflow_run:
            case Check_suite:
            case AutoCancel:
            case Conditions:
            case Deployment:
            case Page_build:
            case PlanBranch:
            case Repository:
            case Bitbucket:
            case Check_run:
            case Milestone:
            case Pipelines:
            case Scheduled:
            case Branches:
            case Changes:
            case Default:
            case Project:
            case Release:
            case Trigger:
            case Create:
            case Custom:
            case Delete:
            case Drafts:
            case Except:
            case Gollum:
            case Issues:
            case Public:
            case Remote:
            case Status:
            case Label:
            case Paths:
            case Rules:
            case Watch:
            case Cron:
            case Fork:
            case Only:
            case Push:
            case Tags:
            case None:
            case Pr:
            case RULE_ID:
                {
                alt80=1;
                }
                break;
            case Workflow_dispatch:
                {
                int LA80_2 = input.LA(2);

                if ( (LA80_2==EOF||(LA80_2>=Pull_request_review_comment && LA80_2<=Pull_request_target)||LA80_2==Repository_dispatch||(LA80_2>=Deployment_status && LA80_2<=Workflow_dispatch)||LA80_2==Registry_package||(LA80_2>=Merge_requests && LA80_2<=Project_column)||LA80_2==WorkflowRules||(LA80_2>=Issue_comment && LA80_2<=Workflow_call)||LA80_2==LockBehavior||(LA80_2>=Project_card && LA80_2<=Pull_request)||(LA80_2>=Workflow_run && LA80_2<=Check_suite)||(LA80_2>=AutoCancel && LA80_2<=Conditions)||LA80_2==Deployment||LA80_2==Page_build||LA80_2==PlanBranch||LA80_2==Repository||(LA80_2>=Bitbucket && LA80_2<=Check_run)||(LA80_2>=Milestone && LA80_2<=Pipelines)||(LA80_2>=Scheduled && LA80_2<=Schedules)||LA80_2==Branches||LA80_2==Schedule||LA80_2==Changes||LA80_2==Default||LA80_2==Project||LA80_2==Release||LA80_2==Trigger||(LA80_2>=Create && LA80_2<=Delete)||(LA80_2>=Drafts && LA80_2<=Gollum)||LA80_2==Issues||LA80_2==Public||LA80_2==Remote||(LA80_2>=Stages && LA80_2<=Status)||LA80_2==Label||LA80_2==Paths||LA80_2==Rules||LA80_2==Watch||(LA80_2>=Cron && LA80_2<=Jobs)||LA80_2==Only||LA80_2==Push||LA80_2==Tags||LA80_2==None||LA80_2==Pr||(LA80_2>=Comma && LA80_2<=HyphenMinus)||LA80_2==RightSquareBracket||LA80_2==RULE_ID||LA80_2==RULE_END||LA80_2==RULE_STRING) ) {
                    alt80=1;
                }
                else if ( (LA80_2==RULE_BEGIN) ) {
                    switch ( input.LA(3) ) {
                    case BranchesIgnore:
                    case PathsIgnore:
                    case TagsIgnore:
                    case AutoCancel:
                    case Workflows:
                    case Branches:
                    case Drafts:
                    case Batch:
                    case Paths:
                    case Types:
                    case Tags:
                        {
                        alt80=1;
                        }
                        break;
                    case RULE_END:
                        {
                        alt80=1;
                        }
                        break;
                    case Outputs:
                    case Secrets:
                    case Inputs:
                    case HyphenMinus:
                    case LeftSquareBracket:
                    case RULE_COMPLEX_EXPRESSION:
                    case RULE_HEX_INT:
                    case RULE_INT:
                    case RULE_FLOAT_LITERAL:
                    case RULE_ID:
                    case RULE_VERSION:
                    case RULE_BEGIN:
                    case RULE_STRING:
                        {
                        alt80=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 80, 5, input);

                        throw nvae;
                    }

                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 2, input);

                    throw nvae;
                }
                }
                break;
            case Workflow_call:
                {
                int LA80_3 = input.LA(2);

                if ( (LA80_3==RULE_BEGIN) ) {
                    switch ( input.LA(3) ) {
                    case BranchesIgnore:
                    case PathsIgnore:
                    case TagsIgnore:
                    case AutoCancel:
                    case Workflows:
                    case Branches:
                    case Drafts:
                    case Batch:
                    case Paths:
                    case Types:
                    case Tags:
                        {
                        alt80=1;
                        }
                        break;
                    case RULE_END:
                        {
                        alt80=1;
                        }
                        break;
                    case Outputs:
                    case Secrets:
                    case Inputs:
                    case HyphenMinus:
                    case LeftSquareBracket:
                    case RULE_COMPLEX_EXPRESSION:
                    case RULE_HEX_INT:
                    case RULE_INT:
                    case RULE_FLOAT_LITERAL:
                    case RULE_ID:
                    case RULE_VERSION:
                    case RULE_BEGIN:
                    case RULE_STRING:
                        {
                        alt80=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 80, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA80_3==EOF||(LA80_3>=Pull_request_review_comment && LA80_3<=Pull_request_target)||LA80_3==Repository_dispatch||(LA80_3>=Deployment_status && LA80_3<=Workflow_dispatch)||LA80_3==Registry_package||(LA80_3>=Merge_requests && LA80_3<=Project_column)||LA80_3==WorkflowRules||(LA80_3>=Issue_comment && LA80_3<=Workflow_call)||LA80_3==LockBehavior||(LA80_3>=Project_card && LA80_3<=Pull_request)||(LA80_3>=Workflow_run && LA80_3<=Check_suite)||(LA80_3>=AutoCancel && LA80_3<=Conditions)||LA80_3==Deployment||LA80_3==Page_build||LA80_3==PlanBranch||LA80_3==Repository||(LA80_3>=Bitbucket && LA80_3<=Check_run)||(LA80_3>=Milestone && LA80_3<=Pipelines)||(LA80_3>=Scheduled && LA80_3<=Schedules)||LA80_3==Branches||LA80_3==Schedule||LA80_3==Changes||LA80_3==Default||LA80_3==Project||LA80_3==Release||LA80_3==Trigger||(LA80_3>=Create && LA80_3<=Delete)||(LA80_3>=Drafts && LA80_3<=Gollum)||LA80_3==Issues||LA80_3==Public||LA80_3==Remote||(LA80_3>=Stages && LA80_3<=Status)||LA80_3==Label||LA80_3==Paths||LA80_3==Rules||LA80_3==Watch||(LA80_3>=Cron && LA80_3<=Jobs)||LA80_3==Only||LA80_3==Push||LA80_3==Tags||LA80_3==None||LA80_3==Pr||(LA80_3>=Comma && LA80_3<=HyphenMinus)||LA80_3==RightSquareBracket||LA80_3==RULE_ID||LA80_3==RULE_END||LA80_3==RULE_STRING) ) {
                    alt80=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 3, input);

                    throw nvae;
                }
                }
                break;
            case Schedules:
            case Schedule:
                {
                alt80=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // InternalPipelineParser.g:1643:3: ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )? )
                    {
                    // InternalPipelineParser.g:1643:3: ( ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )? )
                    // InternalPipelineParser.g:1644:4: ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) ) (otherlv_3= None )? ( (lv_includedBranches_4_0= ruleBranch ) )* (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )?
                    {
                    // InternalPipelineParser.g:1644:4: ( ( (lv_name_0_0= rulePipelineEventKeyword ) ) | ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? ) )
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( ((LA47_0>=Pull_request_review_comment && LA47_0<=Pull_request_target)||LA47_0==Repository_dispatch||(LA47_0>=Deployment_status && LA47_0<=Workflow_dispatch)||LA47_0==Registry_package||(LA47_0>=Merge_requests && LA47_0<=Project_column)||LA47_0==WorkflowRules||(LA47_0>=Issue_comment && LA47_0<=Workflow_call)||LA47_0==LockBehavior||(LA47_0>=Project_card && LA47_0<=Pull_request)||(LA47_0>=Workflow_run && LA47_0<=Check_suite)||(LA47_0>=AutoCancel && LA47_0<=Conditions)||LA47_0==Deployment||LA47_0==Page_build||LA47_0==PlanBranch||LA47_0==Repository||(LA47_0>=Bitbucket && LA47_0<=Check_run)||(LA47_0>=Milestone && LA47_0<=Pipelines)||LA47_0==Scheduled||LA47_0==Branches||LA47_0==Changes||LA47_0==Default||LA47_0==Project||LA47_0==Release||LA47_0==Trigger||(LA47_0>=Create && LA47_0<=Delete)||(LA47_0>=Drafts && LA47_0<=Gollum)||LA47_0==Issues||LA47_0==Public||LA47_0==Remote||LA47_0==Status||LA47_0==Label||LA47_0==Paths||LA47_0==Rules||LA47_0==Watch||(LA47_0>=Cron && LA47_0<=Fork)||LA47_0==Only||LA47_0==Push||LA47_0==Tags||LA47_0==None||LA47_0==Pr) ) {
                        alt47=1;
                    }
                    else if ( (LA47_0==RULE_ID) ) {
                        alt47=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 47, 0, input);

                        throw nvae;
                    }
                    switch (alt47) {
                        case 1 :
                            // InternalPipelineParser.g:1645:5: ( (lv_name_0_0= rulePipelineEventKeyword ) )
                            {
                            // InternalPipelineParser.g:1645:5: ( (lv_name_0_0= rulePipelineEventKeyword ) )
                            // InternalPipelineParser.g:1646:6: (lv_name_0_0= rulePipelineEventKeyword )
                            {
                            // InternalPipelineParser.g:1646:6: (lv_name_0_0= rulePipelineEventKeyword )
                            // InternalPipelineParser.g:1647:7: lv_name_0_0= rulePipelineEventKeyword
                            {

                            							newCompositeNode(grammarAccess.getEventAccess().getNamePipelineEventKeywordEnumRuleCall_0_0_0_0());
                            						
                            pushFollow(FOLLOW_48);
                            lv_name_0_0=rulePipelineEventKeyword();

                            state._fsp--;


                            							if (current==null) {
                            								current = createModelElementForParent(grammarAccess.getEventRule());
                            							}
                            							set(
                            								current,
                            								"name",
                            								lv_name_0_0,
                            								"ca.mcgill.devops.pipeline.Pipeline.PipelineEventKeyword");
                            							afterParserOrEnumRuleCall();
                            						

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:1665:5: ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? )
                            {
                            // InternalPipelineParser.g:1665:5: ( ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )? )
                            // InternalPipelineParser.g:1666:6: ( (lv_simpleEvent_1_0= RULE_ID ) ) (otherlv_2= Colon )?
                            {
                            // InternalPipelineParser.g:1666:6: ( (lv_simpleEvent_1_0= RULE_ID ) )
                            // InternalPipelineParser.g:1667:7: (lv_simpleEvent_1_0= RULE_ID )
                            {
                            // InternalPipelineParser.g:1667:7: (lv_simpleEvent_1_0= RULE_ID )
                            // InternalPipelineParser.g:1668:8: lv_simpleEvent_1_0= RULE_ID
                            {
                            lv_simpleEvent_1_0=(Token)match(input,RULE_ID,FOLLOW_49); 

                            								newLeafNode(lv_simpleEvent_1_0, grammarAccess.getEventAccess().getSimpleEventIDTerminalRuleCall_0_0_1_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getEventRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"simpleEvent",
                            									lv_simpleEvent_1_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.ID");
                            							

                            }


                            }

                            // InternalPipelineParser.g:1684:6: (otherlv_2= Colon )?
                            int alt46=2;
                            int LA46_0 = input.LA(1);

                            if ( (LA46_0==Colon) ) {
                                alt46=1;
                            }
                            switch (alt46) {
                                case 1 :
                                    // InternalPipelineParser.g:1685:7: otherlv_2= Colon
                                    {
                                    otherlv_2=(Token)match(input,Colon,FOLLOW_48); 

                                    							newLeafNode(otherlv_2, grammarAccess.getEventAccess().getColonKeyword_0_0_1_1());
                                    						

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    // InternalPipelineParser.g:1692:4: (otherlv_3= None )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==None) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // InternalPipelineParser.g:1693:5: otherlv_3= None
                            {
                            otherlv_3=(Token)match(input,None,FOLLOW_50); 

                            					newLeafNode(otherlv_3, grammarAccess.getEventAccess().getNoneKeyword_0_1());
                            				

                            }
                            break;

                    }

                    // InternalPipelineParser.g:1698:4: ( (lv_includedBranches_4_0= ruleBranch ) )*
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==HyphenMinus||LA49_0==RULE_ID||LA49_0==RULE_STRING) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // InternalPipelineParser.g:1699:5: (lv_includedBranches_4_0= ruleBranch )
                    	    {
                    	    // InternalPipelineParser.g:1699:5: (lv_includedBranches_4_0= ruleBranch )
                    	    // InternalPipelineParser.g:1700:6: lv_includedBranches_4_0= ruleBranch
                    	    {

                    	    						newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_2_0());
                    	    					
                    	    pushFollow(FOLLOW_50);
                    	    lv_includedBranches_4_0=ruleBranch();

                    	    state._fsp--;


                    	    						if (current==null) {
                    	    							current = createModelElementForParent(grammarAccess.getEventRule());
                    	    						}
                    	    						add(
                    	    							current,
                    	    							"includedBranches",
                    	    							lv_includedBranches_4_0,
                    	    							"ca.mcgill.devops.pipeline.Pipeline.Branch");
                    	    						afterParserOrEnumRuleCall();
                    	    					

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    // InternalPipelineParser.g:1717:4: (this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==RULE_BEGIN) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // InternalPipelineParser.g:1718:5: this_BEGIN_5= RULE_BEGIN ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) ) this_END_61= RULE_END
                            {
                            this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_51); 

                            					newLeafNode(this_BEGIN_5, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_3_0());
                            				
                            // InternalPipelineParser.g:1722:5: ( ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) ) )
                            // InternalPipelineParser.g:1723:6: ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) )
                            {
                            // InternalPipelineParser.g:1723:6: ( ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* ) )
                            // InternalPipelineParser.g:1724:7: ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* )
                            {
                             
                            						  getUnorderedGroupHelper().enter(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            						
                            // InternalPipelineParser.g:1727:7: ( ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )* )
                            // InternalPipelineParser.g:1728:8: ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )*
                            {
                            // InternalPipelineParser.g:1728:8: ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )*
                            loop73:
                            do {
                                int alt73=12;
                                alt73 = dfa73.predict(input);
                                switch (alt73) {
                            	case 1 :
                            	    // InternalPipelineParser.g:1729:6: ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1729:6: ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1730:7: {...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 0) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 0)");
                            	    }
                            	    // InternalPipelineParser.g:1730:108: ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) )
                            	    // InternalPipelineParser.g:1731:8: ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 0);
                            	    							
                            	    // InternalPipelineParser.g:1734:11: ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) )
                            	    // InternalPipelineParser.g:1734:12: {...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1734:21: (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) )
                            	    // InternalPipelineParser.g:1734:22: otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) )
                            	    {
                            	    otherlv_7=(Token)match(input,Types,FOLLOW_52); 

                            	    											newLeafNode(otherlv_7, grammarAccess.getEventAccess().getTypesKeyword_0_3_1_0_0());
                            	    										
                            	    // InternalPipelineParser.g:1738:11: ( (lv_activities_8_0= ruleActivity ) )
                            	    // InternalPipelineParser.g:1739:12: (lv_activities_8_0= ruleActivity )
                            	    {
                            	    // InternalPipelineParser.g:1739:12: (lv_activities_8_0= ruleActivity )
                            	    // InternalPipelineParser.g:1740:13: lv_activities_8_0= ruleActivity
                            	    {

                            	    													newCompositeNode(grammarAccess.getEventAccess().getActivitiesActivityParserRuleCall_0_3_1_0_1_0());
                            	    												
                            	    pushFollow(FOLLOW_51);
                            	    lv_activities_8_0=ruleActivity();

                            	    state._fsp--;


                            	    													if (current==null) {
                            	    														current = createModelElementForParent(grammarAccess.getEventRule());
                            	    													}
                            	    													add(
                            	    														current,
                            	    														"activities",
                            	    														lv_activities_8_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.Activity");
                            	    													afterParserOrEnumRuleCall();
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    // InternalPipelineParser.g:1763:6: ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1763:6: ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1764:7: {...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 1) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 1)");
                            	    }
                            	    // InternalPipelineParser.g:1764:108: ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1765:8: ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 1);
                            	    							
                            	    // InternalPipelineParser.g:1768:11: ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1768:12: {...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1768:21: (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1768:22: otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) )
                            	    {
                            	    otherlv_9=(Token)match(input,Batch,FOLLOW_14); 

                            	    											newLeafNode(otherlv_9, grammarAccess.getEventAccess().getBatchKeyword_0_3_1_1_0());
                            	    										
                            	    // InternalPipelineParser.g:1772:11: ( (lv_batch_10_0= RULE_ID ) )
                            	    // InternalPipelineParser.g:1773:12: (lv_batch_10_0= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1773:12: (lv_batch_10_0= RULE_ID )
                            	    // InternalPipelineParser.g:1774:13: lv_batch_10_0= RULE_ID
                            	    {
                            	    lv_batch_10_0=(Token)match(input,RULE_ID,FOLLOW_51); 

                            	    													newLeafNode(lv_batch_10_0, grammarAccess.getEventAccess().getBatchIDTerminalRuleCall_0_3_1_1_1_0());
                            	    												

                            	    													if (current==null) {
                            	    														current = createModelElement(grammarAccess.getEventRule());
                            	    													}
                            	    													setWithLastConsumed(
                            	    														current,
                            	    														"batch",
                            	    														lv_batch_10_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    // InternalPipelineParser.g:1796:6: ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1796:6: ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1797:7: {...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 2) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 2)");
                            	    }
                            	    // InternalPipelineParser.g:1797:108: ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1798:8: ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 2);
                            	    							
                            	    // InternalPipelineParser.g:1801:11: ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1801:12: {...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1801:21: (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1801:22: otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) )
                            	    {
                            	    otherlv_11=(Token)match(input,AutoCancel,FOLLOW_14); 

                            	    											newLeafNode(otherlv_11, grammarAccess.getEventAccess().getAutoCancelKeyword_0_3_1_2_0());
                            	    										
                            	    // InternalPipelineParser.g:1805:11: ( (lv_autoCancel_12_0= RULE_ID ) )
                            	    // InternalPipelineParser.g:1806:12: (lv_autoCancel_12_0= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1806:12: (lv_autoCancel_12_0= RULE_ID )
                            	    // InternalPipelineParser.g:1807:13: lv_autoCancel_12_0= RULE_ID
                            	    {
                            	    lv_autoCancel_12_0=(Token)match(input,RULE_ID,FOLLOW_51); 

                            	    													newLeafNode(lv_autoCancel_12_0, grammarAccess.getEventAccess().getAutoCancelIDTerminalRuleCall_0_3_1_2_1_0());
                            	    												

                            	    													if (current==null) {
                            	    														current = createModelElement(grammarAccess.getEventRule());
                            	    													}
                            	    													setWithLastConsumed(
                            	    														current,
                            	    														"autoCancel",
                            	    														lv_autoCancel_12_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 4 :
                            	    // InternalPipelineParser.g:1829:6: ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1829:6: ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1830:7: {...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 3) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 3)");
                            	    }
                            	    // InternalPipelineParser.g:1830:108: ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1831:8: ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 3);
                            	    							
                            	    // InternalPipelineParser.g:1834:11: ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1834:12: {...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1834:21: (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1834:22: otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) )
                            	    {
                            	    otherlv_13=(Token)match(input,Workflows,FOLLOW_53); 

                            	    											newLeafNode(otherlv_13, grammarAccess.getEventAccess().getWorkflowsKeyword_0_3_1_3_0());
                            	    										
                            	    // InternalPipelineParser.g:1838:11: ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1839:12: ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) )
                            	    {
                            	    // InternalPipelineParser.g:1839:12: ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) )
                            	    // InternalPipelineParser.g:1840:13: (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1840:13: (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID )
                            	    int alt50=3;
                            	    switch ( input.LA(1) ) {
                            	    case LeftSquareBracket:
                            	        {
                            	        alt50=1;
                            	        }
                            	        break;
                            	    case HyphenMinus:
                            	    case RULE_BEGIN:
                            	        {
                            	        alt50=2;
                            	        }
                            	        break;
                            	    case RULE_ID:
                            	        {
                            	        alt50=3;
                            	        }
                            	        break;
                            	    default:
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 50, 0, input);

                            	        throw nvae;
                            	    }

                            	    switch (alt50) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:1841:14: lv_workflows_14_1= ruleArrayList
                            	            {

                            	            														newCompositeNode(grammarAccess.getEventAccess().getWorkflowsArrayListParserRuleCall_0_3_1_3_1_0_0());
                            	            													
                            	            pushFollow(FOLLOW_51);
                            	            lv_workflows_14_1=ruleArrayList();

                            	            state._fsp--;


                            	            														if (current==null) {
                            	            															current = createModelElementForParent(grammarAccess.getEventRule());
                            	            														}
                            	            														set(
                            	            															current,
                            	            															"workflows",
                            	            															lv_workflows_14_1,
                            	            															"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
                            	            														afterParserOrEnumRuleCall();
                            	            													

                            	            }
                            	            break;
                            	        case 2 :
                            	            // InternalPipelineParser.g:1857:14: lv_workflows_14_2= ruleHyphenValues
                            	            {

                            	            														newCompositeNode(grammarAccess.getEventAccess().getWorkflowsHyphenValuesParserRuleCall_0_3_1_3_1_0_1());
                            	            													
                            	            pushFollow(FOLLOW_51);
                            	            lv_workflows_14_2=ruleHyphenValues();

                            	            state._fsp--;


                            	            														if (current==null) {
                            	            															current = createModelElementForParent(grammarAccess.getEventRule());
                            	            														}
                            	            														set(
                            	            															current,
                            	            															"workflows",
                            	            															lv_workflows_14_2,
                            	            															"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	            														afterParserOrEnumRuleCall();
                            	            													

                            	            }
                            	            break;
                            	        case 3 :
                            	            // InternalPipelineParser.g:1873:14: lv_workflows_14_3= RULE_ID
                            	            {
                            	            lv_workflows_14_3=(Token)match(input,RULE_ID,FOLLOW_51); 

                            	            														newLeafNode(lv_workflows_14_3, grammarAccess.getEventAccess().getWorkflowsIDTerminalRuleCall_0_3_1_3_1_0_2());
                            	            													

                            	            														if (current==null) {
                            	            															current = createModelElement(grammarAccess.getEventRule());
                            	            														}
                            	            														setWithLastConsumed(
                            	            															current,
                            	            															"workflows",
                            	            															lv_workflows_14_3,
                            	            															"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	            													

                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 5 :
                            	    // InternalPipelineParser.g:1896:6: ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1896:6: ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1897:7: {...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 4) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 4)");
                            	    }
                            	    // InternalPipelineParser.g:1897:108: ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) )
                            	    // InternalPipelineParser.g:1898:8: ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 4);
                            	    							
                            	    // InternalPipelineParser.g:1901:11: ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) )
                            	    // InternalPipelineParser.g:1901:12: {...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1901:21: (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) )
                            	    // InternalPipelineParser.g:1901:22: otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) )
                            	    {
                            	    otherlv_15=(Token)match(input,Drafts,FOLLOW_14); 

                            	    											newLeafNode(otherlv_15, grammarAccess.getEventAccess().getDraftsKeyword_0_3_1_4_0());
                            	    										
                            	    // InternalPipelineParser.g:1905:11: ( (lv_drafts_16_0= RULE_ID ) )
                            	    // InternalPipelineParser.g:1906:12: (lv_drafts_16_0= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:1906:12: (lv_drafts_16_0= RULE_ID )
                            	    // InternalPipelineParser.g:1907:13: lv_drafts_16_0= RULE_ID
                            	    {
                            	    lv_drafts_16_0=(Token)match(input,RULE_ID,FOLLOW_51); 

                            	    													newLeafNode(lv_drafts_16_0, grammarAccess.getEventAccess().getDraftsIDTerminalRuleCall_0_3_1_4_1_0());
                            	    												

                            	    													if (current==null) {
                            	    														current = createModelElement(grammarAccess.getEventRule());
                            	    													}
                            	    													setWithLastConsumed(
                            	    														current,
                            	    														"drafts",
                            	    														lv_drafts_16_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.ID");
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 6 :
                            	    // InternalPipelineParser.g:1929:6: ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:1929:6: ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) )
                            	    // InternalPipelineParser.g:1930:7: {...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 5) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 5)");
                            	    }
                            	    // InternalPipelineParser.g:1930:108: ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) )
                            	    // InternalPipelineParser.g:1931:8: ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 5);
                            	    							
                            	    // InternalPipelineParser.g:1934:11: ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) )
                            	    // InternalPipelineParser.g:1934:12: {...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:1934:21: (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) )
                            	    // InternalPipelineParser.g:1934:22: otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) )
                            	    {
                            	    otherlv_17=(Token)match(input,Branches,FOLLOW_54); 

                            	    											newLeafNode(otherlv_17, grammarAccess.getEventAccess().getBranchesKeyword_0_3_1_5_0());
                            	    										
                            	    // InternalPipelineParser.g:1938:11: ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) )
                            	    int alt59=2;
                            	    int LA59_0 = input.LA(1);

                            	    if ( (LA59_0==BranchesIgnore||LA59_0==PathsIgnore||(LA59_0>=TagsIgnore && LA59_0<=AutoCancel)||LA59_0==Workflows||LA59_0==Branches||LA59_0==Drafts||LA59_0==Batch||LA59_0==Paths||LA59_0==Types||LA59_0==Tags||LA59_0==HyphenMinus||LA59_0==LeftSquareBracket||LA59_0==RULE_ID||LA59_0==RULE_END||LA59_0==RULE_STRING) ) {
                            	        alt59=1;
                            	    }
                            	    else if ( (LA59_0==RULE_BEGIN) ) {
                            	        alt59=2;
                            	    }
                            	    else {
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 59, 0, input);

                            	        throw nvae;
                            	    }
                            	    switch (alt59) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:1939:12: ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) )
                            	            {
                            	            // InternalPipelineParser.g:1939:12: ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) )
                            	            int alt53=2;
                            	            int LA53_0 = input.LA(1);

                            	            if ( (LA53_0==BranchesIgnore||LA53_0==PathsIgnore||(LA53_0>=TagsIgnore && LA53_0<=AutoCancel)||LA53_0==Workflows||LA53_0==Branches||LA53_0==Drafts||LA53_0==Batch||LA53_0==Paths||LA53_0==Types||LA53_0==Tags||LA53_0==HyphenMinus||LA53_0==RULE_ID||LA53_0==RULE_END||LA53_0==RULE_STRING) ) {
                            	                alt53=1;
                            	            }
                            	            else if ( (LA53_0==LeftSquareBracket) ) {
                            	                alt53=2;
                            	            }
                            	            else {
                            	                NoViableAltException nvae =
                            	                    new NoViableAltException("", 53, 0, input);

                            	                throw nvae;
                            	            }
                            	            switch (alt53) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:1940:13: ( (lv_includedBranches_18_0= ruleBranch ) )*
                            	                    {
                            	                    // InternalPipelineParser.g:1940:13: ( (lv_includedBranches_18_0= ruleBranch ) )*
                            	                    loop51:
                            	                    do {
                            	                        int alt51=2;
                            	                        int LA51_0 = input.LA(1);

                            	                        if ( (LA51_0==HyphenMinus||LA51_0==RULE_ID||LA51_0==RULE_STRING) ) {
                            	                            alt51=1;
                            	                        }


                            	                        switch (alt51) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:1941:14: (lv_includedBranches_18_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:1941:14: (lv_includedBranches_18_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:1942:15: lv_includedBranches_18_0= ruleBranch
                            	                    	    {

                            	                    	    															newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_3_1_5_1_0_0_0());
                            	                    	    														
                            	                    	    pushFollow(FOLLOW_55);
                            	                    	    lv_includedBranches_18_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    															if (current==null) {
                            	                    	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    															}
                            	                    	    															add(
                            	                    	    																current,
                            	                    	    																"includedBranches",
                            	                    	    																lv_includedBranches_18_0,
                            	                    	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    															afterParserOrEnumRuleCall();
                            	                    	    														

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop51;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;
                            	                case 2 :
                            	                    // InternalPipelineParser.g:1960:13: (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket )
                            	                    {
                            	                    // InternalPipelineParser.g:1960:13: (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket )
                            	                    // InternalPipelineParser.g:1961:14: otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket
                            	                    {
                            	                    otherlv_19=(Token)match(input,LeftSquareBracket,FOLLOW_56); 

                            	                    														newLeafNode(otherlv_19, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_0_3_1_5_1_0_1_0());
                            	                    													
                            	                    // InternalPipelineParser.g:1965:14: ( (lv_includedBranches_20_0= ruleBranch ) )
                            	                    // InternalPipelineParser.g:1966:15: (lv_includedBranches_20_0= ruleBranch )
                            	                    {
                            	                    // InternalPipelineParser.g:1966:15: (lv_includedBranches_20_0= ruleBranch )
                            	                    // InternalPipelineParser.g:1967:16: lv_includedBranches_20_0= ruleBranch
                            	                    {

                            	                    																newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_3_1_5_1_0_1_1_0());
                            	                    															
                            	                    pushFollow(FOLLOW_9);
                            	                    lv_includedBranches_20_0=ruleBranch();

                            	                    state._fsp--;


                            	                    																if (current==null) {
                            	                    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    																}
                            	                    																add(
                            	                    																	current,
                            	                    																	"includedBranches",
                            	                    																	lv_includedBranches_20_0,
                            	                    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    																afterParserOrEnumRuleCall();
                            	                    															

                            	                    }


                            	                    }

                            	                    // InternalPipelineParser.g:1984:14: (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )*
                            	                    loop52:
                            	                    do {
                            	                        int alt52=2;
                            	                        int LA52_0 = input.LA(1);

                            	                        if ( (LA52_0==Comma) ) {
                            	                            alt52=1;
                            	                        }


                            	                        switch (alt52) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:1985:15: otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) )
                            	                    	    {
                            	                    	    otherlv_21=(Token)match(input,Comma,FOLLOW_56); 

                            	                    	    															newLeafNode(otherlv_21, grammarAccess.getEventAccess().getCommaKeyword_0_3_1_5_1_0_1_2_0());
                            	                    	    														
                            	                    	    // InternalPipelineParser.g:1989:15: ( (lv_includedBranches_22_0= ruleBranch ) )
                            	                    	    // InternalPipelineParser.g:1990:16: (lv_includedBranches_22_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:1990:16: (lv_includedBranches_22_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:1991:17: lv_includedBranches_22_0= ruleBranch
                            	                    	    {

                            	                    	    																	newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_3_1_5_1_0_1_2_1_0());
                            	                    	    																
                            	                    	    pushFollow(FOLLOW_9);
                            	                    	    lv_includedBranches_22_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																	if (current==null) {
                            	                    	    																		current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																	}
                            	                    	    																	add(
                            	                    	    																		current,
                            	                    	    																		"includedBranches",
                            	                    	    																		lv_includedBranches_22_0,
                            	                    	    																		"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																	afterParserOrEnumRuleCall();
                            	                    	    																

                            	                    	    }


                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop52;
                            	                        }
                            	                    } while (true);

                            	                    otherlv_23=(Token)match(input,RightSquareBracket,FOLLOW_51); 

                            	                    														newLeafNode(otherlv_23, grammarAccess.getEventAccess().getRightSquareBracketKeyword_0_3_1_5_1_0_1_3());
                            	                    													

                            	                    }


                            	                    }
                            	                    break;

                            	            }


                            	            }
                            	            break;
                            	        case 2 :
                            	            // InternalPipelineParser.g:2016:12: (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END )
                            	            {
                            	            // InternalPipelineParser.g:2016:12: (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END )
                            	            // InternalPipelineParser.g:2017:13: this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END
                            	            {
                            	            this_BEGIN_24=(Token)match(input,RULE_BEGIN,FOLLOW_57); 

                            	            													newLeafNode(this_BEGIN_24, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_3_1_5_1_1_0());
                            	            												
                            	            // InternalPipelineParser.g:2021:13: ( (lv_includedBranches_25_0= ruleBranch ) )*
                            	            loop54:
                            	            do {
                            	                int alt54=2;
                            	                int LA54_0 = input.LA(1);

                            	                if ( (LA54_0==HyphenMinus||LA54_0==RULE_ID||LA54_0==RULE_STRING) ) {
                            	                    alt54=1;
                            	                }


                            	                switch (alt54) {
                            	            	case 1 :
                            	            	    // InternalPipelineParser.g:2022:14: (lv_includedBranches_25_0= ruleBranch )
                            	            	    {
                            	            	    // InternalPipelineParser.g:2022:14: (lv_includedBranches_25_0= ruleBranch )
                            	            	    // InternalPipelineParser.g:2023:15: lv_includedBranches_25_0= ruleBranch
                            	            	    {

                            	            	    															newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_3_1_5_1_1_1_0());
                            	            	    														
                            	            	    pushFollow(FOLLOW_57);
                            	            	    lv_includedBranches_25_0=ruleBranch();

                            	            	    state._fsp--;


                            	            	    															if (current==null) {
                            	            	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	            	    															}
                            	            	    															add(
                            	            	    																current,
                            	            	    																"includedBranches",
                            	            	    																lv_includedBranches_25_0,
                            	            	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	            	    															afterParserOrEnumRuleCall();
                            	            	    														

                            	            	    }


                            	            	    }
                            	            	    break;

                            	            	default :
                            	            	    break loop54;
                            	                }
                            	            } while (true);

                            	            // InternalPipelineParser.g:2040:13: (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )?
                            	            int alt56=2;
                            	            int LA56_0 = input.LA(1);

                            	            if ( (LA56_0==Include) ) {
                            	                alt56=1;
                            	            }
                            	            switch (alt56) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2041:14: otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )*
                            	                    {
                            	                    otherlv_26=(Token)match(input,Include,FOLLOW_58); 

                            	                    														newLeafNode(otherlv_26, grammarAccess.getEventAccess().getIncludeKeyword_0_3_1_5_1_1_2_0());
                            	                    													
                            	                    // InternalPipelineParser.g:2045:14: ( (lv_includedBranches_27_0= ruleBranch ) )*
                            	                    loop55:
                            	                    do {
                            	                        int alt55=2;
                            	                        int LA55_0 = input.LA(1);

                            	                        if ( (LA55_0==HyphenMinus||LA55_0==RULE_ID||LA55_0==RULE_STRING) ) {
                            	                            alt55=1;
                            	                        }


                            	                        switch (alt55) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:2046:15: (lv_includedBranches_27_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:2046:15: (lv_includedBranches_27_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:2047:16: lv_includedBranches_27_0= ruleBranch
                            	                    	    {

                            	                    	    																newCompositeNode(grammarAccess.getEventAccess().getIncludedBranchesBranchParserRuleCall_0_3_1_5_1_1_2_1_0());
                            	                    	    															
                            	                    	    pushFollow(FOLLOW_58);
                            	                    	    lv_includedBranches_27_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																if (current==null) {
                            	                    	    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																}
                            	                    	    																add(
                            	                    	    																	current,
                            	                    	    																	"includedBranches",
                            	                    	    																	lv_includedBranches_27_0,
                            	                    	    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																afterParserOrEnumRuleCall();
                            	                    	    															

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop55;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;

                            	            }

                            	            // InternalPipelineParser.g:2065:13: (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )?
                            	            int alt58=2;
                            	            int LA58_0 = input.LA(1);

                            	            if ( (LA58_0==Exclude) ) {
                            	                alt58=1;
                            	            }
                            	            switch (alt58) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2066:14: otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )*
                            	                    {
                            	                    otherlv_28=(Token)match(input,Exclude,FOLLOW_13); 

                            	                    														newLeafNode(otherlv_28, grammarAccess.getEventAccess().getExcludeKeyword_0_3_1_5_1_1_3_0());
                            	                    													
                            	                    // InternalPipelineParser.g:2070:14: ( (lv_excludedBranches_29_0= ruleBranch ) )*
                            	                    loop57:
                            	                    do {
                            	                        int alt57=2;
                            	                        int LA57_0 = input.LA(1);

                            	                        if ( (LA57_0==HyphenMinus||LA57_0==RULE_ID||LA57_0==RULE_STRING) ) {
                            	                            alt57=1;
                            	                        }


                            	                        switch (alt57) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:2071:15: (lv_excludedBranches_29_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:2071:15: (lv_excludedBranches_29_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:2072:16: lv_excludedBranches_29_0= ruleBranch
                            	                    	    {

                            	                    	    																newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_3_1_5_1_1_3_1_0());
                            	                    	    															
                            	                    	    pushFollow(FOLLOW_13);
                            	                    	    lv_excludedBranches_29_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																if (current==null) {
                            	                    	    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																}
                            	                    	    																add(
                            	                    	    																	current,
                            	                    	    																	"excludedBranches",
                            	                    	    																	lv_excludedBranches_29_0,
                            	                    	    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																afterParserOrEnumRuleCall();
                            	                    	    															

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop57;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;

                            	            }

                            	            this_END_30=(Token)match(input,RULE_END,FOLLOW_51); 

                            	            													newLeafNode(this_END_30, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_3_1_5_1_1_4());
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 7 :
                            	    // InternalPipelineParser.g:2102:6: ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2102:6: ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) )
                            	    // InternalPipelineParser.g:2103:7: {...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 6) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 6)");
                            	    }
                            	    // InternalPipelineParser.g:2103:108: ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) )
                            	    // InternalPipelineParser.g:2104:8: ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 6);
                            	    							
                            	    // InternalPipelineParser.g:2107:11: ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) )
                            	    // InternalPipelineParser.g:2107:12: {...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2107:21: (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) )
                            	    // InternalPipelineParser.g:2107:22: otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) )
                            	    {
                            	    otherlv_31=(Token)match(input,BranchesIgnore,FOLLOW_54); 

                            	    											newLeafNode(otherlv_31, grammarAccess.getEventAccess().getBranchesIgnoreKeyword_0_3_1_6_0());
                            	    										
                            	    // InternalPipelineParser.g:2111:11: ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) )
                            	    int alt64=2;
                            	    int LA64_0 = input.LA(1);

                            	    if ( (LA64_0==BranchesIgnore||LA64_0==PathsIgnore||(LA64_0>=TagsIgnore && LA64_0<=AutoCancel)||LA64_0==Workflows||LA64_0==Branches||LA64_0==Drafts||LA64_0==Batch||LA64_0==Paths||LA64_0==Types||LA64_0==Tags||LA64_0==HyphenMinus||LA64_0==LeftSquareBracket||LA64_0==RULE_ID||LA64_0==RULE_END||LA64_0==RULE_STRING) ) {
                            	        alt64=1;
                            	    }
                            	    else if ( (LA64_0==RULE_BEGIN) ) {
                            	        alt64=2;
                            	    }
                            	    else {
                            	        NoViableAltException nvae =
                            	            new NoViableAltException("", 64, 0, input);

                            	        throw nvae;
                            	    }
                            	    switch (alt64) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2112:12: ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) )
                            	            {
                            	            // InternalPipelineParser.g:2112:12: ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) )
                            	            int alt62=2;
                            	            int LA62_0 = input.LA(1);

                            	            if ( (LA62_0==BranchesIgnore||LA62_0==PathsIgnore||(LA62_0>=TagsIgnore && LA62_0<=AutoCancel)||LA62_0==Workflows||LA62_0==Branches||LA62_0==Drafts||LA62_0==Batch||LA62_0==Paths||LA62_0==Types||LA62_0==Tags||LA62_0==HyphenMinus||LA62_0==RULE_ID||LA62_0==RULE_END||LA62_0==RULE_STRING) ) {
                            	                alt62=1;
                            	            }
                            	            else if ( (LA62_0==LeftSquareBracket) ) {
                            	                alt62=2;
                            	            }
                            	            else {
                            	                NoViableAltException nvae =
                            	                    new NoViableAltException("", 62, 0, input);

                            	                throw nvae;
                            	            }
                            	            switch (alt62) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2113:13: ( (lv_excludedBranches_32_0= ruleBranch ) )*
                            	                    {
                            	                    // InternalPipelineParser.g:2113:13: ( (lv_excludedBranches_32_0= ruleBranch ) )*
                            	                    loop60:
                            	                    do {
                            	                        int alt60=2;
                            	                        int LA60_0 = input.LA(1);

                            	                        if ( (LA60_0==HyphenMinus||LA60_0==RULE_ID||LA60_0==RULE_STRING) ) {
                            	                            alt60=1;
                            	                        }


                            	                        switch (alt60) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:2114:14: (lv_excludedBranches_32_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:2114:14: (lv_excludedBranches_32_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:2115:15: lv_excludedBranches_32_0= ruleBranch
                            	                    	    {

                            	                    	    															newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_3_1_6_1_0_0_0());
                            	                    	    														
                            	                    	    pushFollow(FOLLOW_55);
                            	                    	    lv_excludedBranches_32_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    															if (current==null) {
                            	                    	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    															}
                            	                    	    															add(
                            	                    	    																current,
                            	                    	    																"excludedBranches",
                            	                    	    																lv_excludedBranches_32_0,
                            	                    	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    															afterParserOrEnumRuleCall();
                            	                    	    														

                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop60;
                            	                        }
                            	                    } while (true);


                            	                    }
                            	                    break;
                            	                case 2 :
                            	                    // InternalPipelineParser.g:2133:13: (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket )
                            	                    {
                            	                    // InternalPipelineParser.g:2133:13: (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket )
                            	                    // InternalPipelineParser.g:2134:14: otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket
                            	                    {
                            	                    otherlv_33=(Token)match(input,LeftSquareBracket,FOLLOW_56); 

                            	                    														newLeafNode(otherlv_33, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_0_3_1_6_1_0_1_0());
                            	                    													
                            	                    // InternalPipelineParser.g:2138:14: ( (lv_excludedBranches_34_0= ruleBranch ) )
                            	                    // InternalPipelineParser.g:2139:15: (lv_excludedBranches_34_0= ruleBranch )
                            	                    {
                            	                    // InternalPipelineParser.g:2139:15: (lv_excludedBranches_34_0= ruleBranch )
                            	                    // InternalPipelineParser.g:2140:16: lv_excludedBranches_34_0= ruleBranch
                            	                    {

                            	                    																newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_3_1_6_1_0_1_1_0());
                            	                    															
                            	                    pushFollow(FOLLOW_9);
                            	                    lv_excludedBranches_34_0=ruleBranch();

                            	                    state._fsp--;


                            	                    																if (current==null) {
                            	                    																	current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    																}
                            	                    																add(
                            	                    																	current,
                            	                    																	"excludedBranches",
                            	                    																	lv_excludedBranches_34_0,
                            	                    																	"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    																afterParserOrEnumRuleCall();
                            	                    															

                            	                    }


                            	                    }

                            	                    // InternalPipelineParser.g:2157:14: (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )*
                            	                    loop61:
                            	                    do {
                            	                        int alt61=2;
                            	                        int LA61_0 = input.LA(1);

                            	                        if ( (LA61_0==Comma) ) {
                            	                            alt61=1;
                            	                        }


                            	                        switch (alt61) {
                            	                    	case 1 :
                            	                    	    // InternalPipelineParser.g:2158:15: otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) )
                            	                    	    {
                            	                    	    otherlv_35=(Token)match(input,Comma,FOLLOW_56); 

                            	                    	    															newLeafNode(otherlv_35, grammarAccess.getEventAccess().getCommaKeyword_0_3_1_6_1_0_1_2_0());
                            	                    	    														
                            	                    	    // InternalPipelineParser.g:2162:15: ( (lv_excludedBranches_36_0= ruleBranch ) )
                            	                    	    // InternalPipelineParser.g:2163:16: (lv_excludedBranches_36_0= ruleBranch )
                            	                    	    {
                            	                    	    // InternalPipelineParser.g:2163:16: (lv_excludedBranches_36_0= ruleBranch )
                            	                    	    // InternalPipelineParser.g:2164:17: lv_excludedBranches_36_0= ruleBranch
                            	                    	    {

                            	                    	    																	newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_3_1_6_1_0_1_2_1_0());
                            	                    	    																
                            	                    	    pushFollow(FOLLOW_9);
                            	                    	    lv_excludedBranches_36_0=ruleBranch();

                            	                    	    state._fsp--;


                            	                    	    																	if (current==null) {
                            	                    	    																		current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    	    																	}
                            	                    	    																	add(
                            	                    	    																		current,
                            	                    	    																		"excludedBranches",
                            	                    	    																		lv_excludedBranches_36_0,
                            	                    	    																		"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	                    	    																	afterParserOrEnumRuleCall();
                            	                    	    																

                            	                    	    }


                            	                    	    }


                            	                    	    }
                            	                    	    break;

                            	                    	default :
                            	                    	    break loop61;
                            	                        }
                            	                    } while (true);

                            	                    otherlv_37=(Token)match(input,RightSquareBracket,FOLLOW_51); 

                            	                    														newLeafNode(otherlv_37, grammarAccess.getEventAccess().getRightSquareBracketKeyword_0_3_1_6_1_0_1_3());
                            	                    													

                            	                    }


                            	                    }
                            	                    break;

                            	            }


                            	            }
                            	            break;
                            	        case 2 :
                            	            // InternalPipelineParser.g:2189:12: (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END )
                            	            {
                            	            // InternalPipelineParser.g:2189:12: (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END )
                            	            // InternalPipelineParser.g:2190:13: this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END
                            	            {
                            	            this_BEGIN_38=(Token)match(input,RULE_BEGIN,FOLLOW_13); 

                            	            													newLeafNode(this_BEGIN_38, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_3_1_6_1_1_0());
                            	            												
                            	            // InternalPipelineParser.g:2194:13: ( (lv_excludedBranches_39_0= ruleBranch ) )*
                            	            loop63:
                            	            do {
                            	                int alt63=2;
                            	                int LA63_0 = input.LA(1);

                            	                if ( (LA63_0==HyphenMinus||LA63_0==RULE_ID||LA63_0==RULE_STRING) ) {
                            	                    alt63=1;
                            	                }


                            	                switch (alt63) {
                            	            	case 1 :
                            	            	    // InternalPipelineParser.g:2195:14: (lv_excludedBranches_39_0= ruleBranch )
                            	            	    {
                            	            	    // InternalPipelineParser.g:2195:14: (lv_excludedBranches_39_0= ruleBranch )
                            	            	    // InternalPipelineParser.g:2196:15: lv_excludedBranches_39_0= ruleBranch
                            	            	    {

                            	            	    															newCompositeNode(grammarAccess.getEventAccess().getExcludedBranchesBranchParserRuleCall_0_3_1_6_1_1_1_0());
                            	            	    														
                            	            	    pushFollow(FOLLOW_13);
                            	            	    lv_excludedBranches_39_0=ruleBranch();

                            	            	    state._fsp--;


                            	            	    															if (current==null) {
                            	            	    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	            	    															}
                            	            	    															add(
                            	            	    																current,
                            	            	    																"excludedBranches",
                            	            	    																lv_excludedBranches_39_0,
                            	            	    																"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	            	    															afterParserOrEnumRuleCall();
                            	            	    														

                            	            	    }


                            	            	    }
                            	            	    break;

                            	            	default :
                            	            	    break loop63;
                            	                }
                            	            } while (true);

                            	            this_END_40=(Token)match(input,RULE_END,FOLLOW_51); 

                            	            													newLeafNode(this_END_40, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_3_1_6_1_1_2());
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 8 :
                            	    // InternalPipelineParser.g:2225:6: ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2225:6: ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) )
                            	    // InternalPipelineParser.g:2226:7: {...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 7) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 7)");
                            	    }
                            	    // InternalPipelineParser.g:2226:108: ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) )
                            	    // InternalPipelineParser.g:2227:8: ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 7);
                            	    							
                            	    // InternalPipelineParser.g:2230:11: ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) )
                            	    // InternalPipelineParser.g:2230:12: {...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2230:21: (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? )
                            	    // InternalPipelineParser.g:2230:22: otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )?
                            	    {
                            	    otherlv_41=(Token)match(input,Paths,FOLLOW_59); 

                            	    											newLeafNode(otherlv_41, grammarAccess.getEventAccess().getPathsKeyword_0_3_1_7_0());
                            	    										
                            	    // InternalPipelineParser.g:2234:11: ( (lv_includedPaths_42_0= ruleHyphenValues ) )?
                            	    int alt65=2;
                            	    int LA65_0 = input.LA(1);

                            	    if ( (LA65_0==HyphenMinus) ) {
                            	        alt65=1;
                            	    }
                            	    else if ( (LA65_0==RULE_BEGIN) ) {
                            	        int LA65_2 = input.LA(2);

                            	        if ( (LA65_2==HyphenMinus) ) {
                            	            alt65=1;
                            	        }
                            	    }
                            	    switch (alt65) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2235:12: (lv_includedPaths_42_0= ruleHyphenValues )
                            	            {
                            	            // InternalPipelineParser.g:2235:12: (lv_includedPaths_42_0= ruleHyphenValues )
                            	            // InternalPipelineParser.g:2236:13: lv_includedPaths_42_0= ruleHyphenValues
                            	            {

                            	            													newCompositeNode(grammarAccess.getEventAccess().getIncludedPathsHyphenValuesParserRuleCall_0_3_1_7_1_0());
                            	            												
                            	            pushFollow(FOLLOW_60);
                            	            lv_includedPaths_42_0=ruleHyphenValues();

                            	            state._fsp--;


                            	            													if (current==null) {
                            	            														current = createModelElementForParent(grammarAccess.getEventRule());
                            	            													}
                            	            													set(
                            	            														current,
                            	            														"includedPaths",
                            	            														lv_includedPaths_42_0,
                            	            														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	            													afterParserOrEnumRuleCall();
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:2253:11: (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )?
                            	    int alt68=2;
                            	    int LA68_0 = input.LA(1);

                            	    if ( (LA68_0==RULE_BEGIN) ) {
                            	        alt68=1;
                            	    }
                            	    switch (alt68) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2254:12: this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END
                            	            {
                            	            this_BEGIN_43=(Token)match(input,RULE_BEGIN,FOLLOW_61); 

                            	            												newLeafNode(this_BEGIN_43, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_3_1_7_2_0());
                            	            											
                            	            // InternalPipelineParser.g:2258:12: (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )?
                            	            int alt66=2;
                            	            int LA66_0 = input.LA(1);

                            	            if ( (LA66_0==Include) ) {
                            	                alt66=1;
                            	            }
                            	            switch (alt66) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2259:13: otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_44=(Token)match(input,Include,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_44, grammarAccess.getEventAccess().getIncludeKeyword_0_3_1_7_2_1_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2263:13: ( (lv_includedPaths_45_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2264:14: (lv_includedPaths_45_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2264:14: (lv_includedPaths_45_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2265:15: lv_includedPaths_45_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getIncludedPathsHyphenValuesParserRuleCall_0_3_1_7_2_1_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_62);
                            	                    lv_includedPaths_45_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"includedPaths",
                            	                    																lv_includedPaths_45_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            // InternalPipelineParser.g:2283:12: (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )?
                            	            int alt67=2;
                            	            int LA67_0 = input.LA(1);

                            	            if ( (LA67_0==Exclude) ) {
                            	                alt67=1;
                            	            }
                            	            switch (alt67) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2284:13: otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_46=(Token)match(input,Exclude,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_46, grammarAccess.getEventAccess().getExcludeKeyword_0_3_1_7_2_2_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2288:13: ( (lv_excludedPaths_47_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2289:14: (lv_excludedPaths_47_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2289:14: (lv_excludedPaths_47_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2290:15: lv_excludedPaths_47_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getExcludedPathsHyphenValuesParserRuleCall_0_3_1_7_2_2_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_20);
                            	                    lv_excludedPaths_47_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"excludedPaths",
                            	                    																lv_excludedPaths_47_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            this_END_48=(Token)match(input,RULE_END,FOLLOW_51); 

                            	            												newLeafNode(this_END_48, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_3_1_7_2_3());
                            	            											

                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 9 :
                            	    // InternalPipelineParser.g:2319:6: ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2319:6: ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) )
                            	    // InternalPipelineParser.g:2320:7: {...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 8) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 8)");
                            	    }
                            	    // InternalPipelineParser.g:2320:108: ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) )
                            	    // InternalPipelineParser.g:2321:8: ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 8);
                            	    							
                            	    // InternalPipelineParser.g:2324:11: ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) )
                            	    // InternalPipelineParser.g:2324:12: {...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2324:21: (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) )
                            	    // InternalPipelineParser.g:2324:22: otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) )
                            	    {
                            	    otherlv_49=(Token)match(input,PathsIgnore,FOLLOW_33); 

                            	    											newLeafNode(otherlv_49, grammarAccess.getEventAccess().getPathsIgnoreKeyword_0_3_1_8_0());
                            	    										
                            	    // InternalPipelineParser.g:2328:11: ( (lv_excludedPaths_50_0= ruleHyphenValues ) )
                            	    // InternalPipelineParser.g:2329:12: (lv_excludedPaths_50_0= ruleHyphenValues )
                            	    {
                            	    // InternalPipelineParser.g:2329:12: (lv_excludedPaths_50_0= ruleHyphenValues )
                            	    // InternalPipelineParser.g:2330:13: lv_excludedPaths_50_0= ruleHyphenValues
                            	    {

                            	    													newCompositeNode(grammarAccess.getEventAccess().getExcludedPathsHyphenValuesParserRuleCall_0_3_1_8_1_0());
                            	    												
                            	    pushFollow(FOLLOW_51);
                            	    lv_excludedPaths_50_0=ruleHyphenValues();

                            	    state._fsp--;


                            	    													if (current==null) {
                            	    														current = createModelElementForParent(grammarAccess.getEventRule());
                            	    													}
                            	    													set(
                            	    														current,
                            	    														"excludedPaths",
                            	    														lv_excludedPaths_50_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	    													afterParserOrEnumRuleCall();
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 10 :
                            	    // InternalPipelineParser.g:2353:6: ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2353:6: ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) )
                            	    // InternalPipelineParser.g:2354:7: {...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 9) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 9)");
                            	    }
                            	    // InternalPipelineParser.g:2354:108: ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) )
                            	    // InternalPipelineParser.g:2355:8: ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 9);
                            	    							
                            	    // InternalPipelineParser.g:2358:11: ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) )
                            	    // InternalPipelineParser.g:2358:12: {...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2358:21: (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? )
                            	    // InternalPipelineParser.g:2358:22: otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )?
                            	    {
                            	    otherlv_51=(Token)match(input,Tags,FOLLOW_59); 

                            	    											newLeafNode(otherlv_51, grammarAccess.getEventAccess().getTagsKeyword_0_3_1_9_0());
                            	    										
                            	    // InternalPipelineParser.g:2362:11: ( (lv_includedTags_52_0= ruleHyphenValues ) )?
                            	    int alt69=2;
                            	    int LA69_0 = input.LA(1);

                            	    if ( (LA69_0==HyphenMinus) ) {
                            	        alt69=1;
                            	    }
                            	    else if ( (LA69_0==RULE_BEGIN) ) {
                            	        int LA69_2 = input.LA(2);

                            	        if ( (LA69_2==HyphenMinus) ) {
                            	            alt69=1;
                            	        }
                            	    }
                            	    switch (alt69) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2363:12: (lv_includedTags_52_0= ruleHyphenValues )
                            	            {
                            	            // InternalPipelineParser.g:2363:12: (lv_includedTags_52_0= ruleHyphenValues )
                            	            // InternalPipelineParser.g:2364:13: lv_includedTags_52_0= ruleHyphenValues
                            	            {

                            	            													newCompositeNode(grammarAccess.getEventAccess().getIncludedTagsHyphenValuesParserRuleCall_0_3_1_9_1_0());
                            	            												
                            	            pushFollow(FOLLOW_60);
                            	            lv_includedTags_52_0=ruleHyphenValues();

                            	            state._fsp--;


                            	            													if (current==null) {
                            	            														current = createModelElementForParent(grammarAccess.getEventRule());
                            	            													}
                            	            													set(
                            	            														current,
                            	            														"includedTags",
                            	            														lv_includedTags_52_0,
                            	            														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	            													afterParserOrEnumRuleCall();
                            	            												

                            	            }


                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:2381:11: (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )?
                            	    int alt72=2;
                            	    int LA72_0 = input.LA(1);

                            	    if ( (LA72_0==RULE_BEGIN) ) {
                            	        alt72=1;
                            	    }
                            	    switch (alt72) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:2382:12: this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END
                            	            {
                            	            this_BEGIN_53=(Token)match(input,RULE_BEGIN,FOLLOW_61); 

                            	            												newLeafNode(this_BEGIN_53, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_0_3_1_9_2_0());
                            	            											
                            	            // InternalPipelineParser.g:2386:12: (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )?
                            	            int alt70=2;
                            	            int LA70_0 = input.LA(1);

                            	            if ( (LA70_0==Include) ) {
                            	                alt70=1;
                            	            }
                            	            switch (alt70) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2387:13: otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_54=(Token)match(input,Include,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_54, grammarAccess.getEventAccess().getIncludeKeyword_0_3_1_9_2_1_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2391:13: ( (lv_includedTags_55_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2392:14: (lv_includedTags_55_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2392:14: (lv_includedTags_55_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2393:15: lv_includedTags_55_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getIncludedTagsHyphenValuesParserRuleCall_0_3_1_9_2_1_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_62);
                            	                    lv_includedTags_55_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"includedTags",
                            	                    																lv_includedTags_55_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            // InternalPipelineParser.g:2411:12: (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )?
                            	            int alt71=2;
                            	            int LA71_0 = input.LA(1);

                            	            if ( (LA71_0==Exclude) ) {
                            	                alt71=1;
                            	            }
                            	            switch (alt71) {
                            	                case 1 :
                            	                    // InternalPipelineParser.g:2412:13: otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) )
                            	                    {
                            	                    otherlv_56=(Token)match(input,Exclude,FOLLOW_33); 

                            	                    													newLeafNode(otherlv_56, grammarAccess.getEventAccess().getExcludeKeyword_0_3_1_9_2_2_0());
                            	                    												
                            	                    // InternalPipelineParser.g:2416:13: ( (lv_excludedTags_57_0= ruleHyphenValues ) )
                            	                    // InternalPipelineParser.g:2417:14: (lv_excludedTags_57_0= ruleHyphenValues )
                            	                    {
                            	                    // InternalPipelineParser.g:2417:14: (lv_excludedTags_57_0= ruleHyphenValues )
                            	                    // InternalPipelineParser.g:2418:15: lv_excludedTags_57_0= ruleHyphenValues
                            	                    {

                            	                    															newCompositeNode(grammarAccess.getEventAccess().getExcludedTagsHyphenValuesParserRuleCall_0_3_1_9_2_2_1_0());
                            	                    														
                            	                    pushFollow(FOLLOW_20);
                            	                    lv_excludedTags_57_0=ruleHyphenValues();

                            	                    state._fsp--;


                            	                    															if (current==null) {
                            	                    																current = createModelElementForParent(grammarAccess.getEventRule());
                            	                    															}
                            	                    															set(
                            	                    																current,
                            	                    																"excludedTags",
                            	                    																lv_excludedTags_57_0,
                            	                    																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	                    															afterParserOrEnumRuleCall();
                            	                    														

                            	                    }


                            	                    }


                            	                    }
                            	                    break;

                            	            }

                            	            this_END_58=(Token)match(input,RULE_END,FOLLOW_51); 

                            	            												newLeafNode(this_END_58, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_3_1_9_2_3());
                            	            											

                            	            }
                            	            break;

                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;
                            	case 11 :
                            	    // InternalPipelineParser.g:2447:6: ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) )
                            	    {
                            	    // InternalPipelineParser.g:2447:6: ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) )
                            	    // InternalPipelineParser.g:2448:7: {...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) )
                            	    {
                            	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 10) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 10)");
                            	    }
                            	    // InternalPipelineParser.g:2448:109: ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) )
                            	    // InternalPipelineParser.g:2449:8: ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) )
                            	    {

                            	    								getUnorderedGroupHelper().select(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 10);
                            	    							
                            	    // InternalPipelineParser.g:2452:11: ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) )
                            	    // InternalPipelineParser.g:2452:12: {...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) )
                            	    {
                            	    if ( !((true)) ) {
                            	        throw new FailedPredicateException(input, "ruleEvent", "true");
                            	    }
                            	    // InternalPipelineParser.g:2452:21: (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) )
                            	    // InternalPipelineParser.g:2452:22: otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) )
                            	    {
                            	    otherlv_59=(Token)match(input,TagsIgnore,FOLLOW_33); 

                            	    											newLeafNode(otherlv_59, grammarAccess.getEventAccess().getTagsIgnoreKeyword_0_3_1_10_0());
                            	    										
                            	    // InternalPipelineParser.g:2456:11: ( (lv_excludedTags_60_0= ruleHyphenValues ) )
                            	    // InternalPipelineParser.g:2457:12: (lv_excludedTags_60_0= ruleHyphenValues )
                            	    {
                            	    // InternalPipelineParser.g:2457:12: (lv_excludedTags_60_0= ruleHyphenValues )
                            	    // InternalPipelineParser.g:2458:13: lv_excludedTags_60_0= ruleHyphenValues
                            	    {

                            	    													newCompositeNode(grammarAccess.getEventAccess().getExcludedTagsHyphenValuesParserRuleCall_0_3_1_10_1_0());
                            	    												
                            	    pushFollow(FOLLOW_51);
                            	    lv_excludedTags_60_0=ruleHyphenValues();

                            	    state._fsp--;


                            	    													if (current==null) {
                            	    														current = createModelElementForParent(grammarAccess.getEventRule());
                            	    													}
                            	    													set(
                            	    														current,
                            	    														"excludedTags",
                            	    														lv_excludedTags_60_0,
                            	    														"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            	    													afterParserOrEnumRuleCall();
                            	    												

                            	    }


                            	    }


                            	    }


                            	    }

                            	     
                            	    								getUnorderedGroupHelper().returnFromSelection(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop73;
                                }
                            } while (true);


                            }


                            }

                             
                            						  getUnorderedGroupHelper().leave(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1());
                            						

                            }

                            this_END_61=(Token)match(input,RULE_END,FOLLOW_2); 

                            					newLeafNode(this_END_61, grammarAccess.getEventAccess().getENDTerminalRuleCall_0_3_2());
                            				

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2495:3: ( ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) ) )
                    {
                    // InternalPipelineParser.g:2495:3: ( ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* ) | ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) ) )
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==Schedules||LA79_0==Schedule) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==Workflow_dispatch||LA79_0==Workflow_call) ) {
                        alt79=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 0, input);

                        throw nvae;
                    }
                    switch (alt79) {
                        case 1 :
                            // InternalPipelineParser.g:2496:4: ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* )
                            {
                            // InternalPipelineParser.g:2496:4: ( ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )* )
                            // InternalPipelineParser.g:2497:5: ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) ) ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )*
                            {
                            // InternalPipelineParser.g:2497:5: ( ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) ) )
                            // InternalPipelineParser.g:2498:6: ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) )
                            {
                            // InternalPipelineParser.g:2498:6: ( (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule ) )
                            // InternalPipelineParser.g:2499:7: (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule )
                            {
                            // InternalPipelineParser.g:2499:7: (lv_scheduleNameKW_62_1= Schedules | lv_scheduleNameKW_62_2= Schedule )
                            int alt75=2;
                            int LA75_0 = input.LA(1);

                            if ( (LA75_0==Schedules) ) {
                                alt75=1;
                            }
                            else if ( (LA75_0==Schedule) ) {
                                alt75=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 75, 0, input);

                                throw nvae;
                            }
                            switch (alt75) {
                                case 1 :
                                    // InternalPipelineParser.g:2500:8: lv_scheduleNameKW_62_1= Schedules
                                    {
                                    lv_scheduleNameKW_62_1=(Token)match(input,Schedules,FOLLOW_11); 

                                    								newLeafNode(lv_scheduleNameKW_62_1, grammarAccess.getEventAccess().getScheduleNameKWSchedulesKeyword_1_0_0_0_0());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getEventRule());
                                    								}
                                    								setWithLastConsumed(current, "scheduleNameKW", lv_scheduleNameKW_62_1, null);
                                    							

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:2511:8: lv_scheduleNameKW_62_2= Schedule
                                    {
                                    lv_scheduleNameKW_62_2=(Token)match(input,Schedule,FOLLOW_11); 

                                    								newLeafNode(lv_scheduleNameKW_62_2, grammarAccess.getEventAccess().getScheduleNameKWScheduleKeyword_1_0_0_0_1());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getEventRule());
                                    								}
                                    								setWithLastConsumed(current, "scheduleNameKW", lv_scheduleNameKW_62_2, null);
                                    							

                                    }
                                    break;

                            }


                            }


                            }

                            // InternalPipelineParser.g:2524:5: ( (lv_triggerSchedules_63_0= ruleTriggerSchedule ) )*
                            loop76:
                            do {
                                int alt76=2;
                                int LA76_0 = input.LA(1);

                                if ( (LA76_0==HyphenMinus||LA76_0==RULE_BEGIN) ) {
                                    alt76=1;
                                }


                                switch (alt76) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2525:6: (lv_triggerSchedules_63_0= ruleTriggerSchedule )
                            	    {
                            	    // InternalPipelineParser.g:2525:6: (lv_triggerSchedules_63_0= ruleTriggerSchedule )
                            	    // InternalPipelineParser.g:2526:7: lv_triggerSchedules_63_0= ruleTriggerSchedule
                            	    {

                            	    							newCompositeNode(grammarAccess.getEventAccess().getTriggerSchedulesTriggerScheduleParserRuleCall_1_0_1_0());
                            	    						
                            	    pushFollow(FOLLOW_11);
                            	    lv_triggerSchedules_63_0=ruleTriggerSchedule();

                            	    state._fsp--;


                            	    							if (current==null) {
                            	    								current = createModelElementForParent(grammarAccess.getEventRule());
                            	    							}
                            	    							add(
                            	    								current,
                            	    								"triggerSchedules",
                            	    								lv_triggerSchedules_63_0,
                            	    								"ca.mcgill.devops.pipeline.Pipeline.TriggerSchedule");
                            	    							afterParserOrEnumRuleCall();
                            	    						

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop76;
                                }
                            } while (true);


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:2545:4: ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) )
                            {
                            // InternalPipelineParser.g:2545:4: ( ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END ) )
                            // InternalPipelineParser.g:2546:5: ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch ) (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END )
                            {
                            // InternalPipelineParser.g:2546:5: ( ( (lv_workflowTypeKW_64_0= Workflow_call ) ) | otherlv_65= Workflow_dispatch )
                            int alt77=2;
                            int LA77_0 = input.LA(1);

                            if ( (LA77_0==Workflow_call) ) {
                                alt77=1;
                            }
                            else if ( (LA77_0==Workflow_dispatch) ) {
                                alt77=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 77, 0, input);

                                throw nvae;
                            }
                            switch (alt77) {
                                case 1 :
                                    // InternalPipelineParser.g:2547:6: ( (lv_workflowTypeKW_64_0= Workflow_call ) )
                                    {
                                    // InternalPipelineParser.g:2547:6: ( (lv_workflowTypeKW_64_0= Workflow_call ) )
                                    // InternalPipelineParser.g:2548:7: (lv_workflowTypeKW_64_0= Workflow_call )
                                    {
                                    // InternalPipelineParser.g:2548:7: (lv_workflowTypeKW_64_0= Workflow_call )
                                    // InternalPipelineParser.g:2549:8: lv_workflowTypeKW_64_0= Workflow_call
                                    {
                                    lv_workflowTypeKW_64_0=(Token)match(input,Workflow_call,FOLLOW_16); 

                                    								newLeafNode(lv_workflowTypeKW_64_0, grammarAccess.getEventAccess().getWorkflowTypeKWWorkflow_callKeyword_1_1_0_0_0());
                                    							

                                    								if (current==null) {
                                    									current = createModelElement(grammarAccess.getEventRule());
                                    								}
                                    								setWithLastConsumed(current, "workflowTypeKW", lv_workflowTypeKW_64_0, "workflow_call:");
                                    							

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:2562:6: otherlv_65= Workflow_dispatch
                                    {
                                    otherlv_65=(Token)match(input,Workflow_dispatch,FOLLOW_16); 

                                    						newLeafNode(otherlv_65, grammarAccess.getEventAccess().getWorkflow_dispatchKeyword_1_1_0_1());
                                    					

                                    }
                                    break;

                            }

                            // InternalPipelineParser.g:2567:5: (this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END )
                            // InternalPipelineParser.g:2568:6: this_BEGIN_66= RULE_BEGIN ( (lv_workFlowActivities_67_0= ruleActivity ) )* this_END_68= RULE_END
                            {
                            this_BEGIN_66=(Token)match(input,RULE_BEGIN,FOLLOW_63); 

                            						newLeafNode(this_BEGIN_66, grammarAccess.getEventAccess().getBEGINTerminalRuleCall_1_1_1_0());
                            					
                            // InternalPipelineParser.g:2572:6: ( (lv_workFlowActivities_67_0= ruleActivity ) )*
                            loop78:
                            do {
                                int alt78=2;
                                int LA78_0 = input.LA(1);

                                if ( (LA78_0==Outputs||LA78_0==Secrets||LA78_0==Inputs||LA78_0==HyphenMinus||LA78_0==LeftSquareBracket||(LA78_0>=RULE_COMPLEX_EXPRESSION && LA78_0<=RULE_BEGIN)||LA78_0==RULE_STRING) ) {
                                    alt78=1;
                                }


                                switch (alt78) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2573:7: (lv_workFlowActivities_67_0= ruleActivity )
                            	    {
                            	    // InternalPipelineParser.g:2573:7: (lv_workFlowActivities_67_0= ruleActivity )
                            	    // InternalPipelineParser.g:2574:8: lv_workFlowActivities_67_0= ruleActivity
                            	    {

                            	    								newCompositeNode(grammarAccess.getEventAccess().getWorkFlowActivitiesActivityParserRuleCall_1_1_1_1_0());
                            	    							
                            	    pushFollow(FOLLOW_63);
                            	    lv_workFlowActivities_67_0=ruleActivity();

                            	    state._fsp--;


                            	    								if (current==null) {
                            	    									current = createModelElementForParent(grammarAccess.getEventRule());
                            	    								}
                            	    								add(
                            	    									current,
                            	    									"workFlowActivities",
                            	    									lv_workFlowActivities_67_0,
                            	    									"ca.mcgill.devops.pipeline.Pipeline.Activity");
                            	    								afterParserOrEnumRuleCall();
                            	    							

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop78;
                                }
                            } while (true);

                            this_END_68=(Token)match(input,RULE_END,FOLLOW_2); 

                            						newLeafNode(this_END_68, grammarAccess.getEventAccess().getENDTerminalRuleCall_1_1_1_2());
                            					

                            }


                            }


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleEvent"


    // $ANTLR start "entryRuleTriggerSchedule"
    // InternalPipelineParser.g:2602:1: entryRuleTriggerSchedule returns [EObject current=null] : iv_ruleTriggerSchedule= ruleTriggerSchedule EOF ;
    public final EObject entryRuleTriggerSchedule() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleTriggerSchedule = null;


        try {
            // InternalPipelineParser.g:2602:56: (iv_ruleTriggerSchedule= ruleTriggerSchedule EOF )
            // InternalPipelineParser.g:2603:2: iv_ruleTriggerSchedule= ruleTriggerSchedule EOF
            {
             newCompositeNode(grammarAccess.getTriggerScheduleRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleTriggerSchedule=ruleTriggerSchedule();

            state._fsp--;

             current =iv_ruleTriggerSchedule; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleTriggerSchedule"


    // $ANTLR start "ruleTriggerSchedule"
    // InternalPipelineParser.g:2609:1: ruleTriggerSchedule returns [EObject current=null] : ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? ) ;
    public final EObject ruleTriggerSchedule() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token lv_cronValue_2_0=null;
        Token this_BEGIN_3=null;
        Token otherlv_4=null;
        Token otherlv_5=null;
        Token lv_cronValue_6_0=null;
        Token this_END_7=null;
        Token this_BEGIN_8=null;
        Token otherlv_9=null;
        Token otherlv_11=null;
        Token this_BEGIN_12=null;
        Token otherlv_13=null;
        Token otherlv_15=null;
        Token this_END_17=null;
        Token otherlv_19=null;
        Token lv_batch_20_0=null;
        Token otherlv_21=null;
        Token lv_always_22_0=null;
        Token this_END_23=null;
        AntlrDatatypeRuleToken lv_displayName_10_0 = null;

        EObject lv_includedBranches_14_0 = null;

        EObject lv_excludedBranches_16_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:2615:2: ( ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? ) )
            // InternalPipelineParser.g:2616:2: ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? )
            {
            // InternalPipelineParser.g:2616:2: ( ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )? )
            // InternalPipelineParser.g:2617:3: ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) ) (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )?
            {
            // InternalPipelineParser.g:2617:3: ( (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) ) | (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==HyphenMinus) ) {
                alt81=1;
            }
            else if ( (LA81_0==RULE_BEGIN) ) {
                alt81=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // InternalPipelineParser.g:2618:4: (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) )
                    {
                    // InternalPipelineParser.g:2618:4: (otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) ) )
                    // InternalPipelineParser.g:2619:5: otherlv_0= HyphenMinus otherlv_1= Cron ( (lv_cronValue_2_0= RULE_STRING ) )
                    {
                    otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_64); 

                    					newLeafNode(otherlv_0, grammarAccess.getTriggerScheduleAccess().getHyphenMinusKeyword_0_0_0());
                    				
                    otherlv_1=(Token)match(input,Cron,FOLLOW_65); 

                    					newLeafNode(otherlv_1, grammarAccess.getTriggerScheduleAccess().getCronKeyword_0_0_1());
                    				
                    // InternalPipelineParser.g:2627:5: ( (lv_cronValue_2_0= RULE_STRING ) )
                    // InternalPipelineParser.g:2628:6: (lv_cronValue_2_0= RULE_STRING )
                    {
                    // InternalPipelineParser.g:2628:6: (lv_cronValue_2_0= RULE_STRING )
                    // InternalPipelineParser.g:2629:7: lv_cronValue_2_0= RULE_STRING
                    {
                    lv_cronValue_2_0=(Token)match(input,RULE_STRING,FOLLOW_44); 

                    							newLeafNode(lv_cronValue_2_0, grammarAccess.getTriggerScheduleAccess().getCronValueSTRINGTerminalRuleCall_0_0_2_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    							}
                    							setWithLastConsumed(
                    								current,
                    								"cronValue",
                    								lv_cronValue_2_0,
                    								"org.eclipse.xtext.common.Terminals.STRING");
                    						

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2647:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END )
                    {
                    // InternalPipelineParser.g:2647:4: (this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END )
                    // InternalPipelineParser.g:2648:5: this_BEGIN_3= RULE_BEGIN (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) ) this_END_7= RULE_END
                    {
                    this_BEGIN_3=(Token)match(input,RULE_BEGIN,FOLLOW_66); 

                    					newLeafNode(this_BEGIN_3, grammarAccess.getTriggerScheduleAccess().getBEGINTerminalRuleCall_0_1_0());
                    				
                    // InternalPipelineParser.g:2652:5: (otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) ) )
                    // InternalPipelineParser.g:2653:6: otherlv_4= HyphenMinus otherlv_5= Cron ( (lv_cronValue_6_0= RULE_STRING ) )
                    {
                    otherlv_4=(Token)match(input,HyphenMinus,FOLLOW_64); 

                    						newLeafNode(otherlv_4, grammarAccess.getTriggerScheduleAccess().getHyphenMinusKeyword_0_1_1_0());
                    					
                    otherlv_5=(Token)match(input,Cron,FOLLOW_65); 

                    						newLeafNode(otherlv_5, grammarAccess.getTriggerScheduleAccess().getCronKeyword_0_1_1_1());
                    					
                    // InternalPipelineParser.g:2661:6: ( (lv_cronValue_6_0= RULE_STRING ) )
                    // InternalPipelineParser.g:2662:7: (lv_cronValue_6_0= RULE_STRING )
                    {
                    // InternalPipelineParser.g:2662:7: (lv_cronValue_6_0= RULE_STRING )
                    // InternalPipelineParser.g:2663:8: lv_cronValue_6_0= RULE_STRING
                    {
                    lv_cronValue_6_0=(Token)match(input,RULE_STRING,FOLLOW_20); 

                    								newLeafNode(lv_cronValue_6_0, grammarAccess.getTriggerScheduleAccess().getCronValueSTRINGTerminalRuleCall_0_1_1_2_0());
                    							

                    								if (current==null) {
                    									current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    								}
                    								setWithLastConsumed(
                    									current,
                    									"cronValue",
                    									lv_cronValue_6_0,
                    									"org.eclipse.xtext.common.Terminals.STRING");
                    							

                    }


                    }


                    }

                    this_END_7=(Token)match(input,RULE_END,FOLLOW_44); 

                    					newLeafNode(this_END_7, grammarAccess.getTriggerScheduleAccess().getENDTerminalRuleCall_0_1_2());
                    				

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:2686:3: (this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==RULE_BEGIN) ) {
                int LA88_1 = input.LA(2);

                if ( (LA88_1==DisplayName||LA88_1==Branches) ) {
                    alt88=1;
                }
            }
            switch (alt88) {
                case 1 :
                    // InternalPipelineParser.g:2687:4: this_BEGIN_8= RULE_BEGIN (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )? (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) ) ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) ) this_END_23= RULE_END
                    {
                    this_BEGIN_8=(Token)match(input,RULE_BEGIN,FOLLOW_67); 

                    				newLeafNode(this_BEGIN_8, grammarAccess.getTriggerScheduleAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:2691:4: (otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) ) )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==DisplayName) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // InternalPipelineParser.g:2692:5: otherlv_9= DisplayName ( (lv_displayName_10_0= ruleUnquotedString ) )
                            {
                            otherlv_9=(Token)match(input,DisplayName,FOLLOW_14); 

                            					newLeafNode(otherlv_9, grammarAccess.getTriggerScheduleAccess().getDisplayNameKeyword_1_1_0());
                            				
                            // InternalPipelineParser.g:2696:5: ( (lv_displayName_10_0= ruleUnquotedString ) )
                            // InternalPipelineParser.g:2697:6: (lv_displayName_10_0= ruleUnquotedString )
                            {
                            // InternalPipelineParser.g:2697:6: (lv_displayName_10_0= ruleUnquotedString )
                            // InternalPipelineParser.g:2698:7: lv_displayName_10_0= ruleUnquotedString
                            {

                            							newCompositeNode(grammarAccess.getTriggerScheduleAccess().getDisplayNameUnquotedStringParserRuleCall_1_1_1_0());
                            						
                            pushFollow(FOLLOW_68);
                            lv_displayName_10_0=ruleUnquotedString();

                            state._fsp--;


                            							if (current==null) {
                            								current = createModelElementForParent(grammarAccess.getTriggerScheduleRule());
                            							}
                            							set(
                            								current,
                            								"displayName",
                            								lv_displayName_10_0,
                            								"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
                            							afterParserOrEnumRuleCall();
                            						

                            }


                            }


                            }
                            break;

                    }

                    // InternalPipelineParser.g:2716:4: (otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END ) )
                    // InternalPipelineParser.g:2717:5: otherlv_11= Branches (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END )
                    {
                    otherlv_11=(Token)match(input,Branches,FOLLOW_16); 

                    					newLeafNode(otherlv_11, grammarAccess.getTriggerScheduleAccess().getBranchesKeyword_1_2_0());
                    				
                    // InternalPipelineParser.g:2721:5: (this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END )
                    // InternalPipelineParser.g:2722:6: this_BEGIN_12= RULE_BEGIN (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )? (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )? this_END_17= RULE_END
                    {
                    this_BEGIN_12=(Token)match(input,RULE_BEGIN,FOLLOW_61); 

                    						newLeafNode(this_BEGIN_12, grammarAccess.getTriggerScheduleAccess().getBEGINTerminalRuleCall_1_2_1_0());
                    					
                    // InternalPipelineParser.g:2726:6: (otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )* )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==Include) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // InternalPipelineParser.g:2727:7: otherlv_13= Include ( (lv_includedBranches_14_0= ruleBranch ) )*
                            {
                            otherlv_13=(Token)match(input,Include,FOLLOW_58); 

                            							newLeafNode(otherlv_13, grammarAccess.getTriggerScheduleAccess().getIncludeKeyword_1_2_1_1_0());
                            						
                            // InternalPipelineParser.g:2731:7: ( (lv_includedBranches_14_0= ruleBranch ) )*
                            loop83:
                            do {
                                int alt83=2;
                                int LA83_0 = input.LA(1);

                                if ( (LA83_0==HyphenMinus||LA83_0==RULE_ID||LA83_0==RULE_STRING) ) {
                                    alt83=1;
                                }


                                switch (alt83) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2732:8: (lv_includedBranches_14_0= ruleBranch )
                            	    {
                            	    // InternalPipelineParser.g:2732:8: (lv_includedBranches_14_0= ruleBranch )
                            	    // InternalPipelineParser.g:2733:9: lv_includedBranches_14_0= ruleBranch
                            	    {

                            	    									newCompositeNode(grammarAccess.getTriggerScheduleAccess().getIncludedBranchesBranchParserRuleCall_1_2_1_1_1_0());
                            	    								
                            	    pushFollow(FOLLOW_58);
                            	    lv_includedBranches_14_0=ruleBranch();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getTriggerScheduleRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"includedBranches",
                            	    										lv_includedBranches_14_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop83;
                                }
                            } while (true);


                            }
                            break;

                    }

                    // InternalPipelineParser.g:2751:6: (otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )* )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==Exclude) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // InternalPipelineParser.g:2752:7: otherlv_15= Exclude ( (lv_excludedBranches_16_0= ruleBranch ) )*
                            {
                            otherlv_15=(Token)match(input,Exclude,FOLLOW_13); 

                            							newLeafNode(otherlv_15, grammarAccess.getTriggerScheduleAccess().getExcludeKeyword_1_2_1_2_0());
                            						
                            // InternalPipelineParser.g:2756:7: ( (lv_excludedBranches_16_0= ruleBranch ) )*
                            loop85:
                            do {
                                int alt85=2;
                                int LA85_0 = input.LA(1);

                                if ( (LA85_0==HyphenMinus||LA85_0==RULE_ID||LA85_0==RULE_STRING) ) {
                                    alt85=1;
                                }


                                switch (alt85) {
                            	case 1 :
                            	    // InternalPipelineParser.g:2757:8: (lv_excludedBranches_16_0= ruleBranch )
                            	    {
                            	    // InternalPipelineParser.g:2757:8: (lv_excludedBranches_16_0= ruleBranch )
                            	    // InternalPipelineParser.g:2758:9: lv_excludedBranches_16_0= ruleBranch
                            	    {

                            	    									newCompositeNode(grammarAccess.getTriggerScheduleAccess().getExcludedBranchesBranchParserRuleCall_1_2_1_2_1_0());
                            	    								
                            	    pushFollow(FOLLOW_13);
                            	    lv_excludedBranches_16_0=ruleBranch();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getTriggerScheduleRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"excludedBranches",
                            	    										lv_excludedBranches_16_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.Branch");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop85;
                                }
                            } while (true);


                            }
                            break;

                    }

                    this_END_17=(Token)match(input,RULE_END,FOLLOW_69); 

                    						newLeafNode(this_END_17, grammarAccess.getTriggerScheduleAccess().getENDTerminalRuleCall_1_2_1_3());
                    					

                    }


                    }

                    // InternalPipelineParser.g:2782:4: ( ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) ) )
                    // InternalPipelineParser.g:2783:5: ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) )
                    {
                    // InternalPipelineParser.g:2783:5: ( ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* ) )
                    // InternalPipelineParser.g:2784:6: ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* )
                    {
                     
                    					  getUnorderedGroupHelper().enter(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    					
                    // InternalPipelineParser.g:2787:6: ( ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )* )
                    // InternalPipelineParser.g:2788:7: ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )*
                    {
                    // InternalPipelineParser.g:2788:7: ( ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) ) )*
                    loop87:
                    do {
                        int alt87=3;
                        int LA87_0 = input.LA(1);

                        if ( LA87_0 == Batch && getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0) ) {
                            alt87=1;
                        }
                        else if ( LA87_0 == Always && getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1) ) {
                            alt87=2;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // InternalPipelineParser.g:2789:5: ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:2789:5: ({...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) ) )
                    	    // InternalPipelineParser.g:2790:6: {...}? => ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0)");
                    	    }
                    	    // InternalPipelineParser.g:2790:115: ( ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) ) )
                    	    // InternalPipelineParser.g:2791:7: ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) )
                    	    {

                    	    							getUnorderedGroupHelper().select(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 0);
                    	    						
                    	    // InternalPipelineParser.g:2794:10: ({...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) ) )
                    	    // InternalPipelineParser.g:2794:11: {...}? => (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "true");
                    	    }
                    	    // InternalPipelineParser.g:2794:20: (otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) ) )
                    	    // InternalPipelineParser.g:2794:21: otherlv_19= Batch ( (lv_batch_20_0= RULE_ID ) )
                    	    {
                    	    otherlv_19=(Token)match(input,Batch,FOLLOW_14); 

                    	    										newLeafNode(otherlv_19, grammarAccess.getTriggerScheduleAccess().getBatchKeyword_1_3_0_0());
                    	    									
                    	    // InternalPipelineParser.g:2798:10: ( (lv_batch_20_0= RULE_ID ) )
                    	    // InternalPipelineParser.g:2799:11: (lv_batch_20_0= RULE_ID )
                    	    {
                    	    // InternalPipelineParser.g:2799:11: (lv_batch_20_0= RULE_ID )
                    	    // InternalPipelineParser.g:2800:12: lv_batch_20_0= RULE_ID
                    	    {
                    	    lv_batch_20_0=(Token)match(input,RULE_ID,FOLLOW_69); 

                    	    												newLeafNode(lv_batch_20_0, grammarAccess.getTriggerScheduleAccess().getBatchIDTerminalRuleCall_1_3_0_1_0());
                    	    											

                    	    												if (current==null) {
                    	    													current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    	    												}
                    	    												setWithLastConsumed(
                    	    													current,
                    	    													"batch",
                    	    													lv_batch_20_0,
                    	    													"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	    											

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    	    						

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalPipelineParser.g:2822:5: ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:2822:5: ({...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) ) )
                    	    // InternalPipelineParser.g:2823:6: {...}? => ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "getUnorderedGroupHelper().canSelect(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1)");
                    	    }
                    	    // InternalPipelineParser.g:2823:115: ( ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) ) )
                    	    // InternalPipelineParser.g:2824:7: ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) )
                    	    {

                    	    							getUnorderedGroupHelper().select(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3(), 1);
                    	    						
                    	    // InternalPipelineParser.g:2827:10: ({...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) ) )
                    	    // InternalPipelineParser.g:2827:11: {...}? => (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleTriggerSchedule", "true");
                    	    }
                    	    // InternalPipelineParser.g:2827:20: (otherlv_21= Always ( (lv_always_22_0= RULE_ID ) ) )
                    	    // InternalPipelineParser.g:2827:21: otherlv_21= Always ( (lv_always_22_0= RULE_ID ) )
                    	    {
                    	    otherlv_21=(Token)match(input,Always,FOLLOW_14); 

                    	    										newLeafNode(otherlv_21, grammarAccess.getTriggerScheduleAccess().getAlwaysKeyword_1_3_1_0());
                    	    									
                    	    // InternalPipelineParser.g:2831:10: ( (lv_always_22_0= RULE_ID ) )
                    	    // InternalPipelineParser.g:2832:11: (lv_always_22_0= RULE_ID )
                    	    {
                    	    // InternalPipelineParser.g:2832:11: (lv_always_22_0= RULE_ID )
                    	    // InternalPipelineParser.g:2833:12: lv_always_22_0= RULE_ID
                    	    {
                    	    lv_always_22_0=(Token)match(input,RULE_ID,FOLLOW_69); 

                    	    												newLeafNode(lv_always_22_0, grammarAccess.getTriggerScheduleAccess().getAlwaysIDTerminalRuleCall_1_3_1_1_0());
                    	    											

                    	    												if (current==null) {
                    	    													current = createModelElement(grammarAccess.getTriggerScheduleRule());
                    	    												}
                    	    												setWithLastConsumed(
                    	    													current,
                    	    													"always",
                    	    													lv_always_22_0,
                    	    													"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	    											

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    	    						

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop87;
                        }
                    } while (true);


                    }


                    }

                     
                    					  getUnorderedGroupHelper().leave(grammarAccess.getTriggerScheduleAccess().getUnorderedGroup_1_3());
                    					

                    }

                    this_END_23=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_23, grammarAccess.getTriggerScheduleAccess().getENDTerminalRuleCall_1_4());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleTriggerSchedule"


    // $ANTLR start "entryRuleBranch"
    // InternalPipelineParser.g:2871:1: entryRuleBranch returns [EObject current=null] : iv_ruleBranch= ruleBranch EOF ;
    public final EObject entryRuleBranch() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleBranch = null;


        try {
            // InternalPipelineParser.g:2871:47: (iv_ruleBranch= ruleBranch EOF )
            // InternalPipelineParser.g:2872:2: iv_ruleBranch= ruleBranch EOF
            {
             newCompositeNode(grammarAccess.getBranchRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleBranch=ruleBranch();

            state._fsp--;

             current =iv_ruleBranch; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleBranch"


    // $ANTLR start "ruleBranch"
    // InternalPipelineParser.g:2878:1: ruleBranch returns [EObject current=null] : ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) ) ;
    public final EObject ruleBranch() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_name_1_1=null;
        Token lv_name_1_2=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:2884:2: ( ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) ) )
            // InternalPipelineParser.g:2885:2: ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) )
            {
            // InternalPipelineParser.g:2885:2: ( (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) ) )
            // InternalPipelineParser.g:2886:3: (otherlv_0= HyphenMinus )? ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) )
            {
            // InternalPipelineParser.g:2886:3: (otherlv_0= HyphenMinus )?
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==HyphenMinus) ) {
                alt89=1;
            }
            switch (alt89) {
                case 1 :
                    // InternalPipelineParser.g:2887:4: otherlv_0= HyphenMinus
                    {
                    otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_19); 

                    				newLeafNode(otherlv_0, grammarAccess.getBranchAccess().getHyphenMinusKeyword_0());
                    			

                    }
                    break;

            }

            // InternalPipelineParser.g:2892:3: ( ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) ) )
            // InternalPipelineParser.g:2893:4: ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) )
            {
            // InternalPipelineParser.g:2893:4: ( (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING ) )
            // InternalPipelineParser.g:2894:5: (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING )
            {
            // InternalPipelineParser.g:2894:5: (lv_name_1_1= RULE_ID | lv_name_1_2= RULE_STRING )
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==RULE_ID) ) {
                alt90=1;
            }
            else if ( (LA90_0==RULE_STRING) ) {
                alt90=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    // InternalPipelineParser.g:2895:6: lv_name_1_1= RULE_ID
                    {
                    lv_name_1_1=(Token)match(input,RULE_ID,FOLLOW_2); 

                    						newLeafNode(lv_name_1_1, grammarAccess.getBranchAccess().getNameIDTerminalRuleCall_1_0_0());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getBranchRule());
                    						}
                    						setWithLastConsumed(
                    							current,
                    							"name",
                    							lv_name_1_1,
                    							"ca.mcgill.devops.pipeline.Pipeline.ID");
                    					

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:2910:6: lv_name_1_2= RULE_STRING
                    {
                    lv_name_1_2=(Token)match(input,RULE_STRING,FOLLOW_2); 

                    						newLeafNode(lv_name_1_2, grammarAccess.getBranchAccess().getNameSTRINGTerminalRuleCall_1_0_1());
                    					

                    						if (current==null) {
                    							current = createModelElement(grammarAccess.getBranchRule());
                    						}
                    						setWithLastConsumed(
                    							current,
                    							"name",
                    							lv_name_1_2,
                    							"org.eclipse.xtext.common.Terminals.STRING");
                    					

                    }
                    break;

            }


            }


            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleBranch"


    // $ANTLR start "entryRuleActivity"
    // InternalPipelineParser.g:2931:1: entryRuleActivity returns [EObject current=null] : iv_ruleActivity= ruleActivity EOF ;
    public final EObject entryRuleActivity() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleActivity = null;


        try {
            // InternalPipelineParser.g:2931:49: (iv_ruleActivity= ruleActivity EOF )
            // InternalPipelineParser.g:2932:2: iv_ruleActivity= ruleActivity EOF
            {
             newCompositeNode(grammarAccess.getActivityRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleActivity=ruleActivity();

            state._fsp--;

             current =iv_ruleActivity; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleActivity"


    // $ANTLR start "ruleActivity"
    // InternalPipelineParser.g:2938:1: ruleActivity returns [EObject current=null] : ( ( ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) ) ;
    public final EObject ruleActivity() throws RecognitionException {
        EObject current = null;

        Token lv_name_1_1=null;
        Token lv_name_1_2=null;
        Token lv_name_1_3=null;
        Token this_BEGIN_2=null;
        Token this_END_4=null;
        AntlrDatatypeRuleToken lv_name_0_1 = null;

        AntlrDatatypeRuleToken lv_name_0_2 = null;

        AntlrDatatypeRuleToken lv_name_0_3 = null;

        EObject lv_activities_3_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:2944:2: ( ( ( ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) ) )
            // InternalPipelineParser.g:2945:2: ( ( ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) )
            {
            // InternalPipelineParser.g:2945:2: ( ( ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) ) ) | ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) ) )
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==HyphenMinus||LA94_0==LeftSquareBracket||(LA94_0>=RULE_COMPLEX_EXPRESSION && LA94_0<=RULE_BEGIN)||LA94_0==RULE_STRING) ) {
                alt94=1;
            }
            else if ( (LA94_0==Outputs||LA94_0==Secrets||LA94_0==Inputs) ) {
                alt94=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;
            }
            switch (alt94) {
                case 1 :
                    // InternalPipelineParser.g:2946:3: ( ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) ) )
                    {
                    // InternalPipelineParser.g:2946:3: ( ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) ) )
                    // InternalPipelineParser.g:2947:4: ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) )
                    {
                    // InternalPipelineParser.g:2947:4: ( (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList ) )
                    // InternalPipelineParser.g:2948:5: (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList )
                    {
                    // InternalPipelineParser.g:2948:5: (lv_name_0_1= ruleAnyData | lv_name_0_2= ruleHyphenValues | lv_name_0_3= ruleArrayList )
                    int alt91=3;
                    switch ( input.LA(1) ) {
                    case RULE_COMPLEX_EXPRESSION:
                    case RULE_HEX_INT:
                    case RULE_INT:
                    case RULE_FLOAT_LITERAL:
                    case RULE_ID:
                    case RULE_VERSION:
                    case RULE_STRING:
                        {
                        alt91=1;
                        }
                        break;
                    case HyphenMinus:
                    case RULE_BEGIN:
                        {
                        alt91=2;
                        }
                        break;
                    case LeftSquareBracket:
                        {
                        alt91=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }

                    switch (alt91) {
                        case 1 :
                            // InternalPipelineParser.g:2949:6: lv_name_0_1= ruleAnyData
                            {

                            						newCompositeNode(grammarAccess.getActivityAccess().getNameAnyDataParserRuleCall_0_0_0());
                            					
                            pushFollow(FOLLOW_2);
                            lv_name_0_1=ruleAnyData();

                            state._fsp--;


                            						if (current==null) {
                            							current = createModelElementForParent(grammarAccess.getActivityRule());
                            						}
                            						set(
                            							current,
                            							"name",
                            							lv_name_0_1,
                            							"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                            						afterParserOrEnumRuleCall();
                            					

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:2965:6: lv_name_0_2= ruleHyphenValues
                            {

                            						newCompositeNode(grammarAccess.getActivityAccess().getNameHyphenValuesParserRuleCall_0_0_1());
                            					
                            pushFollow(FOLLOW_2);
                            lv_name_0_2=ruleHyphenValues();

                            state._fsp--;


                            						if (current==null) {
                            							current = createModelElementForParent(grammarAccess.getActivityRule());
                            						}
                            						set(
                            							current,
                            							"name",
                            							lv_name_0_2,
                            							"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            						afterParserOrEnumRuleCall();
                            					

                            }
                            break;
                        case 3 :
                            // InternalPipelineParser.g:2981:6: lv_name_0_3= ruleArrayList
                            {

                            						newCompositeNode(grammarAccess.getActivityAccess().getNameArrayListParserRuleCall_0_0_2());
                            					
                            pushFollow(FOLLOW_2);
                            lv_name_0_3=ruleArrayList();

                            state._fsp--;


                            						if (current==null) {
                            							current = createModelElementForParent(grammarAccess.getActivityRule());
                            						}
                            						set(
                            							current,
                            							"name",
                            							lv_name_0_3,
                            							"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
                            						afterParserOrEnumRuleCall();
                            					

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3000:3: ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) )
                    {
                    // InternalPipelineParser.g:3000:3: ( ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END ) )
                    // InternalPipelineParser.g:3001:4: ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) ) (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END )
                    {
                    // InternalPipelineParser.g:3001:4: ( ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) ) )
                    // InternalPipelineParser.g:3002:5: ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) )
                    {
                    // InternalPipelineParser.g:3002:5: ( (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets ) )
                    // InternalPipelineParser.g:3003:6: (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets )
                    {
                    // InternalPipelineParser.g:3003:6: (lv_name_1_1= Inputs | lv_name_1_2= Outputs | lv_name_1_3= Secrets )
                    int alt92=3;
                    switch ( input.LA(1) ) {
                    case Inputs:
                        {
                        alt92=1;
                        }
                        break;
                    case Outputs:
                        {
                        alt92=2;
                        }
                        break;
                    case Secrets:
                        {
                        alt92=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 0, input);

                        throw nvae;
                    }

                    switch (alt92) {
                        case 1 :
                            // InternalPipelineParser.g:3004:7: lv_name_1_1= Inputs
                            {
                            lv_name_1_1=(Token)match(input,Inputs,FOLLOW_16); 

                            							newLeafNode(lv_name_1_1, grammarAccess.getActivityAccess().getNameInputsKeyword_1_0_0_0());
                            						

                            							if (current==null) {
                            								current = createModelElement(grammarAccess.getActivityRule());
                            							}
                            							setWithLastConsumed(current, "name", lv_name_1_1, null);
                            						

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3015:7: lv_name_1_2= Outputs
                            {
                            lv_name_1_2=(Token)match(input,Outputs,FOLLOW_16); 

                            							newLeafNode(lv_name_1_2, grammarAccess.getActivityAccess().getNameOutputsKeyword_1_0_0_1());
                            						

                            							if (current==null) {
                            								current = createModelElement(grammarAccess.getActivityRule());
                            							}
                            							setWithLastConsumed(current, "name", lv_name_1_2, null);
                            						

                            }
                            break;
                        case 3 :
                            // InternalPipelineParser.g:3026:7: lv_name_1_3= Secrets
                            {
                            lv_name_1_3=(Token)match(input,Secrets,FOLLOW_16); 

                            							newLeafNode(lv_name_1_3, grammarAccess.getActivityAccess().getNameSecretsKeyword_1_0_0_2());
                            						

                            							if (current==null) {
                            								current = createModelElement(grammarAccess.getActivityRule());
                            							}
                            							setWithLastConsumed(current, "name", lv_name_1_3, null);
                            						

                            }
                            break;

                    }


                    }


                    }

                    // InternalPipelineParser.g:3039:4: (this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END )
                    // InternalPipelineParser.g:3040:5: this_BEGIN_2= RULE_BEGIN ( (lv_activities_3_0= ruleParameterValue ) )+ this_END_4= RULE_END
                    {
                    this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_38); 

                    					newLeafNode(this_BEGIN_2, grammarAccess.getActivityAccess().getBEGINTerminalRuleCall_1_1_0());
                    				
                    // InternalPipelineParser.g:3044:5: ( (lv_activities_3_0= ruleParameterValue ) )+
                    int cnt93=0;
                    loop93:
                    do {
                        int alt93=2;
                        int LA93_0 = input.LA(1);

                        if ( ((LA93_0>=Repository_dispatch && LA93_0<=ContinueOnError_1)||(LA93_0>=Workflow_dispatch && LA93_0<=WorkingDirectory)||(LA93_0>=TimeoutInMinutes && LA93_0<=ContinueOnError)||LA93_0==TimeoutMinutes||LA93_0==ReleaseTrigger||(LA93_0>=Allow_failure && LA93_0<=DeployTrigger)||(LA93_0>=Notifications && LA93_0<=After_script)||(LA93_0>=DefaultsRun && LA93_0<=PathsIgnore)||(LA93_0>=Pull_request && LA93_0<=Workflow_run)||(LA93_0>=Concurrency && LA93_0<=Definitions)||LA93_0==Description||(LA93_0>=DisplayName && LA93_0<=GetPackage)||(LA93_0>=Parameters && LA93_0<=Permission)||(LA93_0>=Powershell && LA93_0<=Artifacts)||(LA93_0>=Condition && LA93_0<=FailFast)||(LA93_0>=Pipelines && LA93_0<=RunPolicy)||(LA93_0>=Schedules && LA93_0<=Workspace)||(LA93_0>=Branches && LA93_0<=Checkout)||(LA93_0>=Defaults && LA93_0<=Download)||(LA93_0>=MaxTime && LA93_0<=PreBuild)||(LA93_0>=Readonly && LA93_0<=Snapshot)||(LA93_0>=Strategy && LA93_0<=Webhooks)||(LA93_0>=Command && LA93_0<=Caches)||(LA93_0>=Docker && LA93_0<=Except)||LA93_0==Inputs||(LA93_0>=Labels && LA93_0<=Policy)||LA93_0==Queued||(LA93_0>=Script && LA93_0<=Image)||(LA93_0>=Paths && LA93_0<=Value)||(LA93_0>=Auth && LA93_0<=Cron)||LA93_0==Name||(LA93_0>=Only && LA93_0<=Pwsh)||(LA93_0>=Step && LA93_0<=With)||(LA93_0>=Env && LA93_0<=Job)||(LA93_0>=Run && LA93_0<=On)||LA93_0==RULE_COMPLEX_EXPRESSION||LA93_0==RULE_ID) ) {
                            alt93=1;
                        }


                        switch (alt93) {
                    	case 1 :
                    	    // InternalPipelineParser.g:3045:6: (lv_activities_3_0= ruleParameterValue )
                    	    {
                    	    // InternalPipelineParser.g:3045:6: (lv_activities_3_0= ruleParameterValue )
                    	    // InternalPipelineParser.g:3046:7: lv_activities_3_0= ruleParameterValue
                    	    {

                    	    							newCompositeNode(grammarAccess.getActivityAccess().getActivitiesParameterValueParserRuleCall_1_1_1_0());
                    	    						
                    	    pushFollow(FOLLOW_39);
                    	    lv_activities_3_0=ruleParameterValue();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getActivityRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"activities",
                    	    								lv_activities_3_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt93 >= 1 ) break loop93;
                                EarlyExitException eee =
                                    new EarlyExitException(93, input);
                                throw eee;
                        }
                        cnt93++;
                    } while (true);

                    this_END_4=(Token)match(input,RULE_END,FOLLOW_2); 

                    					newLeafNode(this_END_4, grammarAccess.getActivityAccess().getENDTerminalRuleCall_1_1_2());
                    				

                    }


                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleActivity"


    // $ANTLR start "entryRuleStage"
    // InternalPipelineParser.g:3073:1: entryRuleStage returns [EObject current=null] : iv_ruleStage= ruleStage EOF ;
    public final EObject entryRuleStage() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStage = null;


        try {
            // InternalPipelineParser.g:3073:46: (iv_ruleStage= ruleStage EOF )
            // InternalPipelineParser.g:3074:2: iv_ruleStage= ruleStage EOF
            {
             newCompositeNode(grammarAccess.getStageRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleStage=ruleStage();

            state._fsp--;

             current =iv_ruleStage; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStage"


    // $ANTLR start "ruleStage"
    // InternalPipelineParser.g:3080:1: ruleStage returns [EObject current=null] : ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) ) )? ) ;
    public final EObject ruleStage() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token lv_displayName_6_0=null;
        Token otherlv_7=null;
        Token this_BEGIN_9=null;
        Token otherlv_10=null;
        Token lv_vmName_11_0=null;
        Token otherlv_12=null;
        Token lv_vmImage_13_1=null;
        Token lv_vmImage_13_2=null;
        Token otherlv_14=null;
        Token this_END_16=null;
        Token otherlv_17=null;
        Token otherlv_19=null;
        Token lv_isSkippable_20_0=null;
        Token otherlv_21=null;
        Token this_BEGIN_22=null;
        Token this_END_24=null;
        Token otherlv_25=null;
        Token otherlv_26=null;
        Token otherlv_27=null;
        Token this_END_29=null;
        AntlrDatatypeRuleToken lv_name_2_0 = null;

        AntlrDatatypeRuleToken lv_poolValue_8_0 = null;

        AntlrDatatypeRuleToken lv_vmDemands_15_1 = null;

        AntlrDatatypeRuleToken lv_vmDemands_15_2 = null;

        AntlrDatatypeRuleToken lv_conditionValue_18_0 = null;

        EObject lv_stageVariables_23_0 = null;

        EObject lv_jobs_28_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3086:2: ( ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) ) )? ) )
            // InternalPipelineParser.g:3087:2: ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) ) )? )
            {
            // InternalPipelineParser.g:3087:2: ( (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) ) )? )
            // InternalPipelineParser.g:3088:3: (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) ) ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) ) )?
            {
            // InternalPipelineParser.g:3088:3: (otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) ) )
            // InternalPipelineParser.g:3089:4: otherlv_0= HyphenMinus otherlv_1= Stage ( (lv_name_2_0= ruleAnyData ) )
            {
            otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_70); 

            				newLeafNode(otherlv_0, grammarAccess.getStageAccess().getHyphenMinusKeyword_0_0());
            			
            otherlv_1=(Token)match(input,Stage,FOLLOW_43); 

            				newLeafNode(otherlv_1, grammarAccess.getStageAccess().getStageKeyword_0_1());
            			
            // InternalPipelineParser.g:3097:4: ( (lv_name_2_0= ruleAnyData ) )
            // InternalPipelineParser.g:3098:5: (lv_name_2_0= ruleAnyData )
            {
            // InternalPipelineParser.g:3098:5: (lv_name_2_0= ruleAnyData )
            // InternalPipelineParser.g:3099:6: lv_name_2_0= ruleAnyData
            {

            						newCompositeNode(grammarAccess.getStageAccess().getNameAnyDataParserRuleCall_0_2_0());
            					
            pushFollow(FOLLOW_71);
            lv_name_2_0=ruleAnyData();

            state._fsp--;


            						if (current==null) {
            							current = createModelElementForParent(grammarAccess.getStageRule());
            						}
            						set(
            							current,
            							"name",
            							lv_name_2_0,
            							"ca.mcgill.devops.pipeline.Pipeline.AnyData");
            						afterParserOrEnumRuleCall();
            					

            }


            }


            }

            // InternalPipelineParser.g:3117:3: ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) ) )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==IsSkippable||LA108_0==Condition||LA108_0==DependsOn||LA108_0==Variables||LA108_0==Jobs||LA108_0==Pool||LA108_0==RULE_BEGIN) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // InternalPipelineParser.g:3118:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) )
                    {
                    // InternalPipelineParser.g:3118:4: ( ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?) )
                    // InternalPipelineParser.g:3119:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?)
                    {
                     
                    				  getUnorderedGroupHelper().enter(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    				
                    // InternalPipelineParser.g:3122:5: ( ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?)
                    // InternalPipelineParser.g:3123:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+ {...}?
                    {
                    // InternalPipelineParser.g:3123:6: ( ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) ) )+
                    int cnt107=0;
                    loop107:
                    do {
                        int alt107=7;
                        int LA107_0 = input.LA(1);

                        if ( LA107_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0) ) {
                            alt107=1;
                        }
                        else if ( LA107_0 == Pool && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1) ) {
                            alt107=2;
                        }
                        else if ( LA107_0 == Condition && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2) ) {
                            alt107=3;
                        }
                        else if ( LA107_0 == IsSkippable && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3) ) {
                            alt107=4;
                        }
                        else if ( LA107_0 == Variables && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4) ) {
                            alt107=5;
                        }
                        else if ( ( LA107_0 == DependsOn || LA107_0 == Jobs ) && getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5) ) {
                            alt107=6;
                        }


                        switch (alt107) {
                    	case 1 :
                    	    // InternalPipelineParser.g:3124:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3124:4: ({...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) ) )
                    	    // InternalPipelineParser.g:3125:5: {...}? => ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0)");
                    	    }
                    	    // InternalPipelineParser.g:3125:102: ( ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) ) )
                    	    // InternalPipelineParser.g:3126:6: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 0);
                    	    					
                    	    // InternalPipelineParser.g:3129:9: ({...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? ) )
                    	    // InternalPipelineParser.g:3129:10: {...}? => (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3129:19: (this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )? )
                    	    // InternalPipelineParser.g:3129:20: this_BEGIN_4= RULE_BEGIN (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )?
                    	    {
                    	    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_72); 

                    	    									newLeafNode(this_BEGIN_4, grammarAccess.getStageAccess().getBEGINTerminalRuleCall_1_0_0());
                    	    								
                    	    // InternalPipelineParser.g:3133:9: (otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) ) )?
                    	    int alt95=2;
                    	    int LA95_0 = input.LA(1);

                    	    if ( (LA95_0==DisplayName) ) {
                    	        alt95=1;
                    	    }
                    	    switch (alt95) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3134:10: otherlv_5= DisplayName ( (lv_displayName_6_0= RULE_STRING ) )
                    	            {
                    	            otherlv_5=(Token)match(input,DisplayName,FOLLOW_65); 

                    	            										newLeafNode(otherlv_5, grammarAccess.getStageAccess().getDisplayNameKeyword_1_0_1_0());
                    	            									
                    	            // InternalPipelineParser.g:3138:10: ( (lv_displayName_6_0= RULE_STRING ) )
                    	            // InternalPipelineParser.g:3139:11: (lv_displayName_6_0= RULE_STRING )
                    	            {
                    	            // InternalPipelineParser.g:3139:11: (lv_displayName_6_0= RULE_STRING )
                    	            // InternalPipelineParser.g:3140:12: lv_displayName_6_0= RULE_STRING
                    	            {
                    	            lv_displayName_6_0=(Token)match(input,RULE_STRING,FOLLOW_71); 

                    	            												newLeafNode(lv_displayName_6_0, grammarAccess.getStageAccess().getDisplayNameSTRINGTerminalRuleCall_1_0_1_1_0());
                    	            											

                    	            												if (current==null) {
                    	            													current = createModelElement(grammarAccess.getStageRule());
                    	            												}
                    	            												setWithLastConsumed(
                    	            													current,
                    	            													"displayName",
                    	            													lv_displayName_6_0,
                    	            													"org.eclipse.xtext.common.Terminals.STRING");
                    	            											

                    	            }


                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalPipelineParser.g:3163:4: ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3163:4: ({...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) ) )
                    	    // InternalPipelineParser.g:3164:5: {...}? => ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1)");
                    	    }
                    	    // InternalPipelineParser.g:3164:102: ( ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) ) )
                    	    // InternalPipelineParser.g:3165:6: ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 1);
                    	    					
                    	    // InternalPipelineParser.g:3168:9: ({...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) ) )
                    	    // InternalPipelineParser.g:3168:10: {...}? => (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3168:19: (otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? ) )
                    	    // InternalPipelineParser.g:3168:20: otherlv_7= Pool ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? )
                    	    {
                    	    otherlv_7=(Token)match(input,Pool,FOLLOW_73); 

                    	    									newLeafNode(otherlv_7, grammarAccess.getStageAccess().getPoolKeyword_1_1_0());
                    	    								
                    	    // InternalPipelineParser.g:3172:9: ( ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )? )
                    	    // InternalPipelineParser.g:3173:10: ( (lv_poolValue_8_0= ruleAnyData ) )? (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )?
                    	    {
                    	    // InternalPipelineParser.g:3173:10: ( (lv_poolValue_8_0= ruleAnyData ) )?
                    	    int alt96=2;
                    	    int LA96_0 = input.LA(1);

                    	    if ( ((LA96_0>=RULE_COMPLEX_EXPRESSION && LA96_0<=RULE_VERSION)||LA96_0==RULE_STRING) ) {
                    	        alt96=1;
                    	    }
                    	    switch (alt96) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3174:11: (lv_poolValue_8_0= ruleAnyData )
                    	            {
                    	            // InternalPipelineParser.g:3174:11: (lv_poolValue_8_0= ruleAnyData )
                    	            // InternalPipelineParser.g:3175:12: lv_poolValue_8_0= ruleAnyData
                    	            {

                    	            												newCompositeNode(grammarAccess.getStageAccess().getPoolValueAnyDataParserRuleCall_1_1_1_0_0());
                    	            											
                    	            pushFollow(FOLLOW_71);
                    	            lv_poolValue_8_0=ruleAnyData();

                    	            state._fsp--;


                    	            												if (current==null) {
                    	            													current = createModelElementForParent(grammarAccess.getStageRule());
                    	            												}
                    	            												set(
                    	            													current,
                    	            													"poolValue",
                    	            													lv_poolValue_8_0,
                    	            													"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    	            												afterParserOrEnumRuleCall();
                    	            											

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    // InternalPipelineParser.g:3192:10: (this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END )?
                    	    int alt102=2;
                    	    int LA102_0 = input.LA(1);

                    	    if ( (LA102_0==RULE_BEGIN) ) {
                    	        int LA102_1 = input.LA(2);

                    	        if ( (LA102_1==Demands||LA102_1==VmImage||LA102_1==Name||LA102_1==RULE_END) ) {
                    	            alt102=1;
                    	        }
                    	    }
                    	    switch (alt102) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3193:11: this_BEGIN_9= RULE_BEGIN (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )? (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )? (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )? this_END_16= RULE_END
                    	            {
                    	            this_BEGIN_9=(Token)match(input,RULE_BEGIN,FOLLOW_74); 

                    	            											newLeafNode(this_BEGIN_9, grammarAccess.getStageAccess().getBEGINTerminalRuleCall_1_1_1_1_0());
                    	            										
                    	            // InternalPipelineParser.g:3197:11: (otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) ) )?
                    	            int alt97=2;
                    	            int LA97_0 = input.LA(1);

                    	            if ( (LA97_0==Name) ) {
                    	                alt97=1;
                    	            }
                    	            switch (alt97) {
                    	                case 1 :
                    	                    // InternalPipelineParser.g:3198:12: otherlv_10= Name ( (lv_vmName_11_0= RULE_ID ) )
                    	                    {
                    	                    otherlv_10=(Token)match(input,Name,FOLLOW_14); 

                    	                    												newLeafNode(otherlv_10, grammarAccess.getStageAccess().getNameKeyword_1_1_1_1_1_0());
                    	                    											
                    	                    // InternalPipelineParser.g:3202:12: ( (lv_vmName_11_0= RULE_ID ) )
                    	                    // InternalPipelineParser.g:3203:13: (lv_vmName_11_0= RULE_ID )
                    	                    {
                    	                    // InternalPipelineParser.g:3203:13: (lv_vmName_11_0= RULE_ID )
                    	                    // InternalPipelineParser.g:3204:14: lv_vmName_11_0= RULE_ID
                    	                    {
                    	                    lv_vmName_11_0=(Token)match(input,RULE_ID,FOLLOW_75); 

                    	                    														newLeafNode(lv_vmName_11_0, grammarAccess.getStageAccess().getVmNameIDTerminalRuleCall_1_1_1_1_1_1_0());
                    	                    													

                    	                    														if (current==null) {
                    	                    															current = createModelElement(grammarAccess.getStageRule());
                    	                    														}
                    	                    														setWithLastConsumed(
                    	                    															current,
                    	                    															"vmName",
                    	                    															lv_vmName_11_0,
                    	                    															"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	                    													

                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            // InternalPipelineParser.g:3221:11: (otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) ) )?
                    	            int alt99=2;
                    	            int LA99_0 = input.LA(1);

                    	            if ( (LA99_0==VmImage) ) {
                    	                alt99=1;
                    	            }
                    	            switch (alt99) {
                    	                case 1 :
                    	                    // InternalPipelineParser.g:3222:12: otherlv_12= VmImage ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) )
                    	                    {
                    	                    otherlv_12=(Token)match(input,VmImage,FOLLOW_19); 

                    	                    												newLeafNode(otherlv_12, grammarAccess.getStageAccess().getVmImageKeyword_1_1_1_1_2_0());
                    	                    											
                    	                    // InternalPipelineParser.g:3226:12: ( ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) ) )
                    	                    // InternalPipelineParser.g:3227:13: ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) )
                    	                    {
                    	                    // InternalPipelineParser.g:3227:13: ( (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING ) )
                    	                    // InternalPipelineParser.g:3228:14: (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING )
                    	                    {
                    	                    // InternalPipelineParser.g:3228:14: (lv_vmImage_13_1= RULE_ID | lv_vmImage_13_2= RULE_STRING )
                    	                    int alt98=2;
                    	                    int LA98_0 = input.LA(1);

                    	                    if ( (LA98_0==RULE_ID) ) {
                    	                        alt98=1;
                    	                    }
                    	                    else if ( (LA98_0==RULE_STRING) ) {
                    	                        alt98=2;
                    	                    }
                    	                    else {
                    	                        NoViableAltException nvae =
                    	                            new NoViableAltException("", 98, 0, input);

                    	                        throw nvae;
                    	                    }
                    	                    switch (alt98) {
                    	                        case 1 :
                    	                            // InternalPipelineParser.g:3229:15: lv_vmImage_13_1= RULE_ID
                    	                            {
                    	                            lv_vmImage_13_1=(Token)match(input,RULE_ID,FOLLOW_76); 

                    	                            															newLeafNode(lv_vmImage_13_1, grammarAccess.getStageAccess().getVmImageIDTerminalRuleCall_1_1_1_1_2_1_0_0());
                    	                            														

                    	                            															if (current==null) {
                    	                            																current = createModelElement(grammarAccess.getStageRule());
                    	                            															}
                    	                            															setWithLastConsumed(
                    	                            																current,
                    	                            																"vmImage",
                    	                            																lv_vmImage_13_1,
                    	                            																"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	                            														

                    	                            }
                    	                            break;
                    	                        case 2 :
                    	                            // InternalPipelineParser.g:3244:15: lv_vmImage_13_2= RULE_STRING
                    	                            {
                    	                            lv_vmImage_13_2=(Token)match(input,RULE_STRING,FOLLOW_76); 

                    	                            															newLeafNode(lv_vmImage_13_2, grammarAccess.getStageAccess().getVmImageSTRINGTerminalRuleCall_1_1_1_1_2_1_0_1());
                    	                            														

                    	                            															if (current==null) {
                    	                            																current = createModelElement(grammarAccess.getStageRule());
                    	                            															}
                    	                            															setWithLastConsumed(
                    	                            																current,
                    	                            																"vmImage",
                    	                            																lv_vmImage_13_2,
                    	                            																"org.eclipse.xtext.common.Terminals.STRING");
                    	                            														

                    	                            }
                    	                            break;

                    	                    }


                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            // InternalPipelineParser.g:3262:11: (otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) ) )?
                    	            int alt101=2;
                    	            int LA101_0 = input.LA(1);

                    	            if ( (LA101_0==Demands) ) {
                    	                alt101=1;
                    	            }
                    	            switch (alt101) {
                    	                case 1 :
                    	                    // InternalPipelineParser.g:3263:12: otherlv_14= Demands ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) )
                    	                    {
                    	                    otherlv_14=(Token)match(input,Demands,FOLLOW_33); 

                    	                    												newLeafNode(otherlv_14, grammarAccess.getStageAccess().getDemandsKeyword_1_1_1_1_3_0());
                    	                    											
                    	                    // InternalPipelineParser.g:3267:12: ( ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) ) )
                    	                    // InternalPipelineParser.g:3268:13: ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) )
                    	                    {
                    	                    // InternalPipelineParser.g:3268:13: ( (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues ) )
                    	                    // InternalPipelineParser.g:3269:14: (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues )
                    	                    {
                    	                    // InternalPipelineParser.g:3269:14: (lv_vmDemands_15_1= ruleAnyData | lv_vmDemands_15_2= ruleHyphenValues )
                    	                    int alt100=2;
                    	                    int LA100_0 = input.LA(1);

                    	                    if ( ((LA100_0>=RULE_COMPLEX_EXPRESSION && LA100_0<=RULE_VERSION)||LA100_0==RULE_STRING) ) {
                    	                        alt100=1;
                    	                    }
                    	                    else if ( (LA100_0==HyphenMinus||LA100_0==RULE_BEGIN) ) {
                    	                        alt100=2;
                    	                    }
                    	                    else {
                    	                        NoViableAltException nvae =
                    	                            new NoViableAltException("", 100, 0, input);

                    	                        throw nvae;
                    	                    }
                    	                    switch (alt100) {
                    	                        case 1 :
                    	                            // InternalPipelineParser.g:3270:15: lv_vmDemands_15_1= ruleAnyData
                    	                            {

                    	                            															newCompositeNode(grammarAccess.getStageAccess().getVmDemandsAnyDataParserRuleCall_1_1_1_1_3_1_0_0());
                    	                            														
                    	                            pushFollow(FOLLOW_20);
                    	                            lv_vmDemands_15_1=ruleAnyData();

                    	                            state._fsp--;


                    	                            															if (current==null) {
                    	                            																current = createModelElementForParent(grammarAccess.getStageRule());
                    	                            															}
                    	                            															set(
                    	                            																current,
                    	                            																"vmDemands",
                    	                            																lv_vmDemands_15_1,
                    	                            																"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    	                            															afterParserOrEnumRuleCall();
                    	                            														

                    	                            }
                    	                            break;
                    	                        case 2 :
                    	                            // InternalPipelineParser.g:3286:15: lv_vmDemands_15_2= ruleHyphenValues
                    	                            {

                    	                            															newCompositeNode(grammarAccess.getStageAccess().getVmDemandsHyphenValuesParserRuleCall_1_1_1_1_3_1_0_1());
                    	                            														
                    	                            pushFollow(FOLLOW_20);
                    	                            lv_vmDemands_15_2=ruleHyphenValues();

                    	                            state._fsp--;


                    	                            															if (current==null) {
                    	                            																current = createModelElementForParent(grammarAccess.getStageRule());
                    	                            															}
                    	                            															set(
                    	                            																current,
                    	                            																"vmDemands",
                    	                            																lv_vmDemands_15_2,
                    	                            																"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                    	                            															afterParserOrEnumRuleCall();
                    	                            														

                    	                            }
                    	                            break;

                    	                    }


                    	                    }


                    	                    }


                    	                    }
                    	                    break;

                    	            }

                    	            this_END_16=(Token)match(input,RULE_END,FOLLOW_71); 

                    	            											newLeafNode(this_END_16, grammarAccess.getStageAccess().getENDTerminalRuleCall_1_1_1_1_4());
                    	            										

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    // InternalPipelineParser.g:3317:4: ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3317:4: ({...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) ) )
                    	    // InternalPipelineParser.g:3318:5: {...}? => ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2)");
                    	    }
                    	    // InternalPipelineParser.g:3318:102: ( ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) ) )
                    	    // InternalPipelineParser.g:3319:6: ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 2);
                    	    					
                    	    // InternalPipelineParser.g:3322:9: ({...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) ) )
                    	    // InternalPipelineParser.g:3322:10: {...}? => (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3322:19: (otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) ) )
                    	    // InternalPipelineParser.g:3322:20: otherlv_17= Condition ( (lv_conditionValue_18_0= ruleAnyData ) )
                    	    {
                    	    otherlv_17=(Token)match(input,Condition,FOLLOW_43); 

                    	    									newLeafNode(otherlv_17, grammarAccess.getStageAccess().getConditionKeyword_1_2_0());
                    	    								
                    	    // InternalPipelineParser.g:3326:9: ( (lv_conditionValue_18_0= ruleAnyData ) )
                    	    // InternalPipelineParser.g:3327:10: (lv_conditionValue_18_0= ruleAnyData )
                    	    {
                    	    // InternalPipelineParser.g:3327:10: (lv_conditionValue_18_0= ruleAnyData )
                    	    // InternalPipelineParser.g:3328:11: lv_conditionValue_18_0= ruleAnyData
                    	    {

                    	    											newCompositeNode(grammarAccess.getStageAccess().getConditionValueAnyDataParserRuleCall_1_2_1_0());
                    	    										
                    	    pushFollow(FOLLOW_71);
                    	    lv_conditionValue_18_0=ruleAnyData();

                    	    state._fsp--;


                    	    											if (current==null) {
                    	    												current = createModelElementForParent(grammarAccess.getStageRule());
                    	    											}
                    	    											set(
                    	    												current,
                    	    												"conditionValue",
                    	    												lv_conditionValue_18_0,
                    	    												"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    	    											afterParserOrEnumRuleCall();
                    	    										

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    // InternalPipelineParser.g:3351:4: ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3351:4: ({...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) ) )
                    	    // InternalPipelineParser.g:3352:5: {...}? => ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3)");
                    	    }
                    	    // InternalPipelineParser.g:3352:102: ( ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) ) )
                    	    // InternalPipelineParser.g:3353:6: ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 3);
                    	    					
                    	    // InternalPipelineParser.g:3356:9: ({...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) ) )
                    	    // InternalPipelineParser.g:3356:10: {...}? => (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3356:19: (otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) ) )
                    	    // InternalPipelineParser.g:3356:20: otherlv_19= IsSkippable ( (lv_isSkippable_20_0= RULE_ID ) )
                    	    {
                    	    otherlv_19=(Token)match(input,IsSkippable,FOLLOW_14); 

                    	    									newLeafNode(otherlv_19, grammarAccess.getStageAccess().getIsSkippableKeyword_1_3_0());
                    	    								
                    	    // InternalPipelineParser.g:3360:9: ( (lv_isSkippable_20_0= RULE_ID ) )
                    	    // InternalPipelineParser.g:3361:10: (lv_isSkippable_20_0= RULE_ID )
                    	    {
                    	    // InternalPipelineParser.g:3361:10: (lv_isSkippable_20_0= RULE_ID )
                    	    // InternalPipelineParser.g:3362:11: lv_isSkippable_20_0= RULE_ID
                    	    {
                    	    lv_isSkippable_20_0=(Token)match(input,RULE_ID,FOLLOW_71); 

                    	    											newLeafNode(lv_isSkippable_20_0, grammarAccess.getStageAccess().getIsSkippableIDTerminalRuleCall_1_3_1_0());
                    	    										

                    	    											if (current==null) {
                    	    												current = createModelElement(grammarAccess.getStageRule());
                    	    											}
                    	    											setWithLastConsumed(
                    	    												current,
                    	    												"isSkippable",
                    	    												lv_isSkippable_20_0,
                    	    												"ca.mcgill.devops.pipeline.Pipeline.ID");
                    	    										

                    	    }


                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 5 :
                    	    // InternalPipelineParser.g:3384:4: ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3384:4: ({...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) ) )
                    	    // InternalPipelineParser.g:3385:5: {...}? => ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4)");
                    	    }
                    	    // InternalPipelineParser.g:3385:102: ( ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) ) )
                    	    // InternalPipelineParser.g:3386:6: ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 4);
                    	    					
                    	    // InternalPipelineParser.g:3389:9: ({...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) ) )
                    	    // InternalPipelineParser.g:3389:10: {...}? => (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3389:19: (otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END ) )
                    	    // InternalPipelineParser.g:3389:20: otherlv_21= Variables (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END )
                    	    {
                    	    otherlv_21=(Token)match(input,Variables,FOLLOW_16); 

                    	    									newLeafNode(otherlv_21, grammarAccess.getStageAccess().getVariablesKeyword_1_4_0());
                    	    								
                    	    // InternalPipelineParser.g:3393:9: (this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END )
                    	    // InternalPipelineParser.g:3394:10: this_BEGIN_22= RULE_BEGIN ( (lv_stageVariables_23_0= ruleVariable ) )* this_END_24= RULE_END
                    	    {
                    	    this_BEGIN_22=(Token)match(input,RULE_BEGIN,FOLLOW_36); 

                    	    										newLeafNode(this_BEGIN_22, grammarAccess.getStageAccess().getBEGINTerminalRuleCall_1_4_1_0());
                    	    									
                    	    // InternalPipelineParser.g:3398:10: ( (lv_stageVariables_23_0= ruleVariable ) )*
                    	    loop103:
                    	    do {
                    	        int alt103=2;
                    	        int LA103_0 = input.LA(1);

                    	        if ( (LA103_0==HyphenMinus||LA103_0==RULE_ID||LA103_0==RULE_BEGIN) ) {
                    	            alt103=1;
                    	        }


                    	        switch (alt103) {
                    	    	case 1 :
                    	    	    // InternalPipelineParser.g:3399:11: (lv_stageVariables_23_0= ruleVariable )
                    	    	    {
                    	    	    // InternalPipelineParser.g:3399:11: (lv_stageVariables_23_0= ruleVariable )
                    	    	    // InternalPipelineParser.g:3400:12: lv_stageVariables_23_0= ruleVariable
                    	    	    {

                    	    	    												newCompositeNode(grammarAccess.getStageAccess().getStageVariablesVariableParserRuleCall_1_4_1_1_0());
                    	    	    											
                    	    	    pushFollow(FOLLOW_36);
                    	    	    lv_stageVariables_23_0=ruleVariable();

                    	    	    state._fsp--;


                    	    	    												if (current==null) {
                    	    	    													current = createModelElementForParent(grammarAccess.getStageRule());
                    	    	    												}
                    	    	    												add(
                    	    	    													current,
                    	    	    													"stageVariables",
                    	    	    													lv_stageVariables_23_0,
                    	    	    													"ca.mcgill.devops.pipeline.Pipeline.Variable");
                    	    	    												afterParserOrEnumRuleCall();
                    	    	    											

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop103;
                    	        }
                    	    } while (true);

                    	    this_END_24=(Token)match(input,RULE_END,FOLLOW_71); 

                    	    										newLeafNode(this_END_24, grammarAccess.getStageAccess().getENDTerminalRuleCall_1_4_1_2());
                    	    									

                    	    }


                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;
                    	case 6 :
                    	    // InternalPipelineParser.g:3428:4: ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) )
                    	    {
                    	    // InternalPipelineParser.g:3428:4: ({...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) ) )
                    	    // InternalPipelineParser.g:3429:5: {...}? => ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) )
                    	    {
                    	    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canSelect(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5)");
                    	    }
                    	    // InternalPipelineParser.g:3429:102: ( ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) ) )
                    	    // InternalPipelineParser.g:3430:6: ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) )
                    	    {

                    	    						getUnorderedGroupHelper().select(grammarAccess.getStageAccess().getUnorderedGroup_1(), 5);
                    	    					
                    	    // InternalPipelineParser.g:3433:9: ({...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END ) )
                    	    // InternalPipelineParser.g:3433:10: {...}? => ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END )
                    	    {
                    	    if ( !((true)) ) {
                    	        throw new FailedPredicateException(input, "ruleStage", "true");
                    	    }
                    	    // InternalPipelineParser.g:3433:19: ( (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END )
                    	    // InternalPipelineParser.g:3433:20: (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )? (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* ) this_END_29= RULE_END
                    	    {
                    	    // InternalPipelineParser.g:3433:20: (otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )* )?
                    	    int alt105=2;
                    	    int LA105_0 = input.LA(1);

                    	    if ( (LA105_0==DependsOn) ) {
                    	        alt105=1;
                    	    }
                    	    switch (alt105) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3434:10: otherlv_25= DependsOn ( (otherlv_26= RULE_ID ) )*
                    	            {
                    	            otherlv_25=(Token)match(input,DependsOn,FOLLOW_77); 

                    	            										newLeafNode(otherlv_25, grammarAccess.getStageAccess().getDependsOnKeyword_1_5_0_0());
                    	            									
                    	            // InternalPipelineParser.g:3438:10: ( (otherlv_26= RULE_ID ) )*
                    	            loop104:
                    	            do {
                    	                int alt104=2;
                    	                int LA104_0 = input.LA(1);

                    	                if ( (LA104_0==RULE_ID) ) {
                    	                    alt104=1;
                    	                }


                    	                switch (alt104) {
                    	            	case 1 :
                    	            	    // InternalPipelineParser.g:3439:11: (otherlv_26= RULE_ID )
                    	            	    {
                    	            	    // InternalPipelineParser.g:3439:11: (otherlv_26= RULE_ID )
                    	            	    // InternalPipelineParser.g:3440:12: otherlv_26= RULE_ID
                    	            	    {

                    	            	    												if (current==null) {
                    	            	    													current = createModelElement(grammarAccess.getStageRule());
                    	            	    												}
                    	            	    											
                    	            	    otherlv_26=(Token)match(input,RULE_ID,FOLLOW_77); 

                    	            	    												newLeafNode(otherlv_26, grammarAccess.getStageAccess().getDependsOnStageCrossReference_1_5_0_1_0());
                    	            	    											

                    	            	    }


                    	            	    }
                    	            	    break;

                    	            	default :
                    	            	    break loop104;
                    	                }
                    	            } while (true);


                    	            }
                    	            break;

                    	    }

                    	    // InternalPipelineParser.g:3452:9: (otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )* )
                    	    // InternalPipelineParser.g:3453:10: otherlv_27= Jobs ( (lv_jobs_28_0= ruleJob ) )*
                    	    {
                    	    otherlv_27=(Token)match(input,Jobs,FOLLOW_13); 

                    	    										newLeafNode(otherlv_27, grammarAccess.getStageAccess().getJobsKeyword_1_5_1_0());
                    	    									
                    	    // InternalPipelineParser.g:3457:10: ( (lv_jobs_28_0= ruleJob ) )*
                    	    loop106:
                    	    do {
                    	        int alt106=2;
                    	        int LA106_0 = input.LA(1);

                    	        if ( (LA106_0==HyphenMinus||LA106_0==RULE_ID||LA106_0==RULE_STRING) ) {
                    	            alt106=1;
                    	        }


                    	        switch (alt106) {
                    	    	case 1 :
                    	    	    // InternalPipelineParser.g:3458:11: (lv_jobs_28_0= ruleJob )
                    	    	    {
                    	    	    // InternalPipelineParser.g:3458:11: (lv_jobs_28_0= ruleJob )
                    	    	    // InternalPipelineParser.g:3459:12: lv_jobs_28_0= ruleJob
                    	    	    {

                    	    	    												newCompositeNode(grammarAccess.getStageAccess().getJobsJobParserRuleCall_1_5_1_1_0());
                    	    	    											
                    	    	    pushFollow(FOLLOW_13);
                    	    	    lv_jobs_28_0=ruleJob();

                    	    	    state._fsp--;


                    	    	    												if (current==null) {
                    	    	    													current = createModelElementForParent(grammarAccess.getStageRule());
                    	    	    												}
                    	    	    												add(
                    	    	    													current,
                    	    	    													"jobs",
                    	    	    													lv_jobs_28_0,
                    	    	    													"ca.mcgill.devops.pipeline.Pipeline.Job");
                    	    	    												afterParserOrEnumRuleCall();
                    	    	    											

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop106;
                    	        }
                    	    } while (true);


                    	    }

                    	    this_END_29=(Token)match(input,RULE_END,FOLLOW_71); 

                    	    									newLeafNode(this_END_29, grammarAccess.getStageAccess().getENDTerminalRuleCall_1_5_2());
                    	    								

                    	    }


                    	    }

                    	     
                    	    						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    	    					

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt107 >= 1 ) break loop107;
                                EarlyExitException eee =
                                    new EarlyExitException(107, input);
                                throw eee;
                        }
                        cnt107++;
                    } while (true);

                    if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getStageAccess().getUnorderedGroup_1()) ) {
                        throw new FailedPredicateException(input, "ruleStage", "getUnorderedGroupHelper().canLeave(grammarAccess.getStageAccess().getUnorderedGroup_1())");
                    }

                    }


                    }

                     
                    				  getUnorderedGroupHelper().leave(grammarAccess.getStageAccess().getUnorderedGroup_1());
                    				

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStage"


    // $ANTLR start "entryRuleJob"
    // InternalPipelineParser.g:3499:1: entryRuleJob returns [EObject current=null] : iv_ruleJob= ruleJob EOF ;
    public final EObject entryRuleJob() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleJob = null;


        try {
            // InternalPipelineParser.g:3499:44: (iv_ruleJob= ruleJob EOF )
            // InternalPipelineParser.g:3500:2: iv_ruleJob= ruleJob EOF
            {
             newCompositeNode(grammarAccess.getJobRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleJob=ruleJob();

            state._fsp--;

             current =iv_ruleJob; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleJob"


    // $ANTLR start "ruleJob"
    // InternalPipelineParser.g:3506:1: ruleJob returns [EObject current=null] : ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) ) ;
    public final EObject ruleJob() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token otherlv_1=null;
        Token otherlv_2=null;
        Token lv_name_3_1=null;
        Token lv_name_3_2=null;
        Token otherlv_4=null;
        Token this_BEGIN_5=null;
        Token lv_dependKW_7_1=null;
        Token lv_dependKW_7_2=null;
        Token otherlv_8=null;
        Token otherlv_9=null;
        Token otherlv_10=null;
        Token otherlv_11=null;
        Token otherlv_12=null;
        Token otherlv_13=null;
        Token otherlv_14=null;
        Token otherlv_15=null;
        Token this_END_17=null;
        EObject lv_jobParameterValues_6_0 = null;

        EObject lv_steps_16_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3512:2: ( ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) ) )
            // InternalPipelineParser.g:3513:2: ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) )
            {
            // InternalPipelineParser.g:3513:2: ( ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END ) )
            // InternalPipelineParser.g:3514:3: ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? ) (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END )
            {
            // InternalPipelineParser.g:3514:3: ( (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )? )
            // InternalPipelineParser.g:3515:4: (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )? ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) ) (otherlv_4= Colon )?
            {
            // InternalPipelineParser.g:3515:4: (otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment ) )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==HyphenMinus) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // InternalPipelineParser.g:3516:5: otherlv_0= HyphenMinus (otherlv_1= Job | otherlv_2= Deployment )
                    {
                    otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_78); 

                    					newLeafNode(otherlv_0, grammarAccess.getJobAccess().getHyphenMinusKeyword_0_0_0());
                    				
                    // InternalPipelineParser.g:3520:5: (otherlv_1= Job | otherlv_2= Deployment )
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==Job) ) {
                        alt109=1;
                    }
                    else if ( (LA109_0==Deployment) ) {
                        alt109=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        throw nvae;
                    }
                    switch (alt109) {
                        case 1 :
                            // InternalPipelineParser.g:3521:6: otherlv_1= Job
                            {
                            otherlv_1=(Token)match(input,Job,FOLLOW_19); 

                            						newLeafNode(otherlv_1, grammarAccess.getJobAccess().getJobKeyword_0_0_1_0());
                            					

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3526:6: otherlv_2= Deployment
                            {
                            otherlv_2=(Token)match(input,Deployment,FOLLOW_19); 

                            						newLeafNode(otherlv_2, grammarAccess.getJobAccess().getDeploymentKeyword_0_0_1_1());
                            					

                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:3532:4: ( ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) ) )
            // InternalPipelineParser.g:3533:5: ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) )
            {
            // InternalPipelineParser.g:3533:5: ( (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING ) )
            // InternalPipelineParser.g:3534:6: (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING )
            {
            // InternalPipelineParser.g:3534:6: (lv_name_3_1= RULE_ID | lv_name_3_2= RULE_STRING )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==RULE_ID) ) {
                alt111=1;
            }
            else if ( (LA111_0==RULE_STRING) ) {
                alt111=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // InternalPipelineParser.g:3535:7: lv_name_3_1= RULE_ID
                    {
                    lv_name_3_1=(Token)match(input,RULE_ID,FOLLOW_79); 

                    							newLeafNode(lv_name_3_1, grammarAccess.getJobAccess().getNameIDTerminalRuleCall_0_1_0_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getJobRule());
                    							}
                    							setWithLastConsumed(
                    								current,
                    								"name",
                    								lv_name_3_1,
                    								"ca.mcgill.devops.pipeline.Pipeline.ID");
                    						

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3550:7: lv_name_3_2= RULE_STRING
                    {
                    lv_name_3_2=(Token)match(input,RULE_STRING,FOLLOW_79); 

                    							newLeafNode(lv_name_3_2, grammarAccess.getJobAccess().getNameSTRINGTerminalRuleCall_0_1_0_1());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getJobRule());
                    							}
                    							setWithLastConsumed(
                    								current,
                    								"name",
                    								lv_name_3_2,
                    								"org.eclipse.xtext.common.Terminals.STRING");
                    						

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:3567:4: (otherlv_4= Colon )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==Colon) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // InternalPipelineParser.g:3568:5: otherlv_4= Colon
                    {
                    otherlv_4=(Token)match(input,Colon,FOLLOW_16); 

                    					newLeafNode(otherlv_4, grammarAccess.getJobAccess().getColonKeyword_0_2());
                    				

                    }
                    break;

            }


            }

            // InternalPipelineParser.g:3574:3: (this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END )
            // InternalPipelineParser.g:3575:4: this_BEGIN_5= RULE_BEGIN ( (lv_jobParameterValues_6_0= ruleParameterValue ) )* ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )? (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )? this_END_17= RULE_END
            {
            this_BEGIN_5=(Token)match(input,RULE_BEGIN,FOLLOW_80); 

            				newLeafNode(this_BEGIN_5, grammarAccess.getJobAccess().getBEGINTerminalRuleCall_1_0());
            			
            // InternalPipelineParser.g:3579:4: ( (lv_jobParameterValues_6_0= ruleParameterValue ) )*
            loop113:
            do {
                int alt113=2;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // InternalPipelineParser.g:3580:5: (lv_jobParameterValues_6_0= ruleParameterValue )
            	    {
            	    // InternalPipelineParser.g:3580:5: (lv_jobParameterValues_6_0= ruleParameterValue )
            	    // InternalPipelineParser.g:3581:6: lv_jobParameterValues_6_0= ruleParameterValue
            	    {

            	    						newCompositeNode(grammarAccess.getJobAccess().getJobParameterValuesParameterValueParserRuleCall_1_1_0());
            	    					
            	    pushFollow(FOLLOW_80);
            	    lv_jobParameterValues_6_0=ruleParameterValue();

            	    state._fsp--;


            	    						if (current==null) {
            	    							current = createModelElementForParent(grammarAccess.getJobRule());
            	    						}
            	    						add(
            	    							current,
            	    							"jobParameterValues",
            	    							lv_jobParameterValues_6_0,
            	    							"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
            	    						afterParserOrEnumRuleCall();
            	    					

            	    }


            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);

            // InternalPipelineParser.g:3598:4: ( ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) ) )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==DependsOn||LA118_0==Needs) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // InternalPipelineParser.g:3599:5: ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) ) ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) )
                    {
                    // InternalPipelineParser.g:3599:5: ( ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) ) )
                    // InternalPipelineParser.g:3600:6: ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) )
                    {
                    // InternalPipelineParser.g:3600:6: ( (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn ) )
                    // InternalPipelineParser.g:3601:7: (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn )
                    {
                    // InternalPipelineParser.g:3601:7: (lv_dependKW_7_1= Needs | lv_dependKW_7_2= DependsOn )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==Needs) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==DependsOn) ) {
                        alt114=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // InternalPipelineParser.g:3602:8: lv_dependKW_7_1= Needs
                            {
                            lv_dependKW_7_1=(Token)match(input,Needs,FOLLOW_81); 

                            								newLeafNode(lv_dependKW_7_1, grammarAccess.getJobAccess().getDependKWNeedsKeyword_1_2_0_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getJobRule());
                            								}
                            								setWithLastConsumed(current, "dependKW", lv_dependKW_7_1, null);
                            							

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3613:8: lv_dependKW_7_2= DependsOn
                            {
                            lv_dependKW_7_2=(Token)match(input,DependsOn,FOLLOW_81); 

                            								newLeafNode(lv_dependKW_7_2, grammarAccess.getJobAccess().getDependKWDependsOnKeyword_1_2_0_0_1());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getJobRule());
                            								}
                            								setWithLastConsumed(current, "dependKW", lv_dependKW_7_2, null);
                            							

                            }
                            break;

                    }


                    }


                    }

                    // InternalPipelineParser.g:3626:5: ( ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None ) | (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket ) )
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==None||LA117_0==RULE_ID) ) {
                        alt117=1;
                    }
                    else if ( (LA117_0==LeftSquareBracket) ) {
                        alt117=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 0, input);

                        throw nvae;
                    }
                    switch (alt117) {
                        case 1 :
                            // InternalPipelineParser.g:3627:6: ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None )
                            {
                            // InternalPipelineParser.g:3627:6: ( ( (otherlv_8= RULE_ID ) ) | otherlv_9= None )
                            int alt115=2;
                            int LA115_0 = input.LA(1);

                            if ( (LA115_0==RULE_ID) ) {
                                alt115=1;
                            }
                            else if ( (LA115_0==None) ) {
                                alt115=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 115, 0, input);

                                throw nvae;
                            }
                            switch (alt115) {
                                case 1 :
                                    // InternalPipelineParser.g:3628:7: ( (otherlv_8= RULE_ID ) )
                                    {
                                    // InternalPipelineParser.g:3628:7: ( (otherlv_8= RULE_ID ) )
                                    // InternalPipelineParser.g:3629:8: (otherlv_8= RULE_ID )
                                    {
                                    // InternalPipelineParser.g:3629:8: (otherlv_8= RULE_ID )
                                    // InternalPipelineParser.g:3630:9: otherlv_8= RULE_ID
                                    {

                                    									if (current==null) {
                                    										current = createModelElement(grammarAccess.getJobRule());
                                    									}
                                    								
                                    otherlv_8=(Token)match(input,RULE_ID,FOLLOW_82); 

                                    									newLeafNode(otherlv_8, grammarAccess.getJobAccess().getReferencesJobCrossReference_1_2_1_0_0_0());
                                    								

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:3642:7: otherlv_9= None
                                    {
                                    otherlv_9=(Token)match(input,None,FOLLOW_82); 

                                    							newLeafNode(otherlv_9, grammarAccess.getJobAccess().getNoneKeyword_1_2_1_0_1());
                                    						

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3648:6: (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket )
                            {
                            // InternalPipelineParser.g:3648:6: (otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket )
                            // InternalPipelineParser.g:3649:7: otherlv_10= LeftSquareBracket ( (otherlv_11= RULE_ID ) ) (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )* otherlv_14= RightSquareBracket
                            {
                            otherlv_10=(Token)match(input,LeftSquareBracket,FOLLOW_14); 

                            							newLeafNode(otherlv_10, grammarAccess.getJobAccess().getLeftSquareBracketKeyword_1_2_1_1_0());
                            						
                            // InternalPipelineParser.g:3653:7: ( (otherlv_11= RULE_ID ) )
                            // InternalPipelineParser.g:3654:8: (otherlv_11= RULE_ID )
                            {
                            // InternalPipelineParser.g:3654:8: (otherlv_11= RULE_ID )
                            // InternalPipelineParser.g:3655:9: otherlv_11= RULE_ID
                            {

                            									if (current==null) {
                            										current = createModelElement(grammarAccess.getJobRule());
                            									}
                            								
                            otherlv_11=(Token)match(input,RULE_ID,FOLLOW_9); 

                            									newLeafNode(otherlv_11, grammarAccess.getJobAccess().getReferencesJobCrossReference_1_2_1_1_1_0());
                            								

                            }


                            }

                            // InternalPipelineParser.g:3666:7: (otherlv_12= Comma ( (otherlv_13= RULE_ID ) ) )*
                            loop116:
                            do {
                                int alt116=2;
                                int LA116_0 = input.LA(1);

                                if ( (LA116_0==Comma) ) {
                                    alt116=1;
                                }


                                switch (alt116) {
                            	case 1 :
                            	    // InternalPipelineParser.g:3667:8: otherlv_12= Comma ( (otherlv_13= RULE_ID ) )
                            	    {
                            	    otherlv_12=(Token)match(input,Comma,FOLLOW_14); 

                            	    								newLeafNode(otherlv_12, grammarAccess.getJobAccess().getCommaKeyword_1_2_1_1_2_0());
                            	    							
                            	    // InternalPipelineParser.g:3671:8: ( (otherlv_13= RULE_ID ) )
                            	    // InternalPipelineParser.g:3672:9: (otherlv_13= RULE_ID )
                            	    {
                            	    // InternalPipelineParser.g:3672:9: (otherlv_13= RULE_ID )
                            	    // InternalPipelineParser.g:3673:10: otherlv_13= RULE_ID
                            	    {

                            	    										if (current==null) {
                            	    											current = createModelElement(grammarAccess.getJobRule());
                            	    										}
                            	    									
                            	    otherlv_13=(Token)match(input,RULE_ID,FOLLOW_9); 

                            	    										newLeafNode(otherlv_13, grammarAccess.getJobAccess().getReferencesJobCrossReference_1_2_1_1_2_1_0());
                            	    									

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop116;
                                }
                            } while (true);

                            otherlv_14=(Token)match(input,RightSquareBracket,FOLLOW_82); 

                            							newLeafNode(otherlv_14, grammarAccess.getJobAccess().getRightSquareBracketKeyword_1_2_1_1_3());
                            						

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:3692:4: (otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )* )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==Steps) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // InternalPipelineParser.g:3693:5: otherlv_15= Steps ( (lv_steps_16_0= ruleStep ) )*
                    {
                    otherlv_15=(Token)match(input,Steps,FOLLOW_47); 

                    					newLeafNode(otherlv_15, grammarAccess.getJobAccess().getStepsKeyword_1_3_0());
                    				
                    // InternalPipelineParser.g:3697:5: ( (lv_steps_16_0= ruleStep ) )*
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);

                        if ( (LA119_0==HyphenMinus) ) {
                            alt119=1;
                        }


                        switch (alt119) {
                    	case 1 :
                    	    // InternalPipelineParser.g:3698:6: (lv_steps_16_0= ruleStep )
                    	    {
                    	    // InternalPipelineParser.g:3698:6: (lv_steps_16_0= ruleStep )
                    	    // InternalPipelineParser.g:3699:7: lv_steps_16_0= ruleStep
                    	    {

                    	    							newCompositeNode(grammarAccess.getJobAccess().getStepsStepParserRuleCall_1_3_1_0());
                    	    						
                    	    pushFollow(FOLLOW_47);
                    	    lv_steps_16_0=ruleStep();

                    	    state._fsp--;


                    	    							if (current==null) {
                    	    								current = createModelElementForParent(grammarAccess.getJobRule());
                    	    							}
                    	    							add(
                    	    								current,
                    	    								"steps",
                    	    								lv_steps_16_0,
                    	    								"ca.mcgill.devops.pipeline.Pipeline.Step");
                    	    							afterParserOrEnumRuleCall();
                    	    						

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop119;
                        }
                    } while (true);


                    }
                    break;

            }

            this_END_17=(Token)match(input,RULE_END,FOLLOW_2); 

            				newLeafNode(this_END_17, grammarAccess.getJobAccess().getENDTerminalRuleCall_1_4());
            			

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleJob"


    // $ANTLR start "entryRuleStep"
    // InternalPipelineParser.g:3726:1: entryRuleStep returns [EObject current=null] : iv_ruleStep= ruleStep EOF ;
    public final EObject entryRuleStep() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleStep = null;


        try {
            // InternalPipelineParser.g:3726:45: (iv_ruleStep= ruleStep EOF )
            // InternalPipelineParser.g:3727:2: iv_ruleStep= ruleStep EOF
            {
             newCompositeNode(grammarAccess.getStepRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleStep=ruleStep();

            state._fsp--;

             current =iv_ruleStep; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleStep"


    // $ANTLR start "ruleStep"
    // InternalPipelineParser.g:3733:1: ruleStep returns [EObject current=null] : (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) ) ;
    public final EObject ruleStep() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        EObject this_Action_1 = null;

        EObject this_Script_2 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3739:2: ( (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) ) )
            // InternalPipelineParser.g:3740:2: (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) )
            {
            // InternalPipelineParser.g:3740:2: (otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript ) )
            // InternalPipelineParser.g:3741:3: otherlv_0= HyphenMinus (this_Action_1= ruleAction | this_Script_2= ruleScript )
            {
            otherlv_0=(Token)match(input,HyphenMinus,FOLLOW_83); 

            			newLeafNode(otherlv_0, grammarAccess.getStepAccess().getHyphenMinusKeyword_0());
            		
            // InternalPipelineParser.g:3745:3: (this_Action_1= ruleAction | this_Script_2= ruleScript )
            int alt121=2;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // InternalPipelineParser.g:3746:4: this_Action_1= ruleAction
                    {

                    				newCompositeNode(grammarAccess.getStepAccess().getActionParserRuleCall_1_0());
                    			
                    pushFollow(FOLLOW_2);
                    this_Action_1=ruleAction();

                    state._fsp--;


                    				current = this_Action_1;
                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3755:4: this_Script_2= ruleScript
                    {

                    				newCompositeNode(grammarAccess.getStepAccess().getScriptParserRuleCall_1_1());
                    			
                    pushFollow(FOLLOW_2);
                    this_Script_2=ruleScript();

                    state._fsp--;


                    				current = this_Script_2;
                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleStep"


    // $ANTLR start "entryRuleScript"
    // InternalPipelineParser.g:3768:1: entryRuleScript returns [EObject current=null] : iv_ruleScript= ruleScript EOF ;
    public final EObject entryRuleScript() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleScript = null;


        try {
            // InternalPipelineParser.g:3768:47: (iv_ruleScript= ruleScript EOF )
            // InternalPipelineParser.g:3769:2: iv_ruleScript= ruleScript EOF
            {
             newCompositeNode(grammarAccess.getScriptRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleScript=ruleScript();

            state._fsp--;

             current =iv_ruleScript; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleScript"


    // $ANTLR start "ruleScript"
    // InternalPipelineParser.g:3775:1: ruleScript returns [EObject current=null] : ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? ) ;
    public final EObject ruleScript() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_1=null;
        Token lv_name_0_2=null;
        Token lv_name_0_3=null;
        Token lv_name_0_4=null;
        Token lv_name_0_5=null;
        Token lv_name_0_6=null;
        Token lv_name_0_7=null;
        Token lv_name_0_8=null;
        Token lv_name_0_9=null;
        Token lv_name_0_10=null;
        Token otherlv_2=null;
        Token otherlv_3=null;
        Token this_BEGIN_4=null;
        Token this_END_6=null;
        Token this_BEGIN_7=null;
        Token this_END_9=null;
        AntlrDatatypeRuleToken lv_command_1_0 = null;

        AntlrDatatypeRuleToken lv_command_5_0 = null;

        EObject lv_subSteps_8_1 = null;

        EObject lv_subSteps_8_2 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:3781:2: ( ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? ) )
            // InternalPipelineParser.g:3782:2: ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? )
            {
            // InternalPipelineParser.g:3782:2: ( ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )? )
            // InternalPipelineParser.g:3783:3: ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) ) (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )?
            {
            // InternalPipelineParser.g:3783:3: ( ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) ) )
            // InternalPipelineParser.g:3784:4: ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) ) ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) )
            {
            // InternalPipelineParser.g:3784:4: ( ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) ) )
            // InternalPipelineParser.g:3785:5: ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) )
            {
            // InternalPipelineParser.g:3785:5: ( (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task ) )
            // InternalPipelineParser.g:3786:6: (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task )
            {
            // InternalPipelineParser.g:3786:6: (lv_name_0_1= Run | lv_name_0_2= Script | lv_name_0_3= Bash | lv_name_0_4= Pwsh | lv_name_0_5= Powershell | lv_name_0_6= Checkout | lv_name_0_7= Download | lv_name_0_8= GetPackage | lv_name_0_9= Publish | lv_name_0_10= Task )
            int alt122=10;
            switch ( input.LA(1) ) {
            case Run:
                {
                alt122=1;
                }
                break;
            case Script:
                {
                alt122=2;
                }
                break;
            case Bash:
                {
                alt122=3;
                }
                break;
            case Pwsh:
                {
                alt122=4;
                }
                break;
            case Powershell:
                {
                alt122=5;
                }
                break;
            case Checkout:
                {
                alt122=6;
                }
                break;
            case Download:
                {
                alt122=7;
                }
                break;
            case GetPackage:
                {
                alt122=8;
                }
                break;
            case Publish:
                {
                alt122=9;
                }
                break;
            case Task:
                {
                alt122=10;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;
            }

            switch (alt122) {
                case 1 :
                    // InternalPipelineParser.g:3787:7: lv_name_0_1= Run
                    {
                    lv_name_0_1=(Token)match(input,Run,FOLLOW_84); 

                    							newLeafNode(lv_name_0_1, grammarAccess.getScriptAccess().getNameRunKeyword_0_0_0_0());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_1, null);
                    						

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3798:7: lv_name_0_2= Script
                    {
                    lv_name_0_2=(Token)match(input,Script,FOLLOW_84); 

                    							newLeafNode(lv_name_0_2, grammarAccess.getScriptAccess().getNameScriptKeyword_0_0_0_1());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_2, null);
                    						

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:3809:7: lv_name_0_3= Bash
                    {
                    lv_name_0_3=(Token)match(input,Bash,FOLLOW_84); 

                    							newLeafNode(lv_name_0_3, grammarAccess.getScriptAccess().getNameBashKeyword_0_0_0_2());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_3, null);
                    						

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:3820:7: lv_name_0_4= Pwsh
                    {
                    lv_name_0_4=(Token)match(input,Pwsh,FOLLOW_84); 

                    							newLeafNode(lv_name_0_4, grammarAccess.getScriptAccess().getNamePwshKeyword_0_0_0_3());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_4, null);
                    						

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:3831:7: lv_name_0_5= Powershell
                    {
                    lv_name_0_5=(Token)match(input,Powershell,FOLLOW_84); 

                    							newLeafNode(lv_name_0_5, grammarAccess.getScriptAccess().getNamePowershellKeyword_0_0_0_4());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_5, null);
                    						

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:3842:7: lv_name_0_6= Checkout
                    {
                    lv_name_0_6=(Token)match(input,Checkout,FOLLOW_84); 

                    							newLeafNode(lv_name_0_6, grammarAccess.getScriptAccess().getNameCheckoutKeyword_0_0_0_5());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_6, null);
                    						

                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:3853:7: lv_name_0_7= Download
                    {
                    lv_name_0_7=(Token)match(input,Download,FOLLOW_84); 

                    							newLeafNode(lv_name_0_7, grammarAccess.getScriptAccess().getNameDownloadKeyword_0_0_0_6());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_7, null);
                    						

                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:3864:7: lv_name_0_8= GetPackage
                    {
                    lv_name_0_8=(Token)match(input,GetPackage,FOLLOW_84); 

                    							newLeafNode(lv_name_0_8, grammarAccess.getScriptAccess().getNameGetPackageKeyword_0_0_0_7());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_8, null);
                    						

                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:3875:7: lv_name_0_9= Publish
                    {
                    lv_name_0_9=(Token)match(input,Publish,FOLLOW_84); 

                    							newLeafNode(lv_name_0_9, grammarAccess.getScriptAccess().getNamePublishKeyword_0_0_0_8());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_9, null);
                    						

                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:3886:7: lv_name_0_10= Task
                    {
                    lv_name_0_10=(Token)match(input,Task,FOLLOW_84); 

                    							newLeafNode(lv_name_0_10, grammarAccess.getScriptAccess().getNameTaskKeyword_0_0_0_9());
                    						

                    							if (current==null) {
                    								current = createModelElement(grammarAccess.getScriptRule());
                    							}
                    							setWithLastConsumed(current, "name", lv_name_0_10, null);
                    						

                    }
                    break;

            }


            }


            }

            // InternalPipelineParser.g:3899:4: ( ( (lv_command_1_0= ruleAnyData ) ) | ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END ) )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( ((LA124_0>=RULE_COMPLEX_EXPRESSION && LA124_0<=RULE_VERSION)||LA124_0==RULE_STRING) ) {
                alt124=1;
            }
            else if ( (LA124_0==GreaterThanSignHyphenMinus||LA124_0==VerticalLine) ) {
                alt124=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // InternalPipelineParser.g:3900:5: ( (lv_command_1_0= ruleAnyData ) )
                    {
                    // InternalPipelineParser.g:3900:5: ( (lv_command_1_0= ruleAnyData ) )
                    // InternalPipelineParser.g:3901:6: (lv_command_1_0= ruleAnyData )
                    {
                    // InternalPipelineParser.g:3901:6: (lv_command_1_0= ruleAnyData )
                    // InternalPipelineParser.g:3902:7: lv_command_1_0= ruleAnyData
                    {

                    							newCompositeNode(grammarAccess.getScriptAccess().getCommandAnyDataParserRuleCall_0_1_0_0());
                    						
                    pushFollow(FOLLOW_44);
                    lv_command_1_0=ruleAnyData();

                    state._fsp--;


                    							if (current==null) {
                    								current = createModelElementForParent(grammarAccess.getScriptRule());
                    							}
                    							set(
                    								current,
                    								"command",
                    								lv_command_1_0,
                    								"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    							afterParserOrEnumRuleCall();
                    						

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:3920:5: ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END )
                    {
                    // InternalPipelineParser.g:3920:5: ( (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END )
                    // InternalPipelineParser.g:3921:6: (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus ) this_BEGIN_4= RULE_BEGIN ( (lv_command_5_0= ruleAnyData ) ) this_END_6= RULE_END
                    {
                    // InternalPipelineParser.g:3921:6: (otherlv_2= VerticalLine | otherlv_3= GreaterThanSignHyphenMinus )
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==VerticalLine) ) {
                        alt123=1;
                    }
                    else if ( (LA123_0==GreaterThanSignHyphenMinus) ) {
                        alt123=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 0, input);

                        throw nvae;
                    }
                    switch (alt123) {
                        case 1 :
                            // InternalPipelineParser.g:3922:7: otherlv_2= VerticalLine
                            {
                            otherlv_2=(Token)match(input,VerticalLine,FOLLOW_16); 

                            							newLeafNode(otherlv_2, grammarAccess.getScriptAccess().getVerticalLineKeyword_0_1_1_0_0());
                            						

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:3927:7: otherlv_3= GreaterThanSignHyphenMinus
                            {
                            otherlv_3=(Token)match(input,GreaterThanSignHyphenMinus,FOLLOW_16); 

                            							newLeafNode(otherlv_3, grammarAccess.getScriptAccess().getGreaterThanSignHyphenMinusKeyword_0_1_1_0_1());
                            						

                            }
                            break;

                    }

                    this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_43); 

                    						newLeafNode(this_BEGIN_4, grammarAccess.getScriptAccess().getBEGINTerminalRuleCall_0_1_1_1());
                    					
                    // InternalPipelineParser.g:3936:6: ( (lv_command_5_0= ruleAnyData ) )
                    // InternalPipelineParser.g:3937:7: (lv_command_5_0= ruleAnyData )
                    {
                    // InternalPipelineParser.g:3937:7: (lv_command_5_0= ruleAnyData )
                    // InternalPipelineParser.g:3938:8: lv_command_5_0= ruleAnyData
                    {

                    								newCompositeNode(grammarAccess.getScriptAccess().getCommandAnyDataParserRuleCall_0_1_1_2_0());
                    							
                    pushFollow(FOLLOW_20);
                    lv_command_5_0=ruleAnyData();

                    state._fsp--;


                    								if (current==null) {
                    									current = createModelElementForParent(grammarAccess.getScriptRule());
                    								}
                    								set(
                    									current,
                    									"command",
                    									lv_command_5_0,
                    									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                    								afterParserOrEnumRuleCall();
                    							

                    }


                    }

                    this_END_6=(Token)match(input,RULE_END,FOLLOW_44); 

                    						newLeafNode(this_END_6, grammarAccess.getScriptAccess().getENDTerminalRuleCall_0_1_1_3());
                    					

                    }


                    }
                    break;

            }


            }

            // InternalPipelineParser.g:3962:3: (this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==RULE_BEGIN) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // InternalPipelineParser.g:3963:4: this_BEGIN_7= RULE_BEGIN ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )* this_END_9= RULE_END
                    {
                    this_BEGIN_7=(Token)match(input,RULE_BEGIN,FOLLOW_85); 

                    				newLeafNode(this_BEGIN_7, grammarAccess.getScriptAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:3967:4: ( ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) ) )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( ((LA126_0>=Repository_dispatch && LA126_0<=ContinueOnError_1)||(LA126_0>=Workflow_dispatch && LA126_0<=WorkingDirectory)||(LA126_0>=TimeoutInMinutes && LA126_0<=ContinueOnError)||LA126_0==TimeoutMinutes||LA126_0==ReleaseTrigger||(LA126_0>=Allow_failure && LA126_0<=DeployTrigger)||(LA126_0>=Notifications && LA126_0<=After_script)||(LA126_0>=DefaultsRun && LA126_0<=PathsIgnore)||(LA126_0>=Pull_request && LA126_0<=Workflow_run)||(LA126_0>=Concurrency && LA126_0<=Definitions)||LA126_0==Description||(LA126_0>=DisplayName && LA126_0<=GetPackage)||(LA126_0>=Parameters && LA126_0<=Permission)||(LA126_0>=Powershell && LA126_0<=Artifacts)||(LA126_0>=Condition && LA126_0<=FailFast)||(LA126_0>=Pipelines && LA126_0<=RunPolicy)||(LA126_0>=Schedules && LA126_0<=Workspace)||(LA126_0>=Branches && LA126_0<=Checkout)||(LA126_0>=Defaults && LA126_0<=Download)||(LA126_0>=MaxTime && LA126_0<=PreBuild)||(LA126_0>=Readonly && LA126_0<=Snapshot)||(LA126_0>=Strategy && LA126_0<=Webhooks)||(LA126_0>=Command && LA126_0<=Caches)||(LA126_0>=Docker && LA126_0<=Except)||LA126_0==Inputs||(LA126_0>=Labels && LA126_0<=Policy)||LA126_0==Queued||(LA126_0>=Script && LA126_0<=Image)||(LA126_0>=Paths && LA126_0<=Value)||(LA126_0>=Auth && LA126_0<=Cron)||LA126_0==Name||(LA126_0>=Only && LA126_0<=Pwsh)||(LA126_0>=Step && LA126_0<=With)||(LA126_0>=Env && LA126_0<=Job)||(LA126_0>=Run && LA126_0<=On)||LA126_0==RULE_ID) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // InternalPipelineParser.g:3968:5: ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) )
                    	    {
                    	    // InternalPipelineParser.g:3968:5: ( (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript ) )
                    	    // InternalPipelineParser.g:3969:6: (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript )
                    	    {
                    	    // InternalPipelineParser.g:3969:6: (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript )
                    	    int alt125=2;
                    	    alt125 = dfa125.predict(input);
                    	    switch (alt125) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:3970:7: lv_subSteps_8_1= ruleAction
                    	            {

                    	            							newCompositeNode(grammarAccess.getScriptAccess().getSubStepsActionParserRuleCall_1_1_0_0());
                    	            						
                    	            pushFollow(FOLLOW_85);
                    	            lv_subSteps_8_1=ruleAction();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getScriptRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_8_1,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Action");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalPipelineParser.g:3986:7: lv_subSteps_8_2= ruleScript
                    	            {

                    	            							newCompositeNode(grammarAccess.getScriptAccess().getSubStepsScriptParserRuleCall_1_1_0_1());
                    	            						
                    	            pushFollow(FOLLOW_85);
                    	            lv_subSteps_8_2=ruleScript();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getScriptRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_8_2,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Script");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);

                    this_END_9=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_9, grammarAccess.getScriptAccess().getENDTerminalRuleCall_1_2());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleScript"


    // $ANTLR start "entryRuleAction"
    // InternalPipelineParser.g:4013:1: entryRuleAction returns [EObject current=null] : iv_ruleAction= ruleAction EOF ;
    public final EObject entryRuleAction() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleAction = null;


        try {
            // InternalPipelineParser.g:4013:47: (iv_ruleAction= ruleAction EOF )
            // InternalPipelineParser.g:4014:2: iv_ruleAction= ruleAction EOF
            {
             newCompositeNode(grammarAccess.getActionRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleAction=ruleAction();

            state._fsp--;

             current =iv_ruleAction; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAction"


    // $ANTLR start "ruleAction"
    // InternalPipelineParser.g:4020:1: ruleAction returns [EObject current=null] : ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? ) ;
    public final EObject ruleAction() throws RecognitionException {
        EObject current = null;

        Token otherlv_0=null;
        Token lv_otherKeyword_3_0=null;
        Token otherlv_4=null;
        Token this_BEGIN_6=null;
        Token this_END_8=null;
        AntlrDatatypeRuleToken lv_actionName_1_0 = null;

        Enumerator lv_actionKeyword_2_0 = null;

        AntlrDatatypeRuleToken lv_actionValue_5_1 = null;

        AntlrDatatypeRuleToken lv_actionValue_5_2 = null;

        EObject lv_subSteps_7_1 = null;

        EObject lv_subSteps_7_2 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4026:2: ( ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? ) )
            // InternalPipelineParser.g:4027:2: ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? )
            {
            // InternalPipelineParser.g:4027:2: ( ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )? )
            // InternalPipelineParser.g:4028:3: ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) ) (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )?
            {
            // InternalPipelineParser.g:4028:3: ( (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) ) | ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? ) )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==Name) ) {
                int LA131_1 = input.LA(2);

                if ( (LA131_1==EOF||(LA131_1>=Repository_dispatch && LA131_1<=ContinueOnError_1)||(LA131_1>=Workflow_dispatch && LA131_1<=WorkingDirectory)||(LA131_1>=TimeoutInMinutes && LA131_1<=ContinueOnError)||LA131_1==TimeoutMinutes||LA131_1==ReleaseTrigger||(LA131_1>=Allow_failure && LA131_1<=DeployTrigger)||(LA131_1>=Notifications && LA131_1<=After_script)||(LA131_1>=DefaultsRun && LA131_1<=PathsIgnore)||(LA131_1>=Pull_request && LA131_1<=Workflow_run)||(LA131_1>=Concurrency && LA131_1<=Definitions)||LA131_1==Description||(LA131_1>=DisplayName && LA131_1<=GetPackage)||(LA131_1>=Parameters && LA131_1<=Permission)||(LA131_1>=Powershell && LA131_1<=Artifacts)||(LA131_1>=Condition && LA131_1<=FailFast)||(LA131_1>=Pipelines && LA131_1<=RunPolicy)||(LA131_1>=Schedules && LA131_1<=Workspace)||(LA131_1>=Branches && LA131_1<=Checkout)||(LA131_1>=Defaults && LA131_1<=Download)||(LA131_1>=MaxTime && LA131_1<=PreBuild)||(LA131_1>=Readonly && LA131_1<=Snapshot)||(LA131_1>=Strategy && LA131_1<=Webhooks)||(LA131_1>=Command && LA131_1<=Caches)||(LA131_1>=Docker && LA131_1<=Except)||LA131_1==Inputs||(LA131_1>=Labels && LA131_1<=Policy)||LA131_1==Queued||(LA131_1>=Script && LA131_1<=Image)||(LA131_1>=Paths && LA131_1<=Value)||(LA131_1>=Auth && LA131_1<=Cron)||LA131_1==Name||(LA131_1>=Only && LA131_1<=Pwsh)||(LA131_1>=Step && LA131_1<=With)||(LA131_1>=Env && LA131_1<=Job)||(LA131_1>=Run && LA131_1<=On)||LA131_1==HyphenMinus||(LA131_1>=RULE_COMPLEX_EXPRESSION && LA131_1<=RULE_FLOAT_LITERAL)||(LA131_1>=RULE_VERSION && LA131_1<=RULE_END)||LA131_1==RULE_STRING) ) {
                    alt131=2;
                }
                else if ( (LA131_1==RULE_ID) ) {
                    alt131=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("", 131, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA131_0>=Repository_dispatch && LA131_0<=ContinueOnError_1)||(LA131_0>=Workflow_dispatch && LA131_0<=WorkingDirectory)||(LA131_0>=TimeoutInMinutes && LA131_0<=ContinueOnError)||LA131_0==TimeoutMinutes||LA131_0==ReleaseTrigger||(LA131_0>=Allow_failure && LA131_0<=DeployTrigger)||(LA131_0>=Notifications && LA131_0<=After_script)||(LA131_0>=DefaultsRun && LA131_0<=PathsIgnore)||(LA131_0>=Pull_request && LA131_0<=Workflow_run)||(LA131_0>=Concurrency && LA131_0<=Definitions)||LA131_0==Description||(LA131_0>=DisplayName && LA131_0<=GetPackage)||(LA131_0>=Parameters && LA131_0<=Permission)||(LA131_0>=Powershell && LA131_0<=Artifacts)||(LA131_0>=Condition && LA131_0<=FailFast)||(LA131_0>=Pipelines && LA131_0<=RunPolicy)||(LA131_0>=Schedules && LA131_0<=Workspace)||(LA131_0>=Branches && LA131_0<=Checkout)||(LA131_0>=Defaults && LA131_0<=Download)||(LA131_0>=MaxTime && LA131_0<=PreBuild)||(LA131_0>=Readonly && LA131_0<=Snapshot)||(LA131_0>=Strategy && LA131_0<=Webhooks)||(LA131_0>=Command && LA131_0<=Caches)||(LA131_0>=Docker && LA131_0<=Except)||LA131_0==Inputs||(LA131_0>=Labels && LA131_0<=Policy)||LA131_0==Queued||(LA131_0>=Script && LA131_0<=Image)||(LA131_0>=Paths && LA131_0<=Value)||(LA131_0>=Auth && LA131_0<=Cron)||(LA131_0>=Only && LA131_0<=Pwsh)||(LA131_0>=Step && LA131_0<=With)||(LA131_0>=Env && LA131_0<=Job)||(LA131_0>=Run && LA131_0<=On)||LA131_0==RULE_ID) ) {
                alt131=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    // InternalPipelineParser.g:4029:4: (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) )
                    {
                    // InternalPipelineParser.g:4029:4: (otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) ) )
                    // InternalPipelineParser.g:4030:5: otherlv_0= Name ( (lv_actionName_1_0= ruleUnquotedString ) )
                    {
                    otherlv_0=(Token)match(input,Name,FOLLOW_14); 

                    					newLeafNode(otherlv_0, grammarAccess.getActionAccess().getNameKeyword_0_0_0());
                    				
                    // InternalPipelineParser.g:4034:5: ( (lv_actionName_1_0= ruleUnquotedString ) )
                    // InternalPipelineParser.g:4035:6: (lv_actionName_1_0= ruleUnquotedString )
                    {
                    // InternalPipelineParser.g:4035:6: (lv_actionName_1_0= ruleUnquotedString )
                    // InternalPipelineParser.g:4036:7: lv_actionName_1_0= ruleUnquotedString
                    {

                    							newCompositeNode(grammarAccess.getActionAccess().getActionNameUnquotedStringParserRuleCall_0_0_1_0());
                    						
                    pushFollow(FOLLOW_44);
                    lv_actionName_1_0=ruleUnquotedString();

                    state._fsp--;


                    							if (current==null) {
                    								current = createModelElementForParent(grammarAccess.getActionRule());
                    							}
                    							set(
                    								current,
                    								"actionName",
                    								lv_actionName_1_0,
                    								"ca.mcgill.devops.pipeline.Pipeline.UnquotedString");
                    							afterParserOrEnumRuleCall();
                    						

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4055:4: ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? )
                    {
                    // InternalPipelineParser.g:4055:4: ( ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )? )
                    // InternalPipelineParser.g:4056:5: ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) ) ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )?
                    {
                    // InternalPipelineParser.g:4056:5: ( ( (lv_actionKeyword_2_0= rulePipelineKeyword ) ) | ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon ) )
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( ((LA128_0>=Repository_dispatch && LA128_0<=ContinueOnError_1)||(LA128_0>=Workflow_dispatch && LA128_0<=WorkingDirectory)||(LA128_0>=TimeoutInMinutes && LA128_0<=ContinueOnError)||LA128_0==TimeoutMinutes||LA128_0==ReleaseTrigger||(LA128_0>=Allow_failure && LA128_0<=DeployTrigger)||(LA128_0>=Notifications && LA128_0<=After_script)||(LA128_0>=DefaultsRun && LA128_0<=PathsIgnore)||(LA128_0>=Pull_request && LA128_0<=Workflow_run)||(LA128_0>=Concurrency && LA128_0<=Definitions)||LA128_0==Description||(LA128_0>=DisplayName && LA128_0<=GetPackage)||(LA128_0>=Parameters && LA128_0<=Permission)||(LA128_0>=Powershell && LA128_0<=Artifacts)||(LA128_0>=Condition && LA128_0<=FailFast)||(LA128_0>=Pipelines && LA128_0<=RunPolicy)||(LA128_0>=Schedules && LA128_0<=Workspace)||(LA128_0>=Branches && LA128_0<=Checkout)||(LA128_0>=Defaults && LA128_0<=Download)||(LA128_0>=MaxTime && LA128_0<=PreBuild)||(LA128_0>=Readonly && LA128_0<=Snapshot)||(LA128_0>=Strategy && LA128_0<=Webhooks)||(LA128_0>=Command && LA128_0<=Caches)||(LA128_0>=Docker && LA128_0<=Except)||LA128_0==Inputs||(LA128_0>=Labels && LA128_0<=Policy)||LA128_0==Queued||(LA128_0>=Script && LA128_0<=Image)||(LA128_0>=Paths && LA128_0<=Value)||(LA128_0>=Auth && LA128_0<=Cron)||LA128_0==Name||(LA128_0>=Only && LA128_0<=Pwsh)||(LA128_0>=Step && LA128_0<=With)||(LA128_0>=Env && LA128_0<=Job)||(LA128_0>=Run && LA128_0<=On)) ) {
                        alt128=1;
                    }
                    else if ( (LA128_0==RULE_ID) ) {
                        alt128=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 128, 0, input);

                        throw nvae;
                    }
                    switch (alt128) {
                        case 1 :
                            // InternalPipelineParser.g:4057:6: ( (lv_actionKeyword_2_0= rulePipelineKeyword ) )
                            {
                            // InternalPipelineParser.g:4057:6: ( (lv_actionKeyword_2_0= rulePipelineKeyword ) )
                            // InternalPipelineParser.g:4058:7: (lv_actionKeyword_2_0= rulePipelineKeyword )
                            {
                            // InternalPipelineParser.g:4058:7: (lv_actionKeyword_2_0= rulePipelineKeyword )
                            // InternalPipelineParser.g:4059:8: lv_actionKeyword_2_0= rulePipelineKeyword
                            {

                            								newCompositeNode(grammarAccess.getActionAccess().getActionKeywordPipelineKeywordEnumRuleCall_0_1_0_0_0());
                            							
                            pushFollow(FOLLOW_86);
                            lv_actionKeyword_2_0=rulePipelineKeyword();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getActionRule());
                            								}
                            								set(
                            									current,
                            									"actionKeyword",
                            									lv_actionKeyword_2_0,
                            									"ca.mcgill.devops.pipeline.Pipeline.PipelineKeyword");
                            								afterParserOrEnumRuleCall();
                            							

                            }


                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:4077:6: ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon )
                            {
                            // InternalPipelineParser.g:4077:6: ( ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon )
                            // InternalPipelineParser.g:4078:7: ( (lv_otherKeyword_3_0= RULE_ID ) ) otherlv_4= Colon
                            {
                            // InternalPipelineParser.g:4078:7: ( (lv_otherKeyword_3_0= RULE_ID ) )
                            // InternalPipelineParser.g:4079:8: (lv_otherKeyword_3_0= RULE_ID )
                            {
                            // InternalPipelineParser.g:4079:8: (lv_otherKeyword_3_0= RULE_ID )
                            // InternalPipelineParser.g:4080:9: lv_otherKeyword_3_0= RULE_ID
                            {
                            lv_otherKeyword_3_0=(Token)match(input,RULE_ID,FOLLOW_40); 

                            									newLeafNode(lv_otherKeyword_3_0, grammarAccess.getActionAccess().getOtherKeywordIDTerminalRuleCall_0_1_0_1_0_0());
                            								

                            									if (current==null) {
                            										current = createModelElement(grammarAccess.getActionRule());
                            									}
                            									setWithLastConsumed(
                            										current,
                            										"otherKeyword",
                            										lv_otherKeyword_3_0,
                            										"ca.mcgill.devops.pipeline.Pipeline.ID");
                            								

                            }


                            }

                            otherlv_4=(Token)match(input,Colon,FOLLOW_86); 

                            							newLeafNode(otherlv_4, grammarAccess.getActionAccess().getColonKeyword_0_1_0_1_1());
                            						

                            }


                            }
                            break;

                    }

                    // InternalPipelineParser.g:4102:5: ( ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) ) )?
                    int alt130=2;
                    switch ( input.LA(1) ) {
                        case RULE_COMPLEX_EXPRESSION:
                        case RULE_HEX_INT:
                        case RULE_INT:
                        case RULE_FLOAT_LITERAL:
                        case RULE_VERSION:
                        case RULE_STRING:
                            {
                            alt130=1;
                            }
                            break;
                        case RULE_ID:
                            {
                            int LA130_2 = input.LA(2);

                            if ( (LA130_2==EOF||(LA130_2>=Repository_dispatch && LA130_2<=ContinueOnError_1)||(LA130_2>=Workflow_dispatch && LA130_2<=WorkingDirectory)||(LA130_2>=TimeoutInMinutes && LA130_2<=ContinueOnError)||LA130_2==TimeoutMinutes||LA130_2==ReleaseTrigger||(LA130_2>=Allow_failure && LA130_2<=DeployTrigger)||(LA130_2>=Notifications && LA130_2<=After_script)||(LA130_2>=DefaultsRun && LA130_2<=PathsIgnore)||(LA130_2>=Pull_request && LA130_2<=Workflow_run)||(LA130_2>=Concurrency && LA130_2<=Definitions)||LA130_2==Description||(LA130_2>=DisplayName && LA130_2<=GetPackage)||(LA130_2>=Parameters && LA130_2<=Permission)||(LA130_2>=Powershell && LA130_2<=Artifacts)||(LA130_2>=Condition && LA130_2<=FailFast)||(LA130_2>=Pipelines && LA130_2<=RunPolicy)||(LA130_2>=Schedules && LA130_2<=Workspace)||(LA130_2>=Branches && LA130_2<=Checkout)||(LA130_2>=Defaults && LA130_2<=Download)||(LA130_2>=MaxTime && LA130_2<=PreBuild)||(LA130_2>=Readonly && LA130_2<=Snapshot)||(LA130_2>=Strategy && LA130_2<=Webhooks)||(LA130_2>=Command && LA130_2<=Caches)||(LA130_2>=Docker && LA130_2<=Except)||LA130_2==Inputs||(LA130_2>=Labels && LA130_2<=Policy)||LA130_2==Queued||(LA130_2>=Script && LA130_2<=Image)||(LA130_2>=Paths && LA130_2<=Value)||(LA130_2>=Auth && LA130_2<=Cron)||LA130_2==Name||(LA130_2>=Only && LA130_2<=Pwsh)||(LA130_2>=Step && LA130_2<=With)||(LA130_2>=Env && LA130_2<=Job)||(LA130_2>=Run && LA130_2<=On)||LA130_2==HyphenMinus||LA130_2==RULE_ID||(LA130_2>=RULE_BEGIN && LA130_2<=RULE_END)) ) {
                                alt130=1;
                            }
                            }
                            break;
                        case HyphenMinus:
                            {
                            int LA130_3 = input.LA(2);

                            if ( ((LA130_3>=RULE_COMPLEX_EXPRESSION && LA130_3<=RULE_FLOAT_LITERAL)||LA130_3==RULE_VERSION||LA130_3==RULE_STRING) ) {
                                alt130=1;
                            }
                            else if ( (LA130_3==RULE_ID) ) {
                                int LA130_6 = input.LA(3);

                                if ( (LA130_6==EOF||(LA130_6>=Repository_dispatch && LA130_6<=ContinueOnError_1)||(LA130_6>=Workflow_dispatch && LA130_6<=WorkingDirectory)||(LA130_6>=TimeoutInMinutes && LA130_6<=ContinueOnError)||LA130_6==TimeoutMinutes||LA130_6==ReleaseTrigger||(LA130_6>=Allow_failure && LA130_6<=DeployTrigger)||(LA130_6>=Notifications && LA130_6<=After_script)||(LA130_6>=DefaultsRun && LA130_6<=PathsIgnore)||(LA130_6>=Pull_request && LA130_6<=Workflow_run)||(LA130_6>=Concurrency && LA130_6<=Definitions)||LA130_6==Description||(LA130_6>=DisplayName && LA130_6<=GetPackage)||(LA130_6>=Parameters && LA130_6<=Permission)||(LA130_6>=Powershell && LA130_6<=Artifacts)||(LA130_6>=Condition && LA130_6<=FailFast)||(LA130_6>=Pipelines && LA130_6<=RunPolicy)||(LA130_6>=Schedules && LA130_6<=Workspace)||(LA130_6>=Branches && LA130_6<=Checkout)||(LA130_6>=Defaults && LA130_6<=Download)||(LA130_6>=MaxTime && LA130_6<=PreBuild)||(LA130_6>=Readonly && LA130_6<=Snapshot)||(LA130_6>=Strategy && LA130_6<=Webhooks)||(LA130_6>=Command && LA130_6<=Caches)||(LA130_6>=Docker && LA130_6<=Except)||LA130_6==Inputs||(LA130_6>=Labels && LA130_6<=Policy)||LA130_6==Queued||(LA130_6>=Script && LA130_6<=Image)||(LA130_6>=Paths && LA130_6<=Value)||(LA130_6>=Auth && LA130_6<=Cron)||LA130_6==Name||(LA130_6>=Only && LA130_6<=Pwsh)||(LA130_6>=Step && LA130_6<=With)||(LA130_6>=Env && LA130_6<=Job)||(LA130_6>=Run && LA130_6<=On)||LA130_6==HyphenMinus||LA130_6==RULE_ID||(LA130_6>=RULE_BEGIN && LA130_6<=RULE_END)) ) {
                                    alt130=1;
                                }
                            }
                            }
                            break;
                        case RULE_BEGIN:
                            {
                            int LA130_4 = input.LA(2);

                            if ( (LA130_4==HyphenMinus) ) {
                                alt130=1;
                            }
                            }
                            break;
                    }

                    switch (alt130) {
                        case 1 :
                            // InternalPipelineParser.g:4103:6: ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) )
                            {
                            // InternalPipelineParser.g:4103:6: ( (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues ) )
                            // InternalPipelineParser.g:4104:7: (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues )
                            {
                            // InternalPipelineParser.g:4104:7: (lv_actionValue_5_1= ruleAnyData | lv_actionValue_5_2= ruleHyphenValues )
                            int alt129=2;
                            int LA129_0 = input.LA(1);

                            if ( ((LA129_0>=RULE_COMPLEX_EXPRESSION && LA129_0<=RULE_VERSION)||LA129_0==RULE_STRING) ) {
                                alt129=1;
                            }
                            else if ( (LA129_0==HyphenMinus||LA129_0==RULE_BEGIN) ) {
                                alt129=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 129, 0, input);

                                throw nvae;
                            }
                            switch (alt129) {
                                case 1 :
                                    // InternalPipelineParser.g:4105:8: lv_actionValue_5_1= ruleAnyData
                                    {

                                    								newCompositeNode(grammarAccess.getActionAccess().getActionValueAnyDataParserRuleCall_0_1_1_0_0());
                                    							
                                    pushFollow(FOLLOW_44);
                                    lv_actionValue_5_1=ruleAnyData();

                                    state._fsp--;


                                    								if (current==null) {
                                    									current = createModelElementForParent(grammarAccess.getActionRule());
                                    								}
                                    								set(
                                    									current,
                                    									"actionValue",
                                    									lv_actionValue_5_1,
                                    									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                                    								afterParserOrEnumRuleCall();
                                    							

                                    }
                                    break;
                                case 2 :
                                    // InternalPipelineParser.g:4121:8: lv_actionValue_5_2= ruleHyphenValues
                                    {

                                    								newCompositeNode(grammarAccess.getActionAccess().getActionValueHyphenValuesParserRuleCall_0_1_1_0_1());
                                    							
                                    pushFollow(FOLLOW_44);
                                    lv_actionValue_5_2=ruleHyphenValues();

                                    state._fsp--;


                                    								if (current==null) {
                                    									current = createModelElementForParent(grammarAccess.getActionRule());
                                    								}
                                    								set(
                                    									current,
                                    									"actionValue",
                                    									lv_actionValue_5_2,
                                    									"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                                    								afterParserOrEnumRuleCall();
                                    							

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:4141:3: (this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==RULE_BEGIN) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // InternalPipelineParser.g:4142:4: this_BEGIN_6= RULE_BEGIN ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )* this_END_8= RULE_END
                    {
                    this_BEGIN_6=(Token)match(input,RULE_BEGIN,FOLLOW_85); 

                    				newLeafNode(this_BEGIN_6, grammarAccess.getActionAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:4146:4: ( ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) ) )*
                    loop133:
                    do {
                        int alt133=2;
                        int LA133_0 = input.LA(1);

                        if ( ((LA133_0>=Repository_dispatch && LA133_0<=ContinueOnError_1)||(LA133_0>=Workflow_dispatch && LA133_0<=WorkingDirectory)||(LA133_0>=TimeoutInMinutes && LA133_0<=ContinueOnError)||LA133_0==TimeoutMinutes||LA133_0==ReleaseTrigger||(LA133_0>=Allow_failure && LA133_0<=DeployTrigger)||(LA133_0>=Notifications && LA133_0<=After_script)||(LA133_0>=DefaultsRun && LA133_0<=PathsIgnore)||(LA133_0>=Pull_request && LA133_0<=Workflow_run)||(LA133_0>=Concurrency && LA133_0<=Definitions)||LA133_0==Description||(LA133_0>=DisplayName && LA133_0<=GetPackage)||(LA133_0>=Parameters && LA133_0<=Permission)||(LA133_0>=Powershell && LA133_0<=Artifacts)||(LA133_0>=Condition && LA133_0<=FailFast)||(LA133_0>=Pipelines && LA133_0<=RunPolicy)||(LA133_0>=Schedules && LA133_0<=Workspace)||(LA133_0>=Branches && LA133_0<=Checkout)||(LA133_0>=Defaults && LA133_0<=Download)||(LA133_0>=MaxTime && LA133_0<=PreBuild)||(LA133_0>=Readonly && LA133_0<=Snapshot)||(LA133_0>=Strategy && LA133_0<=Webhooks)||(LA133_0>=Command && LA133_0<=Caches)||(LA133_0>=Docker && LA133_0<=Except)||LA133_0==Inputs||(LA133_0>=Labels && LA133_0<=Policy)||LA133_0==Queued||(LA133_0>=Script && LA133_0<=Image)||(LA133_0>=Paths && LA133_0<=Value)||(LA133_0>=Auth && LA133_0<=Cron)||LA133_0==Name||(LA133_0>=Only && LA133_0<=Pwsh)||(LA133_0>=Step && LA133_0<=With)||(LA133_0>=Env && LA133_0<=Job)||(LA133_0>=Run && LA133_0<=On)||LA133_0==RULE_ID) ) {
                            alt133=1;
                        }


                        switch (alt133) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4147:5: ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) )
                    	    {
                    	    // InternalPipelineParser.g:4147:5: ( (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript ) )
                    	    // InternalPipelineParser.g:4148:6: (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript )
                    	    {
                    	    // InternalPipelineParser.g:4148:6: (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript )
                    	    int alt132=2;
                    	    alt132 = dfa132.predict(input);
                    	    switch (alt132) {
                    	        case 1 :
                    	            // InternalPipelineParser.g:4149:7: lv_subSteps_7_1= ruleAction
                    	            {

                    	            							newCompositeNode(grammarAccess.getActionAccess().getSubStepsActionParserRuleCall_1_1_0_0());
                    	            						
                    	            pushFollow(FOLLOW_85);
                    	            lv_subSteps_7_1=ruleAction();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getActionRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_7_1,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Action");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;
                    	        case 2 :
                    	            // InternalPipelineParser.g:4165:7: lv_subSteps_7_2= ruleScript
                    	            {

                    	            							newCompositeNode(grammarAccess.getActionAccess().getSubStepsScriptParserRuleCall_1_1_0_1());
                    	            						
                    	            pushFollow(FOLLOW_85);
                    	            lv_subSteps_7_2=ruleScript();

                    	            state._fsp--;


                    	            							if (current==null) {
                    	            								current = createModelElementForParent(grammarAccess.getActionRule());
                    	            							}
                    	            							add(
                    	            								current,
                    	            								"subSteps",
                    	            								lv_subSteps_7_2,
                    	            								"ca.mcgill.devops.pipeline.Pipeline.Script");
                    	            							afterParserOrEnumRuleCall();
                    	            						

                    	            }
                    	            break;

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop133;
                        }
                    } while (true);

                    this_END_8=(Token)match(input,RULE_END,FOLLOW_2); 

                    				newLeafNode(this_END_8, grammarAccess.getActionAccess().getENDTerminalRuleCall_1_2());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAction"


    // $ANTLR start "entryRuleParameterValue"
    // InternalPipelineParser.g:4192:1: entryRuleParameterValue returns [EObject current=null] : iv_ruleParameterValue= ruleParameterValue EOF ;
    public final EObject entryRuleParameterValue() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleParameterValue = null;


        try {
            // InternalPipelineParser.g:4192:55: (iv_ruleParameterValue= ruleParameterValue EOF )
            // InternalPipelineParser.g:4193:2: iv_ruleParameterValue= ruleParameterValue EOF
            {
             newCompositeNode(grammarAccess.getParameterValueRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleParameterValue=ruleParameterValue();

            state._fsp--;

             current =iv_ruleParameterValue; 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleParameterValue"


    // $ANTLR start "ruleParameterValue"
    // InternalPipelineParser.g:4199:1: ruleParameterValue returns [EObject current=null] : ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) ) ) ;
    public final EObject ruleParameterValue() throws RecognitionException {
        EObject current = null;

        Token lv_otherName_1_1=null;
        Token lv_otherName_1_2=null;
        Token otherlv_2=null;
        Token this_BEGIN_4=null;
        Token otherlv_5=null;
        Token this_END_7=null;
        Token this_BEGIN_8=null;
        Token otherlv_9=null;
        Token this_END_11=null;
        Token otherlv_12=null;
        Enumerator lv_name_0_0 = null;

        AntlrDatatypeRuleToken lv_value_3_1 = null;

        AntlrDatatypeRuleToken lv_value_3_2 = null;

        AntlrDatatypeRuleToken lv_value_3_3 = null;

        EObject lv_subParameters_6_0 = null;

        EObject lv_subParameters_10_0 = null;

        EObject lv_subParameters_13_0 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4205:2: ( ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) ) ) )
            // InternalPipelineParser.g:4206:2: ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) ) )
            {
            // InternalPipelineParser.g:4206:2: ( ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) ) )
            // InternalPipelineParser.g:4207:3: ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) ) ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) )
            {
            // InternalPipelineParser.g:4207:3: ( ( (lv_name_0_0= rulePipelineKeyword ) ) | ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon ) )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( ((LA136_0>=Repository_dispatch && LA136_0<=ContinueOnError_1)||(LA136_0>=Workflow_dispatch && LA136_0<=WorkingDirectory)||(LA136_0>=TimeoutInMinutes && LA136_0<=ContinueOnError)||LA136_0==TimeoutMinutes||LA136_0==ReleaseTrigger||(LA136_0>=Allow_failure && LA136_0<=DeployTrigger)||(LA136_0>=Notifications && LA136_0<=After_script)||(LA136_0>=DefaultsRun && LA136_0<=PathsIgnore)||(LA136_0>=Pull_request && LA136_0<=Workflow_run)||(LA136_0>=Concurrency && LA136_0<=Definitions)||LA136_0==Description||(LA136_0>=DisplayName && LA136_0<=GetPackage)||(LA136_0>=Parameters && LA136_0<=Permission)||(LA136_0>=Powershell && LA136_0<=Artifacts)||(LA136_0>=Condition && LA136_0<=FailFast)||(LA136_0>=Pipelines && LA136_0<=RunPolicy)||(LA136_0>=Schedules && LA136_0<=Workspace)||(LA136_0>=Branches && LA136_0<=Checkout)||(LA136_0>=Defaults && LA136_0<=Download)||(LA136_0>=MaxTime && LA136_0<=PreBuild)||(LA136_0>=Readonly && LA136_0<=Snapshot)||(LA136_0>=Strategy && LA136_0<=Webhooks)||(LA136_0>=Command && LA136_0<=Caches)||(LA136_0>=Docker && LA136_0<=Except)||LA136_0==Inputs||(LA136_0>=Labels && LA136_0<=Policy)||LA136_0==Queued||(LA136_0>=Script && LA136_0<=Image)||(LA136_0>=Paths && LA136_0<=Value)||(LA136_0>=Auth && LA136_0<=Cron)||LA136_0==Name||(LA136_0>=Only && LA136_0<=Pwsh)||(LA136_0>=Step && LA136_0<=With)||(LA136_0>=Env && LA136_0<=Job)||(LA136_0>=Run && LA136_0<=On)) ) {
                alt136=1;
            }
            else if ( (LA136_0==RULE_COMPLEX_EXPRESSION||LA136_0==RULE_ID) ) {
                alt136=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // InternalPipelineParser.g:4208:4: ( (lv_name_0_0= rulePipelineKeyword ) )
                    {
                    // InternalPipelineParser.g:4208:4: ( (lv_name_0_0= rulePipelineKeyword ) )
                    // InternalPipelineParser.g:4209:5: (lv_name_0_0= rulePipelineKeyword )
                    {
                    // InternalPipelineParser.g:4209:5: (lv_name_0_0= rulePipelineKeyword )
                    // InternalPipelineParser.g:4210:6: lv_name_0_0= rulePipelineKeyword
                    {

                    						newCompositeNode(grammarAccess.getParameterValueAccess().getNamePipelineKeywordEnumRuleCall_0_0_0());
                    					
                    pushFollow(FOLLOW_87);
                    lv_name_0_0=rulePipelineKeyword();

                    state._fsp--;


                    						if (current==null) {
                    							current = createModelElementForParent(grammarAccess.getParameterValueRule());
                    						}
                    						set(
                    							current,
                    							"name",
                    							lv_name_0_0,
                    							"ca.mcgill.devops.pipeline.Pipeline.PipelineKeyword");
                    						afterParserOrEnumRuleCall();
                    					

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4228:4: ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon )
                    {
                    // InternalPipelineParser.g:4228:4: ( ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon )
                    // InternalPipelineParser.g:4229:5: ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) ) otherlv_2= Colon
                    {
                    // InternalPipelineParser.g:4229:5: ( ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) ) )
                    // InternalPipelineParser.g:4230:6: ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) )
                    {
                    // InternalPipelineParser.g:4230:6: ( (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION ) )
                    // InternalPipelineParser.g:4231:7: (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION )
                    {
                    // InternalPipelineParser.g:4231:7: (lv_otherName_1_1= RULE_ID | lv_otherName_1_2= RULE_COMPLEX_EXPRESSION )
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==RULE_ID) ) {
                        alt135=1;
                    }
                    else if ( (LA135_0==RULE_COMPLEX_EXPRESSION) ) {
                        alt135=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 0, input);

                        throw nvae;
                    }
                    switch (alt135) {
                        case 1 :
                            // InternalPipelineParser.g:4232:8: lv_otherName_1_1= RULE_ID
                            {
                            lv_otherName_1_1=(Token)match(input,RULE_ID,FOLLOW_40); 

                            								newLeafNode(lv_otherName_1_1, grammarAccess.getParameterValueAccess().getOtherNameIDTerminalRuleCall_0_1_0_0_0());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getParameterValueRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"otherName",
                            									lv_otherName_1_1,
                            									"ca.mcgill.devops.pipeline.Pipeline.ID");
                            							

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:4247:8: lv_otherName_1_2= RULE_COMPLEX_EXPRESSION
                            {
                            lv_otherName_1_2=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_40); 

                            								newLeafNode(lv_otherName_1_2, grammarAccess.getParameterValueAccess().getOtherNameCOMPLEX_EXPRESSIONTerminalRuleCall_0_1_0_0_1());
                            							

                            								if (current==null) {
                            									current = createModelElement(grammarAccess.getParameterValueRule());
                            								}
                            								setWithLastConsumed(
                            									current,
                            									"otherName",
                            									lv_otherName_1_2,
                            									"ca.mcgill.devops.pipeline.Pipeline.COMPLEX_EXPRESSION");
                            							

                            }
                            break;

                    }


                    }


                    }

                    otherlv_2=(Token)match(input,Colon,FOLLOW_87); 

                    					newLeafNode(otherlv_2, grammarAccess.getParameterValueAccess().getColonKeyword_0_1_1());
                    				

                    }


                    }
                    break;

            }

            // InternalPipelineParser.g:4270:3: ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) )
            int alt145=2;
            alt145 = dfa145.predict(input);
            switch (alt145) {
                case 1 :
                    // InternalPipelineParser.g:4271:4: ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? )
                    {
                    // InternalPipelineParser.g:4271:4: ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? )
                    // InternalPipelineParser.g:4272:5: ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )?
                    {
                    // InternalPipelineParser.g:4272:5: ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) )
                    // InternalPipelineParser.g:4273:6: ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) )
                    {
                    // InternalPipelineParser.g:4273:6: ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) )
                    // InternalPipelineParser.g:4274:7: (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues )
                    {
                    // InternalPipelineParser.g:4274:7: (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues )
                    int alt137=3;
                    switch ( input.LA(1) ) {
                    case RULE_COMPLEX_EXPRESSION:
                    case RULE_HEX_INT:
                    case RULE_INT:
                    case RULE_FLOAT_LITERAL:
                    case RULE_ID:
                    case RULE_VERSION:
                    case RULE_STRING:
                        {
                        alt137=1;
                        }
                        break;
                    case LeftSquareBracket:
                        {
                        alt137=2;
                        }
                        break;
                    case HyphenMinus:
                    case RULE_BEGIN:
                        {
                        alt137=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 137, 0, input);

                        throw nvae;
                    }

                    switch (alt137) {
                        case 1 :
                            // InternalPipelineParser.g:4275:8: lv_value_3_1= ruleAnyData
                            {

                            								newCompositeNode(grammarAccess.getParameterValueAccess().getValueAnyDataParserRuleCall_1_0_0_0_0());
                            							
                            pushFollow(FOLLOW_44);
                            lv_value_3_1=ruleAnyData();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            								}
                            								set(
                            									current,
                            									"value",
                            									lv_value_3_1,
                            									"ca.mcgill.devops.pipeline.Pipeline.AnyData");
                            								afterParserOrEnumRuleCall();
                            							

                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:4291:8: lv_value_3_2= ruleArrayList
                            {

                            								newCompositeNode(grammarAccess.getParameterValueAccess().getValueArrayListParserRuleCall_1_0_0_0_1());
                            							
                            pushFollow(FOLLOW_44);
                            lv_value_3_2=ruleArrayList();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            								}
                            								set(
                            									current,
                            									"value",
                            									lv_value_3_2,
                            									"ca.mcgill.devops.pipeline.Pipeline.ArrayList");
                            								afterParserOrEnumRuleCall();
                            							

                            }
                            break;
                        case 3 :
                            // InternalPipelineParser.g:4307:8: lv_value_3_3= ruleHyphenValues
                            {

                            								newCompositeNode(grammarAccess.getParameterValueAccess().getValueHyphenValuesParserRuleCall_1_0_0_0_2());
                            							
                            pushFollow(FOLLOW_44);
                            lv_value_3_3=ruleHyphenValues();

                            state._fsp--;


                            								if (current==null) {
                            									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            								}
                            								set(
                            									current,
                            									"value",
                            									lv_value_3_3,
                            									"ca.mcgill.devops.pipeline.Pipeline.HyphenValues");
                            								afterParserOrEnumRuleCall();
                            							

                            }
                            break;

                    }


                    }


                    }

                    // InternalPipelineParser.g:4325:5: (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==RULE_BEGIN) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // InternalPipelineParser.g:4326:6: this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END
                            {
                            this_BEGIN_4=(Token)match(input,RULE_BEGIN,FOLLOW_88); 

                            						newLeafNode(this_BEGIN_4, grammarAccess.getParameterValueAccess().getBEGINTerminalRuleCall_1_0_1_0());
                            					
                            // InternalPipelineParser.g:4330:6: ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )*
                            loop139:
                            do {
                                int alt139=2;
                                int LA139_0 = input.LA(1);

                                if ( ((LA139_0>=Repository_dispatch && LA139_0<=ContinueOnError_1)||(LA139_0>=Workflow_dispatch && LA139_0<=WorkingDirectory)||(LA139_0>=TimeoutInMinutes && LA139_0<=ContinueOnError)||LA139_0==TimeoutMinutes||LA139_0==ReleaseTrigger||(LA139_0>=Allow_failure && LA139_0<=DeployTrigger)||(LA139_0>=Notifications && LA139_0<=After_script)||(LA139_0>=DefaultsRun && LA139_0<=PathsIgnore)||(LA139_0>=Pull_request && LA139_0<=Workflow_run)||(LA139_0>=Concurrency && LA139_0<=Definitions)||LA139_0==Description||(LA139_0>=DisplayName && LA139_0<=GetPackage)||(LA139_0>=Parameters && LA139_0<=Permission)||(LA139_0>=Powershell && LA139_0<=Artifacts)||(LA139_0>=Condition && LA139_0<=FailFast)||(LA139_0>=Pipelines && LA139_0<=RunPolicy)||(LA139_0>=Schedules && LA139_0<=Workspace)||(LA139_0>=Branches && LA139_0<=Checkout)||(LA139_0>=Defaults && LA139_0<=Download)||(LA139_0>=MaxTime && LA139_0<=PreBuild)||(LA139_0>=Readonly && LA139_0<=Snapshot)||(LA139_0>=Strategy && LA139_0<=Webhooks)||(LA139_0>=Command && LA139_0<=Caches)||(LA139_0>=Docker && LA139_0<=Except)||LA139_0==Inputs||(LA139_0>=Labels && LA139_0<=Policy)||LA139_0==Queued||(LA139_0>=Script && LA139_0<=Image)||(LA139_0>=Paths && LA139_0<=Value)||(LA139_0>=Auth && LA139_0<=Cron)||LA139_0==Name||(LA139_0>=Only && LA139_0<=Pwsh)||(LA139_0>=Step && LA139_0<=With)||(LA139_0>=Env && LA139_0<=Job)||(LA139_0>=Run && LA139_0<=On)||LA139_0==HyphenMinus||LA139_0==RULE_COMPLEX_EXPRESSION||LA139_0==RULE_ID) ) {
                                    alt139=1;
                                }


                                switch (alt139) {
                            	case 1 :
                            	    // InternalPipelineParser.g:4331:7: (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) )
                            	    {
                            	    // InternalPipelineParser.g:4331:7: (otherlv_5= HyphenMinus )?
                            	    int alt138=2;
                            	    int LA138_0 = input.LA(1);

                            	    if ( (LA138_0==HyphenMinus) ) {
                            	        alt138=1;
                            	    }
                            	    switch (alt138) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:4332:8: otherlv_5= HyphenMinus
                            	            {
                            	            otherlv_5=(Token)match(input,HyphenMinus,FOLLOW_38); 

                            	            								newLeafNode(otherlv_5, grammarAccess.getParameterValueAccess().getHyphenMinusKeyword_1_0_1_1_0());
                            	            							

                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:4337:7: ( (lv_subParameters_6_0= ruleParameterValue ) )
                            	    // InternalPipelineParser.g:4338:8: (lv_subParameters_6_0= ruleParameterValue )
                            	    {
                            	    // InternalPipelineParser.g:4338:8: (lv_subParameters_6_0= ruleParameterValue )
                            	    // InternalPipelineParser.g:4339:9: lv_subParameters_6_0= ruleParameterValue
                            	    {

                            	    									newCompositeNode(grammarAccess.getParameterValueAccess().getSubParametersParameterValueParserRuleCall_1_0_1_1_1_0());
                            	    								
                            	    pushFollow(FOLLOW_88);
                            	    lv_subParameters_6_0=ruleParameterValue();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"subParameters",
                            	    										lv_subParameters_6_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop139;
                                }
                            } while (true);

                            this_END_7=(Token)match(input,RULE_END,FOLLOW_2); 

                            						newLeafNode(this_END_7, grammarAccess.getParameterValueAccess().getENDTerminalRuleCall_1_0_1_2());
                            					

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4364:4: ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* )
                    {
                    // InternalPipelineParser.g:4364:4: ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* )
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==RULE_BEGIN) ) {
                        alt144=1;
                    }
                    else if ( (LA144_0==EOF||(LA144_0>=Pull_request_review_comment && LA144_0<=Pull_request_target)||(LA144_0>=Repository_dispatch && LA144_0<=Registry_package)||(LA144_0>=TimeoutInMinutes && LA144_0<=ContinueOnError)||(LA144_0>=TimeoutMinutes && LA144_0<=After_script)||(LA144_0>=DefaultsRun && LA144_0<=Definitions)||LA144_0==Description||(LA144_0>=DisplayName && LA144_0<=Workspace)||(LA144_0>=Branches && LA144_0<=Checkout)||(LA144_0>=Defaults && LA144_0<=Download)||(LA144_0>=MaxTime && LA144_0<=PreBuild)||(LA144_0>=Readonly && LA144_0<=Snapshot)||(LA144_0>=Strategy && LA144_0<=Webhooks)||(LA144_0>=Changes && LA144_0<=Caches)||(LA144_0>=Create && LA144_0<=Watch)||(LA144_0>=Auth && LA144_0<=Name)||(LA144_0>=Only && LA144_0<=Pwsh)||(LA144_0>=Step && LA144_0<=With)||(LA144_0>=Env && LA144_0<=None)||(LA144_0>=Run && LA144_0<=Pr)||LA144_0==HyphenMinus||LA144_0==RULE_COMPLEX_EXPRESSION||LA144_0==RULE_ID||LA144_0==RULE_END) ) {
                        alt144=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);

                        throw nvae;
                    }
                    switch (alt144) {
                        case 1 :
                            // InternalPipelineParser.g:4365:5: (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END )
                            {
                            // InternalPipelineParser.g:4365:5: (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END )
                            // InternalPipelineParser.g:4366:6: this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END
                            {
                            this_BEGIN_8=(Token)match(input,RULE_BEGIN,FOLLOW_88); 

                            						newLeafNode(this_BEGIN_8, grammarAccess.getParameterValueAccess().getBEGINTerminalRuleCall_1_1_0_0());
                            					
                            // InternalPipelineParser.g:4370:6: ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )*
                            loop142:
                            do {
                                int alt142=2;
                                int LA142_0 = input.LA(1);

                                if ( ((LA142_0>=Repository_dispatch && LA142_0<=ContinueOnError_1)||(LA142_0>=Workflow_dispatch && LA142_0<=WorkingDirectory)||(LA142_0>=TimeoutInMinutes && LA142_0<=ContinueOnError)||LA142_0==TimeoutMinutes||LA142_0==ReleaseTrigger||(LA142_0>=Allow_failure && LA142_0<=DeployTrigger)||(LA142_0>=Notifications && LA142_0<=After_script)||(LA142_0>=DefaultsRun && LA142_0<=PathsIgnore)||(LA142_0>=Pull_request && LA142_0<=Workflow_run)||(LA142_0>=Concurrency && LA142_0<=Definitions)||LA142_0==Description||(LA142_0>=DisplayName && LA142_0<=GetPackage)||(LA142_0>=Parameters && LA142_0<=Permission)||(LA142_0>=Powershell && LA142_0<=Artifacts)||(LA142_0>=Condition && LA142_0<=FailFast)||(LA142_0>=Pipelines && LA142_0<=RunPolicy)||(LA142_0>=Schedules && LA142_0<=Workspace)||(LA142_0>=Branches && LA142_0<=Checkout)||(LA142_0>=Defaults && LA142_0<=Download)||(LA142_0>=MaxTime && LA142_0<=PreBuild)||(LA142_0>=Readonly && LA142_0<=Snapshot)||(LA142_0>=Strategy && LA142_0<=Webhooks)||(LA142_0>=Command && LA142_0<=Caches)||(LA142_0>=Docker && LA142_0<=Except)||LA142_0==Inputs||(LA142_0>=Labels && LA142_0<=Policy)||LA142_0==Queued||(LA142_0>=Script && LA142_0<=Image)||(LA142_0>=Paths && LA142_0<=Value)||(LA142_0>=Auth && LA142_0<=Cron)||LA142_0==Name||(LA142_0>=Only && LA142_0<=Pwsh)||(LA142_0>=Step && LA142_0<=With)||(LA142_0>=Env && LA142_0<=Job)||(LA142_0>=Run && LA142_0<=On)||LA142_0==HyphenMinus||LA142_0==RULE_COMPLEX_EXPRESSION||LA142_0==RULE_ID) ) {
                                    alt142=1;
                                }


                                switch (alt142) {
                            	case 1 :
                            	    // InternalPipelineParser.g:4371:7: (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) )
                            	    {
                            	    // InternalPipelineParser.g:4371:7: (otherlv_9= HyphenMinus )?
                            	    int alt141=2;
                            	    int LA141_0 = input.LA(1);

                            	    if ( (LA141_0==HyphenMinus) ) {
                            	        alt141=1;
                            	    }
                            	    switch (alt141) {
                            	        case 1 :
                            	            // InternalPipelineParser.g:4372:8: otherlv_9= HyphenMinus
                            	            {
                            	            otherlv_9=(Token)match(input,HyphenMinus,FOLLOW_38); 

                            	            								newLeafNode(otherlv_9, grammarAccess.getParameterValueAccess().getHyphenMinusKeyword_1_1_0_1_0());
                            	            							

                            	            }
                            	            break;

                            	    }

                            	    // InternalPipelineParser.g:4377:7: ( (lv_subParameters_10_0= ruleParameterValue ) )
                            	    // InternalPipelineParser.g:4378:8: (lv_subParameters_10_0= ruleParameterValue )
                            	    {
                            	    // InternalPipelineParser.g:4378:8: (lv_subParameters_10_0= ruleParameterValue )
                            	    // InternalPipelineParser.g:4379:9: lv_subParameters_10_0= ruleParameterValue
                            	    {

                            	    									newCompositeNode(grammarAccess.getParameterValueAccess().getSubParametersParameterValueParserRuleCall_1_1_0_1_1_0());
                            	    								
                            	    pushFollow(FOLLOW_88);
                            	    lv_subParameters_10_0=ruleParameterValue();

                            	    state._fsp--;


                            	    									if (current==null) {
                            	    										current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            	    									}
                            	    									add(
                            	    										current,
                            	    										"subParameters",
                            	    										lv_subParameters_10_0,
                            	    										"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                            	    									afterParserOrEnumRuleCall();
                            	    								

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop142;
                                }
                            } while (true);

                            this_END_11=(Token)match(input,RULE_END,FOLLOW_2); 

                            						newLeafNode(this_END_11, grammarAccess.getParameterValueAccess().getENDTerminalRuleCall_1_1_0_2());
                            					

                            }


                            }
                            break;
                        case 2 :
                            // InternalPipelineParser.g:4403:5: (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )*
                            {
                            // InternalPipelineParser.g:4403:5: (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )*
                            loop143:
                            do {
                                int alt143=2;
                                int LA143_0 = input.LA(1);

                                if ( (LA143_0==HyphenMinus) ) {
                                    alt143=1;
                                }


                                switch (alt143) {
                            	case 1 :
                            	    // InternalPipelineParser.g:4404:6: otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) )
                            	    {
                            	    otherlv_12=(Token)match(input,HyphenMinus,FOLLOW_38); 

                            	    						newLeafNode(otherlv_12, grammarAccess.getParameterValueAccess().getHyphenMinusKeyword_1_1_1_0());
                            	    					
                            	    // InternalPipelineParser.g:4408:6: ( (lv_subParameters_13_0= ruleParameterValue ) )
                            	    // InternalPipelineParser.g:4409:7: (lv_subParameters_13_0= ruleParameterValue )
                            	    {
                            	    // InternalPipelineParser.g:4409:7: (lv_subParameters_13_0= ruleParameterValue )
                            	    // InternalPipelineParser.g:4410:8: lv_subParameters_13_0= ruleParameterValue
                            	    {

                            	    								newCompositeNode(grammarAccess.getParameterValueAccess().getSubParametersParameterValueParserRuleCall_1_1_1_1_0());
                            	    							
                            	    pushFollow(FOLLOW_12);
                            	    lv_subParameters_13_0=ruleParameterValue();

                            	    state._fsp--;


                            	    								if (current==null) {
                            	    									current = createModelElementForParent(grammarAccess.getParameterValueRule());
                            	    								}
                            	    								add(
                            	    									current,
                            	    									"subParameters",
                            	    									lv_subParameters_13_0,
                            	    									"ca.mcgill.devops.pipeline.Pipeline.ParameterValue");
                            	    								afterParserOrEnumRuleCall();
                            	    							

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop143;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleParameterValue"


    // $ANTLR start "entryRuleAnyData"
    // InternalPipelineParser.g:4434:1: entryRuleAnyData returns [String current=null] : iv_ruleAnyData= ruleAnyData EOF ;
    public final String entryRuleAnyData() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleAnyData = null;


        try {
            // InternalPipelineParser.g:4434:47: (iv_ruleAnyData= ruleAnyData EOF )
            // InternalPipelineParser.g:4435:2: iv_ruleAnyData= ruleAnyData EOF
            {
             newCompositeNode(grammarAccess.getAnyDataRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleAnyData=ruleAnyData();

            state._fsp--;

             current =iv_ruleAnyData.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleAnyData"


    // $ANTLR start "ruleAnyData"
    // InternalPipelineParser.g:4441:1: ruleAnyData returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT ) ;
    public final AntlrDatatypeRuleToken ruleAnyData() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_STRING_0=null;
        Token this_COMPLEX_EXPRESSION_4=null;
        Token this_VERSION_5=null;
        Token this_HEX_INT_6=null;
        AntlrDatatypeRuleToken this_Number_1 = null;

        AntlrDatatypeRuleToken this_FloatingPoint_2 = null;

        AntlrDatatypeRuleToken this_SimpleWord_3 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4447:2: ( (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT ) )
            // InternalPipelineParser.g:4448:2: (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT )
            {
            // InternalPipelineParser.g:4448:2: (this_STRING_0= RULE_STRING | this_Number_1= ruleNumber | this_FloatingPoint_2= ruleFloatingPoint | this_SimpleWord_3= ruleSimpleWord | this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION | this_VERSION_5= RULE_VERSION | this_HEX_INT_6= RULE_HEX_INT )
            int alt146=7;
            switch ( input.LA(1) ) {
            case RULE_STRING:
                {
                alt146=1;
                }
                break;
            case RULE_INT:
                {
                alt146=2;
                }
                break;
            case RULE_FLOAT_LITERAL:
                {
                alt146=3;
                }
                break;
            case RULE_ID:
                {
                alt146=4;
                }
                break;
            case RULE_COMPLEX_EXPRESSION:
                {
                alt146=5;
                }
                break;
            case RULE_VERSION:
                {
                alt146=6;
                }
                break;
            case RULE_HEX_INT:
                {
                alt146=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // InternalPipelineParser.g:4449:3: this_STRING_0= RULE_STRING
                    {
                    this_STRING_0=(Token)match(input,RULE_STRING,FOLLOW_2); 

                    			current.merge(this_STRING_0);
                    		

                    			newLeafNode(this_STRING_0, grammarAccess.getAnyDataAccess().getSTRINGTerminalRuleCall_0());
                    		

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4457:3: this_Number_1= ruleNumber
                    {

                    			newCompositeNode(grammarAccess.getAnyDataAccess().getNumberParserRuleCall_1());
                    		
                    pushFollow(FOLLOW_2);
                    this_Number_1=ruleNumber();

                    state._fsp--;


                    			current.merge(this_Number_1);
                    		

                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4468:3: this_FloatingPoint_2= ruleFloatingPoint
                    {

                    			newCompositeNode(grammarAccess.getAnyDataAccess().getFloatingPointParserRuleCall_2());
                    		
                    pushFollow(FOLLOW_2);
                    this_FloatingPoint_2=ruleFloatingPoint();

                    state._fsp--;


                    			current.merge(this_FloatingPoint_2);
                    		

                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:4479:3: this_SimpleWord_3= ruleSimpleWord
                    {

                    			newCompositeNode(grammarAccess.getAnyDataAccess().getSimpleWordParserRuleCall_3());
                    		
                    pushFollow(FOLLOW_2);
                    this_SimpleWord_3=ruleSimpleWord();

                    state._fsp--;


                    			current.merge(this_SimpleWord_3);
                    		

                    			afterParserOrEnumRuleCall();
                    		

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:4490:3: this_COMPLEX_EXPRESSION_4= RULE_COMPLEX_EXPRESSION
                    {
                    this_COMPLEX_EXPRESSION_4=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_2); 

                    			current.merge(this_COMPLEX_EXPRESSION_4);
                    		

                    			newLeafNode(this_COMPLEX_EXPRESSION_4, grammarAccess.getAnyDataAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_4());
                    		

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:4498:3: this_VERSION_5= RULE_VERSION
                    {
                    this_VERSION_5=(Token)match(input,RULE_VERSION,FOLLOW_2); 

                    			current.merge(this_VERSION_5);
                    		

                    			newLeafNode(this_VERSION_5, grammarAccess.getAnyDataAccess().getVERSIONTerminalRuleCall_5());
                    		

                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:4506:3: this_HEX_INT_6= RULE_HEX_INT
                    {
                    this_HEX_INT_6=(Token)match(input,RULE_HEX_INT,FOLLOW_2); 

                    			current.merge(this_HEX_INT_6);
                    		

                    			newLeafNode(this_HEX_INT_6, grammarAccess.getAnyDataAccess().getHEX_INTTerminalRuleCall_6());
                    		

                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleAnyData"


    // $ANTLR start "entryRuleKeyValue"
    // InternalPipelineParser.g:4517:1: entryRuleKeyValue returns [String current=null] : iv_ruleKeyValue= ruleKeyValue EOF ;
    public final String entryRuleKeyValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleKeyValue = null;


        try {
            // InternalPipelineParser.g:4517:48: (iv_ruleKeyValue= ruleKeyValue EOF )
            // InternalPipelineParser.g:4518:2: iv_ruleKeyValue= ruleKeyValue EOF
            {
             newCompositeNode(grammarAccess.getKeyValueRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleKeyValue=ruleKeyValue();

            state._fsp--;

             current =iv_ruleKeyValue.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleKeyValue"


    // $ANTLR start "ruleKeyValue"
    // InternalPipelineParser.g:4524:1: ruleKeyValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) ) ;
    public final AntlrDatatypeRuleToken ruleKeyValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token kw=null;
        AntlrDatatypeRuleToken this_AnyData_2 = null;

        AntlrDatatypeRuleToken this_HyphenValues_3 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4530:2: ( (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) ) )
            // InternalPipelineParser.g:4531:2: (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) )
            {
            // InternalPipelineParser.g:4531:2: (this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues ) )
            // InternalPipelineParser.g:4532:3: this_ID_0= RULE_ID kw= Colon (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues )
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_40); 

            			current.merge(this_ID_0);
            		

            			newLeafNode(this_ID_0, grammarAccess.getKeyValueAccess().getIDTerminalRuleCall_0());
            		
            kw=(Token)match(input,Colon,FOLLOW_33); 

            			current.merge(kw);
            			newLeafNode(kw, grammarAccess.getKeyValueAccess().getColonKeyword_1());
            		
            // InternalPipelineParser.g:4544:3: (this_AnyData_2= ruleAnyData | this_HyphenValues_3= ruleHyphenValues )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( ((LA147_0>=RULE_COMPLEX_EXPRESSION && LA147_0<=RULE_VERSION)||LA147_0==RULE_STRING) ) {
                alt147=1;
            }
            else if ( (LA147_0==HyphenMinus||LA147_0==RULE_BEGIN) ) {
                alt147=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // InternalPipelineParser.g:4545:4: this_AnyData_2= ruleAnyData
                    {

                    				newCompositeNode(grammarAccess.getKeyValueAccess().getAnyDataParserRuleCall_2_0());
                    			
                    pushFollow(FOLLOW_2);
                    this_AnyData_2=ruleAnyData();

                    state._fsp--;


                    				current.merge(this_AnyData_2);
                    			

                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4556:4: this_HyphenValues_3= ruleHyphenValues
                    {

                    				newCompositeNode(grammarAccess.getKeyValueAccess().getHyphenValuesParserRuleCall_2_1());
                    			
                    pushFollow(FOLLOW_2);
                    this_HyphenValues_3=ruleHyphenValues();

                    state._fsp--;


                    				current.merge(this_HyphenValues_3);
                    			

                    				afterParserOrEnumRuleCall();
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleKeyValue"


    // $ANTLR start "entryRuleIndPermissionValue"
    // InternalPipelineParser.g:4571:1: entryRuleIndPermissionValue returns [String current=null] : iv_ruleIndPermissionValue= ruleIndPermissionValue EOF ;
    public final String entryRuleIndPermissionValue() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleIndPermissionValue = null;


        try {
            // InternalPipelineParser.g:4571:58: (iv_ruleIndPermissionValue= ruleIndPermissionValue EOF )
            // InternalPipelineParser.g:4572:2: iv_ruleIndPermissionValue= ruleIndPermissionValue EOF
            {
             newCompositeNode(grammarAccess.getIndPermissionValueRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleIndPermissionValue=ruleIndPermissionValue();

            state._fsp--;

             current =iv_ruleIndPermissionValue.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleIndPermissionValue"


    // $ANTLR start "ruleIndPermissionValue"
    // InternalPipelineParser.g:4578:1: ruleIndPermissionValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) ) ;
    public final AntlrDatatypeRuleToken ruleIndPermissionValue() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4584:2: ( ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) ) )
            // InternalPipelineParser.g:4585:2: ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) )
            {
            // InternalPipelineParser.g:4585:2: ( (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None ) )
            // InternalPipelineParser.g:4586:3: (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses ) (kw= Read | kw= Write | kw= None )
            {
            // InternalPipelineParser.g:4586:3: (kw= Actions | kw= Attestations | kw= Checks | kw= Contents | kw= Deployments | kw= IdToken | kw= Issues | kw= Discussions | kw= Packages | kw= PullRequests | kw= RepositoryProjects | kw= SecurityEvents | kw= Statuses )
            int alt148=13;
            switch ( input.LA(1) ) {
            case Actions:
                {
                alt148=1;
                }
                break;
            case Attestations:
                {
                alt148=2;
                }
                break;
            case Checks:
                {
                alt148=3;
                }
                break;
            case Contents:
                {
                alt148=4;
                }
                break;
            case Deployments:
                {
                alt148=5;
                }
                break;
            case IdToken:
                {
                alt148=6;
                }
                break;
            case Issues:
                {
                alt148=7;
                }
                break;
            case Discussions:
                {
                alt148=8;
                }
                break;
            case Packages:
                {
                alt148=9;
                }
                break;
            case PullRequests:
                {
                alt148=10;
                }
                break;
            case RepositoryProjects:
                {
                alt148=11;
                }
                break;
            case SecurityEvents:
                {
                alt148=12;
                }
                break;
            case Statuses:
                {
                alt148=13;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }

            switch (alt148) {
                case 1 :
                    // InternalPipelineParser.g:4587:4: kw= Actions
                    {
                    kw=(Token)match(input,Actions,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getActionsKeyword_0_0());
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4593:4: kw= Attestations
                    {
                    kw=(Token)match(input,Attestations,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getAttestationsKeyword_0_1());
                    			

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4599:4: kw= Checks
                    {
                    kw=(Token)match(input,Checks,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getChecksKeyword_0_2());
                    			

                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:4605:4: kw= Contents
                    {
                    kw=(Token)match(input,Contents,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getContentsKeyword_0_3());
                    			

                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:4611:4: kw= Deployments
                    {
                    kw=(Token)match(input,Deployments,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getDeploymentsKeyword_0_4());
                    			

                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:4617:4: kw= IdToken
                    {
                    kw=(Token)match(input,IdToken,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getIdTokenKeyword_0_5());
                    			

                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:4623:4: kw= Issues
                    {
                    kw=(Token)match(input,Issues,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getIssuesKeyword_0_6());
                    			

                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:4629:4: kw= Discussions
                    {
                    kw=(Token)match(input,Discussions,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getDiscussionsKeyword_0_7());
                    			

                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:4635:4: kw= Packages
                    {
                    kw=(Token)match(input,Packages,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getPackagesKeyword_0_8());
                    			

                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:4641:4: kw= PullRequests
                    {
                    kw=(Token)match(input,PullRequests,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getPullRequestsKeyword_0_9());
                    			

                    }
                    break;
                case 11 :
                    // InternalPipelineParser.g:4647:4: kw= RepositoryProjects
                    {
                    kw=(Token)match(input,RepositoryProjects,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getRepositoryProjectsKeyword_0_10());
                    			

                    }
                    break;
                case 12 :
                    // InternalPipelineParser.g:4653:4: kw= SecurityEvents
                    {
                    kw=(Token)match(input,SecurityEvents,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getSecurityEventsKeyword_0_11());
                    			

                    }
                    break;
                case 13 :
                    // InternalPipelineParser.g:4659:4: kw= Statuses
                    {
                    kw=(Token)match(input,Statuses,FOLLOW_89); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getStatusesKeyword_0_12());
                    			

                    }
                    break;

            }

            // InternalPipelineParser.g:4665:3: (kw= Read | kw= Write | kw= None )
            int alt149=3;
            switch ( input.LA(1) ) {
            case Read:
                {
                alt149=1;
                }
                break;
            case Write:
                {
                alt149=2;
                }
                break;
            case None:
                {
                alt149=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }

            switch (alt149) {
                case 1 :
                    // InternalPipelineParser.g:4666:4: kw= Read
                    {
                    kw=(Token)match(input,Read,FOLLOW_2); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getReadKeyword_1_0());
                    			

                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4672:4: kw= Write
                    {
                    kw=(Token)match(input,Write,FOLLOW_2); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getWriteKeyword_1_1());
                    			

                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4678:4: kw= None
                    {
                    kw=(Token)match(input,None,FOLLOW_2); 

                    				current.merge(kw);
                    				newLeafNode(kw, grammarAccess.getIndPermissionValueAccess().getNoneKeyword_1_2());
                    			

                    }
                    break;

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleIndPermissionValue"


    // $ANTLR start "entryRuleUnquotedString"
    // InternalPipelineParser.g:4688:1: entryRuleUnquotedString returns [String current=null] : iv_ruleUnquotedString= ruleUnquotedString EOF ;
    public final String entryRuleUnquotedString() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleUnquotedString = null;


        try {
            // InternalPipelineParser.g:4688:54: (iv_ruleUnquotedString= ruleUnquotedString EOF )
            // InternalPipelineParser.g:4689:2: iv_ruleUnquotedString= ruleUnquotedString EOF
            {
             newCompositeNode(grammarAccess.getUnquotedStringRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleUnquotedString=ruleUnquotedString();

            state._fsp--;

             current =iv_ruleUnquotedString.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleUnquotedString"


    // $ANTLR start "ruleUnquotedString"
    // InternalPipelineParser.g:4695:1: ruleUnquotedString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* ) ;
    public final AntlrDatatypeRuleToken ruleUnquotedString() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;
        Token this_ID_1=null;
        Token this_INT_2=null;
        Token this_COMPLEX_EXPRESSION_3=null;
        Token this_VERSION_4=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4701:2: ( (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* ) )
            // InternalPipelineParser.g:4702:2: (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* )
            {
            // InternalPipelineParser.g:4702:2: (this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )* )
            // InternalPipelineParser.g:4703:3: this_ID_0= RULE_ID (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )*
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_90); 

            			current.merge(this_ID_0);
            		

            			newLeafNode(this_ID_0, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_0());
            		
            // InternalPipelineParser.g:4710:3: (this_ID_1= RULE_ID | this_INT_2= RULE_INT | this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION | this_VERSION_4= RULE_VERSION )*
            loop150:
            do {
                int alt150=5;
                switch ( input.LA(1) ) {
                case RULE_ID:
                    {
                    alt150=1;
                    }
                    break;
                case RULE_INT:
                    {
                    alt150=2;
                    }
                    break;
                case RULE_COMPLEX_EXPRESSION:
                    {
                    alt150=3;
                    }
                    break;
                case RULE_VERSION:
                    {
                    alt150=4;
                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // InternalPipelineParser.g:4711:4: this_ID_1= RULE_ID
            	    {
            	    this_ID_1=(Token)match(input,RULE_ID,FOLLOW_90); 

            	    				current.merge(this_ID_1);
            	    			

            	    				newLeafNode(this_ID_1, grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_1_0());
            	    			

            	    }
            	    break;
            	case 2 :
            	    // InternalPipelineParser.g:4719:4: this_INT_2= RULE_INT
            	    {
            	    this_INT_2=(Token)match(input,RULE_INT,FOLLOW_90); 

            	    				current.merge(this_INT_2);
            	    			

            	    				newLeafNode(this_INT_2, grammarAccess.getUnquotedStringAccess().getINTTerminalRuleCall_1_1());
            	    			

            	    }
            	    break;
            	case 3 :
            	    // InternalPipelineParser.g:4727:4: this_COMPLEX_EXPRESSION_3= RULE_COMPLEX_EXPRESSION
            	    {
            	    this_COMPLEX_EXPRESSION_3=(Token)match(input,RULE_COMPLEX_EXPRESSION,FOLLOW_90); 

            	    				current.merge(this_COMPLEX_EXPRESSION_3);
            	    			

            	    				newLeafNode(this_COMPLEX_EXPRESSION_3, grammarAccess.getUnquotedStringAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_1_2());
            	    			

            	    }
            	    break;
            	case 4 :
            	    // InternalPipelineParser.g:4735:4: this_VERSION_4= RULE_VERSION
            	    {
            	    this_VERSION_4=(Token)match(input,RULE_VERSION,FOLLOW_90); 

            	    				current.merge(this_VERSION_4);
            	    			

            	    				newLeafNode(this_VERSION_4, grammarAccess.getUnquotedStringAccess().getVERSIONTerminalRuleCall_1_3());
            	    			

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleUnquotedString"


    // $ANTLR start "entryRuleHyphenValues"
    // InternalPipelineParser.g:4747:1: entryRuleHyphenValues returns [String current=null] : iv_ruleHyphenValues= ruleHyphenValues EOF ;
    public final String entryRuleHyphenValues() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleHyphenValues = null;


        try {
            // InternalPipelineParser.g:4747:52: (iv_ruleHyphenValues= ruleHyphenValues EOF )
            // InternalPipelineParser.g:4748:2: iv_ruleHyphenValues= ruleHyphenValues EOF
            {
             newCompositeNode(grammarAccess.getHyphenValuesRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleHyphenValues=ruleHyphenValues();

            state._fsp--;

             current =iv_ruleHyphenValues.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleHyphenValues"


    // $ANTLR start "ruleHyphenValues"
    // InternalPipelineParser.g:4754:1: ruleHyphenValues returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) ) ;
    public final AntlrDatatypeRuleToken ruleHyphenValues() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        Token this_BEGIN_2=null;
        Token this_END_5=null;
        AntlrDatatypeRuleToken this_AnyData_1 = null;

        AntlrDatatypeRuleToken this_AnyData_4 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4760:2: ( ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) ) )
            // InternalPipelineParser.g:4761:2: ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) )
            {
            // InternalPipelineParser.g:4761:2: ( (kw= HyphenMinus this_AnyData_1= ruleAnyData )+ | (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END ) )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==HyphenMinus) ) {
                alt153=1;
            }
            else if ( (LA153_0==RULE_BEGIN) ) {
                alt153=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }
            switch (alt153) {
                case 1 :
                    // InternalPipelineParser.g:4762:3: (kw= HyphenMinus this_AnyData_1= ruleAnyData )+
                    {
                    // InternalPipelineParser.g:4762:3: (kw= HyphenMinus this_AnyData_1= ruleAnyData )+
                    int cnt151=0;
                    loop151:
                    do {
                        int alt151=2;
                        int LA151_0 = input.LA(1);

                        if ( (LA151_0==HyphenMinus) ) {
                            alt151=1;
                        }


                        switch (alt151) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4763:4: kw= HyphenMinus this_AnyData_1= ruleAnyData
                    	    {
                    	    kw=(Token)match(input,HyphenMinus,FOLLOW_43); 

                    	    				current.merge(kw);
                    	    				newLeafNode(kw, grammarAccess.getHyphenValuesAccess().getHyphenMinusKeyword_0_0());
                    	    			

                    	    				newCompositeNode(grammarAccess.getHyphenValuesAccess().getAnyDataParserRuleCall_0_1());
                    	    			
                    	    pushFollow(FOLLOW_12);
                    	    this_AnyData_1=ruleAnyData();

                    	    state._fsp--;


                    	    				current.merge(this_AnyData_1);
                    	    			

                    	    				afterParserOrEnumRuleCall();
                    	    			

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt151 >= 1 ) break loop151;
                                EarlyExitException eee =
                                    new EarlyExitException(151, input);
                                throw eee;
                        }
                        cnt151++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4780:3: (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END )
                    {
                    // InternalPipelineParser.g:4780:3: (this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END )
                    // InternalPipelineParser.g:4781:4: this_BEGIN_2= RULE_BEGIN (kw= HyphenMinus this_AnyData_4= ruleAnyData )+ this_END_5= RULE_END
                    {
                    this_BEGIN_2=(Token)match(input,RULE_BEGIN,FOLLOW_66); 

                    				current.merge(this_BEGIN_2);
                    			

                    				newLeafNode(this_BEGIN_2, grammarAccess.getHyphenValuesAccess().getBEGINTerminalRuleCall_1_0());
                    			
                    // InternalPipelineParser.g:4788:4: (kw= HyphenMinus this_AnyData_4= ruleAnyData )+
                    int cnt152=0;
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==HyphenMinus) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4789:5: kw= HyphenMinus this_AnyData_4= ruleAnyData
                    	    {
                    	    kw=(Token)match(input,HyphenMinus,FOLLOW_43); 

                    	    					current.merge(kw);
                    	    					newLeafNode(kw, grammarAccess.getHyphenValuesAccess().getHyphenMinusKeyword_1_1_0());
                    	    				

                    	    					newCompositeNode(grammarAccess.getHyphenValuesAccess().getAnyDataParserRuleCall_1_1_1());
                    	    				
                    	    pushFollow(FOLLOW_47);
                    	    this_AnyData_4=ruleAnyData();

                    	    state._fsp--;


                    	    					current.merge(this_AnyData_4);
                    	    				

                    	    					afterParserOrEnumRuleCall();
                    	    				

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt152 >= 1 ) break loop152;
                                EarlyExitException eee =
                                    new EarlyExitException(152, input);
                                throw eee;
                        }
                        cnt152++;
                    } while (true);

                    this_END_5=(Token)match(input,RULE_END,FOLLOW_2); 

                    				current.merge(this_END_5);
                    			

                    				newLeafNode(this_END_5, grammarAccess.getHyphenValuesAccess().getENDTerminalRuleCall_1_2());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleHyphenValues"


    // $ANTLR start "entryRuleNumber"
    // InternalPipelineParser.g:4817:1: entryRuleNumber returns [String current=null] : iv_ruleNumber= ruleNumber EOF ;
    public final String entryRuleNumber() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleNumber = null;


        try {
            // InternalPipelineParser.g:4817:46: (iv_ruleNumber= ruleNumber EOF )
            // InternalPipelineParser.g:4818:2: iv_ruleNumber= ruleNumber EOF
            {
             newCompositeNode(grammarAccess.getNumberRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleNumber=ruleNumber();

            state._fsp--;

             current =iv_ruleNumber.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleNumber"


    // $ANTLR start "ruleNumber"
    // InternalPipelineParser.g:4824:1: ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_INT_0= RULE_INT ;
    public final AntlrDatatypeRuleToken ruleNumber() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_INT_0=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4830:2: (this_INT_0= RULE_INT )
            // InternalPipelineParser.g:4831:2: this_INT_0= RULE_INT
            {
            this_INT_0=(Token)match(input,RULE_INT,FOLLOW_2); 

            		current.merge(this_INT_0);
            	

            		newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall());
            	

            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleNumber"


    // $ANTLR start "entryRuleFloatingPoint"
    // InternalPipelineParser.g:4841:1: entryRuleFloatingPoint returns [String current=null] : iv_ruleFloatingPoint= ruleFloatingPoint EOF ;
    public final String entryRuleFloatingPoint() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleFloatingPoint = null;


        try {
            // InternalPipelineParser.g:4841:53: (iv_ruleFloatingPoint= ruleFloatingPoint EOF )
            // InternalPipelineParser.g:4842:2: iv_ruleFloatingPoint= ruleFloatingPoint EOF
            {
             newCompositeNode(grammarAccess.getFloatingPointRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleFloatingPoint=ruleFloatingPoint();

            state._fsp--;

             current =iv_ruleFloatingPoint.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleFloatingPoint"


    // $ANTLR start "ruleFloatingPoint"
    // InternalPipelineParser.g:4848:1: ruleFloatingPoint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_FLOAT_LITERAL_0= RULE_FLOAT_LITERAL ;
    public final AntlrDatatypeRuleToken ruleFloatingPoint() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_FLOAT_LITERAL_0=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4854:2: (this_FLOAT_LITERAL_0= RULE_FLOAT_LITERAL )
            // InternalPipelineParser.g:4855:2: this_FLOAT_LITERAL_0= RULE_FLOAT_LITERAL
            {
            this_FLOAT_LITERAL_0=(Token)match(input,RULE_FLOAT_LITERAL,FOLLOW_2); 

            		current.merge(this_FLOAT_LITERAL_0);
            	

            		newLeafNode(this_FLOAT_LITERAL_0, grammarAccess.getFloatingPointAccess().getFLOAT_LITERALTerminalRuleCall());
            	

            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleFloatingPoint"


    // $ANTLR start "entryRuleSimpleWord"
    // InternalPipelineParser.g:4865:1: entryRuleSimpleWord returns [String current=null] : iv_ruleSimpleWord= ruleSimpleWord EOF ;
    public final String entryRuleSimpleWord() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleSimpleWord = null;


        try {
            // InternalPipelineParser.g:4865:50: (iv_ruleSimpleWord= ruleSimpleWord EOF )
            // InternalPipelineParser.g:4866:2: iv_ruleSimpleWord= ruleSimpleWord EOF
            {
             newCompositeNode(grammarAccess.getSimpleWordRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleSimpleWord=ruleSimpleWord();

            state._fsp--;

             current =iv_ruleSimpleWord.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleSimpleWord"


    // $ANTLR start "ruleSimpleWord"
    // InternalPipelineParser.g:4872:1: ruleSimpleWord returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : this_ID_0= RULE_ID ;
    public final AntlrDatatypeRuleToken ruleSimpleWord() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token this_ID_0=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4878:2: (this_ID_0= RULE_ID )
            // InternalPipelineParser.g:4879:2: this_ID_0= RULE_ID
            {
            this_ID_0=(Token)match(input,RULE_ID,FOLLOW_2); 

            		current.merge(this_ID_0);
            	

            		newLeafNode(this_ID_0, grammarAccess.getSimpleWordAccess().getIDTerminalRuleCall());
            	

            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleSimpleWord"


    // $ANTLR start "entryRuleArrayList"
    // InternalPipelineParser.g:4889:1: entryRuleArrayList returns [String current=null] : iv_ruleArrayList= ruleArrayList EOF ;
    public final String entryRuleArrayList() throws RecognitionException {
        String current = null;

        AntlrDatatypeRuleToken iv_ruleArrayList = null;


        try {
            // InternalPipelineParser.g:4889:49: (iv_ruleArrayList= ruleArrayList EOF )
            // InternalPipelineParser.g:4890:2: iv_ruleArrayList= ruleArrayList EOF
            {
             newCompositeNode(grammarAccess.getArrayListRule()); 
            pushFollow(FOLLOW_1);
            iv_ruleArrayList=ruleArrayList();

            state._fsp--;

             current =iv_ruleArrayList.getText(); 
            match(input,EOF,FOLLOW_2); 

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "entryRuleArrayList"


    // $ANTLR start "ruleArrayList"
    // InternalPipelineParser.g:4896:1: ruleArrayList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] : (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket ) ;
    public final AntlrDatatypeRuleToken ruleArrayList() throws RecognitionException {
        AntlrDatatypeRuleToken current = new AntlrDatatypeRuleToken();

        Token kw=null;
        AntlrDatatypeRuleToken this_AnyData_1 = null;

        AntlrDatatypeRuleToken this_AnyData_3 = null;



        	enterRule();

        try {
            // InternalPipelineParser.g:4902:2: ( (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket ) )
            // InternalPipelineParser.g:4903:2: (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket )
            {
            // InternalPipelineParser.g:4903:2: (kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket )
            // InternalPipelineParser.g:4904:3: kw= LeftSquareBracket (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )? kw= RightSquareBracket
            {
            kw=(Token)match(input,LeftSquareBracket,FOLLOW_91); 

            			current.merge(kw);
            			newLeafNode(kw, grammarAccess.getArrayListAccess().getLeftSquareBracketKeyword_0());
            		
            // InternalPipelineParser.g:4909:3: (this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )* )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( ((LA155_0>=RULE_COMPLEX_EXPRESSION && LA155_0<=RULE_VERSION)||LA155_0==RULE_STRING) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // InternalPipelineParser.g:4910:4: this_AnyData_1= ruleAnyData (kw= Comma this_AnyData_3= ruleAnyData )*
                    {

                    				newCompositeNode(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_0());
                    			
                    pushFollow(FOLLOW_9);
                    this_AnyData_1=ruleAnyData();

                    state._fsp--;


                    				current.merge(this_AnyData_1);
                    			

                    				afterParserOrEnumRuleCall();
                    			
                    // InternalPipelineParser.g:4920:4: (kw= Comma this_AnyData_3= ruleAnyData )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==Comma) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // InternalPipelineParser.g:4921:5: kw= Comma this_AnyData_3= ruleAnyData
                    	    {
                    	    kw=(Token)match(input,Comma,FOLLOW_43); 

                    	    					current.merge(kw);
                    	    					newLeafNode(kw, grammarAccess.getArrayListAccess().getCommaKeyword_1_1_0());
                    	    				

                    	    					newCompositeNode(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_1_1());
                    	    				
                    	    pushFollow(FOLLOW_9);
                    	    this_AnyData_3=ruleAnyData();

                    	    state._fsp--;


                    	    					current.merge(this_AnyData_3);
                    	    				

                    	    					afterParserOrEnumRuleCall();
                    	    				

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);


                    }
                    break;

            }

            kw=(Token)match(input,RightSquareBracket,FOLLOW_2); 

            			current.merge(kw);
            			newLeafNode(kw, grammarAccess.getArrayListAccess().getRightSquareBracketKeyword_2());
            		

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "ruleArrayList"


    // $ANTLR start "rulePipelineEventKeyword"
    // InternalPipelineParser.g:4947:1: rulePipelineEventKeyword returns [Enumerator current=null] : ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= None ) | (enumLiteral_3= Workflow_dispatch ) | (enumLiteral_4= Repository_dispatch ) | (enumLiteral_5= Check_run ) | (enumLiteral_6= Check_suite ) | (enumLiteral_7= Create ) | (enumLiteral_8= Delete ) | (enumLiteral_9= Deployment ) | (enumLiteral_10= Deployment_status ) | (enumLiteral_11= Fork ) | (enumLiteral_12= Gollum ) | (enumLiteral_13= Issue_comment ) | (enumLiteral_14= Issues ) | (enumLiteral_15= Label ) | (enumLiteral_16= Milestone ) | (enumLiteral_17= Page_build ) | (enumLiteral_18= Project ) | (enumLiteral_19= Project_card ) | (enumLiteral_20= Project_column ) | (enumLiteral_21= Public ) | (enumLiteral_22= Pull_request_review ) | (enumLiteral_23= Pull_request_review_comment ) | (enumLiteral_24= Pull_request_target ) | (enumLiteral_25= Registry_package ) | (enumLiteral_26= Release ) | (enumLiteral_27= Status ) | (enumLiteral_28= Watch ) | (enumLiteral_29= Workflow_call ) | (enumLiteral_30= Workflow_run ) | (enumLiteral_31= Trigger ) | (enumLiteral_32= Pr ) | (enumLiteral_33= Branches ) | (enumLiteral_34= Tags ) | (enumLiteral_35= Paths ) | (enumLiteral_36= AutoCancel ) | (enumLiteral_37= Drafts ) | (enumLiteral_38= Only ) | (enumLiteral_39= Except ) | (enumLiteral_40= Rules ) | (enumLiteral_41= WorkflowRules ) | (enumLiteral_42= Pipeline_schedule ) | (enumLiteral_43= Merge_requests ) | (enumLiteral_44= Changes ) | (enumLiteral_45= Pipelines ) | (enumLiteral_46= Default ) | (enumLiteral_47= PullRequests ) | (enumLiteral_48= Custom ) | (enumLiteral_49= Conditions ) | (enumLiteral_50= BitbucketBranchDeleted ) | (enumLiteral_51= BitbucketBranchCreated ) | (enumLiteral_52= BitbucketTagCreated ) | (enumLiteral_53= BitbucketTagDeleted ) | (enumLiteral_54= Repository ) | (enumLiteral_55= Scheduled ) | (enumLiteral_56= Remote ) | (enumLiteral_57= Bitbucket ) | (enumLiteral_58= PlanBranch ) | (enumLiteral_59= Cron ) | (enumLiteral_60= Notifications ) | (enumLiteral_61= LockBehavior ) ) ;
    public final Enumerator rulePipelineEventKeyword() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;
        Token enumLiteral_20=null;
        Token enumLiteral_21=null;
        Token enumLiteral_22=null;
        Token enumLiteral_23=null;
        Token enumLiteral_24=null;
        Token enumLiteral_25=null;
        Token enumLiteral_26=null;
        Token enumLiteral_27=null;
        Token enumLiteral_28=null;
        Token enumLiteral_29=null;
        Token enumLiteral_30=null;
        Token enumLiteral_31=null;
        Token enumLiteral_32=null;
        Token enumLiteral_33=null;
        Token enumLiteral_34=null;
        Token enumLiteral_35=null;
        Token enumLiteral_36=null;
        Token enumLiteral_37=null;
        Token enumLiteral_38=null;
        Token enumLiteral_39=null;
        Token enumLiteral_40=null;
        Token enumLiteral_41=null;
        Token enumLiteral_42=null;
        Token enumLiteral_43=null;
        Token enumLiteral_44=null;
        Token enumLiteral_45=null;
        Token enumLiteral_46=null;
        Token enumLiteral_47=null;
        Token enumLiteral_48=null;
        Token enumLiteral_49=null;
        Token enumLiteral_50=null;
        Token enumLiteral_51=null;
        Token enumLiteral_52=null;
        Token enumLiteral_53=null;
        Token enumLiteral_54=null;
        Token enumLiteral_55=null;
        Token enumLiteral_56=null;
        Token enumLiteral_57=null;
        Token enumLiteral_58=null;
        Token enumLiteral_59=null;
        Token enumLiteral_60=null;
        Token enumLiteral_61=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:4953:2: ( ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= None ) | (enumLiteral_3= Workflow_dispatch ) | (enumLiteral_4= Repository_dispatch ) | (enumLiteral_5= Check_run ) | (enumLiteral_6= Check_suite ) | (enumLiteral_7= Create ) | (enumLiteral_8= Delete ) | (enumLiteral_9= Deployment ) | (enumLiteral_10= Deployment_status ) | (enumLiteral_11= Fork ) | (enumLiteral_12= Gollum ) | (enumLiteral_13= Issue_comment ) | (enumLiteral_14= Issues ) | (enumLiteral_15= Label ) | (enumLiteral_16= Milestone ) | (enumLiteral_17= Page_build ) | (enumLiteral_18= Project ) | (enumLiteral_19= Project_card ) | (enumLiteral_20= Project_column ) | (enumLiteral_21= Public ) | (enumLiteral_22= Pull_request_review ) | (enumLiteral_23= Pull_request_review_comment ) | (enumLiteral_24= Pull_request_target ) | (enumLiteral_25= Registry_package ) | (enumLiteral_26= Release ) | (enumLiteral_27= Status ) | (enumLiteral_28= Watch ) | (enumLiteral_29= Workflow_call ) | (enumLiteral_30= Workflow_run ) | (enumLiteral_31= Trigger ) | (enumLiteral_32= Pr ) | (enumLiteral_33= Branches ) | (enumLiteral_34= Tags ) | (enumLiteral_35= Paths ) | (enumLiteral_36= AutoCancel ) | (enumLiteral_37= Drafts ) | (enumLiteral_38= Only ) | (enumLiteral_39= Except ) | (enumLiteral_40= Rules ) | (enumLiteral_41= WorkflowRules ) | (enumLiteral_42= Pipeline_schedule ) | (enumLiteral_43= Merge_requests ) | (enumLiteral_44= Changes ) | (enumLiteral_45= Pipelines ) | (enumLiteral_46= Default ) | (enumLiteral_47= PullRequests ) | (enumLiteral_48= Custom ) | (enumLiteral_49= Conditions ) | (enumLiteral_50= BitbucketBranchDeleted ) | (enumLiteral_51= BitbucketBranchCreated ) | (enumLiteral_52= BitbucketTagCreated ) | (enumLiteral_53= BitbucketTagDeleted ) | (enumLiteral_54= Repository ) | (enumLiteral_55= Scheduled ) | (enumLiteral_56= Remote ) | (enumLiteral_57= Bitbucket ) | (enumLiteral_58= PlanBranch ) | (enumLiteral_59= Cron ) | (enumLiteral_60= Notifications ) | (enumLiteral_61= LockBehavior ) ) )
            // InternalPipelineParser.g:4954:2: ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= None ) | (enumLiteral_3= Workflow_dispatch ) | (enumLiteral_4= Repository_dispatch ) | (enumLiteral_5= Check_run ) | (enumLiteral_6= Check_suite ) | (enumLiteral_7= Create ) | (enumLiteral_8= Delete ) | (enumLiteral_9= Deployment ) | (enumLiteral_10= Deployment_status ) | (enumLiteral_11= Fork ) | (enumLiteral_12= Gollum ) | (enumLiteral_13= Issue_comment ) | (enumLiteral_14= Issues ) | (enumLiteral_15= Label ) | (enumLiteral_16= Milestone ) | (enumLiteral_17= Page_build ) | (enumLiteral_18= Project ) | (enumLiteral_19= Project_card ) | (enumLiteral_20= Project_column ) | (enumLiteral_21= Public ) | (enumLiteral_22= Pull_request_review ) | (enumLiteral_23= Pull_request_review_comment ) | (enumLiteral_24= Pull_request_target ) | (enumLiteral_25= Registry_package ) | (enumLiteral_26= Release ) | (enumLiteral_27= Status ) | (enumLiteral_28= Watch ) | (enumLiteral_29= Workflow_call ) | (enumLiteral_30= Workflow_run ) | (enumLiteral_31= Trigger ) | (enumLiteral_32= Pr ) | (enumLiteral_33= Branches ) | (enumLiteral_34= Tags ) | (enumLiteral_35= Paths ) | (enumLiteral_36= AutoCancel ) | (enumLiteral_37= Drafts ) | (enumLiteral_38= Only ) | (enumLiteral_39= Except ) | (enumLiteral_40= Rules ) | (enumLiteral_41= WorkflowRules ) | (enumLiteral_42= Pipeline_schedule ) | (enumLiteral_43= Merge_requests ) | (enumLiteral_44= Changes ) | (enumLiteral_45= Pipelines ) | (enumLiteral_46= Default ) | (enumLiteral_47= PullRequests ) | (enumLiteral_48= Custom ) | (enumLiteral_49= Conditions ) | (enumLiteral_50= BitbucketBranchDeleted ) | (enumLiteral_51= BitbucketBranchCreated ) | (enumLiteral_52= BitbucketTagCreated ) | (enumLiteral_53= BitbucketTagDeleted ) | (enumLiteral_54= Repository ) | (enumLiteral_55= Scheduled ) | (enumLiteral_56= Remote ) | (enumLiteral_57= Bitbucket ) | (enumLiteral_58= PlanBranch ) | (enumLiteral_59= Cron ) | (enumLiteral_60= Notifications ) | (enumLiteral_61= LockBehavior ) )
            {
            // InternalPipelineParser.g:4954:2: ( (enumLiteral_0= Push ) | (enumLiteral_1= Pull_request ) | (enumLiteral_2= None ) | (enumLiteral_3= Workflow_dispatch ) | (enumLiteral_4= Repository_dispatch ) | (enumLiteral_5= Check_run ) | (enumLiteral_6= Check_suite ) | (enumLiteral_7= Create ) | (enumLiteral_8= Delete ) | (enumLiteral_9= Deployment ) | (enumLiteral_10= Deployment_status ) | (enumLiteral_11= Fork ) | (enumLiteral_12= Gollum ) | (enumLiteral_13= Issue_comment ) | (enumLiteral_14= Issues ) | (enumLiteral_15= Label ) | (enumLiteral_16= Milestone ) | (enumLiteral_17= Page_build ) | (enumLiteral_18= Project ) | (enumLiteral_19= Project_card ) | (enumLiteral_20= Project_column ) | (enumLiteral_21= Public ) | (enumLiteral_22= Pull_request_review ) | (enumLiteral_23= Pull_request_review_comment ) | (enumLiteral_24= Pull_request_target ) | (enumLiteral_25= Registry_package ) | (enumLiteral_26= Release ) | (enumLiteral_27= Status ) | (enumLiteral_28= Watch ) | (enumLiteral_29= Workflow_call ) | (enumLiteral_30= Workflow_run ) | (enumLiteral_31= Trigger ) | (enumLiteral_32= Pr ) | (enumLiteral_33= Branches ) | (enumLiteral_34= Tags ) | (enumLiteral_35= Paths ) | (enumLiteral_36= AutoCancel ) | (enumLiteral_37= Drafts ) | (enumLiteral_38= Only ) | (enumLiteral_39= Except ) | (enumLiteral_40= Rules ) | (enumLiteral_41= WorkflowRules ) | (enumLiteral_42= Pipeline_schedule ) | (enumLiteral_43= Merge_requests ) | (enumLiteral_44= Changes ) | (enumLiteral_45= Pipelines ) | (enumLiteral_46= Default ) | (enumLiteral_47= PullRequests ) | (enumLiteral_48= Custom ) | (enumLiteral_49= Conditions ) | (enumLiteral_50= BitbucketBranchDeleted ) | (enumLiteral_51= BitbucketBranchCreated ) | (enumLiteral_52= BitbucketTagCreated ) | (enumLiteral_53= BitbucketTagDeleted ) | (enumLiteral_54= Repository ) | (enumLiteral_55= Scheduled ) | (enumLiteral_56= Remote ) | (enumLiteral_57= Bitbucket ) | (enumLiteral_58= PlanBranch ) | (enumLiteral_59= Cron ) | (enumLiteral_60= Notifications ) | (enumLiteral_61= LockBehavior ) )
            int alt156=62;
            switch ( input.LA(1) ) {
            case Push:
                {
                alt156=1;
                }
                break;
            case Pull_request:
                {
                alt156=2;
                }
                break;
            case None:
                {
                alt156=3;
                }
                break;
            case Workflow_dispatch:
                {
                alt156=4;
                }
                break;
            case Repository_dispatch:
                {
                alt156=5;
                }
                break;
            case Check_run:
                {
                alt156=6;
                }
                break;
            case Check_suite:
                {
                alt156=7;
                }
                break;
            case Create:
                {
                alt156=8;
                }
                break;
            case Delete:
                {
                alt156=9;
                }
                break;
            case Deployment:
                {
                alt156=10;
                }
                break;
            case Deployment_status:
                {
                alt156=11;
                }
                break;
            case Fork:
                {
                alt156=12;
                }
                break;
            case Gollum:
                {
                alt156=13;
                }
                break;
            case Issue_comment:
                {
                alt156=14;
                }
                break;
            case Issues:
                {
                alt156=15;
                }
                break;
            case Label:
                {
                alt156=16;
                }
                break;
            case Milestone:
                {
                alt156=17;
                }
                break;
            case Page_build:
                {
                alt156=18;
                }
                break;
            case Project:
                {
                alt156=19;
                }
                break;
            case Project_card:
                {
                alt156=20;
                }
                break;
            case Project_column:
                {
                alt156=21;
                }
                break;
            case Public:
                {
                alt156=22;
                }
                break;
            case Pull_request_review:
                {
                alt156=23;
                }
                break;
            case Pull_request_review_comment:
                {
                alt156=24;
                }
                break;
            case Pull_request_target:
                {
                alt156=25;
                }
                break;
            case Registry_package:
                {
                alt156=26;
                }
                break;
            case Release:
                {
                alt156=27;
                }
                break;
            case Status:
                {
                alt156=28;
                }
                break;
            case Watch:
                {
                alt156=29;
                }
                break;
            case Workflow_call:
                {
                alt156=30;
                }
                break;
            case Workflow_run:
                {
                alt156=31;
                }
                break;
            case Trigger:
                {
                alt156=32;
                }
                break;
            case Pr:
                {
                alt156=33;
                }
                break;
            case Branches:
                {
                alt156=34;
                }
                break;
            case Tags:
                {
                alt156=35;
                }
                break;
            case Paths:
                {
                alt156=36;
                }
                break;
            case AutoCancel:
                {
                alt156=37;
                }
                break;
            case Drafts:
                {
                alt156=38;
                }
                break;
            case Only:
                {
                alt156=39;
                }
                break;
            case Except:
                {
                alt156=40;
                }
                break;
            case Rules:
                {
                alt156=41;
                }
                break;
            case WorkflowRules:
                {
                alt156=42;
                }
                break;
            case Pipeline_schedule:
                {
                alt156=43;
                }
                break;
            case Merge_requests:
                {
                alt156=44;
                }
                break;
            case Changes:
                {
                alt156=45;
                }
                break;
            case Pipelines:
                {
                alt156=46;
                }
                break;
            case Default:
                {
                alt156=47;
                }
                break;
            case PullRequests:
                {
                alt156=48;
                }
                break;
            case Custom:
                {
                alt156=49;
                }
                break;
            case Conditions:
                {
                alt156=50;
                }
                break;
            case BitbucketBranchDeleted:
                {
                alt156=51;
                }
                break;
            case BitbucketBranchCreated:
                {
                alt156=52;
                }
                break;
            case BitbucketTagCreated:
                {
                alt156=53;
                }
                break;
            case BitbucketTagDeleted:
                {
                alt156=54;
                }
                break;
            case Repository:
                {
                alt156=55;
                }
                break;
            case Scheduled:
                {
                alt156=56;
                }
                break;
            case Remote:
                {
                alt156=57;
                }
                break;
            case Bitbucket:
                {
                alt156=58;
                }
                break;
            case PlanBranch:
                {
                alt156=59;
                }
                break;
            case Cron:
                {
                alt156=60;
                }
                break;
            case Notifications:
                {
                alt156=61;
                }
                break;
            case LockBehavior:
                {
                alt156=62;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // InternalPipelineParser.g:4955:3: (enumLiteral_0= Push )
                    {
                    // InternalPipelineParser.g:4955:3: (enumLiteral_0= Push )
                    // InternalPipelineParser.g:4956:4: enumLiteral_0= Push
                    {
                    enumLiteral_0=(Token)match(input,Push,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUSHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_0, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUSHEnumLiteralDeclaration_0());
                    			

                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:4963:3: (enumLiteral_1= Pull_request )
                    {
                    // InternalPipelineParser.g:4963:3: (enumLiteral_1= Pull_request )
                    // InternalPipelineParser.g:4964:4: enumLiteral_1= Pull_request
                    {
                    enumLiteral_1=(Token)match(input,Pull_request,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_1, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTEnumLiteralDeclaration_1());
                    			

                    }


                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:4971:3: (enumLiteral_2= None )
                    {
                    // InternalPipelineParser.g:4971:3: (enumLiteral_2= None )
                    // InternalPipelineParser.g:4972:4: enumLiteral_2= None
                    {
                    enumLiteral_2=(Token)match(input,None,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_NONEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_2, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_NONEEnumLiteralDeclaration_2());
                    			

                    }


                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:4979:3: (enumLiteral_3= Workflow_dispatch )
                    {
                    // InternalPipelineParser.g:4979:3: (enumLiteral_3= Workflow_dispatch )
                    // InternalPipelineParser.g:4980:4: enumLiteral_3= Workflow_dispatch
                    {
                    enumLiteral_3=(Token)match(input,Workflow_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_DISPATCHEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_3, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_DISPATCHEnumLiteralDeclaration_3());
                    			

                    }


                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:4987:3: (enumLiteral_4= Repository_dispatch )
                    {
                    // InternalPipelineParser.g:4987:3: (enumLiteral_4= Repository_dispatch )
                    // InternalPipelineParser.g:4988:4: enumLiteral_4= Repository_dispatch
                    {
                    enumLiteral_4=(Token)match(input,Repository_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_DISPATCHEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_4, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_DISPATCHEnumLiteralDeclaration_4());
                    			

                    }


                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:4995:3: (enumLiteral_5= Check_run )
                    {
                    // InternalPipelineParser.g:4995:3: (enumLiteral_5= Check_run )
                    // InternalPipelineParser.g:4996:4: enumLiteral_5= Check_run
                    {
                    enumLiteral_5=(Token)match(input,Check_run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_RUNEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_5, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_RUNEnumLiteralDeclaration_5());
                    			

                    }


                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:5003:3: (enumLiteral_6= Check_suite )
                    {
                    // InternalPipelineParser.g:5003:3: (enumLiteral_6= Check_suite )
                    // InternalPipelineParser.g:5004:4: enumLiteral_6= Check_suite
                    {
                    enumLiteral_6=(Token)match(input,Check_suite,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_SUITEEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_6, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHECK_SUITEEnumLiteralDeclaration_6());
                    			

                    }


                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:5011:3: (enumLiteral_7= Create )
                    {
                    // InternalPipelineParser.g:5011:3: (enumLiteral_7= Create )
                    // InternalPipelineParser.g:5012:4: enumLiteral_7= Create
                    {
                    enumLiteral_7=(Token)match(input,Create,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CREATEEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_7, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CREATEEnumLiteralDeclaration_7());
                    			

                    }


                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:5019:3: (enumLiteral_8= Delete )
                    {
                    // InternalPipelineParser.g:5019:3: (enumLiteral_8= Delete )
                    // InternalPipelineParser.g:5020:4: enumLiteral_8= Delete
                    {
                    enumLiteral_8=(Token)match(input,Delete,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DELETEEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_8, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DELETEEnumLiteralDeclaration_8());
                    			

                    }


                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:5027:3: (enumLiteral_9= Deployment )
                    {
                    // InternalPipelineParser.g:5027:3: (enumLiteral_9= Deployment )
                    // InternalPipelineParser.g:5028:4: enumLiteral_9= Deployment
                    {
                    enumLiteral_9=(Token)match(input,Deployment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_9, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENTEnumLiteralDeclaration_9());
                    			

                    }


                    }
                    break;
                case 11 :
                    // InternalPipelineParser.g:5035:3: (enumLiteral_10= Deployment_status )
                    {
                    // InternalPipelineParser.g:5035:3: (enumLiteral_10= Deployment_status )
                    // InternalPipelineParser.g:5036:4: enumLiteral_10= Deployment_status
                    {
                    enumLiteral_10=(Token)match(input,Deployment_status,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENT_STATUSEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_10, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEPLOYMENT_STATUSEnumLiteralDeclaration_10());
                    			

                    }


                    }
                    break;
                case 12 :
                    // InternalPipelineParser.g:5043:3: (enumLiteral_11= Fork )
                    {
                    // InternalPipelineParser.g:5043:3: (enumLiteral_11= Fork )
                    // InternalPipelineParser.g:5044:4: enumLiteral_11= Fork
                    {
                    enumLiteral_11=(Token)match(input,Fork,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_FORKEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_11, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_FORKEnumLiteralDeclaration_11());
                    			

                    }


                    }
                    break;
                case 13 :
                    // InternalPipelineParser.g:5051:3: (enumLiteral_12= Gollum )
                    {
                    // InternalPipelineParser.g:5051:3: (enumLiteral_12= Gollum )
                    // InternalPipelineParser.g:5052:4: enumLiteral_12= Gollum
                    {
                    enumLiteral_12=(Token)match(input,Gollum,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_GOLLUMEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_12, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_GOLLUMEnumLiteralDeclaration_12());
                    			

                    }


                    }
                    break;
                case 14 :
                    // InternalPipelineParser.g:5059:3: (enumLiteral_13= Issue_comment )
                    {
                    // InternalPipelineParser.g:5059:3: (enumLiteral_13= Issue_comment )
                    // InternalPipelineParser.g:5060:4: enumLiteral_13= Issue_comment
                    {
                    enumLiteral_13=(Token)match(input,Issue_comment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUE_COMMENTEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_13, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUE_COMMENTEnumLiteralDeclaration_13());
                    			

                    }


                    }
                    break;
                case 15 :
                    // InternalPipelineParser.g:5067:3: (enumLiteral_14= Issues )
                    {
                    // InternalPipelineParser.g:5067:3: (enumLiteral_14= Issues )
                    // InternalPipelineParser.g:5068:4: enumLiteral_14= Issues
                    {
                    enumLiteral_14=(Token)match(input,Issues,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUESEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_14, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ISSUESEnumLiteralDeclaration_14());
                    			

                    }


                    }
                    break;
                case 16 :
                    // InternalPipelineParser.g:5075:3: (enumLiteral_15= Label )
                    {
                    // InternalPipelineParser.g:5075:3: (enumLiteral_15= Label )
                    // InternalPipelineParser.g:5076:4: enumLiteral_15= Label
                    {
                    enumLiteral_15=(Token)match(input,Label,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LABELEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_15, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LABELEnumLiteralDeclaration_15());
                    			

                    }


                    }
                    break;
                case 17 :
                    // InternalPipelineParser.g:5083:3: (enumLiteral_16= Milestone )
                    {
                    // InternalPipelineParser.g:5083:3: (enumLiteral_16= Milestone )
                    // InternalPipelineParser.g:5084:4: enumLiteral_16= Milestone
                    {
                    enumLiteral_16=(Token)match(input,Milestone,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MILESTONEEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_16, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MILESTONEEnumLiteralDeclaration_16());
                    			

                    }


                    }
                    break;
                case 18 :
                    // InternalPipelineParser.g:5091:3: (enumLiteral_17= Page_build )
                    {
                    // InternalPipelineParser.g:5091:3: (enumLiteral_17= Page_build )
                    // InternalPipelineParser.g:5092:4: enumLiteral_17= Page_build
                    {
                    enumLiteral_17=(Token)match(input,Page_build,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PAGE_BUILDEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_17, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PAGE_BUILDEnumLiteralDeclaration_17());
                    			

                    }


                    }
                    break;
                case 19 :
                    // InternalPipelineParser.g:5099:3: (enumLiteral_18= Project )
                    {
                    // InternalPipelineParser.g:5099:3: (enumLiteral_18= Project )
                    // InternalPipelineParser.g:5100:4: enumLiteral_18= Project
                    {
                    enumLiteral_18=(Token)match(input,Project,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECTEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_18, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECTEnumLiteralDeclaration_18());
                    			

                    }


                    }
                    break;
                case 20 :
                    // InternalPipelineParser.g:5107:3: (enumLiteral_19= Project_card )
                    {
                    // InternalPipelineParser.g:5107:3: (enumLiteral_19= Project_card )
                    // InternalPipelineParser.g:5108:4: enumLiteral_19= Project_card
                    {
                    enumLiteral_19=(Token)match(input,Project_card,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_CARDEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_19, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_CARDEnumLiteralDeclaration_19());
                    			

                    }


                    }
                    break;
                case 21 :
                    // InternalPipelineParser.g:5115:3: (enumLiteral_20= Project_column )
                    {
                    // InternalPipelineParser.g:5115:3: (enumLiteral_20= Project_column )
                    // InternalPipelineParser.g:5116:4: enumLiteral_20= Project_column
                    {
                    enumLiteral_20=(Token)match(input,Project_column,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_COLUMNEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_20, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PROJECT_COLUMNEnumLiteralDeclaration_20());
                    			

                    }


                    }
                    break;
                case 22 :
                    // InternalPipelineParser.g:5123:3: (enumLiteral_21= Public )
                    {
                    // InternalPipelineParser.g:5123:3: (enumLiteral_21= Public )
                    // InternalPipelineParser.g:5124:4: enumLiteral_21= Public
                    {
                    enumLiteral_21=(Token)match(input,Public,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUBLICEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_21, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PUBLICEnumLiteralDeclaration_21());
                    			

                    }


                    }
                    break;
                case 23 :
                    // InternalPipelineParser.g:5131:3: (enumLiteral_22= Pull_request_review )
                    {
                    // InternalPipelineParser.g:5131:3: (enumLiteral_22= Pull_request_review )
                    // InternalPipelineParser.g:5132:4: enumLiteral_22= Pull_request_review
                    {
                    enumLiteral_22=(Token)match(input,Pull_request_review,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEWEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_22, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEWEnumLiteralDeclaration_22());
                    			

                    }


                    }
                    break;
                case 24 :
                    // InternalPipelineParser.g:5139:3: (enumLiteral_23= Pull_request_review_comment )
                    {
                    // InternalPipelineParser.g:5139:3: (enumLiteral_23= Pull_request_review_comment )
                    // InternalPipelineParser.g:5140:4: enumLiteral_23= Pull_request_review_comment
                    {
                    enumLiteral_23=(Token)match(input,Pull_request_review_comment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_23, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_REVIEW_COMMENTEnumLiteralDeclaration_23());
                    			

                    }


                    }
                    break;
                case 25 :
                    // InternalPipelineParser.g:5147:3: (enumLiteral_24= Pull_request_target )
                    {
                    // InternalPipelineParser.g:5147:3: (enumLiteral_24= Pull_request_target )
                    // InternalPipelineParser.g:5148:4: enumLiteral_24= Pull_request_target
                    {
                    enumLiteral_24=(Token)match(input,Pull_request_target,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_TARGETEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_24, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUEST_TARGETEnumLiteralDeclaration_24());
                    			

                    }


                    }
                    break;
                case 26 :
                    // InternalPipelineParser.g:5155:3: (enumLiteral_25= Registry_package )
                    {
                    // InternalPipelineParser.g:5155:3: (enumLiteral_25= Registry_package )
                    // InternalPipelineParser.g:5156:4: enumLiteral_25= Registry_package
                    {
                    enumLiteral_25=(Token)match(input,Registry_package,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REGISTRY_PACKAGEEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_25, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REGISTRY_PACKAGEEnumLiteralDeclaration_25());
                    			

                    }


                    }
                    break;
                case 27 :
                    // InternalPipelineParser.g:5163:3: (enumLiteral_26= Release )
                    {
                    // InternalPipelineParser.g:5163:3: (enumLiteral_26= Release )
                    // InternalPipelineParser.g:5164:4: enumLiteral_26= Release
                    {
                    enumLiteral_26=(Token)match(input,Release,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RELEASEEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_26, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RELEASEEnumLiteralDeclaration_26());
                    			

                    }


                    }
                    break;
                case 28 :
                    // InternalPipelineParser.g:5171:3: (enumLiteral_27= Status )
                    {
                    // InternalPipelineParser.g:5171:3: (enumLiteral_27= Status )
                    // InternalPipelineParser.g:5172:4: enumLiteral_27= Status
                    {
                    enumLiteral_27=(Token)match(input,Status,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_STATUSEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_27, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_STATUSEnumLiteralDeclaration_27());
                    			

                    }


                    }
                    break;
                case 29 :
                    // InternalPipelineParser.g:5179:3: (enumLiteral_28= Watch )
                    {
                    // InternalPipelineParser.g:5179:3: (enumLiteral_28= Watch )
                    // InternalPipelineParser.g:5180:4: enumLiteral_28= Watch
                    {
                    enumLiteral_28=(Token)match(input,Watch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WATCHEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_28, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WATCHEnumLiteralDeclaration_28());
                    			

                    }


                    }
                    break;
                case 30 :
                    // InternalPipelineParser.g:5187:3: (enumLiteral_29= Workflow_call )
                    {
                    // InternalPipelineParser.g:5187:3: (enumLiteral_29= Workflow_call )
                    // InternalPipelineParser.g:5188:4: enumLiteral_29= Workflow_call
                    {
                    enumLiteral_29=(Token)match(input,Workflow_call,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_CALLEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_29, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_CALLEnumLiteralDeclaration_29());
                    			

                    }


                    }
                    break;
                case 31 :
                    // InternalPipelineParser.g:5195:3: (enumLiteral_30= Workflow_run )
                    {
                    // InternalPipelineParser.g:5195:3: (enumLiteral_30= Workflow_run )
                    // InternalPipelineParser.g:5196:4: enumLiteral_30= Workflow_run
                    {
                    enumLiteral_30=(Token)match(input,Workflow_run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RUNEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_30, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RUNEnumLiteralDeclaration_30());
                    			

                    }


                    }
                    break;
                case 32 :
                    // InternalPipelineParser.g:5203:3: (enumLiteral_31= Trigger )
                    {
                    // InternalPipelineParser.g:5203:3: (enumLiteral_31= Trigger )
                    // InternalPipelineParser.g:5204:4: enumLiteral_31= Trigger
                    {
                    enumLiteral_31=(Token)match(input,Trigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TRIGGEREnumLiteralDeclaration_31().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_31, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TRIGGEREnumLiteralDeclaration_31());
                    			

                    }


                    }
                    break;
                case 33 :
                    // InternalPipelineParser.g:5211:3: (enumLiteral_32= Pr )
                    {
                    // InternalPipelineParser.g:5211:3: (enumLiteral_32= Pr )
                    // InternalPipelineParser.g:5212:4: enumLiteral_32= Pr
                    {
                    enumLiteral_32=(Token)match(input,Pr,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PREnumLiteralDeclaration_32().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_32, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PREnumLiteralDeclaration_32());
                    			

                    }


                    }
                    break;
                case 34 :
                    // InternalPipelineParser.g:5219:3: (enumLiteral_33= Branches )
                    {
                    // InternalPipelineParser.g:5219:3: (enumLiteral_33= Branches )
                    // InternalPipelineParser.g:5220:4: enumLiteral_33= Branches
                    {
                    enumLiteral_33=(Token)match(input,Branches,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCHESEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_33, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCHESEnumLiteralDeclaration_33());
                    			

                    }


                    }
                    break;
                case 35 :
                    // InternalPipelineParser.g:5227:3: (enumLiteral_34= Tags )
                    {
                    // InternalPipelineParser.g:5227:3: (enumLiteral_34= Tags )
                    // InternalPipelineParser.g:5228:4: enumLiteral_34= Tags
                    {
                    enumLiteral_34=(Token)match(input,Tags,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAGSEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_34, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAGSEnumLiteralDeclaration_34());
                    			

                    }


                    }
                    break;
                case 36 :
                    // InternalPipelineParser.g:5235:3: (enumLiteral_35= Paths )
                    {
                    // InternalPipelineParser.g:5235:3: (enumLiteral_35= Paths )
                    // InternalPipelineParser.g:5236:4: enumLiteral_35= Paths
                    {
                    enumLiteral_35=(Token)match(input,Paths,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PATHSEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_35, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PATHSEnumLiteralDeclaration_35());
                    			

                    }


                    }
                    break;
                case 37 :
                    // InternalPipelineParser.g:5243:3: (enumLiteral_36= AutoCancel )
                    {
                    // InternalPipelineParser.g:5243:3: (enumLiteral_36= AutoCancel )
                    // InternalPipelineParser.g:5244:4: enumLiteral_36= AutoCancel
                    {
                    enumLiteral_36=(Token)match(input,AutoCancel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_AUTO_CANCELEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_36, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_AUTO_CANCELEnumLiteralDeclaration_36());
                    			

                    }


                    }
                    break;
                case 38 :
                    // InternalPipelineParser.g:5251:3: (enumLiteral_37= Drafts )
                    {
                    // InternalPipelineParser.g:5251:3: (enumLiteral_37= Drafts )
                    // InternalPipelineParser.g:5252:4: enumLiteral_37= Drafts
                    {
                    enumLiteral_37=(Token)match(input,Drafts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DRAFTSEnumLiteralDeclaration_37().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_37, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DRAFTSEnumLiteralDeclaration_37());
                    			

                    }


                    }
                    break;
                case 39 :
                    // InternalPipelineParser.g:5259:3: (enumLiteral_38= Only )
                    {
                    // InternalPipelineParser.g:5259:3: (enumLiteral_38= Only )
                    // InternalPipelineParser.g:5260:4: enumLiteral_38= Only
                    {
                    enumLiteral_38=(Token)match(input,Only,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ONLYEnumLiteralDeclaration_38().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_38, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_ONLYEnumLiteralDeclaration_38());
                    			

                    }


                    }
                    break;
                case 40 :
                    // InternalPipelineParser.g:5267:3: (enumLiteral_39= Except )
                    {
                    // InternalPipelineParser.g:5267:3: (enumLiteral_39= Except )
                    // InternalPipelineParser.g:5268:4: enumLiteral_39= Except
                    {
                    enumLiteral_39=(Token)match(input,Except,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_EXCEPTEnumLiteralDeclaration_39().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_39, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_EXCEPTEnumLiteralDeclaration_39());
                    			

                    }


                    }
                    break;
                case 41 :
                    // InternalPipelineParser.g:5275:3: (enumLiteral_40= Rules )
                    {
                    // InternalPipelineParser.g:5275:3: (enumLiteral_40= Rules )
                    // InternalPipelineParser.g:5276:4: enumLiteral_40= Rules
                    {
                    enumLiteral_40=(Token)match(input,Rules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RULESEnumLiteralDeclaration_40().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_40, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_RULESEnumLiteralDeclaration_40());
                    			

                    }


                    }
                    break;
                case 42 :
                    // InternalPipelineParser.g:5283:3: (enumLiteral_41= WorkflowRules )
                    {
                    // InternalPipelineParser.g:5283:3: (enumLiteral_41= WorkflowRules )
                    // InternalPipelineParser.g:5284:4: enumLiteral_41= WorkflowRules
                    {
                    enumLiteral_41=(Token)match(input,WorkflowRules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RULESEnumLiteralDeclaration_41().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_41, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_WORKFLOW_RULESEnumLiteralDeclaration_41());
                    			

                    }


                    }
                    break;
                case 43 :
                    // InternalPipelineParser.g:5291:3: (enumLiteral_42= Pipeline_schedule )
                    {
                    // InternalPipelineParser.g:5291:3: (enumLiteral_42= Pipeline_schedule )
                    // InternalPipelineParser.g:5292:4: enumLiteral_42= Pipeline_schedule
                    {
                    enumLiteral_42=(Token)match(input,Pipeline_schedule,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINE_SCHEDULEEnumLiteralDeclaration_42().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_42, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINE_SCHEDULEEnumLiteralDeclaration_42());
                    			

                    }


                    }
                    break;
                case 44 :
                    // InternalPipelineParser.g:5299:3: (enumLiteral_43= Merge_requests )
                    {
                    // InternalPipelineParser.g:5299:3: (enumLiteral_43= Merge_requests )
                    // InternalPipelineParser.g:5300:4: enumLiteral_43= Merge_requests
                    {
                    enumLiteral_43=(Token)match(input,Merge_requests,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MERGE_REQUESTSEnumLiteralDeclaration_43().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_43, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_MERGE_REQUESTSEnumLiteralDeclaration_43());
                    			

                    }


                    }
                    break;
                case 45 :
                    // InternalPipelineParser.g:5307:3: (enumLiteral_44= Changes )
                    {
                    // InternalPipelineParser.g:5307:3: (enumLiteral_44= Changes )
                    // InternalPipelineParser.g:5308:4: enumLiteral_44= Changes
                    {
                    enumLiteral_44=(Token)match(input,Changes,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHANGESEnumLiteralDeclaration_44().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_44, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CHANGESEnumLiteralDeclaration_44());
                    			

                    }


                    }
                    break;
                case 46 :
                    // InternalPipelineParser.g:5315:3: (enumLiteral_45= Pipelines )
                    {
                    // InternalPipelineParser.g:5315:3: (enumLiteral_45= Pipelines )
                    // InternalPipelineParser.g:5316:4: enumLiteral_45= Pipelines
                    {
                    enumLiteral_45=(Token)match(input,Pipelines,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINESEnumLiteralDeclaration_45().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_45, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PIPELINESEnumLiteralDeclaration_45());
                    			

                    }


                    }
                    break;
                case 47 :
                    // InternalPipelineParser.g:5323:3: (enumLiteral_46= Default )
                    {
                    // InternalPipelineParser.g:5323:3: (enumLiteral_46= Default )
                    // InternalPipelineParser.g:5324:4: enumLiteral_46= Default
                    {
                    enumLiteral_46=(Token)match(input,Default,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEFAULTEnumLiteralDeclaration_46().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_46, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_DEFAULTEnumLiteralDeclaration_46());
                    			

                    }


                    }
                    break;
                case 48 :
                    // InternalPipelineParser.g:5331:3: (enumLiteral_47= PullRequests )
                    {
                    // InternalPipelineParser.g:5331:3: (enumLiteral_47= PullRequests )
                    // InternalPipelineParser.g:5332:4: enumLiteral_47= PullRequests
                    {
                    enumLiteral_47=(Token)match(input,PullRequests,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTSEnumLiteralDeclaration_47().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_47, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PULL_REQUESTSEnumLiteralDeclaration_47());
                    			

                    }


                    }
                    break;
                case 49 :
                    // InternalPipelineParser.g:5339:3: (enumLiteral_48= Custom )
                    {
                    // InternalPipelineParser.g:5339:3: (enumLiteral_48= Custom )
                    // InternalPipelineParser.g:5340:4: enumLiteral_48= Custom
                    {
                    enumLiteral_48=(Token)match(input,Custom,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CUSTOMEnumLiteralDeclaration_48().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_48, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CUSTOMEnumLiteralDeclaration_48());
                    			

                    }


                    }
                    break;
                case 50 :
                    // InternalPipelineParser.g:5347:3: (enumLiteral_49= Conditions )
                    {
                    // InternalPipelineParser.g:5347:3: (enumLiteral_49= Conditions )
                    // InternalPipelineParser.g:5348:4: enumLiteral_49= Conditions
                    {
                    enumLiteral_49=(Token)match(input,Conditions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CONDITIONSEnumLiteralDeclaration_49().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_49, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CONDITIONSEnumLiteralDeclaration_49());
                    			

                    }


                    }
                    break;
                case 51 :
                    // InternalPipelineParser.g:5355:3: (enumLiteral_50= BitbucketBranchDeleted )
                    {
                    // InternalPipelineParser.g:5355:3: (enumLiteral_50= BitbucketBranchDeleted )
                    // InternalPipelineParser.g:5356:4: enumLiteral_50= BitbucketBranchDeleted
                    {
                    enumLiteral_50=(Token)match(input,BitbucketBranchDeleted,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_DELETEDEnumLiteralDeclaration_50().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_50, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_DELETEDEnumLiteralDeclaration_50());
                    			

                    }


                    }
                    break;
                case 52 :
                    // InternalPipelineParser.g:5363:3: (enumLiteral_51= BitbucketBranchCreated )
                    {
                    // InternalPipelineParser.g:5363:3: (enumLiteral_51= BitbucketBranchCreated )
                    // InternalPipelineParser.g:5364:4: enumLiteral_51= BitbucketBranchCreated
                    {
                    enumLiteral_51=(Token)match(input,BitbucketBranchCreated,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_CREATEDEnumLiteralDeclaration_51().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_51, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BRANCH_CREATEDEnumLiteralDeclaration_51());
                    			

                    }


                    }
                    break;
                case 53 :
                    // InternalPipelineParser.g:5371:3: (enumLiteral_52= BitbucketTagCreated )
                    {
                    // InternalPipelineParser.g:5371:3: (enumLiteral_52= BitbucketTagCreated )
                    // InternalPipelineParser.g:5372:4: enumLiteral_52= BitbucketTagCreated
                    {
                    enumLiteral_52=(Token)match(input,BitbucketTagCreated,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_CREATEDEnumLiteralDeclaration_52().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_52, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_CREATEDEnumLiteralDeclaration_52());
                    			

                    }


                    }
                    break;
                case 54 :
                    // InternalPipelineParser.g:5379:3: (enumLiteral_53= BitbucketTagDeleted )
                    {
                    // InternalPipelineParser.g:5379:3: (enumLiteral_53= BitbucketTagDeleted )
                    // InternalPipelineParser.g:5380:4: enumLiteral_53= BitbucketTagDeleted
                    {
                    enumLiteral_53=(Token)match(input,BitbucketTagDeleted,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_DELETEDEnumLiteralDeclaration_53().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_53, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_TAG_DELETEDEnumLiteralDeclaration_53());
                    			

                    }


                    }
                    break;
                case 55 :
                    // InternalPipelineParser.g:5387:3: (enumLiteral_54= Repository )
                    {
                    // InternalPipelineParser.g:5387:3: (enumLiteral_54= Repository )
                    // InternalPipelineParser.g:5388:4: enumLiteral_54= Repository
                    {
                    enumLiteral_54=(Token)match(input,Repository,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_TRIGGEREnumLiteralDeclaration_54().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_54, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REPOSITORY_TRIGGEREnumLiteralDeclaration_54());
                    			

                    }


                    }
                    break;
                case 56 :
                    // InternalPipelineParser.g:5395:3: (enumLiteral_55= Scheduled )
                    {
                    // InternalPipelineParser.g:5395:3: (enumLiteral_55= Scheduled )
                    // InternalPipelineParser.g:5396:4: enumLiteral_55= Scheduled
                    {
                    enumLiteral_55=(Token)match(input,Scheduled,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_SCHEDULED_TRIGGEREnumLiteralDeclaration_55().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_55, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_SCHEDULED_TRIGGEREnumLiteralDeclaration_55());
                    			

                    }


                    }
                    break;
                case 57 :
                    // InternalPipelineParser.g:5403:3: (enumLiteral_56= Remote )
                    {
                    // InternalPipelineParser.g:5403:3: (enumLiteral_56= Remote )
                    // InternalPipelineParser.g:5404:4: enumLiteral_56= Remote
                    {
                    enumLiteral_56=(Token)match(input,Remote,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REMOTE_TRIGGEREnumLiteralDeclaration_56().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_56, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_REMOTE_TRIGGEREnumLiteralDeclaration_56());
                    			

                    }


                    }
                    break;
                case 58 :
                    // InternalPipelineParser.g:5411:3: (enumLiteral_57= Bitbucket )
                    {
                    // InternalPipelineParser.g:5411:3: (enumLiteral_57= Bitbucket )
                    // InternalPipelineParser.g:5412:4: enumLiteral_57= Bitbucket
                    {
                    enumLiteral_57=(Token)match(input,Bitbucket,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BITBUCKET_TRIGGEREnumLiteralDeclaration_57().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_57, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_BITBUCKET_TRIGGEREnumLiteralDeclaration_57());
                    			

                    }


                    }
                    break;
                case 59 :
                    // InternalPipelineParser.g:5419:3: (enumLiteral_58= PlanBranch )
                    {
                    // InternalPipelineParser.g:5419:3: (enumLiteral_58= PlanBranch )
                    // InternalPipelineParser.g:5420:4: enumLiteral_58= PlanBranch
                    {
                    enumLiteral_58=(Token)match(input,PlanBranch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PLAN_BRANCHEnumLiteralDeclaration_58().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_58, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_PLAN_BRANCHEnumLiteralDeclaration_58());
                    			

                    }


                    }
                    break;
                case 60 :
                    // InternalPipelineParser.g:5427:3: (enumLiteral_59= Cron )
                    {
                    // InternalPipelineParser.g:5427:3: (enumLiteral_59= Cron )
                    // InternalPipelineParser.g:5428:4: enumLiteral_59= Cron
                    {
                    enumLiteral_59=(Token)match(input,Cron,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CRONEnumLiteralDeclaration_59().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_59, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_CRONEnumLiteralDeclaration_59());
                    			

                    }


                    }
                    break;
                case 61 :
                    // InternalPipelineParser.g:5435:3: (enumLiteral_60= Notifications )
                    {
                    // InternalPipelineParser.g:5435:3: (enumLiteral_60= Notifications )
                    // InternalPipelineParser.g:5436:4: enumLiteral_60= Notifications
                    {
                    enumLiteral_60=(Token)match(input,Notifications,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_NOTIFICATIONSEnumLiteralDeclaration_60().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_60, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_NOTIFICATIONSEnumLiteralDeclaration_60());
                    			

                    }


                    }
                    break;
                case 62 :
                    // InternalPipelineParser.g:5443:3: (enumLiteral_61= LockBehavior )
                    {
                    // InternalPipelineParser.g:5443:3: (enumLiteral_61= LockBehavior )
                    // InternalPipelineParser.g:5444:4: enumLiteral_61= LockBehavior
                    {
                    enumLiteral_61=(Token)match(input,LockBehavior,FOLLOW_2); 

                    				current = grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LOCK_BEHAVIOREnumLiteralDeclaration_61().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_61, grammarAccess.getPipelineEventKeywordAccess().getPPL_EVT_LOCK_BEHAVIOREnumLiteralDeclaration_61());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePipelineEventKeyword"


    // $ANTLR start "rulePipelineKeyword"
    // InternalPipelineParser.g:5454:1: rulePipelineKeyword returns [Enumerator current=null] : ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= Status ) | (enumLiteral_24= AutoCancel ) | (enumLiteral_25= Workflows ) | (enumLiteral_26= Drafts ) | (enumLiteral_27= Branches ) | (enumLiteral_28= BranchesIgnore ) | (enumLiteral_29= Paths ) | (enumLiteral_30= PathsIgnore ) | (enumLiteral_31= Tags ) | (enumLiteral_32= TagsIgnore ) | (enumLiteral_33= Schedules ) | (enumLiteral_34= Schedule ) | (enumLiteral_35= Workflow_call ) | (enumLiteral_36= Workflow_dispatch ) | (enumLiteral_37= Cron ) | (enumLiteral_38= DisplayName ) | (enumLiteral_39= Always ) | (enumLiteral_40= Stage ) | (enumLiteral_41= Condition ) | (enumLiteral_42= IsSkippable ) | (enumLiteral_43= DependsOn ) | (enumLiteral_44= Job ) | (enumLiteral_45= Deployment ) | (enumLiteral_46= Script ) | (enumLiteral_47= Bash ) | (enumLiteral_48= Pwsh ) | (enumLiteral_49= Powershell ) | (enumLiteral_50= Checkout ) | (enumLiteral_51= Download ) | (enumLiteral_52= GetPackage ) | (enumLiteral_53= Publish ) | (enumLiteral_54= Task ) | (enumLiteral_55= Value ) | (enumLiteral_56= Readonly ) | (enumLiteral_57= Builds ) | (enumLiteral_58= Containers ) | (enumLiteral_59= Pipelines ) | (enumLiteral_60= Repositories ) | (enumLiteral_61= Webhooks ) | (enumLiteral_62= Packages ) | (enumLiteral_63= Inputs ) | (enumLiteral_64= Outputs ) | (enumLiteral_65= Secrets ) | (enumLiteral_66= Description ) | (enumLiteral_67= Required ) | (enumLiteral_68= Default ) | (enumLiteral_69= Type ) | (enumLiteral_70= Options ) | (enumLiteral_71= If ) | (enumLiteral_72= RunsOn ) | (enumLiteral_73= Strategy ) | (enumLiteral_74= Matrix ) | (enumLiteral_75= Container ) | (enumLiteral_76= Services ) | (enumLiteral_77= Steps ) | (enumLiteral_78= Uses ) | (enumLiteral_79= With ) | (enumLiteral_80= TimeoutMinutes ) | (enumLiteral_81= ContinueOnError_1 ) | (enumLiteral_82= Environment ) | (enumLiteral_83= Id ) | (enumLiteral_84= Permissions ) | (enumLiteral_85= Timeouts ) | (enumLiteral_86= DefaultsRun ) | (enumLiteral_87= Push ) | (enumLiteral_88= Pull_request ) | (enumLiteral_89= Repository_dispatch ) | (enumLiteral_90= Workflow_run ) | (enumLiteral_91= Filters ) | (enumLiteral_92= Exclude ) | (enumLiteral_93= FailFast ) | (enumLiteral_94= MaxParallel ) | (enumLiteral_95= ContainerImage ) | (enumLiteral_96= Credentials ) | (enumLiteral_97= Ports ) | (enumLiteral_98= Inherit ) | (enumLiteral_99= Trigger ) | (enumLiteral_100= Template ) | (enumLiteral_101= Workspace ) | (enumLiteral_102= Pipeline ) | (enumLiteral_103= TimeoutInMinutes ) | (enumLiteral_104= ContinueOnError ) | (enumLiteral_105= ResourceType ) | (enumLiteral_106= ResourceName ) | (enumLiteral_107= Stages ) | (enumLiteral_108= Only ) | (enumLiteral_109= Except ) | (enumLiteral_110= Image ) | (enumLiteral_111= Cache ) | (enumLiteral_112= Artifacts ) | (enumLiteral_113= Retries ) | (enumLiteral_114= Rules ) | (enumLiteral_115= Before_script ) | (enumLiteral_116= After_script ) | (enumLiteral_117= Timeout ) | (enumLiteral_118= When ) | (enumLiteral_119= Allow_failure ) | (enumLiteral_120= Dependencies ) | (enumLiteral_121= PullRequests ) | (enumLiteral_122= Step ) | (enumLiteral_123= Definitions ) | (enumLiteral_124= Caches ) | (enumLiteral_125= Parallel ) | (enumLiteral_126= Conditions ) | (enumLiteral_127= MaxTime ) | (enumLiteral_128= Project ) | (enumLiteral_129= Plan ) | (enumLiteral_130= Tasks ) | (enumLiteral_131= Requirements ) | (enumLiteral_132= Final ) | (enumLiteral_133= Jdk ) | (enumLiteral_134= Labels ) | (enumLiteral_135= Repository ) | (enumLiteral_136= Release ) | (enumLiteral_137= Docker ) | (enumLiteral_138= Agent ) | (enumLiteral_139= Queue ) | (enumLiteral_140= Snapshot ) | (enumLiteral_141= Policy ) | (enumLiteral_142= Approvals ) | (enumLiteral_143= PreBuild ) | (enumLiteral_144= PostBuild ) | (enumLiteral_145= Ssh ) | (enumLiteral_146= Auth ) | (enumLiteral_147= Storage ) | (enumLiteral_148= Endpoints ) | (enumLiteral_149= Command ) | (enumLiteral_150= Provisioner ) | (enumLiteral_151= TriggerRules ) | (enumLiteral_152= RunPolicy ) | (enumLiteral_153= Queued ) | (enumLiteral_154= Notifications ) | (enumLiteral_155= DeployTrigger ) | (enumLiteral_156= ReleaseTrigger ) | (enumLiteral_157= LockBehavior ) | (enumLiteral_158= ReviewStage ) ) ;
    public final Enumerator rulePipelineKeyword() throws RecognitionException {
        Enumerator current = null;

        Token enumLiteral_0=null;
        Token enumLiteral_1=null;
        Token enumLiteral_2=null;
        Token enumLiteral_3=null;
        Token enumLiteral_4=null;
        Token enumLiteral_5=null;
        Token enumLiteral_6=null;
        Token enumLiteral_7=null;
        Token enumLiteral_8=null;
        Token enumLiteral_9=null;
        Token enumLiteral_10=null;
        Token enumLiteral_11=null;
        Token enumLiteral_12=null;
        Token enumLiteral_13=null;
        Token enumLiteral_14=null;
        Token enumLiteral_15=null;
        Token enumLiteral_16=null;
        Token enumLiteral_17=null;
        Token enumLiteral_18=null;
        Token enumLiteral_19=null;
        Token enumLiteral_20=null;
        Token enumLiteral_21=null;
        Token enumLiteral_22=null;
        Token enumLiteral_23=null;
        Token enumLiteral_24=null;
        Token enumLiteral_25=null;
        Token enumLiteral_26=null;
        Token enumLiteral_27=null;
        Token enumLiteral_28=null;
        Token enumLiteral_29=null;
        Token enumLiteral_30=null;
        Token enumLiteral_31=null;
        Token enumLiteral_32=null;
        Token enumLiteral_33=null;
        Token enumLiteral_34=null;
        Token enumLiteral_35=null;
        Token enumLiteral_36=null;
        Token enumLiteral_37=null;
        Token enumLiteral_38=null;
        Token enumLiteral_39=null;
        Token enumLiteral_40=null;
        Token enumLiteral_41=null;
        Token enumLiteral_42=null;
        Token enumLiteral_43=null;
        Token enumLiteral_44=null;
        Token enumLiteral_45=null;
        Token enumLiteral_46=null;
        Token enumLiteral_47=null;
        Token enumLiteral_48=null;
        Token enumLiteral_49=null;
        Token enumLiteral_50=null;
        Token enumLiteral_51=null;
        Token enumLiteral_52=null;
        Token enumLiteral_53=null;
        Token enumLiteral_54=null;
        Token enumLiteral_55=null;
        Token enumLiteral_56=null;
        Token enumLiteral_57=null;
        Token enumLiteral_58=null;
        Token enumLiteral_59=null;
        Token enumLiteral_60=null;
        Token enumLiteral_61=null;
        Token enumLiteral_62=null;
        Token enumLiteral_63=null;
        Token enumLiteral_64=null;
        Token enumLiteral_65=null;
        Token enumLiteral_66=null;
        Token enumLiteral_67=null;
        Token enumLiteral_68=null;
        Token enumLiteral_69=null;
        Token enumLiteral_70=null;
        Token enumLiteral_71=null;
        Token enumLiteral_72=null;
        Token enumLiteral_73=null;
        Token enumLiteral_74=null;
        Token enumLiteral_75=null;
        Token enumLiteral_76=null;
        Token enumLiteral_77=null;
        Token enumLiteral_78=null;
        Token enumLiteral_79=null;
        Token enumLiteral_80=null;
        Token enumLiteral_81=null;
        Token enumLiteral_82=null;
        Token enumLiteral_83=null;
        Token enumLiteral_84=null;
        Token enumLiteral_85=null;
        Token enumLiteral_86=null;
        Token enumLiteral_87=null;
        Token enumLiteral_88=null;
        Token enumLiteral_89=null;
        Token enumLiteral_90=null;
        Token enumLiteral_91=null;
        Token enumLiteral_92=null;
        Token enumLiteral_93=null;
        Token enumLiteral_94=null;
        Token enumLiteral_95=null;
        Token enumLiteral_96=null;
        Token enumLiteral_97=null;
        Token enumLiteral_98=null;
        Token enumLiteral_99=null;
        Token enumLiteral_100=null;
        Token enumLiteral_101=null;
        Token enumLiteral_102=null;
        Token enumLiteral_103=null;
        Token enumLiteral_104=null;
        Token enumLiteral_105=null;
        Token enumLiteral_106=null;
        Token enumLiteral_107=null;
        Token enumLiteral_108=null;
        Token enumLiteral_109=null;
        Token enumLiteral_110=null;
        Token enumLiteral_111=null;
        Token enumLiteral_112=null;
        Token enumLiteral_113=null;
        Token enumLiteral_114=null;
        Token enumLiteral_115=null;
        Token enumLiteral_116=null;
        Token enumLiteral_117=null;
        Token enumLiteral_118=null;
        Token enumLiteral_119=null;
        Token enumLiteral_120=null;
        Token enumLiteral_121=null;
        Token enumLiteral_122=null;
        Token enumLiteral_123=null;
        Token enumLiteral_124=null;
        Token enumLiteral_125=null;
        Token enumLiteral_126=null;
        Token enumLiteral_127=null;
        Token enumLiteral_128=null;
        Token enumLiteral_129=null;
        Token enumLiteral_130=null;
        Token enumLiteral_131=null;
        Token enumLiteral_132=null;
        Token enumLiteral_133=null;
        Token enumLiteral_134=null;
        Token enumLiteral_135=null;
        Token enumLiteral_136=null;
        Token enumLiteral_137=null;
        Token enumLiteral_138=null;
        Token enumLiteral_139=null;
        Token enumLiteral_140=null;
        Token enumLiteral_141=null;
        Token enumLiteral_142=null;
        Token enumLiteral_143=null;
        Token enumLiteral_144=null;
        Token enumLiteral_145=null;
        Token enumLiteral_146=null;
        Token enumLiteral_147=null;
        Token enumLiteral_148=null;
        Token enumLiteral_149=null;
        Token enumLiteral_150=null;
        Token enumLiteral_151=null;
        Token enumLiteral_152=null;
        Token enumLiteral_153=null;
        Token enumLiteral_154=null;
        Token enumLiteral_155=null;
        Token enumLiteral_156=null;
        Token enumLiteral_157=null;
        Token enumLiteral_158=null;


        	enterRule();

        try {
            // InternalPipelineParser.g:5460:2: ( ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= Status ) | (enumLiteral_24= AutoCancel ) | (enumLiteral_25= Workflows ) | (enumLiteral_26= Drafts ) | (enumLiteral_27= Branches ) | (enumLiteral_28= BranchesIgnore ) | (enumLiteral_29= Paths ) | (enumLiteral_30= PathsIgnore ) | (enumLiteral_31= Tags ) | (enumLiteral_32= TagsIgnore ) | (enumLiteral_33= Schedules ) | (enumLiteral_34= Schedule ) | (enumLiteral_35= Workflow_call ) | (enumLiteral_36= Workflow_dispatch ) | (enumLiteral_37= Cron ) | (enumLiteral_38= DisplayName ) | (enumLiteral_39= Always ) | (enumLiteral_40= Stage ) | (enumLiteral_41= Condition ) | (enumLiteral_42= IsSkippable ) | (enumLiteral_43= DependsOn ) | (enumLiteral_44= Job ) | (enumLiteral_45= Deployment ) | (enumLiteral_46= Script ) | (enumLiteral_47= Bash ) | (enumLiteral_48= Pwsh ) | (enumLiteral_49= Powershell ) | (enumLiteral_50= Checkout ) | (enumLiteral_51= Download ) | (enumLiteral_52= GetPackage ) | (enumLiteral_53= Publish ) | (enumLiteral_54= Task ) | (enumLiteral_55= Value ) | (enumLiteral_56= Readonly ) | (enumLiteral_57= Builds ) | (enumLiteral_58= Containers ) | (enumLiteral_59= Pipelines ) | (enumLiteral_60= Repositories ) | (enumLiteral_61= Webhooks ) | (enumLiteral_62= Packages ) | (enumLiteral_63= Inputs ) | (enumLiteral_64= Outputs ) | (enumLiteral_65= Secrets ) | (enumLiteral_66= Description ) | (enumLiteral_67= Required ) | (enumLiteral_68= Default ) | (enumLiteral_69= Type ) | (enumLiteral_70= Options ) | (enumLiteral_71= If ) | (enumLiteral_72= RunsOn ) | (enumLiteral_73= Strategy ) | (enumLiteral_74= Matrix ) | (enumLiteral_75= Container ) | (enumLiteral_76= Services ) | (enumLiteral_77= Steps ) | (enumLiteral_78= Uses ) | (enumLiteral_79= With ) | (enumLiteral_80= TimeoutMinutes ) | (enumLiteral_81= ContinueOnError_1 ) | (enumLiteral_82= Environment ) | (enumLiteral_83= Id ) | (enumLiteral_84= Permissions ) | (enumLiteral_85= Timeouts ) | (enumLiteral_86= DefaultsRun ) | (enumLiteral_87= Push ) | (enumLiteral_88= Pull_request ) | (enumLiteral_89= Repository_dispatch ) | (enumLiteral_90= Workflow_run ) | (enumLiteral_91= Filters ) | (enumLiteral_92= Exclude ) | (enumLiteral_93= FailFast ) | (enumLiteral_94= MaxParallel ) | (enumLiteral_95= ContainerImage ) | (enumLiteral_96= Credentials ) | (enumLiteral_97= Ports ) | (enumLiteral_98= Inherit ) | (enumLiteral_99= Trigger ) | (enumLiteral_100= Template ) | (enumLiteral_101= Workspace ) | (enumLiteral_102= Pipeline ) | (enumLiteral_103= TimeoutInMinutes ) | (enumLiteral_104= ContinueOnError ) | (enumLiteral_105= ResourceType ) | (enumLiteral_106= ResourceName ) | (enumLiteral_107= Stages ) | (enumLiteral_108= Only ) | (enumLiteral_109= Except ) | (enumLiteral_110= Image ) | (enumLiteral_111= Cache ) | (enumLiteral_112= Artifacts ) | (enumLiteral_113= Retries ) | (enumLiteral_114= Rules ) | (enumLiteral_115= Before_script ) | (enumLiteral_116= After_script ) | (enumLiteral_117= Timeout ) | (enumLiteral_118= When ) | (enumLiteral_119= Allow_failure ) | (enumLiteral_120= Dependencies ) | (enumLiteral_121= PullRequests ) | (enumLiteral_122= Step ) | (enumLiteral_123= Definitions ) | (enumLiteral_124= Caches ) | (enumLiteral_125= Parallel ) | (enumLiteral_126= Conditions ) | (enumLiteral_127= MaxTime ) | (enumLiteral_128= Project ) | (enumLiteral_129= Plan ) | (enumLiteral_130= Tasks ) | (enumLiteral_131= Requirements ) | (enumLiteral_132= Final ) | (enumLiteral_133= Jdk ) | (enumLiteral_134= Labels ) | (enumLiteral_135= Repository ) | (enumLiteral_136= Release ) | (enumLiteral_137= Docker ) | (enumLiteral_138= Agent ) | (enumLiteral_139= Queue ) | (enumLiteral_140= Snapshot ) | (enumLiteral_141= Policy ) | (enumLiteral_142= Approvals ) | (enumLiteral_143= PreBuild ) | (enumLiteral_144= PostBuild ) | (enumLiteral_145= Ssh ) | (enumLiteral_146= Auth ) | (enumLiteral_147= Storage ) | (enumLiteral_148= Endpoints ) | (enumLiteral_149= Command ) | (enumLiteral_150= Provisioner ) | (enumLiteral_151= TriggerRules ) | (enumLiteral_152= RunPolicy ) | (enumLiteral_153= Queued ) | (enumLiteral_154= Notifications ) | (enumLiteral_155= DeployTrigger ) | (enumLiteral_156= ReleaseTrigger ) | (enumLiteral_157= LockBehavior ) | (enumLiteral_158= ReviewStage ) ) )
            // InternalPipelineParser.g:5461:2: ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= Status ) | (enumLiteral_24= AutoCancel ) | (enumLiteral_25= Workflows ) | (enumLiteral_26= Drafts ) | (enumLiteral_27= Branches ) | (enumLiteral_28= BranchesIgnore ) | (enumLiteral_29= Paths ) | (enumLiteral_30= PathsIgnore ) | (enumLiteral_31= Tags ) | (enumLiteral_32= TagsIgnore ) | (enumLiteral_33= Schedules ) | (enumLiteral_34= Schedule ) | (enumLiteral_35= Workflow_call ) | (enumLiteral_36= Workflow_dispatch ) | (enumLiteral_37= Cron ) | (enumLiteral_38= DisplayName ) | (enumLiteral_39= Always ) | (enumLiteral_40= Stage ) | (enumLiteral_41= Condition ) | (enumLiteral_42= IsSkippable ) | (enumLiteral_43= DependsOn ) | (enumLiteral_44= Job ) | (enumLiteral_45= Deployment ) | (enumLiteral_46= Script ) | (enumLiteral_47= Bash ) | (enumLiteral_48= Pwsh ) | (enumLiteral_49= Powershell ) | (enumLiteral_50= Checkout ) | (enumLiteral_51= Download ) | (enumLiteral_52= GetPackage ) | (enumLiteral_53= Publish ) | (enumLiteral_54= Task ) | (enumLiteral_55= Value ) | (enumLiteral_56= Readonly ) | (enumLiteral_57= Builds ) | (enumLiteral_58= Containers ) | (enumLiteral_59= Pipelines ) | (enumLiteral_60= Repositories ) | (enumLiteral_61= Webhooks ) | (enumLiteral_62= Packages ) | (enumLiteral_63= Inputs ) | (enumLiteral_64= Outputs ) | (enumLiteral_65= Secrets ) | (enumLiteral_66= Description ) | (enumLiteral_67= Required ) | (enumLiteral_68= Default ) | (enumLiteral_69= Type ) | (enumLiteral_70= Options ) | (enumLiteral_71= If ) | (enumLiteral_72= RunsOn ) | (enumLiteral_73= Strategy ) | (enumLiteral_74= Matrix ) | (enumLiteral_75= Container ) | (enumLiteral_76= Services ) | (enumLiteral_77= Steps ) | (enumLiteral_78= Uses ) | (enumLiteral_79= With ) | (enumLiteral_80= TimeoutMinutes ) | (enumLiteral_81= ContinueOnError_1 ) | (enumLiteral_82= Environment ) | (enumLiteral_83= Id ) | (enumLiteral_84= Permissions ) | (enumLiteral_85= Timeouts ) | (enumLiteral_86= DefaultsRun ) | (enumLiteral_87= Push ) | (enumLiteral_88= Pull_request ) | (enumLiteral_89= Repository_dispatch ) | (enumLiteral_90= Workflow_run ) | (enumLiteral_91= Filters ) | (enumLiteral_92= Exclude ) | (enumLiteral_93= FailFast ) | (enumLiteral_94= MaxParallel ) | (enumLiteral_95= ContainerImage ) | (enumLiteral_96= Credentials ) | (enumLiteral_97= Ports ) | (enumLiteral_98= Inherit ) | (enumLiteral_99= Trigger ) | (enumLiteral_100= Template ) | (enumLiteral_101= Workspace ) | (enumLiteral_102= Pipeline ) | (enumLiteral_103= TimeoutInMinutes ) | (enumLiteral_104= ContinueOnError ) | (enumLiteral_105= ResourceType ) | (enumLiteral_106= ResourceName ) | (enumLiteral_107= Stages ) | (enumLiteral_108= Only ) | (enumLiteral_109= Except ) | (enumLiteral_110= Image ) | (enumLiteral_111= Cache ) | (enumLiteral_112= Artifacts ) | (enumLiteral_113= Retries ) | (enumLiteral_114= Rules ) | (enumLiteral_115= Before_script ) | (enumLiteral_116= After_script ) | (enumLiteral_117= Timeout ) | (enumLiteral_118= When ) | (enumLiteral_119= Allow_failure ) | (enumLiteral_120= Dependencies ) | (enumLiteral_121= PullRequests ) | (enumLiteral_122= Step ) | (enumLiteral_123= Definitions ) | (enumLiteral_124= Caches ) | (enumLiteral_125= Parallel ) | (enumLiteral_126= Conditions ) | (enumLiteral_127= MaxTime ) | (enumLiteral_128= Project ) | (enumLiteral_129= Plan ) | (enumLiteral_130= Tasks ) | (enumLiteral_131= Requirements ) | (enumLiteral_132= Final ) | (enumLiteral_133= Jdk ) | (enumLiteral_134= Labels ) | (enumLiteral_135= Repository ) | (enumLiteral_136= Release ) | (enumLiteral_137= Docker ) | (enumLiteral_138= Agent ) | (enumLiteral_139= Queue ) | (enumLiteral_140= Snapshot ) | (enumLiteral_141= Policy ) | (enumLiteral_142= Approvals ) | (enumLiteral_143= PreBuild ) | (enumLiteral_144= PostBuild ) | (enumLiteral_145= Ssh ) | (enumLiteral_146= Auth ) | (enumLiteral_147= Storage ) | (enumLiteral_148= Endpoints ) | (enumLiteral_149= Command ) | (enumLiteral_150= Provisioner ) | (enumLiteral_151= TriggerRules ) | (enumLiteral_152= RunPolicy ) | (enumLiteral_153= Queued ) | (enumLiteral_154= Notifications ) | (enumLiteral_155= DeployTrigger ) | (enumLiteral_156= ReleaseTrigger ) | (enumLiteral_157= LockBehavior ) | (enumLiteral_158= ReviewStage ) )
            {
            // InternalPipelineParser.g:5461:2: ( (enumLiteral_0= Name ) | (enumLiteral_1= RunName ) | (enumLiteral_2= On ) | (enumLiteral_3= Defaults ) | (enumLiteral_4= Run ) | (enumLiteral_5= Shell ) | (enumLiteral_6= WorkingDirectory ) | (enumLiteral_7= Env ) | (enumLiteral_8= Permission ) | (enumLiteral_9= Concurrency ) | (enumLiteral_10= Group ) | (enumLiteral_11= CancelInProgress ) | (enumLiteral_12= Pool ) | (enumLiteral_13= VmImage ) | (enumLiteral_14= Demands ) | (enumLiteral_15= Resources ) | (enumLiteral_16= Version ) | (enumLiteral_17= Variables ) | (enumLiteral_18= Parameters ) | (enumLiteral_19= Extends ) | (enumLiteral_20= Include ) | (enumLiteral_21= Types ) | (enumLiteral_22= Batch ) | (enumLiteral_23= Status ) | (enumLiteral_24= AutoCancel ) | (enumLiteral_25= Workflows ) | (enumLiteral_26= Drafts ) | (enumLiteral_27= Branches ) | (enumLiteral_28= BranchesIgnore ) | (enumLiteral_29= Paths ) | (enumLiteral_30= PathsIgnore ) | (enumLiteral_31= Tags ) | (enumLiteral_32= TagsIgnore ) | (enumLiteral_33= Schedules ) | (enumLiteral_34= Schedule ) | (enumLiteral_35= Workflow_call ) | (enumLiteral_36= Workflow_dispatch ) | (enumLiteral_37= Cron ) | (enumLiteral_38= DisplayName ) | (enumLiteral_39= Always ) | (enumLiteral_40= Stage ) | (enumLiteral_41= Condition ) | (enumLiteral_42= IsSkippable ) | (enumLiteral_43= DependsOn ) | (enumLiteral_44= Job ) | (enumLiteral_45= Deployment ) | (enumLiteral_46= Script ) | (enumLiteral_47= Bash ) | (enumLiteral_48= Pwsh ) | (enumLiteral_49= Powershell ) | (enumLiteral_50= Checkout ) | (enumLiteral_51= Download ) | (enumLiteral_52= GetPackage ) | (enumLiteral_53= Publish ) | (enumLiteral_54= Task ) | (enumLiteral_55= Value ) | (enumLiteral_56= Readonly ) | (enumLiteral_57= Builds ) | (enumLiteral_58= Containers ) | (enumLiteral_59= Pipelines ) | (enumLiteral_60= Repositories ) | (enumLiteral_61= Webhooks ) | (enumLiteral_62= Packages ) | (enumLiteral_63= Inputs ) | (enumLiteral_64= Outputs ) | (enumLiteral_65= Secrets ) | (enumLiteral_66= Description ) | (enumLiteral_67= Required ) | (enumLiteral_68= Default ) | (enumLiteral_69= Type ) | (enumLiteral_70= Options ) | (enumLiteral_71= If ) | (enumLiteral_72= RunsOn ) | (enumLiteral_73= Strategy ) | (enumLiteral_74= Matrix ) | (enumLiteral_75= Container ) | (enumLiteral_76= Services ) | (enumLiteral_77= Steps ) | (enumLiteral_78= Uses ) | (enumLiteral_79= With ) | (enumLiteral_80= TimeoutMinutes ) | (enumLiteral_81= ContinueOnError_1 ) | (enumLiteral_82= Environment ) | (enumLiteral_83= Id ) | (enumLiteral_84= Permissions ) | (enumLiteral_85= Timeouts ) | (enumLiteral_86= DefaultsRun ) | (enumLiteral_87= Push ) | (enumLiteral_88= Pull_request ) | (enumLiteral_89= Repository_dispatch ) | (enumLiteral_90= Workflow_run ) | (enumLiteral_91= Filters ) | (enumLiteral_92= Exclude ) | (enumLiteral_93= FailFast ) | (enumLiteral_94= MaxParallel ) | (enumLiteral_95= ContainerImage ) | (enumLiteral_96= Credentials ) | (enumLiteral_97= Ports ) | (enumLiteral_98= Inherit ) | (enumLiteral_99= Trigger ) | (enumLiteral_100= Template ) | (enumLiteral_101= Workspace ) | (enumLiteral_102= Pipeline ) | (enumLiteral_103= TimeoutInMinutes ) | (enumLiteral_104= ContinueOnError ) | (enumLiteral_105= ResourceType ) | (enumLiteral_106= ResourceName ) | (enumLiteral_107= Stages ) | (enumLiteral_108= Only ) | (enumLiteral_109= Except ) | (enumLiteral_110= Image ) | (enumLiteral_111= Cache ) | (enumLiteral_112= Artifacts ) | (enumLiteral_113= Retries ) | (enumLiteral_114= Rules ) | (enumLiteral_115= Before_script ) | (enumLiteral_116= After_script ) | (enumLiteral_117= Timeout ) | (enumLiteral_118= When ) | (enumLiteral_119= Allow_failure ) | (enumLiteral_120= Dependencies ) | (enumLiteral_121= PullRequests ) | (enumLiteral_122= Step ) | (enumLiteral_123= Definitions ) | (enumLiteral_124= Caches ) | (enumLiteral_125= Parallel ) | (enumLiteral_126= Conditions ) | (enumLiteral_127= MaxTime ) | (enumLiteral_128= Project ) | (enumLiteral_129= Plan ) | (enumLiteral_130= Tasks ) | (enumLiteral_131= Requirements ) | (enumLiteral_132= Final ) | (enumLiteral_133= Jdk ) | (enumLiteral_134= Labels ) | (enumLiteral_135= Repository ) | (enumLiteral_136= Release ) | (enumLiteral_137= Docker ) | (enumLiteral_138= Agent ) | (enumLiteral_139= Queue ) | (enumLiteral_140= Snapshot ) | (enumLiteral_141= Policy ) | (enumLiteral_142= Approvals ) | (enumLiteral_143= PreBuild ) | (enumLiteral_144= PostBuild ) | (enumLiteral_145= Ssh ) | (enumLiteral_146= Auth ) | (enumLiteral_147= Storage ) | (enumLiteral_148= Endpoints ) | (enumLiteral_149= Command ) | (enumLiteral_150= Provisioner ) | (enumLiteral_151= TriggerRules ) | (enumLiteral_152= RunPolicy ) | (enumLiteral_153= Queued ) | (enumLiteral_154= Notifications ) | (enumLiteral_155= DeployTrigger ) | (enumLiteral_156= ReleaseTrigger ) | (enumLiteral_157= LockBehavior ) | (enumLiteral_158= ReviewStage ) )
            int alt157=159;
            switch ( input.LA(1) ) {
            case Name:
                {
                alt157=1;
                }
                break;
            case RunName:
                {
                alt157=2;
                }
                break;
            case On:
                {
                alt157=3;
                }
                break;
            case Defaults:
                {
                alt157=4;
                }
                break;
            case Run:
                {
                alt157=5;
                }
                break;
            case Shell:
                {
                alt157=6;
                }
                break;
            case WorkingDirectory:
                {
                alt157=7;
                }
                break;
            case Env:
                {
                alt157=8;
                }
                break;
            case Permission:
                {
                alt157=9;
                }
                break;
            case Concurrency:
                {
                alt157=10;
                }
                break;
            case Group:
                {
                alt157=11;
                }
                break;
            case CancelInProgress:
                {
                alt157=12;
                }
                break;
            case Pool:
                {
                alt157=13;
                }
                break;
            case VmImage:
                {
                alt157=14;
                }
                break;
            case Demands:
                {
                alt157=15;
                }
                break;
            case Resources:
                {
                alt157=16;
                }
                break;
            case Version:
                {
                alt157=17;
                }
                break;
            case Variables:
                {
                alt157=18;
                }
                break;
            case Parameters:
                {
                alt157=19;
                }
                break;
            case Extends:
                {
                alt157=20;
                }
                break;
            case Include:
                {
                alt157=21;
                }
                break;
            case Types:
                {
                alt157=22;
                }
                break;
            case Batch:
                {
                alt157=23;
                }
                break;
            case Status:
                {
                alt157=24;
                }
                break;
            case AutoCancel:
                {
                alt157=25;
                }
                break;
            case Workflows:
                {
                alt157=26;
                }
                break;
            case Drafts:
                {
                alt157=27;
                }
                break;
            case Branches:
                {
                alt157=28;
                }
                break;
            case BranchesIgnore:
                {
                alt157=29;
                }
                break;
            case Paths:
                {
                alt157=30;
                }
                break;
            case PathsIgnore:
                {
                alt157=31;
                }
                break;
            case Tags:
                {
                alt157=32;
                }
                break;
            case TagsIgnore:
                {
                alt157=33;
                }
                break;
            case Schedules:
                {
                alt157=34;
                }
                break;
            case Schedule:
                {
                alt157=35;
                }
                break;
            case Workflow_call:
                {
                alt157=36;
                }
                break;
            case Workflow_dispatch:
                {
                alt157=37;
                }
                break;
            case Cron:
                {
                alt157=38;
                }
                break;
            case DisplayName:
                {
                alt157=39;
                }
                break;
            case Always:
                {
                alt157=40;
                }
                break;
            case Stage:
                {
                alt157=41;
                }
                break;
            case Condition:
                {
                alt157=42;
                }
                break;
            case IsSkippable:
                {
                alt157=43;
                }
                break;
            case DependsOn:
                {
                alt157=44;
                }
                break;
            case Job:
                {
                alt157=45;
                }
                break;
            case Deployment:
                {
                alt157=46;
                }
                break;
            case Script:
                {
                alt157=47;
                }
                break;
            case Bash:
                {
                alt157=48;
                }
                break;
            case Pwsh:
                {
                alt157=49;
                }
                break;
            case Powershell:
                {
                alt157=50;
                }
                break;
            case Checkout:
                {
                alt157=51;
                }
                break;
            case Download:
                {
                alt157=52;
                }
                break;
            case GetPackage:
                {
                alt157=53;
                }
                break;
            case Publish:
                {
                alt157=54;
                }
                break;
            case Task:
                {
                alt157=55;
                }
                break;
            case Value:
                {
                alt157=56;
                }
                break;
            case Readonly:
                {
                alt157=57;
                }
                break;
            case Builds:
                {
                alt157=58;
                }
                break;
            case Containers:
                {
                alt157=59;
                }
                break;
            case Pipelines:
                {
                alt157=60;
                }
                break;
            case Repositories:
                {
                alt157=61;
                }
                break;
            case Webhooks:
                {
                alt157=62;
                }
                break;
            case Packages:
                {
                alt157=63;
                }
                break;
            case Inputs:
                {
                alt157=64;
                }
                break;
            case Outputs:
                {
                alt157=65;
                }
                break;
            case Secrets:
                {
                alt157=66;
                }
                break;
            case Description:
                {
                alt157=67;
                }
                break;
            case Required:
                {
                alt157=68;
                }
                break;
            case Default:
                {
                alt157=69;
                }
                break;
            case Type:
                {
                alt157=70;
                }
                break;
            case Options:
                {
                alt157=71;
                }
                break;
            case If:
                {
                alt157=72;
                }
                break;
            case RunsOn:
                {
                alt157=73;
                }
                break;
            case Strategy:
                {
                alt157=74;
                }
                break;
            case Matrix:
                {
                alt157=75;
                }
                break;
            case Container:
                {
                alt157=76;
                }
                break;
            case Services:
                {
                alt157=77;
                }
                break;
            case Steps:
                {
                alt157=78;
                }
                break;
            case Uses:
                {
                alt157=79;
                }
                break;
            case With:
                {
                alt157=80;
                }
                break;
            case TimeoutMinutes:
                {
                alt157=81;
                }
                break;
            case ContinueOnError_1:
                {
                alt157=82;
                }
                break;
            case Environment:
                {
                alt157=83;
                }
                break;
            case Id:
                {
                alt157=84;
                }
                break;
            case Permissions:
                {
                alt157=85;
                }
                break;
            case Timeouts:
                {
                alt157=86;
                }
                break;
            case DefaultsRun:
                {
                alt157=87;
                }
                break;
            case Push:
                {
                alt157=88;
                }
                break;
            case Pull_request:
                {
                alt157=89;
                }
                break;
            case Repository_dispatch:
                {
                alt157=90;
                }
                break;
            case Workflow_run:
                {
                alt157=91;
                }
                break;
            case Filters:
                {
                alt157=92;
                }
                break;
            case Exclude:
                {
                alt157=93;
                }
                break;
            case FailFast:
                {
                alt157=94;
                }
                break;
            case MaxParallel:
                {
                alt157=95;
                }
                break;
            case ContainerImage:
                {
                alt157=96;
                }
                break;
            case Credentials:
                {
                alt157=97;
                }
                break;
            case Ports:
                {
                alt157=98;
                }
                break;
            case Inherit:
                {
                alt157=99;
                }
                break;
            case Trigger:
                {
                alt157=100;
                }
                break;
            case Template:
                {
                alt157=101;
                }
                break;
            case Workspace:
                {
                alt157=102;
                }
                break;
            case Pipeline:
                {
                alt157=103;
                }
                break;
            case TimeoutInMinutes:
                {
                alt157=104;
                }
                break;
            case ContinueOnError:
                {
                alt157=105;
                }
                break;
            case ResourceType:
                {
                alt157=106;
                }
                break;
            case ResourceName:
                {
                alt157=107;
                }
                break;
            case Stages:
                {
                alt157=108;
                }
                break;
            case Only:
                {
                alt157=109;
                }
                break;
            case Except:
                {
                alt157=110;
                }
                break;
            case Image:
                {
                alt157=111;
                }
                break;
            case Cache:
                {
                alt157=112;
                }
                break;
            case Artifacts:
                {
                alt157=113;
                }
                break;
            case Retries:
                {
                alt157=114;
                }
                break;
            case Rules:
                {
                alt157=115;
                }
                break;
            case Before_script:
                {
                alt157=116;
                }
                break;
            case After_script:
                {
                alt157=117;
                }
                break;
            case Timeout:
                {
                alt157=118;
                }
                break;
            case When:
                {
                alt157=119;
                }
                break;
            case Allow_failure:
                {
                alt157=120;
                }
                break;
            case Dependencies:
                {
                alt157=121;
                }
                break;
            case PullRequests:
                {
                alt157=122;
                }
                break;
            case Step:
                {
                alt157=123;
                }
                break;
            case Definitions:
                {
                alt157=124;
                }
                break;
            case Caches:
                {
                alt157=125;
                }
                break;
            case Parallel:
                {
                alt157=126;
                }
                break;
            case Conditions:
                {
                alt157=127;
                }
                break;
            case MaxTime:
                {
                alt157=128;
                }
                break;
            case Project:
                {
                alt157=129;
                }
                break;
            case Plan:
                {
                alt157=130;
                }
                break;
            case Tasks:
                {
                alt157=131;
                }
                break;
            case Requirements:
                {
                alt157=132;
                }
                break;
            case Final:
                {
                alt157=133;
                }
                break;
            case Jdk:
                {
                alt157=134;
                }
                break;
            case Labels:
                {
                alt157=135;
                }
                break;
            case Repository:
                {
                alt157=136;
                }
                break;
            case Release:
                {
                alt157=137;
                }
                break;
            case Docker:
                {
                alt157=138;
                }
                break;
            case Agent:
                {
                alt157=139;
                }
                break;
            case Queue:
                {
                alt157=140;
                }
                break;
            case Snapshot:
                {
                alt157=141;
                }
                break;
            case Policy:
                {
                alt157=142;
                }
                break;
            case Approvals:
                {
                alt157=143;
                }
                break;
            case PreBuild:
                {
                alt157=144;
                }
                break;
            case PostBuild:
                {
                alt157=145;
                }
                break;
            case Ssh:
                {
                alt157=146;
                }
                break;
            case Auth:
                {
                alt157=147;
                }
                break;
            case Storage:
                {
                alt157=148;
                }
                break;
            case Endpoints:
                {
                alt157=149;
                }
                break;
            case Command:
                {
                alt157=150;
                }
                break;
            case Provisioner:
                {
                alt157=151;
                }
                break;
            case TriggerRules:
                {
                alt157=152;
                }
                break;
            case RunPolicy:
                {
                alt157=153;
                }
                break;
            case Queued:
                {
                alt157=154;
                }
                break;
            case Notifications:
                {
                alt157=155;
                }
                break;
            case DeployTrigger:
                {
                alt157=156;
                }
                break;
            case ReleaseTrigger:
                {
                alt157=157;
                }
                break;
            case LockBehavior:
                {
                alt157=158;
                }
                break;
            case ReviewStage:
                {
                alt157=159;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;
            }

            switch (alt157) {
                case 1 :
                    // InternalPipelineParser.g:5462:3: (enumLiteral_0= Name )
                    {
                    // InternalPipelineParser.g:5462:3: (enumLiteral_0= Name )
                    // InternalPipelineParser.g:5463:4: enumLiteral_0= Name
                    {
                    enumLiteral_0=(Token)match(input,Name,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_NAMEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_0, grammarAccess.getPipelineKeywordAccess().getPPL_KW_NAMEEnumLiteralDeclaration_0());
                    			

                    }


                    }
                    break;
                case 2 :
                    // InternalPipelineParser.g:5470:3: (enumLiteral_1= RunName )
                    {
                    // InternalPipelineParser.g:5470:3: (enumLiteral_1= RunName )
                    // InternalPipelineParser.g:5471:4: enumLiteral_1= RunName
                    {
                    enumLiteral_1=(Token)match(input,RunName,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_NAMEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_1, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_NAMEEnumLiteralDeclaration_1());
                    			

                    }


                    }
                    break;
                case 3 :
                    // InternalPipelineParser.g:5478:3: (enumLiteral_2= On )
                    {
                    // InternalPipelineParser.g:5478:3: (enumLiteral_2= On )
                    // InternalPipelineParser.g:5479:4: enumLiteral_2= On
                    {
                    enumLiteral_2=(Token)match(input,On,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_2, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONEnumLiteralDeclaration_2());
                    			

                    }


                    }
                    break;
                case 4 :
                    // InternalPipelineParser.g:5486:3: (enumLiteral_3= Defaults )
                    {
                    // InternalPipelineParser.g:5486:3: (enumLiteral_3= Defaults )
                    // InternalPipelineParser.g:5487:4: enumLiteral_3= Defaults
                    {
                    enumLiteral_3=(Token)match(input,Defaults,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_3, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTSEnumLiteralDeclaration_3());
                    			

                    }


                    }
                    break;
                case 5 :
                    // InternalPipelineParser.g:5494:3: (enumLiteral_4= Run )
                    {
                    // InternalPipelineParser.g:5494:3: (enumLiteral_4= Run )
                    // InternalPipelineParser.g:5495:4: enumLiteral_4= Run
                    {
                    enumLiteral_4=(Token)match(input,Run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_4, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNEnumLiteralDeclaration_4());
                    			

                    }


                    }
                    break;
                case 6 :
                    // InternalPipelineParser.g:5502:3: (enumLiteral_5= Shell )
                    {
                    // InternalPipelineParser.g:5502:3: (enumLiteral_5= Shell )
                    // InternalPipelineParser.g:5503:4: enumLiteral_5= Shell
                    {
                    enumLiteral_5=(Token)match(input,Shell,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SHELLEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_5, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SHELLEnumLiteralDeclaration_5());
                    			

                    }


                    }
                    break;
                case 7 :
                    // InternalPipelineParser.g:5510:3: (enumLiteral_6= WorkingDirectory )
                    {
                    // InternalPipelineParser.g:5510:3: (enumLiteral_6= WorkingDirectory )
                    // InternalPipelineParser.g:5511:4: enumLiteral_6= WorkingDirectory
                    {
                    enumLiteral_6=(Token)match(input,WorkingDirectory,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKING_DIRECTORYEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_6, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKING_DIRECTORYEnumLiteralDeclaration_6());
                    			

                    }


                    }
                    break;
                case 8 :
                    // InternalPipelineParser.g:5518:3: (enumLiteral_7= Env )
                    {
                    // InternalPipelineParser.g:5518:3: (enumLiteral_7= Env )
                    // InternalPipelineParser.g:5519:4: enumLiteral_7= Env
                    {
                    enumLiteral_7=(Token)match(input,Env,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_7, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVEnumLiteralDeclaration_7());
                    			

                    }


                    }
                    break;
                case 9 :
                    // InternalPipelineParser.g:5526:3: (enumLiteral_8= Permission )
                    {
                    // InternalPipelineParser.g:5526:3: (enumLiteral_8= Permission )
                    // InternalPipelineParser.g:5527:4: enumLiteral_8= Permission
                    {
                    enumLiteral_8=(Token)match(input,Permission,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_8, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONEnumLiteralDeclaration_8());
                    			

                    }


                    }
                    break;
                case 10 :
                    // InternalPipelineParser.g:5534:3: (enumLiteral_9= Concurrency )
                    {
                    // InternalPipelineParser.g:5534:3: (enumLiteral_9= Concurrency )
                    // InternalPipelineParser.g:5535:4: enumLiteral_9= Concurrency
                    {
                    enumLiteral_9=(Token)match(input,Concurrency,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONCURRENCYEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_9, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONCURRENCYEnumLiteralDeclaration_9());
                    			

                    }


                    }
                    break;
                case 11 :
                    // InternalPipelineParser.g:5542:3: (enumLiteral_10= Group )
                    {
                    // InternalPipelineParser.g:5542:3: (enumLiteral_10= Group )
                    // InternalPipelineParser.g:5543:4: enumLiteral_10= Group
                    {
                    enumLiteral_10=(Token)match(input,Group,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_GROUPEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_10, grammarAccess.getPipelineKeywordAccess().getPPL_KW_GROUPEnumLiteralDeclaration_10());
                    			

                    }


                    }
                    break;
                case 12 :
                    // InternalPipelineParser.g:5550:3: (enumLiteral_11= CancelInProgress )
                    {
                    // InternalPipelineParser.g:5550:3: (enumLiteral_11= CancelInProgress )
                    // InternalPipelineParser.g:5551:4: enumLiteral_11= CancelInProgress
                    {
                    enumLiteral_11=(Token)match(input,CancelInProgress,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CANCEL_IN_PROGRESSEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_11, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CANCEL_IN_PROGRESSEnumLiteralDeclaration_11());
                    			

                    }


                    }
                    break;
                case 13 :
                    // InternalPipelineParser.g:5558:3: (enumLiteral_12= Pool )
                    {
                    // InternalPipelineParser.g:5558:3: (enumLiteral_12= Pool )
                    // InternalPipelineParser.g:5559:4: enumLiteral_12= Pool
                    {
                    enumLiteral_12=(Token)match(input,Pool,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POOLEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_12, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POOLEnumLiteralDeclaration_12());
                    			

                    }


                    }
                    break;
                case 14 :
                    // InternalPipelineParser.g:5566:3: (enumLiteral_13= VmImage )
                    {
                    // InternalPipelineParser.g:5566:3: (enumLiteral_13= VmImage )
                    // InternalPipelineParser.g:5567:4: enumLiteral_13= VmImage
                    {
                    enumLiteral_13=(Token)match(input,VmImage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VM_IMAGEEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_13, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VM_IMAGEEnumLiteralDeclaration_13());
                    			

                    }


                    }
                    break;
                case 15 :
                    // InternalPipelineParser.g:5574:3: (enumLiteral_14= Demands )
                    {
                    // InternalPipelineParser.g:5574:3: (enumLiteral_14= Demands )
                    // InternalPipelineParser.g:5575:4: enumLiteral_14= Demands
                    {
                    enumLiteral_14=(Token)match(input,Demands,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEMANDSEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_14, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEMANDSEnumLiteralDeclaration_14());
                    			

                    }


                    }
                    break;
                case 16 :
                    // InternalPipelineParser.g:5582:3: (enumLiteral_15= Resources )
                    {
                    // InternalPipelineParser.g:5582:3: (enumLiteral_15= Resources )
                    // InternalPipelineParser.g:5583:4: enumLiteral_15= Resources
                    {
                    enumLiteral_15=(Token)match(input,Resources,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCESEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_15, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCESEnumLiteralDeclaration_15());
                    			

                    }


                    }
                    break;
                case 17 :
                    // InternalPipelineParser.g:5590:3: (enumLiteral_16= Version )
                    {
                    // InternalPipelineParser.g:5590:3: (enumLiteral_16= Version )
                    // InternalPipelineParser.g:5591:4: enumLiteral_16= Version
                    {
                    enumLiteral_16=(Token)match(input,Version,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VERSIONEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_16, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VERSIONEnumLiteralDeclaration_16());
                    			

                    }


                    }
                    break;
                case 18 :
                    // InternalPipelineParser.g:5598:3: (enumLiteral_17= Variables )
                    {
                    // InternalPipelineParser.g:5598:3: (enumLiteral_17= Variables )
                    // InternalPipelineParser.g:5599:4: enumLiteral_17= Variables
                    {
                    enumLiteral_17=(Token)match(input,Variables,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VARIABLESEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_17, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VARIABLESEnumLiteralDeclaration_17());
                    			

                    }


                    }
                    break;
                case 19 :
                    // InternalPipelineParser.g:5606:3: (enumLiteral_18= Parameters )
                    {
                    // InternalPipelineParser.g:5606:3: (enumLiteral_18= Parameters )
                    // InternalPipelineParser.g:5607:4: enumLiteral_18= Parameters
                    {
                    enumLiteral_18=(Token)match(input,Parameters,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARAMETERSEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_18, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARAMETERSEnumLiteralDeclaration_18());
                    			

                    }


                    }
                    break;
                case 20 :
                    // InternalPipelineParser.g:5614:3: (enumLiteral_19= Extends )
                    {
                    // InternalPipelineParser.g:5614:3: (enumLiteral_19= Extends )
                    // InternalPipelineParser.g:5615:4: enumLiteral_19= Extends
                    {
                    enumLiteral_19=(Token)match(input,Extends,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXTENDSEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_19, grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXTENDSEnumLiteralDeclaration_19());
                    			

                    }


                    }
                    break;
                case 21 :
                    // InternalPipelineParser.g:5622:3: (enumLiteral_20= Include )
                    {
                    // InternalPipelineParser.g:5622:3: (enumLiteral_20= Include )
                    // InternalPipelineParser.g:5623:4: enumLiteral_20= Include
                    {
                    enumLiteral_20=(Token)match(input,Include,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_INCLUDEEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_20, grammarAccess.getPipelineKeywordAccess().getPPL_KW_INCLUDEEnumLiteralDeclaration_20());
                    			

                    }


                    }
                    break;
                case 22 :
                    // InternalPipelineParser.g:5630:3: (enumLiteral_21= Types )
                    {
                    // InternalPipelineParser.g:5630:3: (enumLiteral_21= Types )
                    // InternalPipelineParser.g:5631:4: enumLiteral_21= Types
                    {
                    enumLiteral_21=(Token)match(input,Types,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPESEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_21, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPESEnumLiteralDeclaration_21());
                    			

                    }


                    }
                    break;
                case 23 :
                    // InternalPipelineParser.g:5638:3: (enumLiteral_22= Batch )
                    {
                    // InternalPipelineParser.g:5638:3: (enumLiteral_22= Batch )
                    // InternalPipelineParser.g:5639:4: enumLiteral_22= Batch
                    {
                    enumLiteral_22=(Token)match(input,Batch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BATCHEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_22, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BATCHEnumLiteralDeclaration_22());
                    			

                    }


                    }
                    break;
                case 24 :
                    // InternalPipelineParser.g:5646:3: (enumLiteral_23= Status )
                    {
                    // InternalPipelineParser.g:5646:3: (enumLiteral_23= Status )
                    // InternalPipelineParser.g:5647:4: enumLiteral_23= Status
                    {
                    enumLiteral_23=(Token)match(input,Status,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STATUSEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_23, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STATUSEnumLiteralDeclaration_23());
                    			

                    }


                    }
                    break;
                case 25 :
                    // InternalPipelineParser.g:5654:3: (enumLiteral_24= AutoCancel )
                    {
                    // InternalPipelineParser.g:5654:3: (enumLiteral_24= AutoCancel )
                    // InternalPipelineParser.g:5655:4: enumLiteral_24= AutoCancel
                    {
                    enumLiteral_24=(Token)match(input,AutoCancel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTO_CANCELEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_24, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTO_CANCELEnumLiteralDeclaration_24());
                    			

                    }


                    }
                    break;
                case 26 :
                    // InternalPipelineParser.g:5662:3: (enumLiteral_25= Workflows )
                    {
                    // InternalPipelineParser.g:5662:3: (enumLiteral_25= Workflows )
                    // InternalPipelineParser.g:5663:4: enumLiteral_25= Workflows
                    {
                    enumLiteral_25=(Token)match(input,Workflows,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOWSEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_25, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOWSEnumLiteralDeclaration_25());
                    			

                    }


                    }
                    break;
                case 27 :
                    // InternalPipelineParser.g:5670:3: (enumLiteral_26= Drafts )
                    {
                    // InternalPipelineParser.g:5670:3: (enumLiteral_26= Drafts )
                    // InternalPipelineParser.g:5671:4: enumLiteral_26= Drafts
                    {
                    enumLiteral_26=(Token)match(input,Drafts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DRAFTSEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_26, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DRAFTSEnumLiteralDeclaration_26());
                    			

                    }


                    }
                    break;
                case 28 :
                    // InternalPipelineParser.g:5678:3: (enumLiteral_27= Branches )
                    {
                    // InternalPipelineParser.g:5678:3: (enumLiteral_27= Branches )
                    // InternalPipelineParser.g:5679:4: enumLiteral_27= Branches
                    {
                    enumLiteral_27=(Token)match(input,Branches,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHESEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_27, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHESEnumLiteralDeclaration_27());
                    			

                    }


                    }
                    break;
                case 29 :
                    // InternalPipelineParser.g:5686:3: (enumLiteral_28= BranchesIgnore )
                    {
                    // InternalPipelineParser.g:5686:3: (enumLiteral_28= BranchesIgnore )
                    // InternalPipelineParser.g:5687:4: enumLiteral_28= BranchesIgnore
                    {
                    enumLiteral_28=(Token)match(input,BranchesIgnore,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHES_IGNOREEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_28, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BRANCHES_IGNOREEnumLiteralDeclaration_28());
                    			

                    }


                    }
                    break;
                case 30 :
                    // InternalPipelineParser.g:5694:3: (enumLiteral_29= Paths )
                    {
                    // InternalPipelineParser.g:5694:3: (enumLiteral_29= Paths )
                    // InternalPipelineParser.g:5695:4: enumLiteral_29= Paths
                    {
                    enumLiteral_29=(Token)match(input,Paths,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHSEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_29, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHSEnumLiteralDeclaration_29());
                    			

                    }


                    }
                    break;
                case 31 :
                    // InternalPipelineParser.g:5702:3: (enumLiteral_30= PathsIgnore )
                    {
                    // InternalPipelineParser.g:5702:3: (enumLiteral_30= PathsIgnore )
                    // InternalPipelineParser.g:5703:4: enumLiteral_30= PathsIgnore
                    {
                    enumLiteral_30=(Token)match(input,PathsIgnore,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHS_IGNOREEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_30, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PATHS_IGNOREEnumLiteralDeclaration_30());
                    			

                    }


                    }
                    break;
                case 32 :
                    // InternalPipelineParser.g:5710:3: (enumLiteral_31= Tags )
                    {
                    // InternalPipelineParser.g:5710:3: (enumLiteral_31= Tags )
                    // InternalPipelineParser.g:5711:4: enumLiteral_31= Tags
                    {
                    enumLiteral_31=(Token)match(input,Tags,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGSEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_31, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGSEnumLiteralDeclaration_31());
                    			

                    }


                    }
                    break;
                case 33 :
                    // InternalPipelineParser.g:5718:3: (enumLiteral_32= TagsIgnore )
                    {
                    // InternalPipelineParser.g:5718:3: (enumLiteral_32= TagsIgnore )
                    // InternalPipelineParser.g:5719:4: enumLiteral_32= TagsIgnore
                    {
                    enumLiteral_32=(Token)match(input,TagsIgnore,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGS_IGNOREEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_32, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TAGS_IGNOREEnumLiteralDeclaration_32());
                    			

                    }


                    }
                    break;
                case 34 :
                    // InternalPipelineParser.g:5726:3: (enumLiteral_33= Schedules )
                    {
                    // InternalPipelineParser.g:5726:3: (enumLiteral_33= Schedules )
                    // InternalPipelineParser.g:5727:4: enumLiteral_33= Schedules
                    {
                    enumLiteral_33=(Token)match(input,Schedules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULESEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_33, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULESEnumLiteralDeclaration_33());
                    			

                    }


                    }
                    break;
                case 35 :
                    // InternalPipelineParser.g:5734:3: (enumLiteral_34= Schedule )
                    {
                    // InternalPipelineParser.g:5734:3: (enumLiteral_34= Schedule )
                    // InternalPipelineParser.g:5735:4: enumLiteral_34= Schedule
                    {
                    enumLiteral_34=(Token)match(input,Schedule,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULEEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_34, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCHEDULEEnumLiteralDeclaration_34());
                    			

                    }


                    }
                    break;
                case 36 :
                    // InternalPipelineParser.g:5742:3: (enumLiteral_35= Workflow_call )
                    {
                    // InternalPipelineParser.g:5742:3: (enumLiteral_35= Workflow_call )
                    // InternalPipelineParser.g:5743:4: enumLiteral_35= Workflow_call
                    {
                    enumLiteral_35=(Token)match(input,Workflow_call,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_CALLEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_35, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_CALLEnumLiteralDeclaration_35());
                    			

                    }


                    }
                    break;
                case 37 :
                    // InternalPipelineParser.g:5750:3: (enumLiteral_36= Workflow_dispatch )
                    {
                    // InternalPipelineParser.g:5750:3: (enumLiteral_36= Workflow_dispatch )
                    // InternalPipelineParser.g:5751:4: enumLiteral_36= Workflow_dispatch
                    {
                    enumLiteral_36=(Token)match(input,Workflow_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_DISPATCHEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_36, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_DISPATCHEnumLiteralDeclaration_36());
                    			

                    }


                    }
                    break;
                case 38 :
                    // InternalPipelineParser.g:5758:3: (enumLiteral_37= Cron )
                    {
                    // InternalPipelineParser.g:5758:3: (enumLiteral_37= Cron )
                    // InternalPipelineParser.g:5759:4: enumLiteral_37= Cron
                    {
                    enumLiteral_37=(Token)match(input,Cron,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CRONEnumLiteralDeclaration_37().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_37, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CRONEnumLiteralDeclaration_37());
                    			

                    }


                    }
                    break;
                case 39 :
                    // InternalPipelineParser.g:5766:3: (enumLiteral_38= DisplayName )
                    {
                    // InternalPipelineParser.g:5766:3: (enumLiteral_38= DisplayName )
                    // InternalPipelineParser.g:5767:4: enumLiteral_38= DisplayName
                    {
                    enumLiteral_38=(Token)match(input,DisplayName,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DISPLAY_NAMEEnumLiteralDeclaration_38().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_38, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DISPLAY_NAMEEnumLiteralDeclaration_38());
                    			

                    }


                    }
                    break;
                case 40 :
                    // InternalPipelineParser.g:5774:3: (enumLiteral_39= Always )
                    {
                    // InternalPipelineParser.g:5774:3: (enumLiteral_39= Always )
                    // InternalPipelineParser.g:5775:4: enumLiteral_39= Always
                    {
                    enumLiteral_39=(Token)match(input,Always,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALWAYSEnumLiteralDeclaration_39().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_39, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALWAYSEnumLiteralDeclaration_39());
                    			

                    }


                    }
                    break;
                case 41 :
                    // InternalPipelineParser.g:5782:3: (enumLiteral_40= Stage )
                    {
                    // InternalPipelineParser.g:5782:3: (enumLiteral_40= Stage )
                    // InternalPipelineParser.g:5783:4: enumLiteral_40= Stage
                    {
                    enumLiteral_40=(Token)match(input,Stage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGEEnumLiteralDeclaration_40().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_40, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGEEnumLiteralDeclaration_40());
                    			

                    }


                    }
                    break;
                case 42 :
                    // InternalPipelineParser.g:5790:3: (enumLiteral_41= Condition )
                    {
                    // InternalPipelineParser.g:5790:3: (enumLiteral_41= Condition )
                    // InternalPipelineParser.g:5791:4: enumLiteral_41= Condition
                    {
                    enumLiteral_41=(Token)match(input,Condition,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONEnumLiteralDeclaration_41().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_41, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONEnumLiteralDeclaration_41());
                    			

                    }


                    }
                    break;
                case 43 :
                    // InternalPipelineParser.g:5798:3: (enumLiteral_42= IsSkippable )
                    {
                    // InternalPipelineParser.g:5798:3: (enumLiteral_42= IsSkippable )
                    // InternalPipelineParser.g:5799:4: enumLiteral_42= IsSkippable
                    {
                    enumLiteral_42=(Token)match(input,IsSkippable,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IS_SKIPPABLEEnumLiteralDeclaration_42().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_42, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IS_SKIPPABLEEnumLiteralDeclaration_42());
                    			

                    }


                    }
                    break;
                case 44 :
                    // InternalPipelineParser.g:5806:3: (enumLiteral_43= DependsOn )
                    {
                    // InternalPipelineParser.g:5806:3: (enumLiteral_43= DependsOn )
                    // InternalPipelineParser.g:5807:4: enumLiteral_43= DependsOn
                    {
                    enumLiteral_43=(Token)match(input,DependsOn,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDS_ONEnumLiteralDeclaration_43().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_43, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDS_ONEnumLiteralDeclaration_43());
                    			

                    }


                    }
                    break;
                case 45 :
                    // InternalPipelineParser.g:5814:3: (enumLiteral_44= Job )
                    {
                    // InternalPipelineParser.g:5814:3: (enumLiteral_44= Job )
                    // InternalPipelineParser.g:5815:4: enumLiteral_44= Job
                    {
                    enumLiteral_44=(Token)match(input,Job,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_JOBEnumLiteralDeclaration_44().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_44, grammarAccess.getPipelineKeywordAccess().getPPL_KW_JOBEnumLiteralDeclaration_44());
                    			

                    }


                    }
                    break;
                case 46 :
                    // InternalPipelineParser.g:5822:3: (enumLiteral_45= Deployment )
                    {
                    // InternalPipelineParser.g:5822:3: (enumLiteral_45= Deployment )
                    // InternalPipelineParser.g:5823:4: enumLiteral_45= Deployment
                    {
                    enumLiteral_45=(Token)match(input,Deployment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOYMENTEnumLiteralDeclaration_45().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_45, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOYMENTEnumLiteralDeclaration_45());
                    			

                    }


                    }
                    break;
                case 47 :
                    // InternalPipelineParser.g:5830:3: (enumLiteral_46= Script )
                    {
                    // InternalPipelineParser.g:5830:3: (enumLiteral_46= Script )
                    // InternalPipelineParser.g:5831:4: enumLiteral_46= Script
                    {
                    enumLiteral_46=(Token)match(input,Script,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCRIPTEnumLiteralDeclaration_46().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_46, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SCRIPTEnumLiteralDeclaration_46());
                    			

                    }


                    }
                    break;
                case 48 :
                    // InternalPipelineParser.g:5838:3: (enumLiteral_47= Bash )
                    {
                    // InternalPipelineParser.g:5838:3: (enumLiteral_47= Bash )
                    // InternalPipelineParser.g:5839:4: enumLiteral_47= Bash
                    {
                    enumLiteral_47=(Token)match(input,Bash,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BASHEnumLiteralDeclaration_47().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_47, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BASHEnumLiteralDeclaration_47());
                    			

                    }


                    }
                    break;
                case 49 :
                    // InternalPipelineParser.g:5846:3: (enumLiteral_48= Pwsh )
                    {
                    // InternalPipelineParser.g:5846:3: (enumLiteral_48= Pwsh )
                    // InternalPipelineParser.g:5847:4: enumLiteral_48= Pwsh
                    {
                    enumLiteral_48=(Token)match(input,Pwsh,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PWSHEnumLiteralDeclaration_48().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_48, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PWSHEnumLiteralDeclaration_48());
                    			

                    }


                    }
                    break;
                case 50 :
                    // InternalPipelineParser.g:5854:3: (enumLiteral_49= Powershell )
                    {
                    // InternalPipelineParser.g:5854:3: (enumLiteral_49= Powershell )
                    // InternalPipelineParser.g:5855:4: enumLiteral_49= Powershell
                    {
                    enumLiteral_49=(Token)match(input,Powershell,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POWERSHELLEnumLiteralDeclaration_49().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_49, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POWERSHELLEnumLiteralDeclaration_49());
                    			

                    }


                    }
                    break;
                case 51 :
                    // InternalPipelineParser.g:5862:3: (enumLiteral_50= Checkout )
                    {
                    // InternalPipelineParser.g:5862:3: (enumLiteral_50= Checkout )
                    // InternalPipelineParser.g:5863:4: enumLiteral_50= Checkout
                    {
                    enumLiteral_50=(Token)match(input,Checkout,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CHECKOUTEnumLiteralDeclaration_50().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_50, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CHECKOUTEnumLiteralDeclaration_50());
                    			

                    }


                    }
                    break;
                case 52 :
                    // InternalPipelineParser.g:5870:3: (enumLiteral_51= Download )
                    {
                    // InternalPipelineParser.g:5870:3: (enumLiteral_51= Download )
                    // InternalPipelineParser.g:5871:4: enumLiteral_51= Download
                    {
                    enumLiteral_51=(Token)match(input,Download,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOWNLOADEnumLiteralDeclaration_51().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_51, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOWNLOADEnumLiteralDeclaration_51());
                    			

                    }


                    }
                    break;
                case 53 :
                    // InternalPipelineParser.g:5878:3: (enumLiteral_52= GetPackage )
                    {
                    // InternalPipelineParser.g:5878:3: (enumLiteral_52= GetPackage )
                    // InternalPipelineParser.g:5879:4: enumLiteral_52= GetPackage
                    {
                    enumLiteral_52=(Token)match(input,GetPackage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_GET_PACKAGEEnumLiteralDeclaration_52().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_52, grammarAccess.getPipelineKeywordAccess().getPPL_KW_GET_PACKAGEEnumLiteralDeclaration_52());
                    			

                    }


                    }
                    break;
                case 54 :
                    // InternalPipelineParser.g:5886:3: (enumLiteral_53= Publish )
                    {
                    // InternalPipelineParser.g:5886:3: (enumLiteral_53= Publish )
                    // InternalPipelineParser.g:5887:4: enumLiteral_53= Publish
                    {
                    enumLiteral_53=(Token)match(input,Publish,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUBLISHEnumLiteralDeclaration_53().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_53, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUBLISHEnumLiteralDeclaration_53());
                    			

                    }


                    }
                    break;
                case 55 :
                    // InternalPipelineParser.g:5894:3: (enumLiteral_54= Task )
                    {
                    // InternalPipelineParser.g:5894:3: (enumLiteral_54= Task )
                    // InternalPipelineParser.g:5895:4: enumLiteral_54= Task
                    {
                    enumLiteral_54=(Token)match(input,Task,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKEnumLiteralDeclaration_54().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_54, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKEnumLiteralDeclaration_54());
                    			

                    }


                    }
                    break;
                case 56 :
                    // InternalPipelineParser.g:5902:3: (enumLiteral_55= Value )
                    {
                    // InternalPipelineParser.g:5902:3: (enumLiteral_55= Value )
                    // InternalPipelineParser.g:5903:4: enumLiteral_55= Value
                    {
                    enumLiteral_55=(Token)match(input,Value,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_VALUEEnumLiteralDeclaration_55().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_55, grammarAccess.getPipelineKeywordAccess().getPPL_KW_VALUEEnumLiteralDeclaration_55());
                    			

                    }


                    }
                    break;
                case 57 :
                    // InternalPipelineParser.g:5910:3: (enumLiteral_56= Readonly )
                    {
                    // InternalPipelineParser.g:5910:3: (enumLiteral_56= Readonly )
                    // InternalPipelineParser.g:5911:4: enumLiteral_56= Readonly
                    {
                    enumLiteral_56=(Token)match(input,Readonly,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_READONLYEnumLiteralDeclaration_56().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_56, grammarAccess.getPipelineKeywordAccess().getPPL_KW_READONLYEnumLiteralDeclaration_56());
                    			

                    }


                    }
                    break;
                case 58 :
                    // InternalPipelineParser.g:5918:3: (enumLiteral_57= Builds )
                    {
                    // InternalPipelineParser.g:5918:3: (enumLiteral_57= Builds )
                    // InternalPipelineParser.g:5919:4: enumLiteral_57= Builds
                    {
                    enumLiteral_57=(Token)match(input,Builds,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BUILDSEnumLiteralDeclaration_57().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_57, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BUILDSEnumLiteralDeclaration_57());
                    			

                    }


                    }
                    break;
                case 59 :
                    // InternalPipelineParser.g:5926:3: (enumLiteral_58= Containers )
                    {
                    // InternalPipelineParser.g:5926:3: (enumLiteral_58= Containers )
                    // InternalPipelineParser.g:5927:4: enumLiteral_58= Containers
                    {
                    enumLiteral_58=(Token)match(input,Containers,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINERSEnumLiteralDeclaration_58().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_58, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINERSEnumLiteralDeclaration_58());
                    			

                    }


                    }
                    break;
                case 60 :
                    // InternalPipelineParser.g:5934:3: (enumLiteral_59= Pipelines )
                    {
                    // InternalPipelineParser.g:5934:3: (enumLiteral_59= Pipelines )
                    // InternalPipelineParser.g:5935:4: enumLiteral_59= Pipelines
                    {
                    enumLiteral_59=(Token)match(input,Pipelines,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINESEnumLiteralDeclaration_59().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_59, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINESEnumLiteralDeclaration_59());
                    			

                    }


                    }
                    break;
                case 61 :
                    // InternalPipelineParser.g:5942:3: (enumLiteral_60= Repositories )
                    {
                    // InternalPipelineParser.g:5942:3: (enumLiteral_60= Repositories )
                    // InternalPipelineParser.g:5943:4: enumLiteral_60= Repositories
                    {
                    enumLiteral_60=(Token)match(input,Repositories,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORIESEnumLiteralDeclaration_60().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_60, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORIESEnumLiteralDeclaration_60());
                    			

                    }


                    }
                    break;
                case 62 :
                    // InternalPipelineParser.g:5950:3: (enumLiteral_61= Webhooks )
                    {
                    // InternalPipelineParser.g:5950:3: (enumLiteral_61= Webhooks )
                    // InternalPipelineParser.g:5951:4: enumLiteral_61= Webhooks
                    {
                    enumLiteral_61=(Token)match(input,Webhooks,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WEBHOOKSEnumLiteralDeclaration_61().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_61, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WEBHOOKSEnumLiteralDeclaration_61());
                    			

                    }


                    }
                    break;
                case 63 :
                    // InternalPipelineParser.g:5958:3: (enumLiteral_62= Packages )
                    {
                    // InternalPipelineParser.g:5958:3: (enumLiteral_62= Packages )
                    // InternalPipelineParser.g:5959:4: enumLiteral_62= Packages
                    {
                    enumLiteral_62=(Token)match(input,Packages,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PACKAGESEnumLiteralDeclaration_62().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_62, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PACKAGESEnumLiteralDeclaration_62());
                    			

                    }


                    }
                    break;
                case 64 :
                    // InternalPipelineParser.g:5966:3: (enumLiteral_63= Inputs )
                    {
                    // InternalPipelineParser.g:5966:3: (enumLiteral_63= Inputs )
                    // InternalPipelineParser.g:5967:4: enumLiteral_63= Inputs
                    {
                    enumLiteral_63=(Token)match(input,Inputs,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_INPUTSEnumLiteralDeclaration_63().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_63, grammarAccess.getPipelineKeywordAccess().getPPL_KW_INPUTSEnumLiteralDeclaration_63());
                    			

                    }


                    }
                    break;
                case 65 :
                    // InternalPipelineParser.g:5974:3: (enumLiteral_64= Outputs )
                    {
                    // InternalPipelineParser.g:5974:3: (enumLiteral_64= Outputs )
                    // InternalPipelineParser.g:5975:4: enumLiteral_64= Outputs
                    {
                    enumLiteral_64=(Token)match(input,Outputs,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_OUTPUTSEnumLiteralDeclaration_64().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_64, grammarAccess.getPipelineKeywordAccess().getPPL_KW_OUTPUTSEnumLiteralDeclaration_64());
                    			

                    }


                    }
                    break;
                case 66 :
                    // InternalPipelineParser.g:5982:3: (enumLiteral_65= Secrets )
                    {
                    // InternalPipelineParser.g:5982:3: (enumLiteral_65= Secrets )
                    // InternalPipelineParser.g:5983:4: enumLiteral_65= Secrets
                    {
                    enumLiteral_65=(Token)match(input,Secrets,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SECRETSEnumLiteralDeclaration_65().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_65, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SECRETSEnumLiteralDeclaration_65());
                    			

                    }


                    }
                    break;
                case 67 :
                    // InternalPipelineParser.g:5990:3: (enumLiteral_66= Description )
                    {
                    // InternalPipelineParser.g:5990:3: (enumLiteral_66= Description )
                    // InternalPipelineParser.g:5991:4: enumLiteral_66= Description
                    {
                    enumLiteral_66=(Token)match(input,Description,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DESCRIPTIONEnumLiteralDeclaration_66().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_66, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DESCRIPTIONEnumLiteralDeclaration_66());
                    			

                    }


                    }
                    break;
                case 68 :
                    // InternalPipelineParser.g:5998:3: (enumLiteral_67= Required )
                    {
                    // InternalPipelineParser.g:5998:3: (enumLiteral_67= Required )
                    // InternalPipelineParser.g:5999:4: enumLiteral_67= Required
                    {
                    enumLiteral_67=(Token)match(input,Required,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREDEnumLiteralDeclaration_67().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_67, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREDEnumLiteralDeclaration_67());
                    			

                    }


                    }
                    break;
                case 69 :
                    // InternalPipelineParser.g:6006:3: (enumLiteral_68= Default )
                    {
                    // InternalPipelineParser.g:6006:3: (enumLiteral_68= Default )
                    // InternalPipelineParser.g:6007:4: enumLiteral_68= Default
                    {
                    enumLiteral_68=(Token)match(input,Default,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTEnumLiteralDeclaration_68().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_68, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTEnumLiteralDeclaration_68());
                    			

                    }


                    }
                    break;
                case 70 :
                    // InternalPipelineParser.g:6014:3: (enumLiteral_69= Type )
                    {
                    // InternalPipelineParser.g:6014:3: (enumLiteral_69= Type )
                    // InternalPipelineParser.g:6015:4: enumLiteral_69= Type
                    {
                    enumLiteral_69=(Token)match(input,Type,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPEEnumLiteralDeclaration_69().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_69, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TYPEEnumLiteralDeclaration_69());
                    			

                    }


                    }
                    break;
                case 71 :
                    // InternalPipelineParser.g:6022:3: (enumLiteral_70= Options )
                    {
                    // InternalPipelineParser.g:6022:3: (enumLiteral_70= Options )
                    // InternalPipelineParser.g:6023:4: enumLiteral_70= Options
                    {
                    enumLiteral_70=(Token)match(input,Options,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_OPTIONSEnumLiteralDeclaration_70().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_70, grammarAccess.getPipelineKeywordAccess().getPPL_KW_OPTIONSEnumLiteralDeclaration_70());
                    			

                    }


                    }
                    break;
                case 72 :
                    // InternalPipelineParser.g:6030:3: (enumLiteral_71= If )
                    {
                    // InternalPipelineParser.g:6030:3: (enumLiteral_71= If )
                    // InternalPipelineParser.g:6031:4: enumLiteral_71= If
                    {
                    enumLiteral_71=(Token)match(input,If,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IFEnumLiteralDeclaration_71().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_71, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IFEnumLiteralDeclaration_71());
                    			

                    }


                    }
                    break;
                case 73 :
                    // InternalPipelineParser.g:6038:3: (enumLiteral_72= RunsOn )
                    {
                    // InternalPipelineParser.g:6038:3: (enumLiteral_72= RunsOn )
                    // InternalPipelineParser.g:6039:4: enumLiteral_72= RunsOn
                    {
                    enumLiteral_72=(Token)match(input,RunsOn,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNS_ONEnumLiteralDeclaration_72().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_72, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUNS_ONEnumLiteralDeclaration_72());
                    			

                    }


                    }
                    break;
                case 74 :
                    // InternalPipelineParser.g:6046:3: (enumLiteral_73= Strategy )
                    {
                    // InternalPipelineParser.g:6046:3: (enumLiteral_73= Strategy )
                    // InternalPipelineParser.g:6047:4: enumLiteral_73= Strategy
                    {
                    enumLiteral_73=(Token)match(input,Strategy,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STRATEGYEnumLiteralDeclaration_73().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_73, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STRATEGYEnumLiteralDeclaration_73());
                    			

                    }


                    }
                    break;
                case 75 :
                    // InternalPipelineParser.g:6054:3: (enumLiteral_74= Matrix )
                    {
                    // InternalPipelineParser.g:6054:3: (enumLiteral_74= Matrix )
                    // InternalPipelineParser.g:6055:4: enumLiteral_74= Matrix
                    {
                    enumLiteral_74=(Token)match(input,Matrix,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_MATRIXEnumLiteralDeclaration_74().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_74, grammarAccess.getPipelineKeywordAccess().getPPL_KW_MATRIXEnumLiteralDeclaration_74());
                    			

                    }


                    }
                    break;
                case 76 :
                    // InternalPipelineParser.g:6062:3: (enumLiteral_75= Container )
                    {
                    // InternalPipelineParser.g:6062:3: (enumLiteral_75= Container )
                    // InternalPipelineParser.g:6063:4: enumLiteral_75= Container
                    {
                    enumLiteral_75=(Token)match(input,Container,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINEREnumLiteralDeclaration_75().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_75, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINEREnumLiteralDeclaration_75());
                    			

                    }


                    }
                    break;
                case 77 :
                    // InternalPipelineParser.g:6070:3: (enumLiteral_76= Services )
                    {
                    // InternalPipelineParser.g:6070:3: (enumLiteral_76= Services )
                    // InternalPipelineParser.g:6071:4: enumLiteral_76= Services
                    {
                    enumLiteral_76=(Token)match(input,Services,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SERVICESEnumLiteralDeclaration_76().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_76, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SERVICESEnumLiteralDeclaration_76());
                    			

                    }


                    }
                    break;
                case 78 :
                    // InternalPipelineParser.g:6078:3: (enumLiteral_77= Steps )
                    {
                    // InternalPipelineParser.g:6078:3: (enumLiteral_77= Steps )
                    // InternalPipelineParser.g:6079:4: enumLiteral_77= Steps
                    {
                    enumLiteral_77=(Token)match(input,Steps,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPSEnumLiteralDeclaration_77().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_77, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPSEnumLiteralDeclaration_77());
                    			

                    }


                    }
                    break;
                case 79 :
                    // InternalPipelineParser.g:6086:3: (enumLiteral_78= Uses )
                    {
                    // InternalPipelineParser.g:6086:3: (enumLiteral_78= Uses )
                    // InternalPipelineParser.g:6087:4: enumLiteral_78= Uses
                    {
                    enumLiteral_78=(Token)match(input,Uses,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_USESEnumLiteralDeclaration_78().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_78, grammarAccess.getPipelineKeywordAccess().getPPL_KW_USESEnumLiteralDeclaration_78());
                    			

                    }


                    }
                    break;
                case 80 :
                    // InternalPipelineParser.g:6094:3: (enumLiteral_79= With )
                    {
                    // InternalPipelineParser.g:6094:3: (enumLiteral_79= With )
                    // InternalPipelineParser.g:6095:4: enumLiteral_79= With
                    {
                    enumLiteral_79=(Token)match(input,With,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WITHEnumLiteralDeclaration_79().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_79, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WITHEnumLiteralDeclaration_79());
                    			

                    }


                    }
                    break;
                case 81 :
                    // InternalPipelineParser.g:6102:3: (enumLiteral_80= TimeoutMinutes )
                    {
                    // InternalPipelineParser.g:6102:3: (enumLiteral_80= TimeoutMinutes )
                    // InternalPipelineParser.g:6103:4: enumLiteral_80= TimeoutMinutes
                    {
                    enumLiteral_80=(Token)match(input,TimeoutMinutes,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_MINUTESEnumLiteralDeclaration_80().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_80, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_MINUTESEnumLiteralDeclaration_80());
                    			

                    }


                    }
                    break;
                case 82 :
                    // InternalPipelineParser.g:6110:3: (enumLiteral_81= ContinueOnError_1 )
                    {
                    // InternalPipelineParser.g:6110:3: (enumLiteral_81= ContinueOnError_1 )
                    // InternalPipelineParser.g:6111:4: enumLiteral_81= ContinueOnError_1
                    {
                    enumLiteral_81=(Token)match(input,ContinueOnError_1,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERROREnumLiteralDeclaration_81().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_81, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERROREnumLiteralDeclaration_81());
                    			

                    }


                    }
                    break;
                case 83 :
                    // InternalPipelineParser.g:6118:3: (enumLiteral_82= Environment )
                    {
                    // InternalPipelineParser.g:6118:3: (enumLiteral_82= Environment )
                    // InternalPipelineParser.g:6119:4: enumLiteral_82= Environment
                    {
                    enumLiteral_82=(Token)match(input,Environment,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVIRONMENTEnumLiteralDeclaration_82().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_82, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENVIRONMENTEnumLiteralDeclaration_82());
                    			

                    }


                    }
                    break;
                case 84 :
                    // InternalPipelineParser.g:6126:3: (enumLiteral_83= Id )
                    {
                    // InternalPipelineParser.g:6126:3: (enumLiteral_83= Id )
                    // InternalPipelineParser.g:6127:4: enumLiteral_83= Id
                    {
                    enumLiteral_83=(Token)match(input,Id,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IDEnumLiteralDeclaration_83().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_83, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IDEnumLiteralDeclaration_83());
                    			

                    }


                    }
                    break;
                case 85 :
                    // InternalPipelineParser.g:6134:3: (enumLiteral_84= Permissions )
                    {
                    // InternalPipelineParser.g:6134:3: (enumLiteral_84= Permissions )
                    // InternalPipelineParser.g:6135:4: enumLiteral_84= Permissions
                    {
                    enumLiteral_84=(Token)match(input,Permissions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONSEnumLiteralDeclaration_84().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_84, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PERMISSIONSEnumLiteralDeclaration_84());
                    			

                    }


                    }
                    break;
                case 86 :
                    // InternalPipelineParser.g:6142:3: (enumLiteral_85= Timeouts )
                    {
                    // InternalPipelineParser.g:6142:3: (enumLiteral_85= Timeouts )
                    // InternalPipelineParser.g:6143:4: enumLiteral_85= Timeouts
                    {
                    enumLiteral_85=(Token)match(input,Timeouts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTSEnumLiteralDeclaration_85().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_85, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTSEnumLiteralDeclaration_85());
                    			

                    }


                    }
                    break;
                case 87 :
                    // InternalPipelineParser.g:6150:3: (enumLiteral_86= DefaultsRun )
                    {
                    // InternalPipelineParser.g:6150:3: (enumLiteral_86= DefaultsRun )
                    // InternalPipelineParser.g:6151:4: enumLiteral_86= DefaultsRun
                    {
                    enumLiteral_86=(Token)match(input,DefaultsRun,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTS_RUNEnumLiteralDeclaration_86().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_86, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFAULTS_RUNEnumLiteralDeclaration_86());
                    			

                    }


                    }
                    break;
                case 88 :
                    // InternalPipelineParser.g:6158:3: (enumLiteral_87= Push )
                    {
                    // InternalPipelineParser.g:6158:3: (enumLiteral_87= Push )
                    // InternalPipelineParser.g:6159:4: enumLiteral_87= Push
                    {
                    enumLiteral_87=(Token)match(input,Push,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUSHEnumLiteralDeclaration_87().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_87, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PUSHEnumLiteralDeclaration_87());
                    			

                    }


                    }
                    break;
                case 89 :
                    // InternalPipelineParser.g:6166:3: (enumLiteral_88= Pull_request )
                    {
                    // InternalPipelineParser.g:6166:3: (enumLiteral_88= Pull_request )
                    // InternalPipelineParser.g:6167:4: enumLiteral_88= Pull_request
                    {
                    enumLiteral_88=(Token)match(input,Pull_request,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTEnumLiteralDeclaration_88().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_88, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTEnumLiteralDeclaration_88());
                    			

                    }


                    }
                    break;
                case 90 :
                    // InternalPipelineParser.g:6174:3: (enumLiteral_89= Repository_dispatch )
                    {
                    // InternalPipelineParser.g:6174:3: (enumLiteral_89= Repository_dispatch )
                    // InternalPipelineParser.g:6175:4: enumLiteral_89= Repository_dispatch
                    {
                    enumLiteral_89=(Token)match(input,Repository_dispatch,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORY_DISPATCHEnumLiteralDeclaration_89().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_89, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORY_DISPATCHEnumLiteralDeclaration_89());
                    			

                    }


                    }
                    break;
                case 91 :
                    // InternalPipelineParser.g:6182:3: (enumLiteral_90= Workflow_run )
                    {
                    // InternalPipelineParser.g:6182:3: (enumLiteral_90= Workflow_run )
                    // InternalPipelineParser.g:6183:4: enumLiteral_90= Workflow_run
                    {
                    enumLiteral_90=(Token)match(input,Workflow_run,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_RUNEnumLiteralDeclaration_90().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_90, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKFLOW_RUNEnumLiteralDeclaration_90());
                    			

                    }


                    }
                    break;
                case 92 :
                    // InternalPipelineParser.g:6190:3: (enumLiteral_91= Filters )
                    {
                    // InternalPipelineParser.g:6190:3: (enumLiteral_91= Filters )
                    // InternalPipelineParser.g:6191:4: enumLiteral_91= Filters
                    {
                    enumLiteral_91=(Token)match(input,Filters,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_FILTERSEnumLiteralDeclaration_91().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_91, grammarAccess.getPipelineKeywordAccess().getPPL_KW_FILTERSEnumLiteralDeclaration_91());
                    			

                    }


                    }
                    break;
                case 93 :
                    // InternalPipelineParser.g:6198:3: (enumLiteral_92= Exclude )
                    {
                    // InternalPipelineParser.g:6198:3: (enumLiteral_92= Exclude )
                    // InternalPipelineParser.g:6199:4: enumLiteral_92= Exclude
                    {
                    enumLiteral_92=(Token)match(input,Exclude,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCLUDEEnumLiteralDeclaration_92().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_92, grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCLUDEEnumLiteralDeclaration_92());
                    			

                    }


                    }
                    break;
                case 94 :
                    // InternalPipelineParser.g:6206:3: (enumLiteral_93= FailFast )
                    {
                    // InternalPipelineParser.g:6206:3: (enumLiteral_93= FailFast )
                    // InternalPipelineParser.g:6207:4: enumLiteral_93= FailFast
                    {
                    enumLiteral_93=(Token)match(input,FailFast,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_FAIL_FASTEnumLiteralDeclaration_93().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_93, grammarAccess.getPipelineKeywordAccess().getPPL_KW_FAIL_FASTEnumLiteralDeclaration_93());
                    			

                    }


                    }
                    break;
                case 95 :
                    // InternalPipelineParser.g:6214:3: (enumLiteral_94= MaxParallel )
                    {
                    // InternalPipelineParser.g:6214:3: (enumLiteral_94= MaxParallel )
                    // InternalPipelineParser.g:6215:4: enumLiteral_94= MaxParallel
                    {
                    enumLiteral_94=(Token)match(input,MaxParallel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_PARALLELEnumLiteralDeclaration_94().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_94, grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_PARALLELEnumLiteralDeclaration_94());
                    			

                    }


                    }
                    break;
                case 96 :
                    // InternalPipelineParser.g:6222:3: (enumLiteral_95= ContainerImage )
                    {
                    // InternalPipelineParser.g:6222:3: (enumLiteral_95= ContainerImage )
                    // InternalPipelineParser.g:6223:4: enumLiteral_95= ContainerImage
                    {
                    enumLiteral_95=(Token)match(input,ContainerImage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINER_IMAGEEnumLiteralDeclaration_95().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_95, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTAINER_IMAGEEnumLiteralDeclaration_95());
                    			

                    }


                    }
                    break;
                case 97 :
                    // InternalPipelineParser.g:6230:3: (enumLiteral_96= Credentials )
                    {
                    // InternalPipelineParser.g:6230:3: (enumLiteral_96= Credentials )
                    // InternalPipelineParser.g:6231:4: enumLiteral_96= Credentials
                    {
                    enumLiteral_96=(Token)match(input,Credentials,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CREDENTIALSEnumLiteralDeclaration_96().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_96, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CREDENTIALSEnumLiteralDeclaration_96());
                    			

                    }


                    }
                    break;
                case 98 :
                    // InternalPipelineParser.g:6238:3: (enumLiteral_97= Ports )
                    {
                    // InternalPipelineParser.g:6238:3: (enumLiteral_97= Ports )
                    // InternalPipelineParser.g:6239:4: enumLiteral_97= Ports
                    {
                    enumLiteral_97=(Token)match(input,Ports,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PORTSEnumLiteralDeclaration_97().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_97, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PORTSEnumLiteralDeclaration_97());
                    			

                    }


                    }
                    break;
                case 99 :
                    // InternalPipelineParser.g:6246:3: (enumLiteral_98= Inherit )
                    {
                    // InternalPipelineParser.g:6246:3: (enumLiteral_98= Inherit )
                    // InternalPipelineParser.g:6247:4: enumLiteral_98= Inherit
                    {
                    enumLiteral_98=(Token)match(input,Inherit,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_INHERITEnumLiteralDeclaration_98().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_98, grammarAccess.getPipelineKeywordAccess().getPPL_KW_INHERITEnumLiteralDeclaration_98());
                    			

                    }


                    }
                    break;
                case 100 :
                    // InternalPipelineParser.g:6254:3: (enumLiteral_99= Trigger )
                    {
                    // InternalPipelineParser.g:6254:3: (enumLiteral_99= Trigger )
                    // InternalPipelineParser.g:6255:4: enumLiteral_99= Trigger
                    {
                    enumLiteral_99=(Token)match(input,Trigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGEREnumLiteralDeclaration_99().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_99, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGEREnumLiteralDeclaration_99());
                    			

                    }


                    }
                    break;
                case 101 :
                    // InternalPipelineParser.g:6262:3: (enumLiteral_100= Template )
                    {
                    // InternalPipelineParser.g:6262:3: (enumLiteral_100= Template )
                    // InternalPipelineParser.g:6263:4: enumLiteral_100= Template
                    {
                    enumLiteral_100=(Token)match(input,Template,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TEMPLATEEnumLiteralDeclaration_100().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_100, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TEMPLATEEnumLiteralDeclaration_100());
                    			

                    }


                    }
                    break;
                case 102 :
                    // InternalPipelineParser.g:6270:3: (enumLiteral_101= Workspace )
                    {
                    // InternalPipelineParser.g:6270:3: (enumLiteral_101= Workspace )
                    // InternalPipelineParser.g:6271:4: enumLiteral_101= Workspace
                    {
                    enumLiteral_101=(Token)match(input,Workspace,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKSPACEEnumLiteralDeclaration_101().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_101, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WORKSPACEEnumLiteralDeclaration_101());
                    			

                    }


                    }
                    break;
                case 103 :
                    // InternalPipelineParser.g:6278:3: (enumLiteral_102= Pipeline )
                    {
                    // InternalPipelineParser.g:6278:3: (enumLiteral_102= Pipeline )
                    // InternalPipelineParser.g:6279:4: enumLiteral_102= Pipeline
                    {
                    enumLiteral_102=(Token)match(input,Pipeline,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINEEnumLiteralDeclaration_102().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_102, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PIPELINEEnumLiteralDeclaration_102());
                    			

                    }


                    }
                    break;
                case 104 :
                    // InternalPipelineParser.g:6286:3: (enumLiteral_103= TimeoutInMinutes )
                    {
                    // InternalPipelineParser.g:6286:3: (enumLiteral_103= TimeoutInMinutes )
                    // InternalPipelineParser.g:6287:4: enumLiteral_103= TimeoutInMinutes
                    {
                    enumLiteral_103=(Token)match(input,TimeoutInMinutes,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_IN_MINUTESEnumLiteralDeclaration_103().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_103, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUT_IN_MINUTESEnumLiteralDeclaration_103());
                    			

                    }


                    }
                    break;
                case 105 :
                    // InternalPipelineParser.g:6294:3: (enumLiteral_104= ContinueOnError )
                    {
                    // InternalPipelineParser.g:6294:3: (enumLiteral_104= ContinueOnError )
                    // InternalPipelineParser.g:6295:4: enumLiteral_104= ContinueOnError
                    {
                    enumLiteral_104=(Token)match(input,ContinueOnError,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERREnumLiteralDeclaration_104().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_104, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONTINUE_ON_ERREnumLiteralDeclaration_104());
                    			

                    }


                    }
                    break;
                case 106 :
                    // InternalPipelineParser.g:6302:3: (enumLiteral_105= ResourceType )
                    {
                    // InternalPipelineParser.g:6302:3: (enumLiteral_105= ResourceType )
                    // InternalPipelineParser.g:6303:4: enumLiteral_105= ResourceType
                    {
                    enumLiteral_105=(Token)match(input,ResourceType,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_TYPEEnumLiteralDeclaration_105().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_105, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_TYPEEnumLiteralDeclaration_105());
                    			

                    }


                    }
                    break;
                case 107 :
                    // InternalPipelineParser.g:6310:3: (enumLiteral_106= ResourceName )
                    {
                    // InternalPipelineParser.g:6310:3: (enumLiteral_106= ResourceName )
                    // InternalPipelineParser.g:6311:4: enumLiteral_106= ResourceName
                    {
                    enumLiteral_106=(Token)match(input,ResourceName,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_NAMEEnumLiteralDeclaration_106().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_106, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RESOURCE_NAMEEnumLiteralDeclaration_106());
                    			

                    }


                    }
                    break;
                case 108 :
                    // InternalPipelineParser.g:6318:3: (enumLiteral_107= Stages )
                    {
                    // InternalPipelineParser.g:6318:3: (enumLiteral_107= Stages )
                    // InternalPipelineParser.g:6319:4: enumLiteral_107= Stages
                    {
                    enumLiteral_107=(Token)match(input,Stages,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGESEnumLiteralDeclaration_107().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_107, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STAGESEnumLiteralDeclaration_107());
                    			

                    }


                    }
                    break;
                case 109 :
                    // InternalPipelineParser.g:6326:3: (enumLiteral_108= Only )
                    {
                    // InternalPipelineParser.g:6326:3: (enumLiteral_108= Only )
                    // InternalPipelineParser.g:6327:4: enumLiteral_108= Only
                    {
                    enumLiteral_108=(Token)match(input,Only,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONLYEnumLiteralDeclaration_108().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_108, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ONLYEnumLiteralDeclaration_108());
                    			

                    }


                    }
                    break;
                case 110 :
                    // InternalPipelineParser.g:6334:3: (enumLiteral_109= Except )
                    {
                    // InternalPipelineParser.g:6334:3: (enumLiteral_109= Except )
                    // InternalPipelineParser.g:6335:4: enumLiteral_109= Except
                    {
                    enumLiteral_109=(Token)match(input,Except,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCEPTEnumLiteralDeclaration_109().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_109, grammarAccess.getPipelineKeywordAccess().getPPL_KW_EXCEPTEnumLiteralDeclaration_109());
                    			

                    }


                    }
                    break;
                case 111 :
                    // InternalPipelineParser.g:6342:3: (enumLiteral_110= Image )
                    {
                    // InternalPipelineParser.g:6342:3: (enumLiteral_110= Image )
                    // InternalPipelineParser.g:6343:4: enumLiteral_110= Image
                    {
                    enumLiteral_110=(Token)match(input,Image,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_IMAGEEnumLiteralDeclaration_110().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_110, grammarAccess.getPipelineKeywordAccess().getPPL_KW_IMAGEEnumLiteralDeclaration_110());
                    			

                    }


                    }
                    break;
                case 112 :
                    // InternalPipelineParser.g:6350:3: (enumLiteral_111= Cache )
                    {
                    // InternalPipelineParser.g:6350:3: (enumLiteral_111= Cache )
                    // InternalPipelineParser.g:6351:4: enumLiteral_111= Cache
                    {
                    enumLiteral_111=(Token)match(input,Cache,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHEEnumLiteralDeclaration_111().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_111, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHEEnumLiteralDeclaration_111());
                    			

                    }


                    }
                    break;
                case 113 :
                    // InternalPipelineParser.g:6358:3: (enumLiteral_112= Artifacts )
                    {
                    // InternalPipelineParser.g:6358:3: (enumLiteral_112= Artifacts )
                    // InternalPipelineParser.g:6359:4: enumLiteral_112= Artifacts
                    {
                    enumLiteral_112=(Token)match(input,Artifacts,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ARTIFACTSEnumLiteralDeclaration_112().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_112, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ARTIFACTSEnumLiteralDeclaration_112());
                    			

                    }


                    }
                    break;
                case 114 :
                    // InternalPipelineParser.g:6366:3: (enumLiteral_113= Retries )
                    {
                    // InternalPipelineParser.g:6366:3: (enumLiteral_113= Retries )
                    // InternalPipelineParser.g:6367:4: enumLiteral_113= Retries
                    {
                    enumLiteral_113=(Token)match(input,Retries,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RETRIESEnumLiteralDeclaration_113().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_113, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RETRIESEnumLiteralDeclaration_113());
                    			

                    }


                    }
                    break;
                case 115 :
                    // InternalPipelineParser.g:6374:3: (enumLiteral_114= Rules )
                    {
                    // InternalPipelineParser.g:6374:3: (enumLiteral_114= Rules )
                    // InternalPipelineParser.g:6375:4: enumLiteral_114= Rules
                    {
                    enumLiteral_114=(Token)match(input,Rules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RULESEnumLiteralDeclaration_114().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_114, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RULESEnumLiteralDeclaration_114());
                    			

                    }


                    }
                    break;
                case 116 :
                    // InternalPipelineParser.g:6382:3: (enumLiteral_115= Before_script )
                    {
                    // InternalPipelineParser.g:6382:3: (enumLiteral_115= Before_script )
                    // InternalPipelineParser.g:6383:4: enumLiteral_115= Before_script
                    {
                    enumLiteral_115=(Token)match(input,Before_script,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_BEFORE_SCRIPTEnumLiteralDeclaration_115().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_115, grammarAccess.getPipelineKeywordAccess().getPPL_KW_BEFORE_SCRIPTEnumLiteralDeclaration_115());
                    			

                    }


                    }
                    break;
                case 117 :
                    // InternalPipelineParser.g:6390:3: (enumLiteral_116= After_script )
                    {
                    // InternalPipelineParser.g:6390:3: (enumLiteral_116= After_script )
                    // InternalPipelineParser.g:6391:4: enumLiteral_116= After_script
                    {
                    enumLiteral_116=(Token)match(input,After_script,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AFTER_SCRIPTEnumLiteralDeclaration_116().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_116, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AFTER_SCRIPTEnumLiteralDeclaration_116());
                    			

                    }


                    }
                    break;
                case 118 :
                    // InternalPipelineParser.g:6398:3: (enumLiteral_117= Timeout )
                    {
                    // InternalPipelineParser.g:6398:3: (enumLiteral_117= Timeout )
                    // InternalPipelineParser.g:6399:4: enumLiteral_117= Timeout
                    {
                    enumLiteral_117=(Token)match(input,Timeout,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTEnumLiteralDeclaration_117().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_117, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TIMEOUTEnumLiteralDeclaration_117());
                    			

                    }


                    }
                    break;
                case 119 :
                    // InternalPipelineParser.g:6406:3: (enumLiteral_118= When )
                    {
                    // InternalPipelineParser.g:6406:3: (enumLiteral_118= When )
                    // InternalPipelineParser.g:6407:4: enumLiteral_118= When
                    {
                    enumLiteral_118=(Token)match(input,When,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_WHENEnumLiteralDeclaration_118().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_118, grammarAccess.getPipelineKeywordAccess().getPPL_KW_WHENEnumLiteralDeclaration_118());
                    			

                    }


                    }
                    break;
                case 120 :
                    // InternalPipelineParser.g:6414:3: (enumLiteral_119= Allow_failure )
                    {
                    // InternalPipelineParser.g:6414:3: (enumLiteral_119= Allow_failure )
                    // InternalPipelineParser.g:6415:4: enumLiteral_119= Allow_failure
                    {
                    enumLiteral_119=(Token)match(input,Allow_failure,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALLOW_FAILUREEnumLiteralDeclaration_119().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_119, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ALLOW_FAILUREEnumLiteralDeclaration_119());
                    			

                    }


                    }
                    break;
                case 121 :
                    // InternalPipelineParser.g:6422:3: (enumLiteral_120= Dependencies )
                    {
                    // InternalPipelineParser.g:6422:3: (enumLiteral_120= Dependencies )
                    // InternalPipelineParser.g:6423:4: enumLiteral_120= Dependencies
                    {
                    enumLiteral_120=(Token)match(input,Dependencies,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDENCIESEnumLiteralDeclaration_120().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_120, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPENDENCIESEnumLiteralDeclaration_120());
                    			

                    }


                    }
                    break;
                case 122 :
                    // InternalPipelineParser.g:6430:3: (enumLiteral_121= PullRequests )
                    {
                    // InternalPipelineParser.g:6430:3: (enumLiteral_121= PullRequests )
                    // InternalPipelineParser.g:6431:4: enumLiteral_121= PullRequests
                    {
                    enumLiteral_121=(Token)match(input,PullRequests,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTSEnumLiteralDeclaration_121().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_121, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PULL_REQUESTSEnumLiteralDeclaration_121());
                    			

                    }


                    }
                    break;
                case 123 :
                    // InternalPipelineParser.g:6438:3: (enumLiteral_122= Step )
                    {
                    // InternalPipelineParser.g:6438:3: (enumLiteral_122= Step )
                    // InternalPipelineParser.g:6439:4: enumLiteral_122= Step
                    {
                    enumLiteral_122=(Token)match(input,Step,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPEnumLiteralDeclaration_122().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_122, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STEPEnumLiteralDeclaration_122());
                    			

                    }


                    }
                    break;
                case 124 :
                    // InternalPipelineParser.g:6446:3: (enumLiteral_123= Definitions )
                    {
                    // InternalPipelineParser.g:6446:3: (enumLiteral_123= Definitions )
                    // InternalPipelineParser.g:6447:4: enumLiteral_123= Definitions
                    {
                    enumLiteral_123=(Token)match(input,Definitions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFINITIONSEnumLiteralDeclaration_123().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_123, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEFINITIONSEnumLiteralDeclaration_123());
                    			

                    }


                    }
                    break;
                case 125 :
                    // InternalPipelineParser.g:6454:3: (enumLiteral_124= Caches )
                    {
                    // InternalPipelineParser.g:6454:3: (enumLiteral_124= Caches )
                    // InternalPipelineParser.g:6455:4: enumLiteral_124= Caches
                    {
                    enumLiteral_124=(Token)match(input,Caches,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHESEnumLiteralDeclaration_124().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_124, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CACHESEnumLiteralDeclaration_124());
                    			

                    }


                    }
                    break;
                case 126 :
                    // InternalPipelineParser.g:6462:3: (enumLiteral_125= Parallel )
                    {
                    // InternalPipelineParser.g:6462:3: (enumLiteral_125= Parallel )
                    // InternalPipelineParser.g:6463:4: enumLiteral_125= Parallel
                    {
                    enumLiteral_125=(Token)match(input,Parallel,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARALLELEnumLiteralDeclaration_125().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_125, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PARALLELEnumLiteralDeclaration_125());
                    			

                    }


                    }
                    break;
                case 127 :
                    // InternalPipelineParser.g:6470:3: (enumLiteral_126= Conditions )
                    {
                    // InternalPipelineParser.g:6470:3: (enumLiteral_126= Conditions )
                    // InternalPipelineParser.g:6471:4: enumLiteral_126= Conditions
                    {
                    enumLiteral_126=(Token)match(input,Conditions,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONSEnumLiteralDeclaration_126().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_126, grammarAccess.getPipelineKeywordAccess().getPPL_KW_CONDITIONSEnumLiteralDeclaration_126());
                    			

                    }


                    }
                    break;
                case 128 :
                    // InternalPipelineParser.g:6478:3: (enumLiteral_127= MaxTime )
                    {
                    // InternalPipelineParser.g:6478:3: (enumLiteral_127= MaxTime )
                    // InternalPipelineParser.g:6479:4: enumLiteral_127= MaxTime
                    {
                    enumLiteral_127=(Token)match(input,MaxTime,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_TIMEEnumLiteralDeclaration_127().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_127, grammarAccess.getPipelineKeywordAccess().getPPL_KW_MAX_TIMEEnumLiteralDeclaration_127());
                    			

                    }


                    }
                    break;
                case 129 :
                    // InternalPipelineParser.g:6486:3: (enumLiteral_128= Project )
                    {
                    // InternalPipelineParser.g:6486:3: (enumLiteral_128= Project )
                    // InternalPipelineParser.g:6487:4: enumLiteral_128= Project
                    {
                    enumLiteral_128=(Token)match(input,Project,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROJECTEnumLiteralDeclaration_128().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_128, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROJECTEnumLiteralDeclaration_128());
                    			

                    }


                    }
                    break;
                case 130 :
                    // InternalPipelineParser.g:6494:3: (enumLiteral_129= Plan )
                    {
                    // InternalPipelineParser.g:6494:3: (enumLiteral_129= Plan )
                    // InternalPipelineParser.g:6495:4: enumLiteral_129= Plan
                    {
                    enumLiteral_129=(Token)match(input,Plan,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PLANEnumLiteralDeclaration_129().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_129, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PLANEnumLiteralDeclaration_129());
                    			

                    }


                    }
                    break;
                case 131 :
                    // InternalPipelineParser.g:6502:3: (enumLiteral_130= Tasks )
                    {
                    // InternalPipelineParser.g:6502:3: (enumLiteral_130= Tasks )
                    // InternalPipelineParser.g:6503:4: enumLiteral_130= Tasks
                    {
                    enumLiteral_130=(Token)match(input,Tasks,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKSEnumLiteralDeclaration_130().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_130, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TASKSEnumLiteralDeclaration_130());
                    			

                    }


                    }
                    break;
                case 132 :
                    // InternalPipelineParser.g:6510:3: (enumLiteral_131= Requirements )
                    {
                    // InternalPipelineParser.g:6510:3: (enumLiteral_131= Requirements )
                    // InternalPipelineParser.g:6511:4: enumLiteral_131= Requirements
                    {
                    enumLiteral_131=(Token)match(input,Requirements,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREMENTSEnumLiteralDeclaration_131().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_131, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REQUIREMENTSEnumLiteralDeclaration_131());
                    			

                    }


                    }
                    break;
                case 133 :
                    // InternalPipelineParser.g:6518:3: (enumLiteral_132= Final )
                    {
                    // InternalPipelineParser.g:6518:3: (enumLiteral_132= Final )
                    // InternalPipelineParser.g:6519:4: enumLiteral_132= Final
                    {
                    enumLiteral_132=(Token)match(input,Final,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_FINALEnumLiteralDeclaration_132().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_132, grammarAccess.getPipelineKeywordAccess().getPPL_KW_FINALEnumLiteralDeclaration_132());
                    			

                    }


                    }
                    break;
                case 134 :
                    // InternalPipelineParser.g:6526:3: (enumLiteral_133= Jdk )
                    {
                    // InternalPipelineParser.g:6526:3: (enumLiteral_133= Jdk )
                    // InternalPipelineParser.g:6527:4: enumLiteral_133= Jdk
                    {
                    enumLiteral_133=(Token)match(input,Jdk,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_JDKEnumLiteralDeclaration_133().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_133, grammarAccess.getPipelineKeywordAccess().getPPL_KW_JDKEnumLiteralDeclaration_133());
                    			

                    }


                    }
                    break;
                case 135 :
                    // InternalPipelineParser.g:6534:3: (enumLiteral_134= Labels )
                    {
                    // InternalPipelineParser.g:6534:3: (enumLiteral_134= Labels )
                    // InternalPipelineParser.g:6535:4: enumLiteral_134= Labels
                    {
                    enumLiteral_134=(Token)match(input,Labels,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_LABELSEnumLiteralDeclaration_134().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_134, grammarAccess.getPipelineKeywordAccess().getPPL_KW_LABELSEnumLiteralDeclaration_134());
                    			

                    }


                    }
                    break;
                case 136 :
                    // InternalPipelineParser.g:6542:3: (enumLiteral_135= Repository )
                    {
                    // InternalPipelineParser.g:6542:3: (enumLiteral_135= Repository )
                    // InternalPipelineParser.g:6543:4: enumLiteral_135= Repository
                    {
                    enumLiteral_135=(Token)match(input,Repository,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORYEnumLiteralDeclaration_135().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_135, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REPOSITORYEnumLiteralDeclaration_135());
                    			

                    }


                    }
                    break;
                case 137 :
                    // InternalPipelineParser.g:6550:3: (enumLiteral_136= Release )
                    {
                    // InternalPipelineParser.g:6550:3: (enumLiteral_136= Release )
                    // InternalPipelineParser.g:6551:4: enumLiteral_136= Release
                    {
                    enumLiteral_136=(Token)match(input,Release,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASEEnumLiteralDeclaration_136().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_136, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASEEnumLiteralDeclaration_136());
                    			

                    }


                    }
                    break;
                case 138 :
                    // InternalPipelineParser.g:6558:3: (enumLiteral_137= Docker )
                    {
                    // InternalPipelineParser.g:6558:3: (enumLiteral_137= Docker )
                    // InternalPipelineParser.g:6559:4: enumLiteral_137= Docker
                    {
                    enumLiteral_137=(Token)match(input,Docker,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOCKEREnumLiteralDeclaration_137().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_137, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DOCKEREnumLiteralDeclaration_137());
                    			

                    }


                    }
                    break;
                case 139 :
                    // InternalPipelineParser.g:6566:3: (enumLiteral_138= Agent )
                    {
                    // InternalPipelineParser.g:6566:3: (enumLiteral_138= Agent )
                    // InternalPipelineParser.g:6567:4: enumLiteral_138= Agent
                    {
                    enumLiteral_138=(Token)match(input,Agent,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AGENTEnumLiteralDeclaration_138().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_138, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AGENTEnumLiteralDeclaration_138());
                    			

                    }


                    }
                    break;
                case 140 :
                    // InternalPipelineParser.g:6574:3: (enumLiteral_139= Queue )
                    {
                    // InternalPipelineParser.g:6574:3: (enumLiteral_139= Queue )
                    // InternalPipelineParser.g:6575:4: enumLiteral_139= Queue
                    {
                    enumLiteral_139=(Token)match(input,Queue,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEEnumLiteralDeclaration_139().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_139, grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEEnumLiteralDeclaration_139());
                    			

                    }


                    }
                    break;
                case 141 :
                    // InternalPipelineParser.g:6582:3: (enumLiteral_140= Snapshot )
                    {
                    // InternalPipelineParser.g:6582:3: (enumLiteral_140= Snapshot )
                    // InternalPipelineParser.g:6583:4: enumLiteral_140= Snapshot
                    {
                    enumLiteral_140=(Token)match(input,Snapshot,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SNAPSHOTEnumLiteralDeclaration_140().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_140, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SNAPSHOTEnumLiteralDeclaration_140());
                    			

                    }


                    }
                    break;
                case 142 :
                    // InternalPipelineParser.g:6590:3: (enumLiteral_141= Policy )
                    {
                    // InternalPipelineParser.g:6590:3: (enumLiteral_141= Policy )
                    // InternalPipelineParser.g:6591:4: enumLiteral_141= Policy
                    {
                    enumLiteral_141=(Token)match(input,Policy,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POLICYEnumLiteralDeclaration_141().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_141, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POLICYEnumLiteralDeclaration_141());
                    			

                    }


                    }
                    break;
                case 143 :
                    // InternalPipelineParser.g:6598:3: (enumLiteral_142= Approvals )
                    {
                    // InternalPipelineParser.g:6598:3: (enumLiteral_142= Approvals )
                    // InternalPipelineParser.g:6599:4: enumLiteral_142= Approvals
                    {
                    enumLiteral_142=(Token)match(input,Approvals,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_APPROVALSEnumLiteralDeclaration_142().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_142, grammarAccess.getPipelineKeywordAccess().getPPL_KW_APPROVALSEnumLiteralDeclaration_142());
                    			

                    }


                    }
                    break;
                case 144 :
                    // InternalPipelineParser.g:6606:3: (enumLiteral_143= PreBuild )
                    {
                    // InternalPipelineParser.g:6606:3: (enumLiteral_143= PreBuild )
                    // InternalPipelineParser.g:6607:4: enumLiteral_143= PreBuild
                    {
                    enumLiteral_143=(Token)match(input,PreBuild,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PREBUILDEnumLiteralDeclaration_143().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_143, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PREBUILDEnumLiteralDeclaration_143());
                    			

                    }


                    }
                    break;
                case 145 :
                    // InternalPipelineParser.g:6614:3: (enumLiteral_144= PostBuild )
                    {
                    // InternalPipelineParser.g:6614:3: (enumLiteral_144= PostBuild )
                    // InternalPipelineParser.g:6615:4: enumLiteral_144= PostBuild
                    {
                    enumLiteral_144=(Token)match(input,PostBuild,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_POSTBUILDEnumLiteralDeclaration_144().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_144, grammarAccess.getPipelineKeywordAccess().getPPL_KW_POSTBUILDEnumLiteralDeclaration_144());
                    			

                    }


                    }
                    break;
                case 146 :
                    // InternalPipelineParser.g:6622:3: (enumLiteral_145= Ssh )
                    {
                    // InternalPipelineParser.g:6622:3: (enumLiteral_145= Ssh )
                    // InternalPipelineParser.g:6623:4: enumLiteral_145= Ssh
                    {
                    enumLiteral_145=(Token)match(input,Ssh,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_SSHEnumLiteralDeclaration_145().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_145, grammarAccess.getPipelineKeywordAccess().getPPL_KW_SSHEnumLiteralDeclaration_145());
                    			

                    }


                    }
                    break;
                case 147 :
                    // InternalPipelineParser.g:6630:3: (enumLiteral_146= Auth )
                    {
                    // InternalPipelineParser.g:6630:3: (enumLiteral_146= Auth )
                    // InternalPipelineParser.g:6631:4: enumLiteral_146= Auth
                    {
                    enumLiteral_146=(Token)match(input,Auth,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTHEnumLiteralDeclaration_146().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_146, grammarAccess.getPipelineKeywordAccess().getPPL_KW_AUTHEnumLiteralDeclaration_146());
                    			

                    }


                    }
                    break;
                case 148 :
                    // InternalPipelineParser.g:6638:3: (enumLiteral_147= Storage )
                    {
                    // InternalPipelineParser.g:6638:3: (enumLiteral_147= Storage )
                    // InternalPipelineParser.g:6639:4: enumLiteral_147= Storage
                    {
                    enumLiteral_147=(Token)match(input,Storage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_STORAGEEnumLiteralDeclaration_147().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_147, grammarAccess.getPipelineKeywordAccess().getPPL_KW_STORAGEEnumLiteralDeclaration_147());
                    			

                    }


                    }
                    break;
                case 149 :
                    // InternalPipelineParser.g:6646:3: (enumLiteral_148= Endpoints )
                    {
                    // InternalPipelineParser.g:6646:3: (enumLiteral_148= Endpoints )
                    // InternalPipelineParser.g:6647:4: enumLiteral_148= Endpoints
                    {
                    enumLiteral_148=(Token)match(input,Endpoints,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENDPOINTSEnumLiteralDeclaration_148().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_148, grammarAccess.getPipelineKeywordAccess().getPPL_KW_ENDPOINTSEnumLiteralDeclaration_148());
                    			

                    }


                    }
                    break;
                case 150 :
                    // InternalPipelineParser.g:6654:3: (enumLiteral_149= Command )
                    {
                    // InternalPipelineParser.g:6654:3: (enumLiteral_149= Command )
                    // InternalPipelineParser.g:6655:4: enumLiteral_149= Command
                    {
                    enumLiteral_149=(Token)match(input,Command,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_COMMANDEnumLiteralDeclaration_149().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_149, grammarAccess.getPipelineKeywordAccess().getPPL_KW_COMMANDEnumLiteralDeclaration_149());
                    			

                    }


                    }
                    break;
                case 151 :
                    // InternalPipelineParser.g:6662:3: (enumLiteral_150= Provisioner )
                    {
                    // InternalPipelineParser.g:6662:3: (enumLiteral_150= Provisioner )
                    // InternalPipelineParser.g:6663:4: enumLiteral_150= Provisioner
                    {
                    enumLiteral_150=(Token)match(input,Provisioner,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROVISIONEREnumLiteralDeclaration_150().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_150, grammarAccess.getPipelineKeywordAccess().getPPL_KW_PROVISIONEREnumLiteralDeclaration_150());
                    			

                    }


                    }
                    break;
                case 152 :
                    // InternalPipelineParser.g:6670:3: (enumLiteral_151= TriggerRules )
                    {
                    // InternalPipelineParser.g:6670:3: (enumLiteral_151= TriggerRules )
                    // InternalPipelineParser.g:6671:4: enumLiteral_151= TriggerRules
                    {
                    enumLiteral_151=(Token)match(input,TriggerRules,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGER_RULESEnumLiteralDeclaration_151().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_151, grammarAccess.getPipelineKeywordAccess().getPPL_KW_TRIGGER_RULESEnumLiteralDeclaration_151());
                    			

                    }


                    }
                    break;
                case 153 :
                    // InternalPipelineParser.g:6678:3: (enumLiteral_152= RunPolicy )
                    {
                    // InternalPipelineParser.g:6678:3: (enumLiteral_152= RunPolicy )
                    // InternalPipelineParser.g:6679:4: enumLiteral_152= RunPolicy
                    {
                    enumLiteral_152=(Token)match(input,RunPolicy,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_POLICYEnumLiteralDeclaration_152().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_152, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RUN_POLICYEnumLiteralDeclaration_152());
                    			

                    }


                    }
                    break;
                case 154 :
                    // InternalPipelineParser.g:6686:3: (enumLiteral_153= Queued )
                    {
                    // InternalPipelineParser.g:6686:3: (enumLiteral_153= Queued )
                    // InternalPipelineParser.g:6687:4: enumLiteral_153= Queued
                    {
                    enumLiteral_153=(Token)match(input,Queued,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEDEnumLiteralDeclaration_153().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_153, grammarAccess.getPipelineKeywordAccess().getPPL_KW_QUEUEDEnumLiteralDeclaration_153());
                    			

                    }


                    }
                    break;
                case 155 :
                    // InternalPipelineParser.g:6694:3: (enumLiteral_154= Notifications )
                    {
                    // InternalPipelineParser.g:6694:3: (enumLiteral_154= Notifications )
                    // InternalPipelineParser.g:6695:4: enumLiteral_154= Notifications
                    {
                    enumLiteral_154=(Token)match(input,Notifications,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_NOTIFICATIONSEnumLiteralDeclaration_154().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_154, grammarAccess.getPipelineKeywordAccess().getPPL_KW_NOTIFICATIONSEnumLiteralDeclaration_154());
                    			

                    }


                    }
                    break;
                case 156 :
                    // InternalPipelineParser.g:6702:3: (enumLiteral_155= DeployTrigger )
                    {
                    // InternalPipelineParser.g:6702:3: (enumLiteral_155= DeployTrigger )
                    // InternalPipelineParser.g:6703:4: enumLiteral_155= DeployTrigger
                    {
                    enumLiteral_155=(Token)match(input,DeployTrigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOY_TRIGGEREnumLiteralDeclaration_155().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_155, grammarAccess.getPipelineKeywordAccess().getPPL_KW_DEPLOY_TRIGGEREnumLiteralDeclaration_155());
                    			

                    }


                    }
                    break;
                case 157 :
                    // InternalPipelineParser.g:6710:3: (enumLiteral_156= ReleaseTrigger )
                    {
                    // InternalPipelineParser.g:6710:3: (enumLiteral_156= ReleaseTrigger )
                    // InternalPipelineParser.g:6711:4: enumLiteral_156= ReleaseTrigger
                    {
                    enumLiteral_156=(Token)match(input,ReleaseTrigger,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASE_TRIGGEREnumLiteralDeclaration_156().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_156, grammarAccess.getPipelineKeywordAccess().getPPL_KW_RELEASE_TRIGGEREnumLiteralDeclaration_156());
                    			

                    }


                    }
                    break;
                case 158 :
                    // InternalPipelineParser.g:6718:3: (enumLiteral_157= LockBehavior )
                    {
                    // InternalPipelineParser.g:6718:3: (enumLiteral_157= LockBehavior )
                    // InternalPipelineParser.g:6719:4: enumLiteral_157= LockBehavior
                    {
                    enumLiteral_157=(Token)match(input,LockBehavior,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_LOCK_BEHAVIOREnumLiteralDeclaration_157().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_157, grammarAccess.getPipelineKeywordAccess().getPPL_KW_LOCK_BEHAVIOREnumLiteralDeclaration_157());
                    			

                    }


                    }
                    break;
                case 159 :
                    // InternalPipelineParser.g:6726:3: (enumLiteral_158= ReviewStage )
                    {
                    // InternalPipelineParser.g:6726:3: (enumLiteral_158= ReviewStage )
                    // InternalPipelineParser.g:6727:4: enumLiteral_158= ReviewStage
                    {
                    enumLiteral_158=(Token)match(input,ReviewStage,FOLLOW_2); 

                    				current = grammarAccess.getPipelineKeywordAccess().getPPL_KW_REVIEW_STAGEEnumLiteralDeclaration_158().getEnumLiteral().getInstance();
                    				newLeafNode(enumLiteral_158, grammarAccess.getPipelineKeywordAccess().getPPL_KW_REVIEW_STAGEEnumLiteralDeclaration_158());
                    			

                    }


                    }
                    break;

            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }
    // $ANTLR end "rulePipelineKeyword"

    // Delegated rules


    protected DFA34 dfa34 = new DFA34(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA145 dfa145 = new DFA145(this);
    static final String dfa_1s = "\16\uffff";
    static final String dfa_2s = "\1\1\15\uffff";
    static final String dfa_3s = "\1\4\15\uffff";
    static final String dfa_4s = "\1\u00e7\15\uffff";
    static final String dfa_5s = "\1\uffff\1\15\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String dfa_6s = "\1\0\15\uffff}>";
    static final String[] dfa_7s = {
            "\7\1\1\uffff\1\1\2\uffff\3\1\1\4\1\1\6\uffff\2\1\1\uffff\1\1\3\uffff\4\1\4\uffff\1\1\2\uffff\2\1\5\uffff\2\1\1\7\10\uffff\1\6\3\uffff\2\1\1\uffff\1\1\1\uffff\1\1\1\14\1\uffff\1\1\1\uffff\1\1\2\uffff\2\1\5\uffff\2\1\1\uffff\1\11\1\uffff\2\1\1\13\3\uffff\1\1\2\uffff\1\4\12\uffff\1\3\1\1\10\uffff\1\1\1\uffff\1\1\2\uffff\1\15\1\uffff\1\15\3\uffff\1\1\1\uffff\1\1\5\uffff\1\1\1\12\5\uffff\3\1\1\uffff\3\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\2\1\6\uffff\1\1\1\uffff\1\1\2\uffff\1\1\6\uffff\1\1\3\uffff\3\1\1\2\1\uffff\1\1\1\uffff\1\10\1\1\3\uffff\1\1\6\uffff\1\5\2\uffff\1\1\5\uffff\2\1\13\uffff\1\1\2\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final short[] dfa_2 = DFA.unpackEncodedString(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final char[] dfa_4 = DFA.unpackEncodedStringToUnsignedChars(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[] dfa_6 = DFA.unpackEncodedString(dfa_6s);
    static final short[][] dfa_7 = unpackEncodedStringArray(dfa_7s);

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_1;
            this.eof = dfa_2;
            this.min = dfa_3;
            this.max = dfa_4;
            this.accept = dfa_5;
            this.special = dfa_6;
            this.transition = dfa_7;
        }
        public String getDescription() {
            return "()* loopback of 329:5: ( ({...}? => ( ({...}? => (otherlv_1= Name ( (lv_name_2_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_3= RunName ( (lv_runName_4_0= ruleUnquotedString ) ) ) ) ) ) | ({...}? => ( ({...}? => ( ( ( ( ({...}? => ( ({...}? => (otherlv_6= Defaults this_BEGIN_7= RULE_BEGIN otherlv_8= Run this_BEGIN_9= RULE_BEGIN (otherlv_10= Shell ( ( (lv_defaultShellValue_11_1= RULE_STRING | lv_defaultShellValue_11_2= RULE_ID ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_12= WorkingDirectory ( ( (lv_defaultWDValue_13_1= RULE_STRING | lv_defaultWDValue_13_2= RULE_ID ) ) ) )? this_END_14= RULE_END this_END_15= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_16= Env this_BEGIN_17= RULE_BEGIN ( (otherlv_18= HyphenMinus )? ( (lv_env_19_0= ruleKeyValue ) ) )* this_END_20= RULE_END ) ) ) ) | ({...}? => ( ({...}? => (otherlv_21= Permissions ( ( (lv_allPermission_22_0= RULE_ID ) ) | (this_BEGIN_23= RULE_BEGIN ( (lv_indPermissions_24_0= ruleIndPermissionValue ) )* this_END_25= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_26= Concurrency ( (this_BEGIN_27= RULE_BEGIN (otherlv_28= Group ( ( (lv_group_29_1= RULE_ID | lv_group_29_2= RULE_COMPLEX_EXPRESSION ) ) ) ) (otherlv_30= CancelInProgress ( ( (lv_cancelConcurrence_31_1= RULE_ID | lv_cancelConcurrence_31_2= RULE_COMPLEX_EXPRESSION ) ) ) ) this_END_32= RULE_END ) | ( ( (lv_concurrency_33_1= ruleAnyData | lv_concurrency_33_2= ruleArrayList ) ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_34= Pool ( ( ( ( ({...}? => ( ({...}? => (this_BEGIN_36= RULE_BEGIN (otherlv_37= Name ( (lv_vmName_38_0= RULE_ID ) ) ) (otherlv_39= VmImage ( ( (lv_vmImage_40_1= RULE_ID | lv_vmImage_40_2= RULE_STRING ) ) ) )? ) ) ) ) | ({...}? => ( ({...}? => ( (otherlv_41= Demands ( ( (lv_vmDemands_42_1= ruleAnyData | lv_vmDemands_42_2= ruleHyphenValues ) ) ) )? this_END_43= RULE_END ) ) ) ) )+ {...}?) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_44= Resources (this_BEGIN_45= RULE_BEGIN ( (lv_resources_46_0= ruleResource ) )* this_END_47= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_48= Version ( (lv_version_49_0= RULE_VERSION ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_50= Variables (this_BEGIN_51= RULE_BEGIN ( (lv_pplVariables_52_0= ruleVariable ) )* this_END_53= RULE_END ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_54= Parameters (otherlv_55= HyphenMinus ( (lv_parameterValues_56_0= ruleParameterValue ) ) )* ) ) ) ) | ({...}? => ( ({...}? => ( ( ( (lv_extendOrInclude_57_1= Extends | lv_extendOrInclude_57_2= Include ) ) ) (this_BEGIN_58= RULE_BEGIN ( (lv_extendedParameters_59_0= ruleParameterValue ) )+ this_END_60= RULE_END ) ) ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_0 = input.LA(1);

                         
                        int index34_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA34_0==EOF||(LA34_0>=Pull_request_review_comment && LA34_0<=Pull_request_target)||LA34_0==Repository_dispatch||(LA34_0>=Deployment_status && LA34_0<=Workflow_dispatch)||LA34_0==Registry_package||(LA34_0>=Merge_requests && LA34_0<=Project_column)||LA34_0==WorkflowRules||(LA34_0>=Issue_comment && LA34_0<=Workflow_call)||LA34_0==LockBehavior||(LA34_0>=Project_card && LA34_0<=Pull_request)||(LA34_0>=Workflow_run && LA34_0<=Check_suite)||(LA34_0>=AutoCancel && LA34_0<=Conditions)||LA34_0==Deployment||LA34_0==Page_build||LA34_0==PlanBranch||LA34_0==Repository||(LA34_0>=Bitbucket && LA34_0<=Check_run)||(LA34_0>=Milestone && LA34_0<=Pipelines)||(LA34_0>=Scheduled && LA34_0<=Schedules)||LA34_0==Branches||LA34_0==Schedule||LA34_0==Changes||LA34_0==Default||LA34_0==Project||LA34_0==Release||LA34_0==Trigger||(LA34_0>=Create && LA34_0<=Delete)||(LA34_0>=Drafts && LA34_0<=Gollum)||LA34_0==Issues||LA34_0==Public||LA34_0==Remote||(LA34_0>=Stages && LA34_0<=Status)||LA34_0==Label||LA34_0==Paths||LA34_0==Rules||LA34_0==Watch||(LA34_0>=Cron && LA34_0<=Jobs)||LA34_0==Only||LA34_0==Push||LA34_0==Tags||LA34_0==None||(LA34_0>=On && LA34_0<=Pr)||LA34_0==RULE_ID) ) {s = 1;}

                        else if ( LA34_0 == Name && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 0) ) {s = 2;}

                        else if ( LA34_0 == RunName && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 1) ) {s = 3;}

                        else if ( ( LA34_0 == WorkingDirectory || LA34_0 == Defaults || LA34_0 == RULE_END ) && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 2) ) {s = 4;}

                        else if ( LA34_0 == Env && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 3) ) {s = 5;}

                        else if ( LA34_0 == Permissions && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 4) ) {s = 6;}

                        else if ( LA34_0 == Concurrency && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 5) ) {s = 7;}

                        else if ( LA34_0 == Pool && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 6) ) {s = 8;}

                        else if ( LA34_0 == Resources && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 7) ) {s = 9;}

                        else if ( LA34_0 == Version && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 8) ) {s = 10;}

                        else if ( LA34_0 == Variables && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 9) ) {s = 11;}

                        else if ( LA34_0 == Parameters && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 10) ) {s = 12;}

                        else if ( ( LA34_0 == Extends || LA34_0 == Include ) && getUnorderedGroupHelper().canSelect(grammarAccess.getConfigurationsAccess().getUnorderedGroup(), 11) ) {s = 13;}

                         
                        input.seek(index34_0);
                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_8s = "\15\uffff";
    static final String dfa_9s = "\1\25\14\uffff";
    static final String dfa_10s = "\1\u00e7\14\uffff";
    static final String dfa_11s = "\1\uffff\1\14\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String dfa_12s = "\1\0\14\uffff}>";
    static final String[] dfa_13s = {
            "\1\10\25\uffff\1\12\25\uffff\1\14\1\4\33\uffff\1\5\2\uffff\1\7\65\uffff\1\6\16\uffff\1\3\6\uffff\1\11\7\uffff\1\2\21\uffff\1\13\37\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = dfa_8;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "()* loopback of 1728:8: ( ({...}? => ( ({...}? => (otherlv_7= Types ( (lv_activities_8_0= ruleActivity ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_9= Batch ( (lv_batch_10_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_11= AutoCancel ( (lv_autoCancel_12_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_13= Workflows ( ( (lv_workflows_14_1= ruleArrayList | lv_workflows_14_2= ruleHyphenValues | lv_workflows_14_3= RULE_ID ) ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_15= Drafts ( (lv_drafts_16_0= RULE_ID ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_17= Branches ( ( ( (lv_includedBranches_18_0= ruleBranch ) )* | (otherlv_19= LeftSquareBracket ( (lv_includedBranches_20_0= ruleBranch ) ) (otherlv_21= Comma ( (lv_includedBranches_22_0= ruleBranch ) ) )* otherlv_23= RightSquareBracket ) ) | (this_BEGIN_24= RULE_BEGIN ( (lv_includedBranches_25_0= ruleBranch ) )* (otherlv_26= Include ( (lv_includedBranches_27_0= ruleBranch ) )* )? (otherlv_28= Exclude ( (lv_excludedBranches_29_0= ruleBranch ) )* )? this_END_30= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_31= BranchesIgnore ( ( ( (lv_excludedBranches_32_0= ruleBranch ) )* | (otherlv_33= LeftSquareBracket ( (lv_excludedBranches_34_0= ruleBranch ) ) (otherlv_35= Comma ( (lv_excludedBranches_36_0= ruleBranch ) ) )* otherlv_37= RightSquareBracket ) ) | (this_BEGIN_38= RULE_BEGIN ( (lv_excludedBranches_39_0= ruleBranch ) )* this_END_40= RULE_END ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_41= Paths ( (lv_includedPaths_42_0= ruleHyphenValues ) )? (this_BEGIN_43= RULE_BEGIN (otherlv_44= Include ( (lv_includedPaths_45_0= ruleHyphenValues ) ) )? (otherlv_46= Exclude ( (lv_excludedPaths_47_0= ruleHyphenValues ) ) )? this_END_48= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_49= PathsIgnore ( (lv_excludedPaths_50_0= ruleHyphenValues ) ) ) ) ) ) | ({...}? => ( ({...}? => (otherlv_51= Tags ( (lv_includedTags_52_0= ruleHyphenValues ) )? (this_BEGIN_53= RULE_BEGIN (otherlv_54= Include ( (lv_includedTags_55_0= ruleHyphenValues ) ) )? (otherlv_56= Exclude ( (lv_excludedTags_57_0= ruleHyphenValues ) ) )? this_END_58= RULE_END )? ) ) ) ) | ({...}? => ( ({...}? => (otherlv_59= TagsIgnore ( (lv_excludedTags_60_0= ruleHyphenValues ) ) ) ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_0 = input.LA(1);

                         
                        int index73_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA73_0==RULE_END) ) {s = 1;}

                        else if ( LA73_0 == Types && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 0) ) {s = 2;}

                        else if ( LA73_0 == Batch && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 1) ) {s = 3;}

                        else if ( LA73_0 == AutoCancel && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 2) ) {s = 4;}

                        else if ( LA73_0 == Workflows && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 3) ) {s = 5;}

                        else if ( LA73_0 == Drafts && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 4) ) {s = 6;}

                        else if ( LA73_0 == Branches && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 5) ) {s = 7;}

                        else if ( LA73_0 == BranchesIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 6) ) {s = 8;}

                        else if ( LA73_0 == Paths && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 7) ) {s = 9;}

                        else if ( LA73_0 == PathsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 8) ) {s = 10;}

                        else if ( LA73_0 == Tags && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 9) ) {s = 11;}

                        else if ( LA73_0 == TagsIgnore && getUnorderedGroupHelper().canSelect(grammarAccess.getEventAccess().getUnorderedGroup_0_3_1(), 10) ) {s = 12;}

                         
                        input.seek(index73_0);
                        if ( s>=0 ) return s;
                        break;
            }
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\12\uffff";
    static final String dfa_15s = "\1\14\1\uffff\1\14\2\uffff\1\u00de\1\u00da\1\u00e0\1\uffff\1\u00da";
    static final String dfa_16s = "\1\u00e7\1\uffff\1\u00ea\2\uffff\1\u00ea\1\u00de\1\u00ea\1\uffff\1\u00de";
    static final String dfa_17s = "\1\uffff\1\2\1\uffff\2\1\3\uffff\1\1\1\uffff";
    static final String dfa_18s = "\12\uffff}>";
    static final String[] dfa_19s = {
            "\3\3\2\uffff\2\3\1\uffff\4\3\1\uffff\1\3\2\uffff\1\3\1\uffff\3\3\1\uffff\4\3\1\uffff\5\3\1\uffff\7\3\1\uffff\3\3\1\uffff\1\3\1\uffff\14\3\1\uffff\2\3\1\uffff\4\3\2\uffff\2\3\1\2\2\3\1\uffff\4\3\1\uffff\4\3\1\uffff\2\3\1\uffff\2\3\1\uffff\5\3\1\uffff\6\3\1\uffff\4\3\2\uffff\30\3\4\uffff\3\3\1\uffff\1\3\1\uffff\3\3\1\uffff\1\3\1\uffff\11\3\1\uffff\1\1\12\3\2\uffff\3\3\2\uffff\1\3\1\uffff\5\3\1\uffff\7\3\1\uffff\3\3\2\uffff\5\3\10\uffff\1\3\3\uffff\1\3\2\uffff\1\1",
            "",
            "\3\4\2\uffff\2\4\1\uffff\4\4\1\uffff\1\4\2\uffff\1\4\1\uffff\3\4\1\uffff\4\4\1\uffff\5\4\1\uffff\7\4\1\uffff\3\4\1\uffff\1\4\1\uffff\14\4\1\uffff\2\4\1\uffff\4\4\2\uffff\5\4\1\uffff\4\4\1\uffff\4\4\1\uffff\2\4\1\uffff\2\4\1\uffff\5\4\1\uffff\6\4\1\uffff\4\4\2\uffff\30\4\4\uffff\3\4\1\uffff\1\4\1\uffff\3\4\1\uffff\1\4\1\uffff\11\4\1\uffff\13\4\2\uffff\3\4\2\uffff\1\4\1\uffff\5\4\1\uffff\7\4\1\uffff\3\4\1\1\1\uffff\5\4\3\uffff\1\4\1\uffff\1\5\2\uffff\10\4\2\uffff\1\4",
            "",
            "",
            "\1\4\1\uffff\4\4\1\6\1\4\4\uffff\1\4",
            "\1\7\3\uffff\1\10",
            "\4\10\1\11\1\10\4\uffff\1\10",
            "",
            "\1\7\3\uffff\1\10"
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[][] dfa_19 = unpackEncodedStringArray(dfa_19s);

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = dfa_14;
            this.eof = dfa_14;
            this.min = dfa_15;
            this.max = dfa_16;
            this.accept = dfa_17;
            this.special = dfa_18;
            this.transition = dfa_19;
        }
        public String getDescription() {
            return "()* loopback of 3579:4: ( (lv_jobParameterValues_6_0= ruleParameterValue ) )*";
        }
    }
    static final String dfa_20s = "\24\uffff";
    static final String dfa_21s = "\2\uffff\12\22\10\uffff";
    static final String dfa_22s = "\1\14\1\uffff\12\u00d9\10\uffff";
    static final String dfa_23s = "\1\u00e4\1\uffff\12\u00ea\10\uffff";
    static final String dfa_24s = "\1\uffff\1\1\12\uffff\7\1\1\2";
    static final String dfa_25s = "\24\uffff}>";
    static final String[] dfa_26s = {
            "\3\1\2\uffff\2\1\1\uffff\4\1\1\uffff\1\1\2\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\uffff\5\1\1\uffff\7\1\1\uffff\3\1\1\uffff\1\1\1\uffff\13\1\1\11\1\uffff\2\1\1\uffff\1\6\3\1\2\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1\uffff\1\1\1\7\1\uffff\1\1\1\10\1\uffff\5\1\1\uffff\6\1\1\uffff\4\1\2\uffff\13\1\1\12\14\1\4\uffff\3\1\1\uffff\1\1\1\uffff\3\1\1\uffff\1\1\1\uffff\1\3\10\1\2\uffff\12\1\2\uffff\1\1\1\4\1\1\2\uffff\1\1\1\uffff\4\1\1\5\1\uffff\2\1\1\13\4\1\1\uffff\3\1\2\uffff\1\2\4\1\14\uffff\1\1",
            "",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_20 = DFA.unpackEncodedString(dfa_20s);
    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final char[] dfa_22 = DFA.unpackEncodedStringToUnsignedChars(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final short[] dfa_24 = DFA.unpackEncodedString(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[][] dfa_26 = unpackEncodedStringArray(dfa_26s);

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = dfa_20;
            this.eof = dfa_21;
            this.min = dfa_22;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_26;
        }
        public String getDescription() {
            return "3745:3: (this_Action_1= ruleAction | this_Script_2= ruleScript )";
        }
    }
    static final String dfa_27s = "\1\14\1\uffff\12\14\10\uffff";
    static final String[] dfa_28s = {
            "\3\1\2\uffff\2\1\1\uffff\4\1\1\uffff\1\1\2\uffff\1\1\1\uffff\3\1\1\uffff\4\1\1\uffff\5\1\1\uffff\7\1\1\uffff\3\1\1\uffff\1\1\1\uffff\13\1\1\11\1\uffff\2\1\1\uffff\1\6\3\1\2\uffff\5\1\1\uffff\4\1\1\uffff\4\1\1\uffff\1\1\1\7\1\uffff\1\1\1\10\1\uffff\5\1\1\uffff\6\1\1\uffff\4\1\2\uffff\13\1\1\12\14\1\4\uffff\3\1\1\uffff\1\1\1\uffff\3\1\1\uffff\1\1\1\uffff\1\3\10\1\2\uffff\12\1\2\uffff\1\1\1\4\1\1\2\uffff\1\1\1\uffff\4\1\1\5\1\uffff\2\1\1\13\4\1\1\uffff\3\1\2\uffff\1\2\4\1\14\uffff\1\1",
            "",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "\3\22\2\uffff\2\22\1\uffff\4\22\1\uffff\1\22\2\uffff\1\22\1\uffff\3\22\1\uffff\4\22\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\1\uffff\1\22\1\uffff\14\22\1\uffff\2\22\1\uffff\4\22\2\uffff\5\22\1\uffff\4\22\1\uffff\4\22\1\uffff\2\22\1\uffff\2\22\1\uffff\5\22\1\uffff\6\22\1\uffff\4\22\2\uffff\30\22\4\uffff\3\22\1\uffff\1\22\1\uffff\3\22\1\uffff\1\22\1\uffff\11\22\2\uffff\12\22\2\uffff\3\22\2\uffff\1\1\1\uffff\5\22\1\uffff\7\22\1\uffff\3\22\2\uffff\5\22\1\uffff\1\23\1\uffff\1\22\3\uffff\1\23\1\20\1\22\1\15\1\16\1\17\1\21\2\22\2\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final short[][] dfa_28 = unpackEncodedStringArray(dfa_28s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_27;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_28;
        }
        public String getDescription() {
            return "3969:6: (lv_subSteps_8_1= ruleAction | lv_subSteps_8_2= ruleScript )";
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = dfa_20;
            this.eof = dfa_20;
            this.min = dfa_27;
            this.max = dfa_23;
            this.accept = dfa_24;
            this.special = dfa_25;
            this.transition = dfa_28;
        }
        public String getDescription() {
            return "4148:6: (lv_subSteps_7_1= ruleAction | lv_subSteps_7_2= ruleScript )";
        }
    }
    static final String dfa_29s = "\14\uffff";
    static final String dfa_30s = "\1\6\2\uffff\1\2\3\uffff\2\2\3\uffff";
    static final String dfa_31s = "\1\4\2\uffff\1\4\2\14\1\uffff\2\4\1\14\2\u00db";
    static final String dfa_32s = "\1\u00ea\2\uffff\1\u00e7\1\u00ea\1\u00e7\1\uffff\2\u00e7\1\u00ea\2\u00e7";
    static final String dfa_33s = "\1\uffff\2\1\3\uffff\1\2\5\uffff";
    static final String dfa_34s = "\14\uffff}>";
    static final String[] dfa_35s = {
            "\7\6\1\uffff\14\6\1\uffff\15\6\1\uffff\21\6\1\uffff\1\6\1\uffff\45\6\1\uffff\2\6\1\uffff\2\6\1\uffff\5\6\1\uffff\6\6\1\uffff\4\6\1\uffff\31\6\1\uffff\45\6\1\uffff\6\6\1\uffff\5\6\1\uffff\7\6\1\uffff\4\6\1\uffff\6\6\2\uffff\1\4\1\uffff\1\2\2\uffff\1\3\1\2\2\1\2\2\1\5\1\6\2\uffff\1\1",
            "",
            "",
            "\7\2\1\uffff\14\2\1\uffff\15\2\1\uffff\21\2\1\uffff\1\2\1\uffff\45\2\1\uffff\2\2\1\uffff\2\2\1\uffff\5\2\1\uffff\6\2\1\uffff\4\2\1\uffff\31\2\1\uffff\45\2\1\uffff\6\2\1\uffff\5\2\1\uffff\7\2\1\uffff\4\2\1\uffff\6\2\2\uffff\1\2\1\6\3\uffff\1\2\3\uffff\1\2\1\uffff\2\2",
            "\3\6\2\uffff\2\6\1\uffff\4\6\1\uffff\1\6\2\uffff\1\6\1\uffff\3\6\1\uffff\4\6\1\uffff\5\6\1\uffff\7\6\1\uffff\3\6\1\uffff\1\6\1\uffff\14\6\1\uffff\2\6\1\uffff\4\6\2\uffff\5\6\1\uffff\4\6\1\uffff\4\6\1\uffff\2\6\1\uffff\2\6\1\uffff\5\6\1\uffff\6\6\1\uffff\4\6\2\uffff\30\6\4\uffff\3\6\1\uffff\1\6\1\uffff\3\6\1\uffff\1\6\1\uffff\11\6\2\uffff\12\6\2\uffff\3\6\2\uffff\1\6\1\uffff\5\6\1\uffff\7\6\1\uffff\3\6\2\uffff\5\6\10\uffff\1\10\3\2\1\7\1\2\4\uffff\1\2",
            "\3\6\2\uffff\2\6\1\uffff\4\6\1\uffff\1\6\2\uffff\1\6\1\uffff\3\6\1\uffff\4\6\1\uffff\5\6\1\uffff\7\6\1\uffff\3\6\1\uffff\1\6\1\uffff\14\6\1\uffff\2\6\1\uffff\4\6\2\uffff\5\6\1\uffff\4\6\1\uffff\4\6\1\uffff\2\6\1\uffff\2\6\1\uffff\5\6\1\uffff\6\6\1\uffff\4\6\2\uffff\30\6\4\uffff\3\6\1\uffff\1\6\1\uffff\3\6\1\uffff\1\6\1\uffff\11\6\2\uffff\12\6\2\uffff\3\6\2\uffff\1\6\1\uffff\5\6\1\uffff\7\6\1\uffff\3\6\2\uffff\5\6\3\uffff\1\11\4\uffff\1\6\3\uffff\1\6\2\uffff\1\6",
            "",
            "\7\2\1\uffff\14\2\1\uffff\15\2\1\uffff\21\2\1\uffff\1\2\1\uffff\45\2\1\uffff\2\2\1\uffff\2\2\1\uffff\5\2\1\uffff\6\2\1\uffff\4\2\1\uffff\31\2\1\uffff\45\2\1\uffff\6\2\1\uffff\5\2\1\uffff\7\2\1\uffff\4\2\1\uffff\6\2\2\uffff\1\2\1\6\3\uffff\1\2\3\uffff\1\2\1\uffff\2\2",
            "\7\2\1\uffff\14\2\1\uffff\15\2\1\uffff\21\2\1\uffff\1\2\1\uffff\45\2\1\uffff\2\2\1\uffff\2\2\1\uffff\5\2\1\uffff\6\2\1\uffff\4\2\1\uffff\31\2\1\uffff\45\2\1\uffff\6\2\1\uffff\5\2\1\uffff\7\2\1\uffff\4\2\1\uffff\6\2\2\uffff\1\2\1\6\3\uffff\1\2\3\uffff\1\2\1\uffff\2\2",
            "\3\6\2\uffff\2\6\1\uffff\4\6\1\uffff\1\6\2\uffff\1\6\1\uffff\3\6\1\uffff\4\6\1\uffff\5\6\1\uffff\7\6\1\uffff\3\6\1\uffff\1\6\1\uffff\14\6\1\uffff\2\6\1\uffff\4\6\2\uffff\5\6\1\uffff\4\6\1\uffff\4\6\1\uffff\2\6\1\uffff\2\6\1\uffff\5\6\1\uffff\6\6\1\uffff\4\6\2\uffff\30\6\4\uffff\3\6\1\uffff\1\6\1\uffff\3\6\1\uffff\1\6\1\uffff\11\6\2\uffff\12\6\2\uffff\3\6\2\uffff\1\6\1\uffff\5\6\1\uffff\7\6\1\uffff\3\6\2\uffff\5\6\10\uffff\1\13\3\2\1\12\1\2\4\uffff\1\2",
            "\1\2\1\6\12\uffff\1\2",
            "\1\2\1\6\12\uffff\1\2"
    };

    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final char[] dfa_31 = DFA.unpackEncodedStringToUnsignedChars(dfa_31s);
    static final char[] dfa_32 = DFA.unpackEncodedStringToUnsignedChars(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[] dfa_34 = DFA.unpackEncodedString(dfa_34s);
    static final short[][] dfa_35 = unpackEncodedStringArray(dfa_35s);

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = dfa_29;
            this.eof = dfa_30;
            this.min = dfa_31;
            this.max = dfa_32;
            this.accept = dfa_33;
            this.special = dfa_34;
            this.transition = dfa_35;
        }
        public String getDescription() {
            return "4270:3: ( ( ( ( (lv_value_3_1= ruleAnyData | lv_value_3_2= ruleArrayList | lv_value_3_3= ruleHyphenValues ) ) ) (this_BEGIN_4= RULE_BEGIN ( (otherlv_5= HyphenMinus )? ( (lv_subParameters_6_0= ruleParameterValue ) ) )* this_END_7= RULE_END )? ) | ( (this_BEGIN_8= RULE_BEGIN ( (otherlv_9= HyphenMinus )? ( (lv_subParameters_10_0= ruleParameterValue ) ) )* this_END_11= RULE_END ) | (otherlv_12= HyphenMinus ( (lv_subParameters_13_0= ruleParameterValue ) ) )* ) )";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000001001820089L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000005021020089L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x188128128BB81050L,0x0000001001020089L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x188128128BB81050L,0x0000009001020089L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000001021020089L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000800000000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000044000000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0018321E2C0B97F0L,0x0A01000218C194ACL,0x3881281A8BB81050L,0x0000001001020089L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004008000000L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000049008000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4000000000002001L,0x0000008000004004L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4002000000002001L,0x0000008000004004L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000009008000000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001008000000L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000005000000000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0500004801000800L,0x0108014800000000L,0x0000000008040000L,0x0000008000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000047F20000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x000000C000000000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x4020000000040002L,0x5000801022000100L,0x4000000000006001L,0x000000C000004004L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x4020000000040002L,0x5000801022000100L,0x4000000000002001L,0x000000C000004004L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000047F08000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000400000000000L,0x0080010000800010L,0x0000000000010000L,0x0000008000000000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000D008000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x4020000000040002L,0x4000801022000100L,0x4000000000002001L,0x0000008008004004L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7FD75C3FFFFL,0x0000001100F9DFDFL});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7FD75C3FFFFL,0x0000009100F9DFDFL});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041100000000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000020000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000043F00000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008008000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000045008020000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000045018020000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000045008000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x0000008000000080L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000208L,0x0000047F28000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000047F28000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x000004D028000080L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x0000049008000080L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000041008000000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000001L,0x0000049008000000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000049008000000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x000004FF08000080L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000080000200000L,0x0000000240000006L,0x0020204000800000L,0x000000C000000080L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000001L,0x0000008000000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000208L,0x000004FF28000000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0800000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000008000L,0x0000008000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x2000000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000004000000004L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x2800000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000004000000004L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x2000000000000002L,0x00000000200A0000L,0x2000000000000000L,0x0000047F00000004L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x4000000000004000L,0x0000008000000000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000004000L,0x0000008000000000L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FF7FD75C3FFFFL,0x0000009100F9DFDFL});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001020020000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7FD75C3FFFFL,0x0000001000F9DFDFL});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000043F82000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7FD75C3FFFFL,0x0000009000F9DFDFL});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000047F08000000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000047F28000000L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0xFAEFEFBDD2F67000L,0xFCF7EFB6F7BE7B7FL,0x4E7FE7FD75C3FFFFL,0x0000009108F9DFDFL});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000062000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000003500000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000043F40000000L});

}
