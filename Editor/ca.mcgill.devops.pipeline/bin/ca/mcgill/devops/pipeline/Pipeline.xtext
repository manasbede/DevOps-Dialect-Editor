grammar ca.mcgill.devops.pipeline.Pipeline with org.eclipse.xtext.common.Terminals
hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate pipeline "http://www.mcgill.ca/devops/pipeline/Pipeline"

Pipeline:
	(
		(('name:' name=StringValue))?  &
		(pipelineConfigurations+=Configuration*)? &
		('run-name:' run_name=StringValue)? &
		('defaults:' BEGIN 'run:' BEGIN (('shell:'default_shell_for_all_jobs=StringValue)? & ('working-directory:'default_wd_for_all_jobs=StringValue)?)END END)? &
		('concurrency:' BEGIN 
							('group:' group=(StringValue|EXPRESSION)) & 
							('cancel-in-progress:' cancelProgress=(ID|StringValue|EXPRESSION))
						END
		)? &
	    (('on:')  ((triggers+=Event) | ('['triggers+=Event (',' triggers+=Event)*']'))? (BEGIN triggers+=Event* END)?)? 
	    (triggers+=Event*)
    )
    
    (jobOrStage=('stages:'|'jobs:')
    	BEGIN ((stages+=Stage*) | jobs+=Job* ) END
    )
;

Configuration:
	(('parameters:' parameters+=Parameter*) |
	('variables:' variablesValue=STRING) |
	('pool:' (poolID=(ID|STRING))?
		(BEGIN
			('name:' poolName=StringValue)?
			('vmImage:' poolVm=StringValue)? &
			('demands:' poolDemands=(StringValue|HyphenParameters))?
		END)?
	)|
	('resources:' resource=STRING)|
	('schedules:' schedule=STRING)) |
	
	('options:'BEGIN ('max-time:' INT)? & ('docker:'ID)?& ('size:'ID)? END) 
;

Parameter:
	('-''name:' name=ID)
		BEGIN
			('type:' type=ID)?& 
			('displayName:' displayName=StringValue)?&
			(('default:' (defaultValue+=(StringValue|INTV)) | (BEGIN defaultValue+=(IndentedKeyValues|HyphenKVP|KeyValuePairs)* END)))?&
			('values:'value=HyphenParameters)?
		END
;

Stage:
	(('-''stage:' name=StringValue))
	(BEGIN
		('displayName:' displayName=StringValue)? &
		('dependsOn:' (dependsOn+=[Stage])*)? &
		('jobs:'(jobs+=Job)*)
  	END)?
;

Job:
	((('-' 'job:')? name=StringValue (':')?))
	(BEGIN
		(nameKW=('name:'|'displayName:') jobName=StringValue)? &
		('permissions:' ((permission=Permission) | (BEGIN (value+=KeyValuePairs) END) ))? &
		(dependKW=('needs:' | 'dependsOn:') ((references+=[Job]) | ('[' references+=[Job] (',' references+=[Job])* ']')))? &
		((runKW=('runs-on:' | 'pool:') vm=(ID | ArrayList)) | (runKW=('pool:')
																	(BEGIN
																		('name:' poolName=StringValue)?
																		('vmImage:' poolVm=StringValue)? &
																		('demands:' poolDemands=(StringValue|HyphenParameters))?
																	END)
		))? &
		(jobParameters+=JobParameter)* &
		('steps:' (steps+=Step)*)?
	END)?
;

JobParameter:
	('-')((name=(ID | ArrayList)) | keyword=(PipelineKeyword))
	
	(BEGIN
		parameters+=ParameterValue*
	END)?
;

Step:
	('-')(Action | Script)
;

Script:
	(name=('run:'|'script:'|'bash:'|'pwsh:'|'powershell:'|'checkout:'|'download:'|'getPackage:'|'publish:'|'task:') ((command=StringValue) | 
			(('|' | '>-') 
			BEGIN
				command=StringValue
			END))
	)
	(BEGIN (subSteps+=(Action|Script))* END)?
;

Action:
	((keyword=PipelineKeyword)) 
	(	(value=StringValue)? &
		((paraKW=('with:'|'parameters:') | (BEGIN paraKW=('with:'|'parameters:') END))
			BEGIN 
				(parameters+=ParameterValue)*
			END
		)?
	)
	(BEGIN (subSteps+=(Action|Script))* END)?
	
;

ParameterValue:
	((name=KeyValuePairs) (value=(StringValue|INTV))?)
;

Event:
	((branches+=Branch) | (keyword = PipelineKeyword))
	(BEGIN
		(('types:') ((activities+=Activity) | ('['activities+=Activity (',' activities+=Activity)*']'))? (BEGIN ('-'?activities+=Activity)* END)?)? &
		(branchKW=('branches:' | 'branches-ignore:') ((branches+=Branch) | ('[' branches+=Branch (',' branches+=Branch)*']'))? (('-'branches+=Branch)* | (BEGIN (('includes:'|'excludes:')('-'branches+=Branch)*)+ END)) )? &
		(pathKW=('paths:'|'paths-ignore:') (BEGIN ((pathValue=(HyphenParameters)) | (incExcKW=('includes:'|'excludes:')pathValue=HyphenParameters)) END))? &
		('autoCancel:'autoCancel=ID)? &
		('drafts:'drafts=ID)? &
		('-' 'cron:'activities+=Activity)* &
		
	END)?

;

Branch:
	(name=ID) | (name=STRING)
;

Activity:
	(name=ID) | (name=STRING)
;


enum PipelineKeyword:
	PPL_KW_NAME= 'name:'|
	PPL_KW_RUN_NAME= 'run-name:'|
	PPL_KW_ON= 'on:'|
	PPL_KW_TYPES= 'types:'|
	PPL_KW_BRANCHES= 'branches:'|
	PPL_KW_BRANCHES_IGNORE= 'branches-ignore:'|
	PPL_KW_PUSH= 'push:'|
	PPL_KW_PULL_REQ= 'pull_request:'|
	PPL_KW_PATH= 'path:'|
	PPL_KW_PATH_IGN= 'paths-ignore:'|
	PPL_KW_TAGS= 'tags:'|
	PPL_KW_TAGS_IGNORE= 'tags-ignore:'|
	PPL_KW_PATHS= 'paths:'|
	PPL_KW_SCHEDULE= 'schedule:'|
	PPL_KW_INPUTS= 'inputs:'|
	PPL_KW_TYPE= 'type:'|
	PPL_KW_OUTPUTS= 'outputs:'|
	PPL_KW_SECRETS= 'secrets:'|
	PPL_KW_TRIGGER= 'trigger:'|
	PPL_KW_PR= 'pr:'|
	PPL_KW_REQUIRED= 'required:'|
	PPL_KW_PERMISSIONS= 'permissions:'|
	PPL_KW_ENV= 'env:'|
	PPL_KW_DEFAULTS= 'defaults:'|
	PPL_KW_CONCURRENCY= 'concurrency:'|
	PPL_KW_NEEDS= 'needs:'|
	PPL_KW_IF= 'if:'|
	PPL_KW_RUNS_ON= 'runs-on:'|
	PPL_KW_ENVIRONMENT= 'environment:'|
	PPL_KW_ID= 'id:'|
	PPL_KW_USES= 'uses:'|
	PPL_KW_WORKING_DIRECTORY= 'working-directory:'|
	PPL_KW_SHELL= 'shell:'|
	PPL_KW_ARGS= 'args:'|
	PPL_KW_ENTRYPOINT= 'entrypoint:'|
	PPL_KW_CONTINUE_ON_ERROR= 'continue-on-error:'|
	PPL_KW_TIMEOUT_MINUTES= 'timeout-minutes:'|
	PPL_KW_STRATEGY= 'strategy:'|
	PPL_KW_MATRIX= 'matrix:'|
	PPL_KW_INCLUDE= 'include:'|
	PPL_KW_EXCLUDE= 'exclude:'|
	PPL_KW_FAIL_FAST= 'fail-fast:'|
	PPL_KW_MAX_PARALLEL= 'max-parallel:'|
	PPL_KW_CONTAINER= 'container:'|
	PPL_KW_IMAGE= 'image:'|
	PPL_KW_CREDENTIALS= 'credentials:'|
	PPL_KW_PORTS= 'ports:'|
	PPL_KW_INHERIT= 'inherit:'|
	PPL_KW_PIPELINE= 'pipeline:'|
	PPL_KW_EXTENDS= 'extends:'|
	PPL_KW_DEPLOYMENT= 'deployment:'|
	PPL_KW_CANARY= 'canary:'|
	PPL_KW_ROLLING= 'rolling:'|
	PPL_KW_RUNONCE= 'runOnce:'|
	PPL_KW_TEMPLATE= 'template:'|
	PPL_KW_RESOURCES= 'resources:'|
	PPL_KW_BUILDS= 'builds:'|
	PPL_KW_BUILD= 'build:'|
	PPL_KW_CONTAINERS= 'containers:'|
	PPL_KW_PACKAGES= 'packages:'|
	PPL_KW_PIPELINES= 'pipelines:'|
	PPL_KW_REPOSITORIES= 'repositories:'|
	PPL_KW_WEBHOOKS= 'webhooks:'|
	PPL_KW_FILTERS= 'filters:'|
	PPL_KW_SCHEDULES= 'schedules:'|
	PPL_KW_CRON= 'cron:'|
	PPL_KW_DOWNLOADBUILD= 'downloadBuild:'|
	PPL_KW_REVIEWAPP= 'reviewApp:'|
	PPL_KW_SCRIPT= 'script:'|
	PPL_KW_TARGET= 'target:'|
	PPL_KW_SETTABLEVARIABLES= 'settableVariables:'|
	PPL_KW_VARIABLES= 'variables:'|
	PPL_KW_GROUP= 'group:'|
	PPL_KW_WF_RUN= 'workflow_run:'
;

enum Permission:
	READ_ALL = 'read-all' |
    WRITE_ALL = 'write-all'
;

IndentedKeyValues:
	(ID':' '|'?((BEGIN (KeyValuePairs | EXPRESSION)+  END)))
;

KeyValuePairs:
	(ID':' (ID|STRING|EXPRESSION|INTV|StringValue| FLOAT_LITERAL))
;

HyphenKVP:
	(ID':'HyphenParameters)
;

HyphenParameters:
	('-' (ID|STRING|StringValue|ArrayList|INT))+
;

ArrayList:
	'['(StringValue (','StringValue)?)+']'
;

StringValue:
	((ID | SINGLE_CHAR | STRING | VERSION) (POSSIBLE_SPECIAL_KEY)? INTV? STRING?)+
;


POSSIBLE_SPECIAL_KEY:
	('_'|'{' | '}' | '*' | '!')+
;

terminal SINGLE_CHAR:
    ('a'..'z' | 'A'..'Z')
;

terminal EXPRESSION:
	(ID)?
	('"${{ ' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* ' }}"' |
    "'${{ " ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* " }}'" |
    '${{ ' (ID|STRING|HEX_INT|FLOAT_LITERAL)* ' }}')
;


@Override 
terminal ID:
    //'^'?('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')('a'..'z'|'A'..'Z'|'-'|'0'..'9')('a'..'z'|'A'..'Z'|'-'|'0'..'9')*;
    ('a'..'z' | 'A'..'Z' | '_' | '/' | '@' | '-' | '.' | '\\' | '&') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '/' | '@' | '&' |'-' | '.' | '\\' |'$' | '(' | ')')*;
//@Override 
//terminal INT returns ecore::EInt:
//    ('0'..'9')+;
    

terminal INTV:
	('0'..'9')+
;
    
terminal HEX_INT returns ecore::EInt: '0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal FLOAT_LITERAL:
    ('-')?(INT '.' INT | INT) ('e' INT)?
;

terminal VERSION:
	(INT ('.' INT)? ('.')?)+
;
 
@Override 
terminal STRING:
    '"' ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
    "'" ( '\\'('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'";
 
@Override 
terminal ML_COMMENT:
    '/*' -> '*/'
    
    ;
 
@Override 
terminal SL_COMMENT:
    '#' !('\n'|'\r')* ('\r'? '\n')?;	
 
@Override 
terminal WS:
    (' '|'\t'|'\r'|'\n')+;
 
@Override 
terminal ANY_OTHER:
    .;
terminal UNCLOSED_STRING : '"' (!'"')* EOF;

terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';
