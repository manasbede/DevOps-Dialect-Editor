grammar ca.mcgill.devops.pipeline.Pipeline with org.eclipse.xtext.common.Terminals
hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate pipeline "http://www.mcgill.ca/devops/pipeline/Pipeline"

Pipeline:
	// GitHub Actions Config
	('name:' name=UnquotedString)? &
	('run-name:'runName=UnquotedString)? &
	('defaults:' BEGIN 'run:' BEGIN ('shell:'defaultShellValue=STRING)?&('working-directory:'defaultWDValue=STRING)? END END)? &
	('env:' BEGIN ('-'?env+=KeyValue)* END)? &
	('permission:'((allPermission=Permission)|(BEGIN (indPermissions+=IndPermissionValue*) END))) ? &
	('concurrency:'(BEGIN ('group:' group=(ID|COMPLEX_EXPRESSION)) ('cancel-in-progress:' cancelConcurrence=(ID|COMPLEX_EXPRESSION)) END))? &
	
	// Azure DevOps Config
	('pool:'(BEGIN ('name:'vmName=ID)('vmImage:'vmImage=(ID|STRING))?&('demands:'vmDemands=(AnyData|HyphenValues))? END))? &
	('resources:' (BEGIN (resources+=Resource*) END))? & 
	
	//CircleCI Config
	('version:' version=VERSION)? &
	
	// Common for GitHub Actions, Azure Devops, GitLab, CircleCI
	('variables:' (variables+=Variable)*) ? &
	(extendedParameter=ExtendedParameter)? &
	(pipelineParameters+=PipelineParameter*)
	
	//Event
	(('on:' (BEGIN triggers+=Event+ END)? ((triggers+=Event) | ('['triggers+=Event (',' triggers+=Event)*']'))?) | (triggers+=Event*))
	('job:')
	//Job or Stage
;

Event:
	(
		(name=ID(':')?)(includedBranches+=Branch*)
		(BEGIN 
			(('types:')(activities+=Activity)|(BEGIN activities+=Activity END)) ?
			(
				('batch:' batch=ID)? &
				('autoCancel:' autoCancel=ID)? &
				('drafts:' drafts=ID)? &
				(('branches:')((includedBranches+=Branch*)|(BEGIN (includedBranches+=Branch*) (('included:')(includedBranches+=Branch*))? (('excluded:')(excludedBranches+=Branch*))? END)))? &
				(('branches-ignore:')(BEGIN (excludedBranches+=Branch*) END))? &
				(('paths:')((BEGIN (includedPaths+=HyphenValues)? (('included:')(includedPaths+=HyphenValues))? (('excluded:')(excludedPaths+=HyphenValues))? END)))? &
				(('paths-ignore:')(BEGIN (excludedPaths+=HyphenValues) END))? &
				(('tags::')((BEGIN (includedTags+=HyphenValues)? (('included:')(includedTags+=HyphenValues))? (('excluded:')(excludedTags+=HyphenValues))? END)))? &
				(('tags-ignore:')(BEGIN (excludedTags+=HyphenValues) END))?
			)
		END)?
	) |
	(
		((name=('schedules:'|'schedule:'))(triggerSchedules+=TriggerSchedule*))|
		((name=('workflow_call:'|'workflow_run:'|'workflow_dispatch:'))(otherEventParameterValues+=ParameterValue*))
	)
;

TriggerSchedule:
	(('-''cron:' cronValue=STRING) | (BEGIN ('-''cron:' cronValue=STRING) END))
	(BEGIN 
		('displayName:' displayName=UnquotedString)?
		('branches:'(BEGIN (('included:')(includedBranches+=Branch*))? (('excluded:')(excludedBranches+=Branch*))? END))
		(('batch:' batch=ID) ? &
		('always:' always=ID)?)
	END)?
;

Branch:
	(('-')? name=(ID|STRING))
;

Activity:
	name=(AnyData|ArrayList|HyphenValues)
;

ExtendedParameter:
	('extends:'(BEGIN ('template:' template=ID) ('parameters:' (BEGIN extendedParameterValues+=ParameterValue* END)) END)) |
	('include:'(BEGIN extendedParameterValues+=ParameterValue+ END))
;

Variable:
	(BEGIN (variableValues+=ParameterValue)+ END)|
	(('-''group:' group=AnyData)?
	(('-''name:'name=AnyData)(BEGIN ('value:'value=AnyData)('readonly:'readonly=ID)? END)))
;

Resource:
	(resourceName=('builds:'|'containers:'|'pipelines:'|'repositories:'|'webhooks:'|'packages:'))
	(('-'resourceValues+=ParameterValue)*|(BEGIN('-'resourceValues+=ParameterValue)*END))
;

PipelineParameter:
	(name='parameters:'(parameterValues+=ParameterValue+))|
	(name=('default:'|'executors:'|'orbs:'|'commands:')(BEGIN (parameterValues+=ParameterValue+) END))
;

// Change preDefinedKeywrod assignment
ParameterValue:
    ('-')?((name=(ID|COMPLEX_EXPRESSION))|(preDefinedKeyword=Permission)) ':' WS* ((BEGIN (subParameterValues+=ParameterValue)* END) | (value=(AnyData|ArrayList|HyphenValues)(BEGIN subParameterValues+=ParameterValue* END)?)) 
;


/* Defining Enum */
enum Permission:
	READ_ALL = 'read-all' |
    WRITE_ALL = 'write-all'|
    READ ='read'|
    WRITE = 'write'|
    NONE = 'none'
;





/* Defining Datatypes */
AnyData:
    STRING |Number | FloatingPoint | SimpleWord | COMPLEX_EXPRESSION | VERSION | HEX_INT;
    
KeyValue:
	ID':' AnyData;

IndPermissionValue:
	ID':'('read'|'write'|'none');

UnquotedString:	
	ID (ID|INT|COMPLEX_EXPRESSION)*;

HyphenValues:
	('-' AnyData)+ |
	(BEGIN ('-' AnyData)+ END);

Number:
    INT;

FloatingPoint:
    FLOAT_LITERAL;

SimpleWord:
    ID;
    
ArrayList:
	'['(AnyData (',' AnyData)*)?']';



/* Defining Terminal Datatypes */
terminal COMPLEX_EXPRESSION: 
	((('a'..'z' | 'A'..'Z')('a'..'z' | 'A'..'Z' | '-')*)? '${{' -> '}}')('-${{' -> '}}')*;
	

terminal HEX_INT returns ecore::EInt: '0x' ('0'..'9' | 'a'..'f' | 'A'..'F')+;

terminal FLOAT_LITERAL returns ecore::EFloat:
    ('-')?(INT '.' INT);

terminal VERSION:
	INT ('.' INT)+;
	
terminal BEGIN: 'synthetic:BEGIN';

terminal END: 'synthetic:END';

@Override 
terminal ID:
    ('a'..'z' | 'A'..'Z' | '_' | '/' | '@' | '-' | '.' | '\\' | '&') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '/' | '@' | '&' |'-' | '.' | '\\' | '(' | ')' | '|' | '$')*;

@Override 
terminal ML_COMMENT:
    '/*' -> '*/';

@Override 
terminal SL_COMMENT:
    '#' !('\n'|'\r')* ('\r'? '\n')?;	