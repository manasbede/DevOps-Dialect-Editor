/*
 * generated by Xtext 2.33.0
 */
package ca.mcgill.devops.pipeline.ide.contentassist.antlr;

import ca.mcgill.devops.pipeline.ide.contentassist.antlr.internal.InternalPipelineParser;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PipelineParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PipelineGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PipelineGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getPipelineAccess().getAlternatives(), "rule__Pipeline__Alternatives");
			builder.put(grammarAccess.getParameterAccess().getAlternatives_2(), "rule__Parameter__Alternatives_2");
			builder.put(grammarAccess.getParameterAccess().getValueAlternatives_2_1_0(), "rule__Parameter__ValueAlternatives_2_1_0");
			builder.put(grammarAccess.getAnyDataAccess().getAlternatives(), "rule__AnyData__Alternatives");
			builder.put(grammarAccess.getUnquotedStringAccess().getAlternatives_1(), "rule__UnquotedString__Alternatives_1");
			builder.put(grammarAccess.getPOSSIBLE_SPECIAL_KEYAccess().getAlternatives(), "rule__POSSIBLE_SPECIAL_KEY__Alternatives");
			builder.put(grammarAccess.getPipelineKeywordAccess().getAlternatives(), "rule__PipelineKeyword__Alternatives");
			builder.put(grammarAccess.getPermissionAccess().getAlternatives(), "rule__Permission__Alternatives");
			builder.put(grammarAccess.getPipelineAccess().getGroup_0(), "rule__Pipeline__Group_0__0");
			builder.put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_2_0(), "rule__Parameter__Group_2_0__0");
			builder.put(grammarAccess.getUnquotedStringAccess().getGroup(), "rule__UnquotedString__Group__0");
			builder.put(grammarAccess.getUnquotedStringAccess().getGroup_1_0(), "rule__UnquotedString__Group_1_0__0");
			builder.put(grammarAccess.getHyphenParametersAccess().getGroup(), "rule__HyphenParameters__Group__0");
			builder.put(grammarAccess.getArrayListAccess().getGroup(), "rule__ArrayList__Group__0");
			builder.put(grammarAccess.getArrayListAccess().getGroup_1(), "rule__ArrayList__Group_1__0");
			builder.put(grammarAccess.getArrayListAccess().getGroup_1_1(), "rule__ArrayList__Group_1_1__0");
			builder.put(grammarAccess.getPipelineAccess().getNameAssignment_0_1(), "rule__Pipeline__NameAssignment_0_1");
			builder.put(grammarAccess.getPipelineAccess().getPipelineConfigurationAssignment_1(), "rule__Pipeline__PipelineConfigurationAssignment_1");
			builder.put(grammarAccess.getConfigurationAccess().getParametersAssignment_1(), "rule__Configuration__ParametersAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getParametersAssignment_2_0_1(), "rule__Parameter__ParametersAssignment_2_0_1");
			builder.put(grammarAccess.getParameterAccess().getValueAssignment_2_1(), "rule__Parameter__ValueAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PipelineGrammarAccess grammarAccess;

	@Override
	protected InternalPipelineParser createParser() {
		InternalPipelineParser result = new InternalPipelineParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new PipelineTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PipelineGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PipelineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
