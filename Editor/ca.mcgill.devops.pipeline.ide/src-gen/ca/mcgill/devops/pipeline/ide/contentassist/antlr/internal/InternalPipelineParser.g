/*
 * generated by Xtext 2.33.0
 */
parser grammar InternalPipelineParser;

options {
	tokenVocab=InternalPipelineLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package ca.mcgill.devops.pipeline.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ca.mcgill.devops.pipeline.services.PipelineGrammarAccess;

}
@members {
	private PipelineGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("KW__", "'_'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Id", "'id:'");
		tokenNameToValue.put("If", "'if:'");
		tokenNameToValue.put("On", "'on:'");
		tokenNameToValue.put("Pr", "'pr:'");
		tokenNameToValue.put("Env", "'env:'");
		tokenNameToValue.put("Args", "'args:'");
		tokenNameToValue.put("Cron", "'cron:'");
		tokenNameToValue.put("Name", "'name:'");
		tokenNameToValue.put("Path", "'path:'");
		tokenNameToValue.put("Push", "'push:'");
		tokenNameToValue.put("Tags", "'tags:'");
		tokenNameToValue.put("Type", "'type:'");
		tokenNameToValue.put("Uses", "'uses:'");
		tokenNameToValue.put("Build", "'build:'");
		tokenNameToValue.put("Group", "'group:'");
		tokenNameToValue.put("Image", "'image:'");
		tokenNameToValue.put("Needs", "'needs:'");
		tokenNameToValue.put("Paths", "'paths:'");
		tokenNameToValue.put("Ports", "'ports:'");
		tokenNameToValue.put("Shell", "'shell:'");
		tokenNameToValue.put("Types", "'types:'");
		tokenNameToValue.put("Builds", "'builds:'");
		tokenNameToValue.put("Canary", "'canary:'");
		tokenNameToValue.put("Inputs", "'inputs:'");
		tokenNameToValue.put("Matrix", "'matrix:'");
		tokenNameToValue.put("Script", "'script:'");
		tokenNameToValue.put("Target", "'target:'");
		tokenNameToValue.put("Exclude", "'exclude:'");
		tokenNameToValue.put("Extends", "'extends:'");
		tokenNameToValue.put("Filters", "'filters:'");
		tokenNameToValue.put("Include", "'include:'");
		tokenNameToValue.put("Inherit", "'inherit:'");
		tokenNameToValue.put("Outputs", "'outputs:'");
		tokenNameToValue.put("ReadAll", "'read-all'");
		tokenNameToValue.put("Rolling", "'rolling:'");
		tokenNameToValue.put("RunOnce", "'runOnce:'");
		tokenNameToValue.put("RunsOn", "'runs-on:'");
		tokenNameToValue.put("Secrets", "'secrets:'");
		tokenNameToValue.put("Trigger", "'trigger:'");
		tokenNameToValue.put("Branches", "'branches:'");
		tokenNameToValue.put("Defaults", "'defaults:'");
		tokenNameToValue.put("Packages", "'packages:'");
		tokenNameToValue.put("Pipeline", "'pipeline:'");
		tokenNameToValue.put("Required", "'required:'");
		tokenNameToValue.put("RunName", "'run-name:'");
		tokenNameToValue.put("Schedule", "'schedule:'");
		tokenNameToValue.put("Strategy", "'strategy:'");
		tokenNameToValue.put("Template", "'template:'");
		tokenNameToValue.put("Webhooks", "'webhooks:'");
		tokenNameToValue.put("WriteAll", "'write-all'");
		tokenNameToValue.put("Container", "'container:'");
		tokenNameToValue.put("FailFast", "'fail-fast:'");
		tokenNameToValue.put("Pipelines", "'pipelines:'");
		tokenNameToValue.put("Resources", "'resources:'");
		tokenNameToValue.put("ReviewApp", "'reviewApp:'");
		tokenNameToValue.put("Schedules", "'schedules:'");
		tokenNameToValue.put("Variables", "'variables:'");
		tokenNameToValue.put("Containers", "'containers:'");
		tokenNameToValue.put("Deployment", "'deployment:'");
		tokenNameToValue.put("Entrypoint", "'entrypoint:'");
		tokenNameToValue.put("Parameters", "'parameters:'");
		tokenNameToValue.put("Concurrency", "'concurrency:'");
		tokenNameToValue.put("Credentials", "'credentials:'");
		tokenNameToValue.put("Environment", "'environment:'");
		tokenNameToValue.put("Permissions", "'permissions:'");
		tokenNameToValue.put("TagsIgnore", "'tags-ignore:'");
		tokenNameToValue.put("MaxParallel", "'max-parallel:'");
		tokenNameToValue.put("PathsIgnore", "'paths-ignore:'");
		tokenNameToValue.put("Pull_request", "'pull_request:'");
		tokenNameToValue.put("Repositories", "'repositories:'");
		tokenNameToValue.put("Workflow_run", "'workflow_run:'");
		tokenNameToValue.put("DownloadBuild", "'downloadBuild:'");
		tokenNameToValue.put("BranchesIgnore", "'branches-ignore:'");
		tokenNameToValue.put("TimeoutMinutes", "'timeout-minutes:'");
		tokenNameToValue.put("ContinueOnError", "'continue-on-error:'");
		tokenNameToValue.put("SettableVariables", "'settableVariables:'");
		tokenNameToValue.put("WorkingDirectory", "'working-directory:'");
	}

	public void setGrammarAccess(PipelineGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRulePipeline
entryRulePipeline
:
{ before(grammarAccess.getPipelineRule()); }
	 rulePipeline
{ after(grammarAccess.getPipelineRule()); } 
	 EOF 
;

// Rule Pipeline
rulePipeline 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPipelineAccess().getAlternatives()); }
		(rule__Pipeline__Alternatives)
		{ after(grammarAccess.getPipelineAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfiguration
entryRuleConfiguration
:
{ before(grammarAccess.getConfigurationRule()); }
	 ruleConfiguration
{ after(grammarAccess.getConfigurationRule()); } 
	 EOF 
;

// Rule Configuration
ruleConfiguration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigurationAccess().getGroup()); }
		(rule__Configuration__Group__0)
		{ after(grammarAccess.getConfigurationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnyData
entryRuleAnyData
:
{ before(grammarAccess.getAnyDataRule()); }
	 ruleAnyData
{ after(grammarAccess.getAnyDataRule()); } 
	 EOF 
;

// Rule AnyData
ruleAnyData 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnyDataAccess().getAlternatives()); }
		(rule__AnyData__Alternatives)
		{ after(grammarAccess.getAnyDataAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnquotedString
entryRuleUnquotedString
:
{ before(grammarAccess.getUnquotedStringRule()); }
	 ruleUnquotedString
{ after(grammarAccess.getUnquotedStringRule()); } 
	 EOF 
;

// Rule UnquotedString
ruleUnquotedString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnquotedStringAccess().getGroup()); }
		(rule__UnquotedString__Group__0)
		{ after(grammarAccess.getUnquotedStringAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumber
entryRuleNumber
:
{ before(grammarAccess.getNumberRule()); }
	 ruleNumber
{ after(grammarAccess.getNumberRule()); } 
	 EOF 
;

// Rule Number
ruleNumber 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getNumberAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFloatingPoint
entryRuleFloatingPoint
:
{ before(grammarAccess.getFloatingPointRule()); }
	 ruleFloatingPoint
{ after(grammarAccess.getFloatingPointRule()); } 
	 EOF 
;

// Rule FloatingPoint
ruleFloatingPoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFloatingPointAccess().getFLOAT_LITERALTerminalRuleCall()); }
		RULE_FLOAT_LITERAL
		{ after(grammarAccess.getFloatingPointAccess().getFLOAT_LITERALTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleWord
entryRuleSimpleWord
:
{ before(grammarAccess.getSimpleWordRule()); }
	 ruleSimpleWord
{ after(grammarAccess.getSimpleWordRule()); } 
	 EOF 
;

// Rule SimpleWord
ruleSimpleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleWordAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getSimpleWordAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArrayList
entryRuleArrayList
:
{ before(grammarAccess.getArrayListRule()); }
	 ruleArrayList
{ after(grammarAccess.getArrayListRule()); } 
	 EOF 
;

// Rule ArrayList
ruleArrayList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArrayListAccess().getGroup()); }
		(rule__ArrayList__Group__0)
		{ after(grammarAccess.getArrayListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getGroup_0()); }
		(rule__Pipeline__Group_0__0)
		{ after(grammarAccess.getPipelineAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPipelineAccess().getPipelineConfigurationAssignment_1()); }
		(rule__Pipeline__PipelineConfigurationAssignment_1)*
		{ after(grammarAccess.getPipelineAccess().getPipelineConfigurationAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getGroup_2_0()); }
		(rule__Parameter__Group_2_0__0)
		{ after(grammarAccess.getParameterAccess().getGroup_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getValueAssignment_2_1()); }
		(rule__Parameter__ValueAssignment_2_1)
		{ after(grammarAccess.getParameterAccess().getValueAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ValueAlternatives_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getValueAnyDataParserRuleCall_2_1_0_0()); }
		ruleAnyData
		{ after(grammarAccess.getParameterAccess().getValueAnyDataParserRuleCall_2_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getValueArrayListParserRuleCall_2_1_0_1()); }
		ruleArrayList
		{ after(grammarAccess.getParameterAccess().getValueArrayListParserRuleCall_2_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnyData__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnyDataAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getAnyDataAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAnyDataAccess().getNumberParserRuleCall_1()); }
		ruleNumber
		{ after(grammarAccess.getAnyDataAccess().getNumberParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAnyDataAccess().getFloatingPointParserRuleCall_2()); }
		ruleFloatingPoint
		{ after(grammarAccess.getAnyDataAccess().getFloatingPointParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getAnyDataAccess().getSimpleWordParserRuleCall_3()); }
		ruleSimpleWord
		{ after(grammarAccess.getAnyDataAccess().getSimpleWordParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getAnyDataAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_4()); }
		RULE_COMPLEX_EXPRESSION
		{ after(grammarAccess.getAnyDataAccess().getCOMPLEX_EXPRESSIONTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getAnyDataAccess().getHEX_INTTerminalRuleCall_5()); }
		RULE_HEX_INT
		{ after(grammarAccess.getAnyDataAccess().getHEX_INTTerminalRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getAnyDataAccess().getVERSIONTerminalRuleCall_6()); }
		RULE_VERSION
		{ after(grammarAccess.getAnyDataAccess().getVERSIONTerminalRuleCall_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnquotedStringAccess().getGroup_1_0()); }
		(rule__UnquotedString__Group_1_0__0)
		{ after(grammarAccess.getUnquotedStringAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnquotedStringAccess().getINTTerminalRuleCall_1_1()); }
		RULE_INT
		{ after(grammarAccess.getUnquotedStringAccess().getINTTerminalRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnquotedStringAccess().getVERSIONTerminalRuleCall_1_2()); }
		RULE_VERSION
		{ after(grammarAccess.getUnquotedStringAccess().getVERSIONTerminalRuleCall_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group_0__0__Impl
	rule__Pipeline__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getNameKeyword_0_0()); }
	Name
	{ after(grammarAccess.getPipelineAccess().getNameKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pipeline__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPipelineAccess().getNameAssignment_0_1()); }
	(rule__Pipeline__NameAssignment_0_1)
	{ after(grammarAccess.getPipelineAccess().getNameAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Configuration__Group__0__Impl
	rule__Configuration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationAccess().getParametersKeyword_0()); }
	Parameters
	{ after(grammarAccess.getConfigurationAccess().getParametersKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Configuration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigurationAccess().getParametersAssignment_1()); }
	(rule__Configuration__ParametersAssignment_1)*
	{ after(grammarAccess.getConfigurationAccess().getParametersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
	(rule__Parameter__NameAssignment_0)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getAlternatives_2()); }
	(rule__Parameter__Alternatives_2)
	{ after(grammarAccess.getParameterAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group_2_0__0__Impl
	rule__Parameter__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getBEGINTerminalRuleCall_2_0_0()); }
	RULE_BEGIN
	{ after(grammarAccess.getParameterAccess().getBEGINTerminalRuleCall_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group_2_0__1__Impl
	rule__Parameter__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParametersAssignment_2_0_1()); }
	(rule__Parameter__ParametersAssignment_2_0_1)*
	{ after(grammarAccess.getParameterAccess().getParametersAssignment_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group_2_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getENDTerminalRuleCall_2_0_2()); }
	RULE_END
	{ after(grammarAccess.getParameterAccess().getENDTerminalRuleCall_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnquotedString__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnquotedString__Group__0__Impl
	rule__UnquotedString__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnquotedString__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnquotedStringAccess().getAlternatives_1()); }
	(rule__UnquotedString__Alternatives_1)*
	{ after(grammarAccess.getUnquotedStringAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnquotedString__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnquotedString__Group_1_0__0__Impl
	rule__UnquotedString__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnquotedStringAccess().getWSTerminalRuleCall_1_0_0()); }
	RULE_WS
	{ after(grammarAccess.getUnquotedStringAccess().getWSTerminalRuleCall_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnquotedString__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnquotedString__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_1_0_1()); }
	RULE_ID
	{ after(grammarAccess.getUnquotedStringAccess().getIDTerminalRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group__0__Impl
	rule__ArrayList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getLeftSquareBracketKeyword_0()); }
	LeftSquareBracket
	{ after(grammarAccess.getArrayListAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group__1__Impl
	rule__ArrayList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getGroup_1()); }
	(rule__ArrayList__Group_1__0)?
	{ after(grammarAccess.getArrayListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getRightSquareBracketKeyword_2()); }
	RightSquareBracket
	{ after(grammarAccess.getArrayListAccess().getRightSquareBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group_1__0__Impl
	rule__ArrayList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_0()); }
	ruleAnyData
	{ after(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getGroup_1_1()); }
	(rule__ArrayList__Group_1_1__0)*
	{ after(grammarAccess.getArrayListAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayList__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group_1_1__0__Impl
	rule__ArrayList__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getCommaKeyword_1_1_0()); }
	Comma
	{ after(grammarAccess.getArrayListAccess().getCommaKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ArrayList__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayList__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_1_1()); }
	ruleAnyData
	{ after(grammarAccess.getArrayListAccess().getAnyDataParserRuleCall_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pipeline__NameAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getNameUnquotedStringParserRuleCall_0_1_0()); }
		ruleUnquotedString
		{ after(grammarAccess.getPipelineAccess().getNameUnquotedStringParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pipeline__PipelineConfigurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPipelineAccess().getPipelineConfigurationConfigurationParserRuleCall_1_0()); }
		ruleConfiguration
		{ after(grammarAccess.getPipelineAccess().getPipelineConfigurationConfigurationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__ParametersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigurationAccess().getParametersParameterParserRuleCall_1_0()); }
		ruleParameter
		{ after(grammarAccess.getConfigurationAccess().getParametersParameterParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ParametersAssignment_2_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getParametersParameterParserRuleCall_2_0_1_0()); }
		ruleParameter
		{ after(grammarAccess.getParameterAccess().getParametersParameterParserRuleCall_2_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getValueAlternatives_2_1_0()); }
		(rule__Parameter__ValueAlternatives_2_1_0)
		{ after(grammarAccess.getParameterAccess().getValueAlternatives_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
